if(i>0)
{
check <- data.frame(clusteredData[which(clusteredData$x==i), 'place'])
hello <- data.frame(ReplacementDataset$Growth.tip[grep(paste(check$values, collapse = '|'),ReplacementDataset$Needles.Leaves)])
colnames(check) <- c("values")
for(j in check[,1])
{
ReplacementDataset$Needles.Leaves <- gsub(j, first(check[which(clusteredData[which(clusteredData$x==i),]$count == max(clusteredData[which(clusteredData$x==i),]$count)),]), ReplacementDataset$Needles.Leaves)
}
}
}
clusteredData <-  read.csv("./options/NurseryField/NurseryFieldOptions.txt", header = TRUE, sep = c(';'), quote = "")
check <- data.frame(clusteredData[which(clusteredData$x==0), 'place'])
colnames(check) <- c("values")
ReplacementDataset$Nursery.Field[ReplacementDataset$Nursery.Field %in% check$values] <- NA
for(i in unique(clusteredData$x))
{
if(i>0)
{
check <- data.frame(clusteredData[which(clusteredData$x==i), 'place'])
hello <- data.frame(ReplacementDataset$Nursery.Field[grep(paste(check$values, collapse = '|'),ReplacementDataset$Nursery.Field)])
colnames(check) <- c("values")
for(j in check[,1])
{
ReplacementDataset$Nursery.Field <- gsub(j, first(check[which(clusteredData[which(clusteredData$x==i),]$count == max(clusteredData[which(clusteredData$x==i),]$count)),]), ReplacementDataset$Nursery.Field)
}
}
}
uniquef <- data.frame(unique(ReplacementDataset$Needles.Leaves))
uniquef <- data.frame(unique(tempData$Needles.Leaves))
clusteredData <-  read.csv("./options/Results_LCS-4/clusteredDataResults.csv", header = TRUE, sep = c(';'), quote = "")
check <- data.frame(clusteredData[which(clusteredData$x==0), 'place'])
colnames(check) <- c("values")
ReplacementDataset$results[ReplacementDataset$results %in% check$values] <- NA
clusteredData$place <- gsub('\\.','', clusteredData$place)
clusteredData$place <- gsub('\\[||\\]||\\(||\\)','', clusteredData$place)
clusteredData$count[is.na(clusteredData$count)] <- 1
ReplacementDataset$results <- gsub('\\.', '', ReplacementDataset$results)
ReplacementDataset$results <- gsub('\\[||\\]||\\(||\\)', '', ReplacementDataset$results)
for(i in unique(clusteredData$x))
{
if(i>0)
{
print(i)
check <- data.frame(clusteredData[which(clusteredData$x==i), 'place'])
hello <- data.frame(ReplacementDataset$results[grep(paste(check$values, collapse = '|'),ReplacementDataset$results)])
colnames(check) <- c("values")
for(j in check[,1])
{
ReplacementDataset$results <- gsub(j, first(check[which(clusteredData[which(clusteredData$x==i),]$count == max(clusteredData[which(clusteredData$x==i),]$count)),]), ReplacementDataset$results)
}
}
}
uniquef <- data.frame(unique(ReplacementDataset$results))
uniquef <- data.frame(unique(tempData$results))
clusteredData <-  read.csv("./options/RootCollar_LCS-4/clusteredDataRootCollar.csv", header = TRUE, sep = c(';'), quote = "")
check <- data.frame(clusteredData[which(clusteredData$x==0), 'place'])
colnames(check) <- c("values")
ReplacementDataset$Root.Collar[ReplacementDataset$Root.Collar %in% check$values] <- NA
clusteredData$place <- gsub('\\.','', clusteredData$place)
clusteredData$place <- gsub('\\[||\\]||\\(||\\)||\\?','', clusteredData$place)
clusteredData$count[is.na(clusteredData$count)] <- 1
ReplacementDataset$Root.Collar <- gsub('\\.', '', ReplacementDataset$Root.Collar)
ReplacementDataset$Root.Collar <- gsub('\\[||\\]||\\(||\\)', '', ReplacementDataset$Root.Collar)
for(i in unique(clusteredData$x))
{
if(i>0)
{
check <- data.frame(clusteredData[which(clusteredData$x==i), 'place'])
hello <- data.frame(ReplacementDataset$Growth.tip[grep(paste(check$values, collapse = '|'),ReplacementDataset$Needles.Leaves)])
colnames(check) <- c("values")
for(j in check[,1])
{
ReplacementDataset$Root.Collar <- gsub(j, first(check[which(clusteredData[which(clusteredData$x==i),]$count == max(clusteredData[which(clusteredData$x==i),]$count)),]), ReplacementDataset$Root.Collar)
}
}
}
uniquef <- data.frame(unique(ReplacementDataset$Root.Collar))
uniquef <- data.frame(unique(tempData$Root.Collar))
clusteredData <-  read.csv("./options/Roots_LCS-4/clusteredDataRoots.csv", header = TRUE, sep = c(';'), quote = "")
check <- data.frame(clusteredData[which(clusteredData$x==0), 'place'])
colnames(check) <- c("values")
ReplacementDataset$Roots[ReplacementDataset$Roots %in% check$values] <- NA
clusteredData$place <- gsub('\\.','', clusteredData$place)
clusteredData$place <- gsub('\\[||\\]||\\(||\\)||\\?','', clusteredData$place)
clusteredData$count[is.na(clusteredData$count)] <- 1
ReplacementDataset$Roots <- gsub('\\.', '', ReplacementDataset$Roots)
ReplacementDataset$Roots <- gsub('\\[||\\]||\\(||\\)||\\?', '', ReplacementDataset$Roots)
for(i in unique(clusteredData$x))
{
if(i>0)
{
check <- data.frame(clusteredData[which(clusteredData$x==i), 'place'])
hello <- data.frame(ReplacementDataset$Growth.tip[grep(paste(check$values, collapse = '|'),ReplacementDataset$Needles.Leaves)])
colnames(check) <- c("values")
for(j in check[,1])
{
ReplacementDataset$Roots <- gsub(j, first(check[which(clusteredData[which(clusteredData$x==i),]$count == max(clusteredData[which(clusteredData$x==i),]$count)),]), ReplacementDataset$Roots)
}
}
}
uniquef <- data.frame(unique(ReplacementDataset$Roots))
uniquef <- data.frame(unique(tempData$Roots))
clusteredData <-  read.csv("./options/SampleType_LCS-4/clusteredDataSampleType.csv", header = TRUE, sep = c(';'), quote = "")
check <- data.frame(clusteredData[which(clusteredData$x==0), 'place'])
colnames(check) <- c("values")
ReplacementDataset$type.of.sample[ReplacementDataset$type.of.sample %in% check$values] <- NA
clusteredData$place <- gsub('\\.','', clusteredData$place)
clusteredData$place <- gsub('\\[||\\]||\\(||\\)||\\?','', clusteredData$place)
clusteredData$count[is.na(clusteredData$count)] <- 1
ReplacementDataset$type.of.sample <- gsub('\\.', '', ReplacementDataset$type.of.sample)
ReplacementDataset$type.of.sample <- gsub('\\[||\\]||\\(||\\)||\\?', '', ReplacementDataset$type.of.sample)
for(i in unique(clusteredData$x))
{
if(i>0)
{
check <- data.frame(clusteredData[which(clusteredData$x==i), 'place'])
hello <- data.frame(ReplacementDataset$Growth.tip[grep(paste(check$values, collapse = '|'),ReplacementDataset$Needles.Leaves)])
colnames(check) <- c("values")
for(j in check[,1])
{
ReplacementDataset$type.of.sample <- gsub(j, first(check[which(clusteredData[which(clusteredData$x==i),]$count == max(clusteredData[which(clusteredData$x==i),]$count)),]), ReplacementDataset$type.of.sample)
}
}
}
uniquef <- data.frame(unique(ReplacementDataset$type.of.sample))
uniquef <- data.frame(unique(tempData$type.of.sample))
clusteredData <-  read.csv("./options/Species_LCS-4/clusteredDataSpecies.csv", header = TRUE, sep = c(';'), quote = "")
check <- data.frame(clusteredData[which(clusteredData$x==0), 'place'])
colnames(check) <- c("values")
ReplacementDataset$species.clone[ReplacementDataset$species.clone %in% check$values] <- NA
clusteredData$place <- gsub('\\.','', clusteredData$place)
clusteredData$place <- gsub('\\[||\\]||\\(||\\)||\\?','', clusteredData$place)
clusteredData$count[is.na(clusteredData$count)] <- 1
ReplacementDataset$species.clone <- gsub('\\.', '', ReplacementDataset$species.clone)
ReplacementDataset$species.clone <- gsub('\\[||\\]||\\(||\\)||\\?', '', ReplacementDataset$species.clone)
for(i in unique(clusteredData$x))
{
if(i>0)
{
check <- data.frame(clusteredData[which(clusteredData$x==i), 'place'])
hello <- data.frame(ReplacementDataset$Growth.tip[grep(paste(check$values, collapse = '|'),ReplacementDataset$Needles.Leaves)])
colnames(check) <- c("values")
for(j in check[,1])
{
ReplacementDataset$species.clone <- gsub(j, first(check[which(clusteredData[which(clusteredData$x==i),]$count == max(clusteredData[which(clusteredData$x==i),]$count)),]), ReplacementDataset$species.clone)
}
}
}
uniquef <- data.frame(unique(ReplacementDataset$species.clone))
uniquef <- data.frame(unique(tempData$species.clone))
clusteredData <-  read.csv("./options/Stem_LCS-4/clusteredDataStem.csv", header = TRUE, sep = c(';'), quote = "")
check <- data.frame(clusteredData[which(clusteredData$x==0), 'place'])
colnames(check) <- c("values")
ReplacementDataset$Stem[ReplacementDataset$Stem %in% check$values] <- NA
clusteredData$place <- gsub('\\.','', clusteredData$place)
clusteredData$place <- gsub('\\[||\\]||\\(||\\)||\\?','', clusteredData$place)
clusteredData$count[is.na(clusteredData$count)] <- 1
ReplacementDataset$Stem <- gsub('\\.', '', ReplacementDataset$Stem)
ReplacementDataset$Stem <- gsub('\\[||\\]||\\(||\\)||\\?', '', ReplacementDataset$Stem)
for(i in unique(clusteredData$x))
{
if(i>0)
{
check <- data.frame(clusteredData[which(clusteredData$x==i), 'place'])
colnames(check) <- c("values")
for(j in check[,1])
{
ReplacementDataset$Stem <- gsub(j, first(check[which(clusteredData[which(clusteredData$x==i),]$count == max(clusteredData[which(clusteredData$x==i),]$count)),]), ReplacementDataset$Stem)
}
}
}
uniquef <- data.frame(unique(ReplacementDataset))
uniquef <- data.frame(unique(tempData))
hello <- factor(ReplacementDataset$Location)
ReplacementDataset[ReplacementDataset==''] <- NA
ReplacementDataset[ReplacementDataset=='?'] <- NA
ReplacementDataset[ReplacementDataset=='-'] <- NA
ReplacementDataset[ReplacementDataset=='N/A'] <- NA
mean(is.na(ReplacementDataset))
removeInvalidRows <- apply(ReplacementDataset, 1, function(z) sum(is.na(z)))
mean(is.na(ReplacementDataset))
removeInvalidRows <- apply(ReplacementDataset, 1, function(z) sum(is.na(z)))
ReplacementDataset <- ReplacementDataset[removeInvalidRows < 8,]
mean(is.na(ReplacementDataset))
ReplacementDataset <- droplevels.data.frame(ReplacementDataset)
hello <- factor(ReplacementDataset$Location)
noNA <- na.omit(ReplacementDataset)
ReplacementDataset$species.clone <- factor(ReplacementDataset$species.clone)
p <- split(ReplacementDataset, nrow(ReplacementDataset)%%12)
p <- c()
for(i in 1:12)
{
p <- c(p,  list(ReplacementDataset[rownames(ReplacementDataset)%in%partitions[[i]],]))
dropped <- droplevels(p[[i]])
p[[i]] <- dropped
}
ReplacementDataset$species.clone <- factor(ReplacementDataset$species.clone)
ReplacementDataset$type.of.sample <- factor(ReplacementDataset$type.of.sample)
ReplacementDataset$Nursery.Field <- factor(ReplacementDataset$Nursery.Field)
ReplacementDataset$Roots <- factor(ReplacementDataset$Roots)
ReplacementDataset$Root.Collar <- factor(ReplacementDataset$Root.Collar)
ReplacementDataset$Stem <- factor(ReplacementDataset$Stem)
ReplacementDataset$Growth.tip <- factor(ReplacementDataset$Growth.tip)
ReplacementDataset$Needles.Leaves <- factor(ReplacementDataset$Needles.Leaves)
ReplacementDataset$results <- factor(ReplacementDataset$results)
View(ReplacementDataset)
partitions <- do.random.partition(nrow(ReplacementDataset), 12)
p <- split(ReplacementDataset, nrow(ReplacementDataset)%%12)
p <- c()
for(i in 1:12)
{
p <- c(p,  list(ReplacementDataset[rownames(ReplacementDataset)%in%partitions[[i]],]))
dropped <- droplevels(p[[i]])
p[[i]] <- dropped
}
start <- Sys.time()
mice(p[[1]], m=5, method = 'pmm', maxit = 25)
end <- Sys.time()
print(end - start)
start <- Sys.time()
mice(ReplacementDataset, m=5, method = 'pmm', maxit = 25)
end <- Sys.time()
print(end - start)
start <- Sys.time()
mice(ReplacementDataset, m=1, method = 'pmm', maxit = 1)
end <- Sys.time()
print(end - start)
descriptionR <- describe(ReplacementDataset)
library(psych)
compareDF::compare_df(df1, df2,c('Location'))
compareDF::compare_df(tempData, ReplacementDataset,c('Location'))
tempData <- read.csv("DG-AI_FormDataShort.csv", header = TRUE, sep = ";")
tempData <- read.csv("DG-AI_FormData.csv", header = TRUE, sep = ";")
compareDF::compare_df(tempData, ReplacementDataset,c('Location'))
descriptionR <- describe(ReplacementDataset)
descriptionT <- describe(tempData)
bigStart <- Sys.time()
imputed <- c()
for(i in 1:12)
{
start <- Sys.time()
imputed[[i]] <- parlmice(p[[i]], m = 5, maxit = 10, n.core = 3, n.imp.core = 2)
end <- Sys.time()
print(end - start)
}
bigEnd <- Sys.time()
print(bigEnd - bigStart)
bigStart <- Sys.time()
imputed <- c()
for(i in 1:12)
{
start <- Sys.time()
imputed[[i]] <- parlmice(p[[i]], m = 5, maxit = 10, n.core = 3, n.imp.core = 2, method = "pmm")
end <- Sys.time()
print(end - start)
}
bigEnd <- Sys.time()
print(bigEnd - bigStart)
start <- Sys.time()
mice(ReplacementDataset, m=5, method = 'pmm', maxit = 10)
end <- Sys.time()
print(end - start)
start <- Sys.time()
mice(p[[i]], m=5, method = 'pmm', maxit = 10)
end <- Sys.time()
print(end - start)
bigStart <- Sys.time()
imputed <- c()
for(i in 1:12)
{
start <- Sys.time()
imputed[[i]] <- parlmice(p[[i]], m = 5, maxit = 5, n.core = 3, n.imp.core = 1, method = "pmm")
end <- Sys.time()
print(end - start)
}
bigEnd <- Sys.time()
print(bigEnd - bigStart)
bigStart <- Sys.time()
imputed <- c()
for(i in 1:12)
{
start <- Sys.time()
imputed[[i]] <- parlmice(p[[i]], m = 5, maxit = 5, n.core = 2, n.imp.core = 1, method = "pmm")
end <- Sys.time()
print(end - start)
}
bigEnd <- Sys.time()
print(bigEnd - bigStart)
bigStart <- Sys.time()
imputed <- c()
for(i in 1:12)
{
start <- Sys.time()
imputed[[i]] <- parlmice(p[[i]], m = 5, maxit = 5, n.core = 2, n.imp.core = 2, method = "pmm")
end <- Sys.time()
print(end - start)
}
bigEnd <- Sys.time()
print(bigEnd - bigStart)
View(imputed)
bigStart <- Sys.time()
imputed <- c()
for(i in 1:12)
{
start <- Sys.time()
imputed[[i]] <- parlmice(p[[i]], m = 5, maxit = 5, n.core = 2, n.imp.core = 3, method = "pmm")
end <- Sys.time()
print(end - start)
}
bigEnd <- Sys.time()
print(bigEnd - bigStart)
plot(imputed)
for(i in 1:12)
{
plot(imputed, c("type.of.sample"))
}
for(i in 1:12)
{
plot(imputed[[i]], c("type.of.sample"))
}
plot(imputed, c("type.of.sample"))
plot(imputed[[i]], c("type.of.sample"))
for(i in 1:12)
{
complete[[i]] <- complete(imputed[[i]])
}
complete <- c()
complete <- c()
for(i in 1:12)
{
complete[[i]] <- complete(imputed[[i]])
}
View(complete)
View(complete)
finalDataset <- rbind(complete)
View(finalDataset)
install.packages("dplyr")
finalDataset <- bind_rows(complete)
finalDataset <- dplyr::bind_rows(complete)
View(finalDataset)
write.table(finalDataset, file = "FianlCleanedDataset", sep = ";", append = FALSE, quote = FALSE)
write.table(finalDataset, file = "FianlCleanedDataset.csv", sep = ";", append = FALSE, quote = FALSE)
plot(imputed[[i]])
fullImputed <- dplyr::bind_rows(imputed)
plot(fullImputed)
plot(imputed[[i]])
plot(imputed[[12]])
plot(imputed[[1]])
plot(imputed[[2]])
plot(imputed[[3]])
plot(imputed[[4]])
plot(imputed[[5]])
plot(imputed[[6]])
hello <- tempData <- read.csv("FinalCleanedDataset", header = TRUE, sep = ";")
hello <- tempData <- read.csv("FinalCleanedDataset.csv", header = TRUE, sep = ";")
hello <-  read.csv("FinalCleanedDataset.csv", header = TRUE, sep = ";")
hello <-  read.csv("FianlCleanedDataset.csv", header = TRUE, sep = ";")
hello <-  read.csv("FianlCleanedDataset.csv", header = TRUE, sep = ";")
hello[hello == ''] <- NA
mean(is.na(hello))
start <- Sys.time()
mice(mice, m=5, method = 'pmm', maxit = 10)
end <- Sys.time()
print(end - start)
start <- Sys.time()
mice(hello, m=5, method = 'pmm', maxit = 10)
end <- Sys.time()
print(end - start)
View(hello)
mice(hello, m=5, method = 'pmm', maxit = 5)
start <- Sys.time()
mice(data.frame(hello), m=5, method = 'pmm', maxit = 5)
end <- Sys.time()
print(end - start)
hello <-  read.csv("FianlCleanedDataset.csv", header = TRUE, sep = ";")
hello[hello == ''] <- NA
View(hello)
write.table(finalDataset, file = "FianlCleanedDataset.csv", sep = ";", append = FALSE, quote = FALSE)
hello <-  read.csv("FianlCleanedDataset.csv", header = TRUE, sep = ";")
hello <-  read.csv("FianlCleanedDataset.csv", header = TRUE, sep = ";")
hello[hello == ''] <- NA
start <- Sys.time()
mice(data.frame(hello), m=5, method = 'pmm', maxit = 5)
end <- Sys.time()
print(end - start)
hi <- as.factor(hello)
hello$species.clone <- factor(hello$species.clone)
hello$type.of.sample <- factor(hello$type.of.sample)
hello$Nursery.Field <- factor(hello$Nursery.Field)
hello$Roots <- factor(hello$Roots)
hello$Root.Collar <- factor(hello$Root.Collar)
hello$Stem <- factor(hello$Stem)
hello$Growth.tip <- factor(hello$Growth.tip)
hello$Needles.Leaves <- factor(hello$Needles.Leaves)
hello$Location <- factor(hello$Location)
hello$Province <- factor(hello$Province)
View(hello)
hello$Asymptomatic.diseased <- factor(hello$Asymptomatic.diseased)
hello$species.clone <- factor(hello$species.clone)
hello$type.of.sample <- factor(hello$type.of.sample)
hello$Nursery.Field <- factor(hello$Nursery.Field)
hello$Roots <- factor(hello$Roots)
hello$Root.Collar <- factor(hello$Root.Collar)
hello$Stem <- factor(hello$Stem)
hello$Growth.tip <- factor(hello$Growth.tip)
hello$Needles.Leaves <- factor(hello$Needles.Leaves)
hello$Location <- factor(hello$Location)
hello$Province <- factor(hello$Province)
hello$Asymptomatic.diseased <- factor(hello$Asymptomatic.diseased)
hello$Genus <- factor(hello$Genus)
hello$results <- factor(hello$results)
mouse <- c(hello)
View(mouse)
start <- Sys.time()
imputed2 <- mice(hello, m=5, method = 'pmm', maxit = 5)
end <- Sys.time()
print(end - start)
plot(imputed[[6]])
plot(imputed[[7]])
plot(imputed[[8]])
plot(imputed[[9]])
plot(imputed[[10]])
plot(imputed[[11]])
compareDF::compare_df(tempData, finalDataset)
compareDF::compare_df(tempData, finalDataset, c('Province'))
compareDF::compare_df(tempData, ReplacementDataset,c('Location'))
compareDF::compare_df(tempData, finalDataset, c('Province'))
mean(is.na(finalDataset))
plot(fullImputed)
descriptionF <- decribe(finalDataset)
library(psych)
descriptionF <- decribe(finalDataset)
library(psych)
descriptionF <- decribe(finalDataset)
descriptionF <- describe(finalDataset)
View(descriptionF)
View(descriptionR)
View(descriptionF)
View(descriptionT)
View(descriptionR)
View(descriptionF)
View(descriptionT)
data.table(finalDataset)
table(finalDataset)
tablular(finalDataset)
install.packages("tables")
library(tables)
tablular(finalDataset)
tables::tablular(finalDataset)
tables::tabular(finalDataset)
compareDF::compare_df(ReplacementDataset, tempData,c('Location'))
compareDF::compare_df(finalDataset,tempData , c('Province'))
summary(finalDataset)
finalDataset$species.clone <- factor(finalDataset$species.clone)
finalDataset$type.of.sample <- factor(finalDataset$type.of.sample)
finalDataset$Nursery.Field <- factor(finalDataset$Nursery.Field)
finalDataset$Roots <- factor(finalDataset$Roots)
finalDataset$Root.Collar <- factor(finalDataset$Root.Collar)
finalDataset$Stem <- factor(finalDataset$Stem)
finalDataset$Growth.tip <- factor(finalDataset$Growth.tip)
finalDataset$Needles.Leaves <- factor(finalDataset$Needles.Leaves)
finalDataset$Location <- factor(finalDataset$Location)
finalDataset$Province <- factor(finalDataset$Province)
finalDataset$Asymptomatic.diseased <- factor(finalDataset$Asymptomatic.diseased)
finalDataset$Genus <- factor(finalDataset$Genus)
finalDataset$results <- factor(finalDataset$results)
compareDF::compare_df(finalDataset,tempData , c('Province'))
descriptionF <- describe(finalDataset)
View(descriptionF)
summary(finalDataset)
summary(tempData)
tempData$species.clone <- factor(tempData$species.clone)
tempData$type.of.sample <- factor(tempData$type.of.sample)
tempData$Nursery.Field <- factor(tempData$Nursery.Field)
tempData$Roots <- factor(tempData$Roots)
tempData$Root.Collar <- factor(tempData$Root.Collar)
tempData$Stem <- factor(tempData$Stem)
tempData$Growth.tip <- factor(tempData$Growth.tip)
tempData$Needles.Leaves <- factor(tempData$Needles.Leaves)
tempData$Location <- factor(tempData$Location)
tempData$Province <- factor(tempData$Province)
tempData$Asymptomatic.diseased <- factor(tempData$Asymptomatic.diseased)
tempData$Genus <- factor(tempData$Genus)
tempData$results <- factor(tempData$results)
summary(tempData)
summary(finalDataset)
sT <- summary(tempData)
sR <- summary(ReplacementDataset)
sF <- summary(finalDataset)
sT <- data.frame(summary(tempData))
sR <- data.frame(summary(ReplacementDataset))
sF <- data.frame(summary(finalDataset))
View(sF)
summary(tempData)
summary(ReplacementDataset)
summary(finalDataset)
Hmisc::describe(tempData)
Hmisc::describe(ReplacementDataset)
Hmisc::describe(finalDataset)
tempData[tempData==''] <- NA
tempData[tempData=='?'] <- NA
tempData[tempData=='-'] <- NA
tempData[tempData=='N/A'] <- NA
Hmisc::describe(tempData)
Hmisc::describe(ReplacementDataset)
Hmisc::describe(finalDataset)
summary(tempData)
summary(finalDataset)
summary(ReplacementDataset)
summary(finalDataset)
write.table(finalDataset, file = "FianlCleanedDataset2.csv", sep = ";", append = FALSE, quote = FALSE)
