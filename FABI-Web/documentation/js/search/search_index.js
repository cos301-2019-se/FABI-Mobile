var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/interfaces/AccessLogs.html",[0,0.085,1,1.771]],["body/interfaces/AccessLogs.html",[0,0.17,1,2.55,2,0.755,3,0.065,4,0.057,5,0.049,6,1.952,7,1.952,8,1.152,9,1.234,10,2.645,11,2.717,12,1.972,13,1.918,14,2.718,15,0.148,16,0.573,17,3.714,18,1.775,19,1.09,20,1.502,21,4.368,22,0.611,23,1.083,24,0.901,25,0.009,26,1.472,27,0.32,28,2.781,29,1.095,30,1.463,31,0.166,32,1.121,33,1.176,34,0.833,35,1.235,36,0.61,37,0.595,38,1.267,39,1.506,40,1.559,41,4.221,42,2.025,43,2.798,44,2.025,45,2.798,46,2.025,47,0.152,48,2.011,49,3.85,50,2.493,51,4.699,52,3.016,53,3.016,54,0.961,55,3.016,56,3.016,57,3.016,58,3.016,59,1.91,60,1.607,61,1.605,62,2.104,63,1.742,64,0.913,65,2.702,66,2.7,67,0.175,68,2.7,69,2.104,70,2.121,71,2.182,72,2.7,73,2.104,74,1.367,75,1.121,76,2.104,77,1.686,78,1.463,79,2.798,80,2.104,81,2.729,82,2.104,83,1.403,84,3.935,85,1.148,86,0.567,87,4.241,88,1.463,89,1.267,90,2.452,91,0.734,92,3.271,93,2.648,94,1.454,95,1.66,96,3.271,97,3.016,98,1.815,99,1.303,100,1.533,101,1.121,102,1.095,103,0.038,104,2.544,105,0.301,106,0.581,107,0.581,108,1.037,109,1.646,110,1.148,111,1.02,112,1.147,113,1.148,114,0.539,115,0.625,116,1.098,117,2.315,118,1.632,119,1.72,120,1.463,121,0.878,122,2.372,123,2.104,124,1.275,125,4.468,126,1.153,127,2.705,128,2.335,129,2.502,130,2.315,131,2.705,132,2.384,133,2.43,134,2.705,135,2.43,136,2.43,137,2.43,138,2.491,139,2.43,140,1.171,141,1.671,142,2.553,143,2.104,144,2.104,145,2.104,146,1.862,147,2.452,148,2.452,149,2.104,150,2.325,151,2.104,152,0.61,153,1.481,154,1.367,155,2.104,156,2.011,157,1.205,158,1.205,159,0.004,160,0.005,161,0.004]],["title/interfaces/Address.html",[0,0.085,162,1.991]],["body/interfaces/Address.html",[0,0.176,2,0.867,3,0.126,4,0.066,5,0.057,8,0.789,9,1.198,15,0.17,16,0.631,18,1.7,19,0.829,20,1.375,22,0.604,23,0.944,24,0.908,25,0.009,26,1.555,47,0.157,54,0.948,60,1.77,64,0.97,67,0.402,75,1.286,88,1.171,91,1.199,94,1.37,99,1.435,119,1.402,152,0.7,159,0.004,160,0.006,161,0.004,162,4.025,163,2.092,164,4.365,165,2.141,166,4.069,167,3.935,168,3.103,169,3.843,170,3.545,171,3.545,172,3.478,173,4.009,174,3.545,175,2.787,176,1.999,177,1.647,178,3.186,179,1.93,180,2.601,181,2.052,182,2.045,183,3.036,184,1.94,185,2.163,186,2.163,187,1.746,188,2.025,189,2.158,190,2.275,191,2.787,192,2.976,193,2.163,194,1.531,195,1.799,196,2.163,197,1.125,198,2.275,199,1.61,200,2.163,201,3.972,202,3.432,203,2.092,204,3.432,205,2.672,206,3.186,207,2.275,208,2.213,209,2.471,210,3.186,211,1.067,212,2.386,213,1.796,214,1.796,215,2.544,216,2.158,217,2.092,218,2.163,219,2.163,220,1.756,221,1.286,222,3.186,223,2.163,224,2.163,225,1.796,226,2.163,227,1.61,228,2.163,229,1.117,230,2.163,231,1.796,232,2.163,233,2.163,234,2.163,235,2.976,236,2.471,237,1.796,238,2.976,239,2.976,240,2.62,241,2.976,242,2.62,243,2.976,244,2.976,245,2.471,246,2.976,247,2.976,248,3.665,249,2.976,250,4.145,251,2.976,252,2.976,253,2.976,254,2.976,255,2.976,256,2.976,257,2.976,258,4.069,259,2.976,260,2.976,261,2.976,262,2.976,263,2.976,264,2.163,265,2.163,266,2.092,267,2.976,268,2.163,269,2.163,270,3.665,271,2.163,272,2.163,273,2.163,274,2.163,275,2.163,276,2.163,277,3.665,278,2.163,279,2.163,280,2.163,281,2.163,282,2.471,283,2.976,284,2.163,285,2.163,286,2.163,287,1.963,288,2.163,289,2.163,290,2.025,291,3.207,292,2.878,293,2.878,294,2.163,295,2.163]],["title/components/AdminDivComponent.html",[296,0.987,297,1.771]],["body/components/AdminDivComponent.html",[3,0.102,4,0.09,5,0.077,15,0.233,22,0.526,24,0.839,25,0.009,27,0.275,31,0.26,47,0.102,54,1.104,60,1.76,61,1.301,64,0.783,67,0.411,91,0.992,103,0.073,105,0.632,121,0.684,124,1.275,159,0.006,160,0.007,161,0.006,177,1.748,181,2.236,182,2.135,197,1.154,211,1.46,220,1.43,296,1.782,297,3.34,298,2.648,299,2.685,300,2.529,301,2.685,302,2.685,303,6.121,304,7.023,305,7.023,306,4.185,307,1.397,308,3.595,309,2.685,310,1.945,311,1.814,312,4.884,313,1.533,314,5.969,315,1.533,316,5.503,317,1.533,318,1.736,319,5.165,320,1.743,321,6.493,322,5.261,323,4.802,324,5.261,325,1.426,326,3.435,327,1.892,328,3.591,329,3.591,330,4.802,331,3.957,332,2.605,333,5.261,334,5.261,335,3.302,336,1.954,337,1.333,338,6.428,339,4.604,340,7.043,341,7.354,342,5.958,343,2.389,344,2.335,345,2.685,346,2.685,347,3.754,348,2.389,349,3.754,350,2.389,351,2.685,352,2.324,353,2.685,354,2.262,355,2.685,356,2.389,357,2.389,358,2.144,359,3.595,360,2.389,361,2.389,362,2.389,363,3.314,364,2.389,365,2.091,366,2.685,367,2.389,368,2.262,369,2.685,370,2.389,371,2.262,372,2.389,373,2.262,374,2.324,375,1.939,376,2.685,377,2.685]],["title/components/AdminHelpComponent.html",[296,0.987,348,1.771]],["body/components/AdminHelpComponent.html",[3,0.098,4,0.086,5,0.074,14,2.117,15,0.223,25,0.009,27,0.263,31,0.25,47,0.098,54,1.211,59,3.156,61,1.248,64,1.028,67,0.33,77,2.673,78,2.319,91,0.966,103,0.057,105,0.62,121,0.656,124,1.256,159,0.006,160,0.007,161,0.006,177,1.736,197,1.231,211,2.071,220,1.393,229,1.839,296,1.749,297,2.292,298,2.581,299,2.576,300,2.426,301,2.576,302,2.576,307,1.361,308,3.528,309,2.576,310,1.939,311,1.809,313,1.494,315,1.494,317,1.494,318,1.711,320,1.46,325,1.368,336,1.756,337,1.036,343,2.292,344,2.276,345,2.576,346,2.576,347,3.699,348,3.291,349,3.699,350,2.292,351,2.576,352,2.229,353,2.576,354,2.17,355,2.576,356,2.292,357,2.292,358,2.104,359,3.528,360,2.292,361,2.292,362,2.292,363,3.23,364,2.292,365,2.006,366,2.576,367,2.292,368,2.17,369,2.576,370,2.292,371,2.17,372,2.292,373,2.17,374,2.229,375,2.906,376,2.576,377,2.576,378,4.942,379,6.309,380,4.014,381,2.956,382,5.858,383,5.362,384,4.277,385,4.277,386,4.549,387,2.452,388,4.606,389,7.166,390,6.729,391,5.334,392,3,393,6.729,394,5.971,395,6.729,396,6.614,397,7.166,398,3.972,399,4.378,400,7.166,401,5.033,402,3.685,403,3.972,404,4.136,405,3.972,406,5.715]],["title/interfaces/AdminMember.html",[0,0.085,407,3.306]],["body/interfaces/AdminMember.html",[0,0.113,2,0.847,3,0.073,4,0.064,5,0.055,9,1.18,12,0.995,15,0.166,16,0.621,19,0.816,20,1.264,22,0.607,23,0.961,24,0.884,25,0.009,26,1.434,27,0.388,31,0.186,34,1.036,36,0.684,37,0.667,39,1.326,47,0.116,50,1.199,60,1.257,61,0.929,63,1.478,77,1.319,78,1.585,85,2.322,86,1.146,90,1.917,99,1.018,100,2.338,103,0.042,104,2.378,105,0.467,106,0.651,107,0.651,108,1.215,111,1.144,112,1.227,114,1.196,115,0.971,116,1.287,120,1.347,124,0.902,126,0.936,140,1.27,150,2.108,152,1.334,159,0.004,160,0.006,161,0.004,177,1.316,179,2.162,181,1.969,182,1.88,184,1.832,194,0.95,195,1.549,197,1.035,207,1.615,208,2.11,212,1.906,220,1.146,229,1.875,307,0.808,310,0.887,311,0.827,313,0.887,315,0.887,318,0.887,325,1.018,326,3.013,327,1.351,328,3.554,329,4.403,331,2.825,336,2.09,337,1.546,339,4.217,344,2.32,378,2.686,381,2.631,387,2.919,388,4.752,392,2.649,407,5.468,408,2.825,409,2.988,410,0.867,411,2.959,412,1.659,413,3.403,414,2.578,415,1.456,416,5.064,417,2.686,418,2.455,419,2.203,420,1.144,421,1.456,422,2.873,423,2.455,424,2.018,425,1.806,426,1.806,427,2.378,428,1.706,429,3.05,430,1.287,431,2.043,432,3.184,433,3.184,434,5.441,435,1.287,436,3.757,437,3.757,438,4.272,439,4.413,440,3.757,441,3.757,442,3.757,443,4.142,444,5.207,445,5.975,446,3.757,447,3.757,448,3.102,449,5.064,450,3.429,451,3.429,452,4.142,453,3.429,454,3.429,455,2.378,456,2.837,457,1.86,458,2.572,459,1.806,460,2.502,461,2.959,462,1.86,463,1.86,464,1.86,465,1.615,466,3.033,467,2.432,468,3.033,469,2.239,470,3.033,471,3.757,472,3.757,473,2.658,474,5.207,475,2.929,476,3.757,477,3.145,478,5.207,479,3.757,480,2.432,481,2.578,482,2.503,483,2.503,484,2.375,485,3.757,486,3.757,487,3.429,488,2.432,489,1.6,490,3.033,491,1.755,492,3.906,493,3.906,494,2.825,495,4.413,496,0.867,497,2.18,498,1.258,499,1.86,500,2.358,501,1.456,502,1.532,503,1.967,504,3.757,505,5.207,506,3.757,507,3.757,508,1.659,509,1.493,510,1.806,511,1.86,512,1.917,513,1.42,514,3.757,515,3.757,516,3.757,517,3.757,518,3.757,519,3.757,520,3.429,521,2.988,522,3.757,523,3.757,524,3.757,525,3.361,526,3.25,527,3.361,528,4.142,529,3.429,530,1.199,531,4.413,532,3.429,533,3.757,534,3.429,535,1.978,536,1.978,537,2.124,538,2.188,539,2.503,540,3.757,541,1.659,542,2.825,543,2.825,544,3.757,545,3.757,546,5.207,547,3.757,548,2.686,549,2.3,550,1.456,551,1.385,552,1.706,553,1.706,554,1.615,555,1.706,556,1.706,557,1.659,558,1.615,559,3.014,560,3.264,561,3.05,562,3.147,563,2.043,564,1.978,565,2.043,566,2.832,567,2.043,568,2.113,569,2.043,570,2.043,571,2.113,572,2.043]],["title/classes/AdminMenuComponent.html",[103,0.044,573,3.306]],["body/classes/AdminMenuComponent.html",[3,0.114,4,0.101,5,0.087,15,0.261,16,0.83,19,1.091,22,0.582,23,0.93,25,0.009,27,0.386,31,0.292,34,1.325,47,0.114,63,1.676,67,0.308,103,0.067,105,0.624,114,1.119,115,1.298,121,0.767,159,0.007,160,0.008,161,0.007,165,1.715,177,1.63,194,1.761,195,2.07,307,1.497,310,1.393,311,1.299,313,1.393,315,1.393,317,1.643,318,1.805,320,1.763,325,1.6,378,5.576,410,1.361,424,2.287,427,2.818,428,2.68,430,2.022,435,2.022,465,3.182,487,6.756,488,3.457,530,1.883,573,5.898,574,2.23,575,7.117,576,4.438,577,3.437,578,6.959,579,6.683,580,5.901,581,5.386,582,3.108,583,4.694,584,4.694]],["title/modules/AdminModule.html",[585,2.194,586,3.103]],["body/modules/AdminModule.html",[3,0.117,4,0.103,5,0.11,18,1.395,25,0.009,27,0.39,31,0.299,47,0.117,67,0.368,103,0.068,152,1.101,159,0.007,160,0.008,161,0.007,177,1.332,332,2.994,551,2.229,586,5.616,587,3.522,588,6.849,589,6.849,590,3.653,591,4.548,592,4.548,593,4.548,594,4.548,595,6.849,596,4.128,597,3.522,598,4.811,599,5.346,600,4.324,601,5.048,602,5.048,603,4.324,604,4.324,605,5.048,606,3.796,607,3.953,608,6.849,609,4.324,610,4.324,611,4.324,612,4.324,613,4.615,614,5.616,615,4.548,616,5.983,617,4.548,618,4.324,619,2.671]],["title/classes/AdminNotificationComponent.html",[103,0.044,620,3.306]],["body/classes/AdminNotificationComponent.html",[3,0.071,4,0.062,5,0.054,8,1.307,9,1.14,12,0.966,13,1.447,14,2.574,15,0.161,16,0.608,18,1.356,19,0.799,20,0.951,22,0.614,23,0.953,24,0.861,25,0.009,26,1.6,27,0.386,31,0.18,34,1.161,39,1.446,40,1.097,47,0.071,48,1.526,50,1.163,59,1.449,60,1.219,61,1.762,63,1.903,64,0.758,65,2.05,67,0.332,70,1.191,77,1.789,78,1.79,85,2.636,86,1.23,91,1.023,93,1.486,98,1.377,99,0.988,103,0.041,104,2.594,105,0.528,106,0.884,107,0.884,108,1.205,112,0.969,114,1.169,115,1.188,116,1.249,120,0.821,121,0.927,124,1.204,126,1.088,140,1.281,146,1.412,150,2.472,152,1.298,159,0.004,160,0.006,161,0.004,165,1.85,177,1.295,194,1.29,195,1.516,197,1.143,208,1.972,229,1.481,307,1.097,310,0.86,311,0.802,313,0.86,315,0.86,317,1.203,318,1.503,320,1.845,325,1.817,327,2.115,328,2.487,329,4.013,336,1.859,337,1.425,339,3.332,378,5.732,387,2.762,410,0.841,411,3.53,412,1.61,414,3.153,415,1.412,416,5.885,417,2.606,418,2.382,419,2.628,420,1.109,421,1.412,422,3.222,423,2.382,424,1.975,425,1.752,426,1.752,427,2.56,428,1.655,430,1.249,434,3.645,435,1.249,438,4.553,448,3.497,449,3.089,452,5.955,453,5.366,454,5.366,455,1.789,465,2.528,466,2.969,467,2.381,468,2.969,469,2.192,470,2.969,473,2.602,484,2.337,488,2.974,489,1.717,490,3.709,491,2.381,492,4.38,493,4.38,494,3.834,495,5.679,496,1.356,497,2.984,498,1.232,499,2.911,501,1.412,502,1.486,503,1.926,510,1.752,511,1.804,530,2.032,535,1.919,536,1.919,537,2.733,539,3.599,541,2.252,574,1.377,620,5.679,621,7.317,622,2.899,623,4.983,624,4.983,625,5.366,626,4.983,627,4.983,628,6.659,629,6.659,630,5.366,631,3.582,632,5.098,633,5.879,634,4.677,635,5.098,636,4.653,637,3.644,638,5.098,639,3.307,640,3.053,641,3.644,642,4.127,643,3.644,644,1.975,645,3.644,646,4.127,647,3.644,648,3.644,649,3.644,650,3.644,651,3.644,652,4.127,653,4.127,654,3.644,655,4.127,656,2.287,657,4.127,658,2.287,659,2.05,660,2.287,661,2.287,662,3.644,663,4.127,664,4.127,665,2.969,666,3.644,667,4.127,668,2.05,669,4.127,670,3.326,671,4.127,672,2.287,673,3.089,674,3.089,675,2.382,676,3.644,677,4.127,678,4.127,679,4.127,680,2.528,681,3.644,682,3.552,683,3.079,684,2.123]],["title/classes/AdminRoutingModule.html",[103,0.044,616,3.306]],["body/classes/AdminRoutingModule.html",[3,0.106,4,0.093,5,0.08,25,0.009,27,0.426,31,0.271,40,1.176,47,0.106,54,1.042,64,0.989,78,2.024,100,1.744,103,0.062,126,1.232,159,0.006,160,0.007,161,0.006,177,1.641,190,2.351,197,1.015,296,2.033,337,1.122,352,2.937,365,2.642,375,2.451,378,3.909,391,5.087,402,3.184,408,4.112,410,1.261,420,1.664,431,2.974,434,4.753,574,2.066,590,4.855,616,5.634,619,2.415,685,3.909,686,4.753,687,4.683,688,4.537,689,4.349,690,3.731,691,4.112,692,5.076,693,4.112,694,4.112,695,4.349,696,4.112,697,5.634,698,4.633,699,4.112,700,5,701,4.349,702,6.316,703,4.633,704,5.288,705,4.633,706,3.872,707,6.192,708,5.288,709,4.633,710,5.634,711,4.633,712,4.99,713,5.745,714,6.253,715,5.698,716,6.662,717,2.974,718,4.633,719,4.99,720,3.303]],["title/components/AppComponent.html",[296,0.987,350,1.771]],["body/components/AppComponent.html",[3,0.102,4,0.089,5,0.077,15,0.232,16,0.773,22,0.484,24,0.572,25,0.009,27,0.338,31,0.26,47,0.102,54,1.102,61,1.296,64,0.78,67,0.367,86,0.886,91,0.99,102,2.117,103,0.059,105,0.47,113,1.797,121,0.681,124,1.273,152,1.18,159,0.006,160,0.007,161,0.006,165,1.524,177,1.427,197,1.153,211,1.455,215,3.381,220,1.427,296,1.779,297,2.381,298,2.643,299,2.676,300,2.521,301,2.676,302,2.676,307,1.394,308,3.59,309,2.676,310,1.945,311,1.814,313,1.53,315,1.53,317,1.53,318,1.734,320,1.622,325,1.757,336,1.798,337,1.076,343,2.381,344,2.331,345,2.676,346,2.676,347,3.749,348,2.381,349,3.749,350,3.336,351,2.676,352,2.316,353,2.676,354,2.254,355,2.676,356,2.381,357,2.381,358,2.141,359,3.59,360,2.381,361,2.381,362,2.381,363,3.307,364,2.381,365,2.084,366,2.676,367,2.381,368,2.254,369,2.676,370,2.381,371,2.254,372,2.381,373,2.254,374,2.316,375,1.933,376,2.676,377,2.676,484,2.795,530,1.673,551,2.389,639,2.316,640,2.138,721,5.243,722,7.965,723,7.339,724,5.938,725,7.017,726,7.339,727,5.938,728,3.943,729,4.444,730,5.243,731,4.785]],["title/modules/AppModule.html",[585,2.194,732,3.306]],["body/modules/AppModule.html",[3,0.074,4,0.065,5,0.056,25,0.009,27,0.435,29,1.239,31,0.188,32,1.269,33,1.331,47,0.074,54,1.151,86,0.641,103,0.043,159,0.004,160,0.006,161,0.004,177,1.154,220,0.835,297,3.335,304,3.462,305,3.462,311,0.835,328,4.422,337,0.778,343,1.722,348,3.193,350,3.491,352,3.106,354,2.582,356,3.193,357,3.193,358,2.141,360,3.335,361,3.193,362,3.193,364,3.193,365,2.795,367,3.335,368,3.023,370,3.335,371,3.023,372,3.193,373,3.023,374,3.106,375,2.782,379,3.462,408,2.853,410,1.568,412,1.676,417,3.748,418,2.479,434,3.748,550,1.47,573,4.442,575,3.462,585,2.134,586,5.593,587,2.209,613,3.426,617,2.853,618,4.294,619,2.315,620,4.442,621,3.462,688,3.577,689,3.017,690,2.589,691,2.853,696,4.873,697,4.442,698,3.215,699,4.873,700,3.942,701,3.017,702,5.763,703,3.215,704,4.169,705,3.215,706,3.053,708,4.169,709,3.215,710,4.442,711,3.215,712,3.462,720,2.291,725,4.784,728,3.942,729,3.215,732,7.048,733,2.853,734,4.294,735,5.09,736,3.793,737,3.793,738,3.793,739,3.793,740,3.793,741,5.931,742,5.289,743,5.593,744,5.027,745,5.593,746,5.593,747,5.593,748,5.027,749,4.169,750,2.479,751,4.296,752,5.242,753,4.632,754,5.491,755,3.462,756,5.936,757,4.296,758,5.936,759,4.784,760,4.784,761,5.936,762,4.296,763,5.242,764,5.242,765,5.242,766,3.793,767,4.296,768,3.215,769,6.799,770,5.913,771,6.206,772,7.337,773,4.296,774,4.442,775,5.242,776,3.462,777,5.153,778,3.793,779,3.793,780,3.793,781,3.793,782,3.793,783,4.296,784,7.337,785,3.462,786,3.462,787,3.462,788,3.462,789,3.462,790,3.462,791,4.169,792,3.793,793,3.793,794,3.215,795,4.296,796,3.462,797,3.942,798,4.711,799,3.017,800,3.462,801,4.442,802,3.462,803,4.442,804,3.462,805,4.442,806,3.215,807,3.462,808,5.482,809,3.748,810,3.017,811,3.215,812,4.296,813,4.442,814,3.793,815,3.215,816,4.169,817,7.208,818,3.215,819,3.462,820,3.462,821,4.784,822,3.793,823,4.442,824,3.215,825,3.462,826,3.942,827,3.017,828,4.296,829,4.169,830,3.462,831,3.215,832,3.793,833,2.853,834,3.215,835,3.942,836,3.793,837,3.017,838,3.942,839,7.345,840,3.017,841,3.017,842,3.462,843,4.169,844,3.215,845,4.442,846,3.215,847,3.017,848,3.215,849,3.462,850,3.942,851,3.017,852,4.296,853,4.442,854,6.006,855,3.703,856,3.215,857,3.462,858,3.942,859,3.017,860,3.462,861,3.942,862,3.017,863,3.462,864,3.793,865,3.462,866,4.296,867,3.462,868,4.296,869,3.793,870,5.936,871,3.215,872,3.793,873,4.296,874,4.296,875,3.793,876,4.296,877,4.296,878,4.296]],["title/modules/AppRoutingModule.html",[585,2.194,742,2.934]],["body/modules/AppRoutingModule.html",[3,0.081,4,0.071,5,0.061,25,0.009,27,0.43,31,0.207,40,0.9,47,0.081,54,1.193,64,0.622,78,1.274,91,1.162,100,2.153,103,0.047,118,1.011,126,1.276,159,0.005,160,0.006,161,0.005,177,1.486,190,1.799,197,1.229,211,1.161,220,1.391,229,1.836,296,2.074,337,0.859,352,2.475,358,2.251,365,2.227,368,2.409,371,2.409,373,2.409,374,2.475,375,2.897,381,1.706,391,4.801,402,2.437,408,3.146,420,1.274,431,3.67,434,4.006,582,2.203,587,2.437,590,4.958,613,3.662,619,1.848,685,2.991,686,4.006,687,4.912,688,3.824,689,3.328,690,2.855,691,3.146,692,5.315,693,3.146,694,3.146,695,3.328,696,5.075,697,4.748,698,3.546,699,5.075,700,4.214,701,3.328,702,5.962,703,3.546,704,4.457,705,3.546,706,3.263,708,4.457,709,3.546,710,4.748,711,3.546,712,3.818,713,6.105,714,6.479,715,5.025,716,6.267,717,2.276,719,3.818,720,2.527,742,4.214,769,5.603,770,3.818,771,3.818,775,4.184,777,5.025,778,4.184,779,4.184,780,4.184,781,4.184,782,4.184,791,4.457,792,4.184,797,4.214,798,4.129,799,3.328,805,4.748,806,3.546,808,3.818,809,4.006,810,3.328,813,4.748,814,4.184,815,3.546,816,4.457,817,6.317,818,3.546,823,4.748,824,3.546,826,4.214,827,3.328,829,4.457,830,5.114,831,3.546,832,4.184,833,3.146,834,3.546,835,4.214,836,4.184,837,3.328,838,4.214,839,7.24,840,3.328,841,3.328,845,4.748,846,3.546,847,3.328,848,3.546,849,3.818,850,4.214,851,3.328,853,4.748,854,6.317,855,4.05,856,3.546,857,3.818,858,4.214,859,3.328,860,3.818,861,4.214,862,3.328,863,3.818,879,4.738,880,6.317,881,4.738,882,4.738,883,4.738,884,5.962,885,3.818,886,1.954,887,2.011,888,4.738,889,6.345,890,4.738]],["title/guards/AuthenticationGuard.html",[692,2.55,891,3.56]],["body/guards/AuthenticationGuard.html",[3,0.097,4,0.085,5,0.073,8,1.411,15,0.221,22,0.539,23,1.042,25,0.009,27,0.377,31,0.247,34,1.289,40,1.072,47,0.122,67,0.377,86,1.062,101,1.668,102,1.629,103,0.071,105,0.617,106,1.088,107,1.088,108,1.22,112,1.035,114,1.009,115,1.346,116,1.062,121,0.938,140,1.251,141,1.906,146,2.433,159,0.005,160,0.007,161,0.005,165,2.097,190,2.143,195,1.483,208,2.09,290,2.625,296,1.589,298,2.943,307,1.6,317,1.482,320,1.664,337,1.023,410,1.15,419,2.921,420,1.518,458,2.413,489,1.482,496,1.448,498,1.517,509,2.496,530,2.302,558,2.143,581,4.55,644,1.932,692,5.038,713,5.797,892,5.646,893,4.985,894,7.111,895,8.729,896,8.729,897,3.564,898,5.646,899,5.646,900,5.322,901,5.646,902,8.83,903,8.91,904,8.83,905,5.646,906,6.279,907,7.111,908,7.785,909,5.731,910,7.437,911,7.797,912,7.111,913,7.111,914,7.111,915,7.111,916,7.116,917,8.729,918,8.599,919,5.646,920,5.646,921,5.646,922,7.785,923,8.172,924,5.646,925,4.225,926,3.129,927,4.985,928,5.646,929,3.965,930,5.646,931,5.646,932,5.646,933,5.646]],["title/injectables/AuthenticationService.html",[30,1.187,34,0.676]],["body/injectables/AuthenticationService.html",[0,0.078,3,0.069,4,0.061,5,0.053,8,1.366,11,2.044,13,1.43,14,2.114,15,0.158,16,0.601,19,1.218,20,1.086,22,0.592,23,1.096,24,0.79,25,0.009,27,0.36,29,1.17,30,1.533,31,0.177,32,1.198,33,1.257,34,1.347,36,0.652,37,1.122,39,1.46,40,1.359,47,0.098,50,1.606,54,0.789,60,2.423,67,0.36,81,1.811,83,2.108,86,0.605,94,1.508,101,1.198,102,1.17,103,0.057,105,0.452,106,0.873,107,0.873,108,1.167,109,2.481,110,2.165,111,1.533,112,1.23,113,1.227,114,1.11,116,1.261,117,1.725,118,1.527,121,0.989,122,2.49,126,0.913,127,1.811,128,2.395,129,2.375,130,1.725,131,2.273,132,2.165,133,1.811,134,2.273,135,1.811,139,1.811,140,1.009,141,1.82,147,2.57,148,2.57,152,0.917,153,2.791,154,2.054,156,2.645,157,1.811,158,1.811,159,0.004,160,0.006,161,0.004,165,1.836,175,2.054,176,1.353,181,1.463,182,1.397,190,2.863,194,1.747,195,2.334,204,3.636,211,0.993,290,2.652,317,1.189,320,1.77,325,1.713,330,5.767,394,3.787,399,4.171,458,1.767,465,2.504,484,2.745,496,1.721,497,2.438,498,1.714,508,2.791,509,3.132,510,2.421,530,2.016,541,2.224,549,1.582,550,1.951,551,1.856,552,2.286,553,2.286,554,2.165,555,2.286,556,2.286,640,2.715,680,1.54,885,3.268,897,2.56,916,6.077,925,3.035,929,6.181,934,2.248,935,3.581,936,5.035,937,5.703,938,5.703,939,5.703,940,5.703,941,7.156,942,4.518,943,8.541,944,3.6,945,6.596,946,6.596,947,7.156,948,7.54,949,7.156,950,5.703,951,5.703,952,5.703,953,6.596,954,6.596,955,6.596,956,2.848,957,3.68,958,5.703,959,4.055,960,4.055,961,5.703,962,6.319,963,4.055,964,4.055,965,5.703,966,7.54,967,4.055,968,7.156,969,6.596,970,5.767,971,3.161,972,5.035,973,5.703,974,4.055,975,6.658,976,4.055,977,6.596,978,7.156,979,4.055,980,4.055,981,4.055,982,4.055,983,4.055,984,4.055,985,4.055,986,4.005,987,2.341,988,2.341,989,1.773,990,6.596,991,3.6,992,4.055,993,1.767,994,4.055,995,4.055,996,4.055,997,7.156,998,5.703,999,5.703,1000,5.703,1001,5.703,1002,5.703,1003,5.703,1004,5.703,1005,5.703,1006,5.703,1007,4.055,1008,5.703,1009,5.703,1010,4.055,1011,6.596,1012,4.055,1013,4.055,1014,4.055,1015,3.581,1016,4.055,1017,4.055,1018,4.055,1019,4.055,1020,2.086,1021,2.56,1022,2.832,1023,4.055,1024,4.312,1025,4.055,1026,4.055,1027,4.055,1028,5.703,1029,5.703,1030,3.161,1031,2.341,1032,4.055,1033,4.055,1034,5.703,1035,7.156,1036,2.444,1037,4.055,1038,4.055]],["title/interfaces/CMWDeposit.html",[0,0.085,1039,2.55]],["body/interfaces/CMWDeposit.html",[0,0.152,2,0.611,3,0.053,4,0.046,5,0.04,8,0.556,9,1.019,10,2.251,11,2.558,12,1.466,13,2.017,14,2.24,15,0.12,16,0.49,18,1.613,20,1.325,22,0.61,23,1,24,0.909,25,0.009,26,1.368,27,0.289,29,0.885,30,1.25,31,0.134,32,0.906,33,0.951,34,0.86,35,0.999,36,0.493,37,0.481,38,1.024,39,1.492,40,1.686,47,0.14,64,0.823,67,0.349,74,2.652,81,2.692,83,1.134,86,0.458,89,1.552,93,2.937,94,1.063,95,1.342,101,0.906,102,0.885,103,0.046,105,0.243,106,0.47,107,0.47,108,0.694,109,1.896,110,0.928,111,0.825,112,1.214,113,0.928,114,0.436,115,0.766,116,1.232,117,2.295,118,1.852,119,1.466,120,1.247,121,0.947,122,2.558,124,0.959,126,1.142,127,2.819,128,2.409,129,2.731,130,2.497,131,2.819,132,2.669,133,2.621,134,2.819,135,2.621,136,2.621,137,2.621,138,2.686,139,2.466,140,1.263,141,1.801,142,2.753,154,1.675,157,2.555,158,2.555,159,0.003,160,0.005,161,0.003,168,2.7,194,0.685,209,3.128,221,2.736,227,2.49,231,1.918,236,2.778,237,1.265,245,1.918,282,1.265,358,2.039,455,0.951,460,2.317,489,0.64,496,1.444,498,0.655,509,1.077,513,1.024,541,1.197,855,3.837,886,3.495,887,3.125,942,4.252,944,1.937,957,2.392,971,3.473,993,1.441,1021,1.937,1039,3.617,1040,1.849,1041,2.62,1042,1.265,1043,4.162,1044,4.162,1045,3.01,1046,4.472,1047,3.01,1048,3.194,1049,4.162,1050,4.472,1051,5.157,1052,4.162,1053,4.472,1054,3.01,1055,4.162,1056,3.01,1057,4.252,1058,4.162,1059,4.162,1060,4.472,1061,4.472,1062,4.162,1063,4.472,1064,2.803,1065,1.937,1066,2.803,1067,1.937,1068,2.803,1069,1.937,1070,2.803,1071,1.937,1072,3.385,1073,1.937,1074,2.803,1075,1.937,1076,3.385,1077,1.937,1078,3.385,1079,1.937,1080,3.385,1081,1.937,1082,3.385,1083,1.937,1084,3.385,1085,1.937,1086,3.385,1087,1.937,1088,3.385,1089,1.937,1090,4.472,1091,3.519,1092,1.937,1093,2.038,1094,2.038,1095,2.038,1096,4.162,1097,2.038,1098,2.038,1099,2.038,1100,3.546,1101,2.778,1102,2.038,1103,3.113,1104,2.096,1105,1.427,1106,2.038,1107,2.096,1108,2.096,1109,2.803,1110,1.865,1111,2.31,1112,2.038,1113,3.241,1114,1.937,1115,1.937,1116,2.038,1117,1.937,1118,1.937,1119,1.937,1120,1.937,1121,1.427,1122,5.479,1123,3.385,1124,2.038,1125,2.038,1126,2.038,1127,2.038,1128,3.089,1129,2.038,1130,2.038,1131,2.038,1132,3.089,1133,2.038,1134,2.038,1135,2.038,1136,3.089,1137,2.038,1138,1.849,1139,2.038,1140,2.038,1141,2.038,1142,2.038,1143,2.038,1144,3.385,1145,3.329,1146,2.038,1147,2.038,1148,2.038,1149,2.038,1150,2.038,1151,2.038,1152,2.038,1153,2.038,1154,2.038,1155,2.038,1156,2.038,1157,2.038,1158,2.038,1159,2.038]],["title/interfaces/CMWRequest.html",[0,0.085,1103,2.448]],["body/interfaces/CMWRequest.html",[0,0.154,2,0.639,3,0.055,4,0.048,5,0.042,8,0.581,9,1.034,10,2.289,11,2.581,12,1.5,13,2.038,14,2.271,15,0.125,16,0.507,18,1.631,20,1.339,22,0.602,23,1.008,24,0.904,25,0.009,26,1.384,27,0.295,29,0.926,30,1.293,31,0.14,32,0.948,33,0.995,34,0.883,35,1.044,36,0.516,37,0.503,38,1.071,39,1.502,40,1.694,47,0.141,64,0.842,67,0.316,74,2.692,81,2.712,83,1.186,86,0.479,89,1.605,93,2.966,94,1.1,95,1.403,101,0.948,102,0.926,103,0.048,105,0.254,106,0.491,107,0.491,108,0.718,109,1.939,110,0.971,111,0.863,112,1.224,113,0.971,114,0.455,115,0.792,116,1.243,117,2.326,118,1.871,119,1.5,120,1.276,121,0.956,122,2.581,124,0.981,126,1.152,127,2.833,128,2.442,129,2.769,130,2.519,131,2.833,132,2.683,133,2.644,134,2.833,135,2.644,136,2.644,137,2.644,138,2.71,139,2.497,140,1.274,141,1.818,142,2.778,154,1.732,157,2.582,158,2.582,159,0.003,160,0.005,161,0.003,168,1.929,194,0.717,209,3.171,221,2.743,227,1.778,231,1.984,236,1.984,237,1.323,245,1.984,282,1.323,358,2.067,455,0.995,460,2.37,489,0.669,496,1.468,498,0.685,509,1.126,513,1.071,541,1.252,855,3.872,886,3.496,887,3.173,942,4.335,944,2.026,957,2.474,971,3.553,993,1.491,1021,2.026,1039,3.33,1040,1.934,1041,2.665,1042,1.323,1043,2.131,1044,2.131,1045,1.541,1046,3.194,1047,1.541,1048,3.249,1049,2.131,1050,3.194,1051,4.787,1052,2.131,1053,3.194,1054,1.541,1055,2.131,1056,1.541,1057,3.037,1058,2.131,1059,2.131,1060,3.194,1061,3.194,1062,2.131,1063,3.194,1064,2.899,1065,2.026,1066,2.899,1067,2.026,1068,2.899,1069,2.026,1070,2.899,1071,2.026,1072,3.477,1073,2.026,1074,2.899,1075,2.026,1076,3.477,1077,2.026,1078,3.477,1079,2.026,1080,3.477,1081,2.026,1082,3.477,1083,2.026,1084,3.477,1085,2.026,1086,3.477,1087,2.026,1088,3.477,1089,2.026,1090,4.56,1091,3.532,1092,2.026,1093,2.131,1094,2.131,1095,2.131,1096,4.257,1097,2.131,1098,2.131,1099,2.131,1100,4.551,1101,2.832,1102,2.131,1103,3.553,1104,3.095,1105,2.981,1106,2.131,1107,3.095,1108,3.095,1109,2.899,1110,2.753,1111,2.389,1112,2.131,1113,3.33,1114,2.026,1115,2.026,1116,2.131,1117,2.026,1118,2.026,1119,2.026,1120,2.026,1121,1.492,1122,5.513,1123,3.477,1124,2.131,1125,2.131,1126,2.131,1127,2.131,1128,3.194,1129,2.131,1130,2.131,1131,2.131,1132,3.194,1133,2.131,1134,2.131,1135,2.131,1136,3.194,1137,2.131,1138,1.934,1139,2.131,1140,2.131,1141,2.131,1142,2.131,1143,2.131,1144,3.477,1145,3.353,1146,2.131,1147,2.131,1148,2.131,1149,2.131,1150,2.131,1151,2.131,1152,2.131,1153,2.131,1154,2.131,1155,2.131,1156,2.131,1157,2.131,1158,2.131,1159,2.131]],["title/interfaces/CMWRevitalization.html",[0,0.085,1113,2.55]],["body/interfaces/CMWRevitalization.html",[0,0.154,2,0.634,3,0.055,4,0.048,5,0.041,8,0.577,9,1.032,10,2.283,11,2.577,12,1.494,13,2.035,14,2.266,15,0.124,16,0.504,18,1.628,20,1.337,22,0.604,23,1.006,24,0.905,25,0.009,26,1.381,27,0.294,29,0.919,30,1.286,31,0.139,32,0.941,33,0.987,34,0.879,35,1.036,36,0.512,37,0.5,38,1.063,39,1.5,40,1.693,47,0.141,64,0.839,67,0.315,74,2.685,81,2.709,83,1.177,86,0.475,89,1.596,93,2.961,94,1.093,95,1.392,101,0.941,102,0.919,103,0.048,105,0.252,106,0.487,107,0.487,108,0.714,109,1.932,110,0.963,111,0.856,112,1.222,113,0.963,114,0.452,115,0.788,116,1.241,117,2.321,118,1.861,119,1.494,120,1.271,121,0.954,122,2.577,124,0.977,126,1.15,127,2.83,128,2.436,129,2.762,130,2.515,131,2.83,132,2.68,133,2.64,134,2.83,135,2.64,136,2.64,137,2.64,138,2.706,139,2.492,140,1.272,141,1.815,142,2.774,154,1.722,157,2.578,158,2.578,159,0.003,160,0.005,161,0.003,168,1.918,194,0.711,209,3.164,221,2.742,227,1.768,231,1.973,236,1.973,237,1.313,245,1.973,282,1.313,358,2.062,455,0.987,460,2.361,489,0.664,496,1.464,498,0.679,509,1.118,513,1.063,541,1.242,855,3.866,886,3.491,887,3.256,942,4.321,944,2.01,957,2.46,971,3.539,993,1.482,1021,2.01,1039,3.315,1040,1.919,1041,2.657,1042,1.313,1043,2.115,1044,2.115,1045,1.529,1046,3.176,1047,1.529,1048,3.24,1049,2.115,1050,3.176,1051,4.774,1052,2.115,1053,3.176,1054,1.529,1055,2.115,1056,1.529,1057,3.02,1058,2.115,1059,2.115,1060,3.176,1061,3.176,1062,2.115,1063,3.176,1064,2.882,1065,2.01,1066,2.882,1067,2.01,1068,2.882,1069,2.01,1070,2.882,1071,2.01,1072,3.462,1073,2.01,1074,2.882,1075,2.01,1076,3.462,1077,2.01,1078,3.462,1079,2.01,1080,3.462,1081,2.01,1082,3.462,1083,2.01,1084,3.462,1085,2.01,1086,3.462,1087,2.01,1088,3.462,1089,2.01,1090,4.545,1091,3.53,1092,2.01,1093,2.115,1094,2.115,1095,2.115,1096,4.241,1097,2.115,1098,2.115,1099,2.115,1100,3.626,1101,2.823,1102,2.115,1103,3.184,1104,3.085,1105,1.481,1106,2.115,1107,3.085,1108,3.085,1109,2.882,1110,2.744,1111,2.375,1112,2.115,1113,3.685,1114,4.031,1115,4.031,1116,2.115,1117,4.031,1118,2.01,1119,4.031,1120,2.01,1121,2.969,1122,5.508,1123,3.462,1124,2.115,1125,2.115,1126,2.115,1127,2.115,1128,3.176,1129,2.115,1130,2.115,1131,2.115,1132,3.176,1133,2.115,1134,2.115,1135,2.115,1136,3.176,1137,2.115,1138,1.919,1139,2.115,1140,2.115,1141,2.115,1142,2.115,1143,2.115,1144,3.462,1145,3.349,1146,2.115,1147,2.115,1148,2.115,1149,2.115,1150,2.115,1151,2.115,1152,2.115,1153,2.115,1154,2.115,1155,2.115,1156,2.115,1157,2.115,1158,2.115,1159,2.115]],["title/classes/ClinicAdminViewSamplesComponent.html",[103,0.044,774,3.306]],["body/classes/ClinicAdminViewSamplesComponent.html",[0,0.11,3,0.07,4,0.061,5,0.053,8,1.037,15,0.159,16,0.603,22,0.593,23,0.969,24,0.691,25,0.009,27,0.371,31,0.178,34,1.156,36,0.655,37,0.64,39,0.989,47,0.07,50,1.613,54,0.792,67,0.348,74,2.898,77,1.774,78,2.106,86,1.071,90,2.58,94,1.727,95,3.136,98,1.91,103,0.075,105,0.524,106,0.876,107,0.876,108,1.201,112,1.215,114,1.166,115,1.089,116,1.263,120,1.139,121,0.943,126,1.046,140,1.231,146,1.959,150,2.408,159,0.004,160,0.006,161,0.004,165,1.841,177,1.81,208,2.025,213,2.361,214,2.361,215,1.731,216,2.062,220,1.767,229,2.142,287,2.58,298,2.062,307,1.087,310,0.85,311,0.793,313,0.85,315,0.85,317,1.193,318,1.495,320,1.826,325,1.966,327,2.278,335,3.173,336,1.402,337,1.369,375,3.032,392,2.785,410,0.831,411,3.518,412,1.591,413,4.361,415,1.395,419,2.717,420,1.096,421,1.395,422,3.207,424,1.395,430,1.234,435,1.234,455,1.774,456,2.116,458,2.494,466,2.944,467,2.361,468,2.944,469,2.511,470,2.944,480,2.361,481,2.503,482,2.43,483,2.808,484,2.322,489,1.575,490,3.689,496,1.673,497,2.116,498,1.53,500,3.976,501,1.395,502,1.469,503,2.207,508,2.798,512,1.838,513,1.361,530,2.021,537,2.583,542,2.708,543,2.708,549,2.947,550,1.959,551,1.863,552,2.295,553,2.295,554,2.173,555,2.295,556,2.295,557,1.591,558,1.548,559,2.511,560,2.295,574,1.361,577,2.097,639,3.056,640,2.821,644,1.395,680,1.548,750,2.354,753,2.574,774,6.508,776,7.248,900,4.284,1101,2.361,1160,7.248,1161,2.864,1162,6.615,1163,6.615,1164,4.95,1165,4.393,1166,4.646,1167,4.95,1168,6.615,1169,3.987,1170,6.615,1171,5.368,1172,4.284,1173,4.323,1174,5.725,1175,5.725,1176,5.654,1177,5.725,1178,5.725,1179,3.052,1180,4.078,1181,3.286,1182,4.078,1183,3.601,1184,4.078,1185,5.725,1186,5.725,1187,3.052,1188,3.601,1189,4.393,1190,4.078,1191,4.078,1192,4.078,1193,4.078,1194,5.055,1195,3.886,1196,4.284,1197,4.078,1198,4.021,1199,4.284,1200,4.284,1201,4.284,1202,4.078,1203,2.58,1204,3.45,1205,2.503,1206,3.45,1207,3.45,1208,5.725,1209,4.078,1210,5.725,1211,4.078,1212,5.725,1213,4.078,1214,3.052,1215,4.078,1216,2.26,1217,3.052,1218,3.052,1219,4.078,1220,2.708,1221,4.078,1222,3.052,1223,4.284,1224,3.802,1225,4.078,1226,2.75,1227,2.75,1228,3.052,1229,3.052,1230,3.052,1231,3.304,1232,2.574,1233,3.052,1234,3.052,1235,3.052,1236,3.052,1237,3.052,1238,3.052,1239,3.052,1240,4.078,1241,4.078,1242,3.286,1243,3.286,1244,4.078,1245,4.078,1246,3.286]],["title/classes/ClinicHandlerComponent.html",[103,0.044,700,2.934]],["body/classes/ClinicHandlerComponent.html",[0,0.069,3,0.061,4,0.054,5,0.046,8,0.943,9,0.85,10,1.653,15,0.139,16,0.548,19,0.934,22,0.61,23,1.018,24,0.65,25,0.009,27,0.379,31,0.156,34,1.098,36,0.574,37,0.56,39,1.295,40,1.469,47,0.061,50,1.466,61,1.136,63,1.54,67,0.24,77,1.613,78,2.014,85,1.574,86,1.183,99,1.246,100,2.371,103,0.036,104,2.506,105,0.487,106,0.796,107,0.796,108,1.155,112,1.196,114,1.125,115,1.112,116,1.311,119,0.835,121,0.955,124,0.546,126,0.72,132,1.08,140,1.213,141,0.779,150,2.07,159,0.003,160,0.005,161,0.003,165,0.916,177,0.694,179,1.005,181,0.916,182,0.874,183,1.355,184,1.939,189,1.874,194,1.163,195,1.367,197,0.968,199,1.319,204,1.66,208,2.168,212,2.022,216,2.786,221,2.388,307,0.988,310,0.744,311,0.694,313,0.744,315,0.744,317,1.085,318,1.407,319,3.655,320,1.845,325,1.993,326,2.96,327,1.653,328,2.151,329,3.701,335,2.884,336,1.505,337,1.223,339,3.004,381,2.584,386,3.977,391,2.151,392,2.809,410,0.727,411,3.382,412,1.392,414,2.951,415,1.221,416,5.607,417,2.253,418,2.06,419,2.518,420,0.959,421,1.221,422,3.046,423,2.06,424,1.781,425,1.515,426,1.515,427,2.336,428,1.431,430,1.08,435,1.08,455,2.546,456,3.037,457,2.685,458,2.707,459,2.607,460,2.653,461,3.138,462,2.685,463,2.685,464,2.685,465,2.332,484,2.156,488,2.784,489,1.653,490,3.471,491,2.146,492,4.142,493,4.142,494,3.456,495,5.37,496,1.251,497,1.319,498,1.44,499,2.685,501,1.221,502,1.285,503,1.736,510,1.515,511,1.56,525,2.585,526,2.499,527,3.352,530,1.005,534,2.876,537,2.698,549,2.799,550,1.781,551,1.694,552,2.087,553,3.004,554,1.976,555,2.087,556,2.087,557,1.392,558,1.355,559,3.069,560,3.375,561,3.377,562,3.484,563,3.242,564,3.139,565,2.499,566,3.242,567,3.242,568,1.773,569,2.499,570,3.242,571,1.773,572,3.242,574,1.191,634,2.507,637,3.151,639,3.092,640,2.911,644,1.221,680,2.332,681,3.151,700,5.59,701,6.373,708,2.507,715,2.507,750,3.004,816,2.507,986,4.741,989,1.56,993,1.613,1101,3.19,1160,7.313,1189,4.766,1195,3.471,1203,1.608,1214,3.894,1220,2.37,1222,2.671,1226,2.95,1227,2.95,1231,4.142,1232,3.285,1247,3.151,1248,6.142,1249,6.142,1250,6.142,1251,6.142,1252,6.142,1253,6.142,1254,5.423,1255,4.596,1256,6.75,1257,6.75,1258,6.75,1259,6.75,1260,3.569,1261,3.655,1262,3.456,1263,3.569,1264,3.569,1265,3.569,1266,3.569,1267,3.569,1268,3.569,1269,3.569,1270,3.569,1271,3.569,1272,3.569,1273,3.569,1274,3.569,1275,3.569,1276,5.96,1277,3.569,1278,4.595,1279,3.569,1280,4.595,1281,3.569,1282,4.595,1283,3.569,1284,3.569,1285,3.569,1286,3.569,1287,3.569,1288,3.569,1289,3.569,1290,5.44,1291,3.569,1292,3.569,1293,3.569,1294,3.569,1295,5.204,1296,3.569,1297,3.569,1298,3.569,1299,3.569,1300,3.569,1301,1.66,1302,3.569,1303,2.671,1304,3.569,1305,3.569,1306,3.569,1307,3.569,1308,3.569,1309,3.569,1310,3.569,1311,3.569,1312,3.569,1313,3.569,1314,2.876,1315,3.569,1316,2.876,1317,5.204,1318,3.569,1319,5.204,1320,3.569,1321,5.204,1322,3.569,1323,5.204,1324,3.569,1325,5.204,1326,3.569,1327,2.151,1328,2.151,1329,3.136,1330,3.569,1331,3.569,1332,3.569,1333,3.569,1334,3.569,1335,3.569,1336,2.507,1337,3.569,1338,2.37,1339,2.507,1340,3.151,1341,3.569]],["title/classes/CmwMenuComponent.html",[103,0.044,835,2.934]],["body/classes/CmwMenuComponent.html",[3,0.083,4,0.073,5,0.063,8,0.882,15,0.19,16,0.681,19,0.894,22,0.602,23,0.912,25,0.009,27,0.334,31,0.213,34,1.23,36,0.783,37,0.764,47,0.083,50,1.82,67,0.224,86,0.965,99,1.547,100,2.503,103,0.049,105,0.575,106,0.989,107,0.989,108,1.083,112,1.247,114,1.029,115,1.194,116,1.34,121,0.968,126,0.894,140,0.989,150,2.319,159,0.005,160,0.006,161,0.005,165,1.249,184,2.114,194,1.443,195,1.697,208,2.192,212,2.265,307,1.227,310,1.015,311,0.947,313,1.015,315,1.015,317,1.347,318,1.61,320,1.829,325,2.019,326,2.991,327,2.052,337,1.171,381,2.895,392,2.964,403,2.698,410,0.992,419,2.821,420,1.309,421,1.666,430,1.473,435,1.473,455,2.713,456,3.235,457,3.171,458,2.713,459,3.078,460,2.972,461,3.515,462,3.171,463,3.171,464,3.171,465,2.753,489,1.347,492,4.186,493,4.186,496,0.992,498,1.648,501,1.666,502,1.753,503,2.156,510,2.067,511,2.129,525,3.209,526,3.103,527,3.209,530,1.371,549,3.136,550,2.211,551,2.103,552,2.591,553,2.591,554,2.453,555,2.591,556,2.591,557,1.899,558,1.848,559,3.29,560,3.562,561,3.724,562,3.843,563,3.71,564,3.592,565,3.103,566,3.71,567,3.71,568,2.418,569,3.103,570,3.71,571,2.418,572,3.71,574,1.624,576,3.233,577,2.504,580,4.299,582,2.264,583,3.419,584,3.419,639,3.136,640,2.895,835,5.899,837,6.334,855,3.372,1342,7.963,1343,6.461,1344,4.868,1345,4.868,1346,4.868,1347,4.868,1348,4.868,1349,4.868,1350,4.868,1351,4.868,1352,4.868,1353,4.868,1354,4.868,1355,4.868,1356,2.81,1357,2.597,1358,2.81,1359,2.81]],["title/interfaces/Confirm.html",[0,0.085,212,1.245]],["body/interfaces/Confirm.html",[0,0.176,2,0.882,3,0.141,4,0.067,5,0.058,8,0.803,9,1.201,15,0.173,16,0.639,18,1.707,19,0.839,20,1.38,22,0.6,23,0.949,24,0.907,25,0.009,26,1.547,47,0.157,54,0.957,60,1.792,64,0.977,67,0.403,75,1.31,88,1.192,91,1.202,94,1.387,99,1.452,119,1.419,152,0.713,159,0.004,160,0.006,161,0.004,162,3.995,163,2.129,164,4.377,166,3.693,167,3.571,168,2.432,169,3.013,170,2.129,171,2.129,172,3.156,173,3.74,174,2.129,175,2.804,176,2.024,177,1.653,178,3.216,179,1.948,180,2.625,181,2.063,182,2.053,183,3.053,184,1.952,185,2.202,186,2.202,187,1.778,188,2.062,189,2.185,190,2.303,191,2.821,192,3.013,193,2.202,194,1.545,195,1.816,196,2.202,197,1.13,198,2.303,199,1.639,200,2.202,201,3.994,202,3.458,203,2.129,204,3.458,205,2.697,206,3.216,207,2.303,208,2.216,209,2.502,210,3.216,211,1.086,212,2.497,213,1.829,214,1.829,215,3.306,216,2.804,217,3.571,218,2.202,219,2.202,220,1.759,221,1.31,222,3.216,223,2.202,224,2.202,225,1.829,226,2.202,227,1.639,228,2.202,229,1.138,230,2.202,231,1.829,232,2.202,233,2.202,234,2.202,235,3.013,236,2.502,237,1.829,238,3.013,239,3.013,240,2.652,241,3.013,242,2.652,243,3.013,244,3.013,245,2.502,246,3.013,247,3.013,248,3.693,249,3.013,250,4.163,251,3.013,252,3.013,253,3.013,254,3.013,255,3.013,256,3.013,257,3.013,258,4.089,259,3.013,260,3.013,261,3.013,262,3.013,263,3.013,264,2.202,265,2.202,266,2.129,267,3.013,268,2.202,269,2.202,270,3.693,271,2.202,272,2.202,273,2.202,274,2.202,275,2.202,276,2.202,277,3.693,278,2.202,279,2.202,280,2.202,281,2.202,282,2.502,283,3.013,284,2.202,285,2.202,286,2.202,287,1.998,288,2.202,289,2.202,290,2.062,291,3.224,292,2.914,293,2.914,294,2.202,295,2.202]],["title/injectables/CultureCollectionAPIService.html",[30,1.187,1145,1.723]],["body/injectables/CultureCollectionAPIService.html",[0,0.15,3,0.049,4,0.043,5,0.037,8,0.801,9,0.955,10,2.076,11,2.521,12,1.737,13,1.984,14,2.373,15,0.112,18,1.584,20,1.368,22,0.602,23,0.988,24,0.9,25,0.009,26,1.344,27,0.279,29,0.828,30,1.188,31,0.125,32,0.848,33,0.89,34,1,35,0.934,36,0.461,37,0.45,38,0.958,39,1.561,40,1.673,47,0.138,64,0.976,67,0.383,74,2.674,81,2.778,83,1.634,86,0.66,89,1.475,93,2.743,94,1.232,95,1.255,101,0.848,102,0.828,103,0.044,105,0.35,106,0.676,107,0.676,108,0.66,109,2.089,110,1.337,111,1.188,112,1.197,113,0.868,114,0.407,115,0.997,116,1.315,117,2.534,118,1.92,119,1.737,120,1.478,121,1.011,122,2.73,124,0.926,126,1.176,127,2.797,128,2.358,129,2.674,130,2.461,131,2.797,132,2.647,133,2.584,134,2.797,135,2.584,136,2.584,137,2.584,138,2.648,139,2.419,140,1.245,141,1.776,142,2.714,154,1.592,157,2.514,158,2.514,159,0.003,160,0.004,161,0.003,165,1.996,168,1.772,194,0.641,209,3.313,221,2.751,227,1.634,231,1.823,236,1.823,237,1.184,245,1.823,282,1.184,317,0.921,320,1.675,358,2.159,455,0.89,460,2.745,489,0.921,496,1.636,498,0.943,509,1.007,513,1.475,530,2.191,541,1.119,855,3.862,886,3.545,887,3.302,897,1.812,934,1.591,942,3.821,944,2.79,956,2.016,957,3.113,971,4.116,993,1.37,1021,1.812,1039,3.773,1040,5.005,1041,3.193,1042,1.184,1043,1.906,1044,1.906,1045,1.378,1046,2.935,1047,1.378,1048,2.429,1049,1.906,1050,2.935,1051,4.585,1052,1.906,1053,2.935,1054,1.378,1055,1.906,1056,1.378,1057,2.79,1058,1.906,1059,1.906,1060,2.935,1061,2.935,1062,1.906,1063,2.935,1064,2.663,1065,1.812,1066,2.663,1067,1.812,1068,2.663,1069,1.812,1070,2.663,1071,1.812,1072,3.248,1073,1.812,1074,2.663,1075,1.812,1076,3.248,1077,1.812,1078,3.248,1079,1.812,1080,3.248,1081,1.812,1082,3.248,1083,1.812,1084,3.248,1085,1.812,1086,3.248,1087,1.812,1088,3.248,1089,1.812,1090,4.341,1091,3.504,1092,1.812,1093,1.906,1094,1.906,1095,1.906,1096,4.02,1097,1.906,1098,1.906,1099,1.906,1100,3.402,1101,2.696,1102,1.906,1103,3.623,1104,1.992,1105,1.335,1106,1.906,1107,1.992,1108,1.992,1109,2.663,1110,1.772,1111,2.195,1112,1.906,1113,3.773,1114,1.812,1115,1.812,1116,1.906,1117,1.812,1118,1.812,1119,1.812,1120,1.812,1121,1.335,1122,5.502,1123,3.939,1124,1.906,1125,1.906,1126,1.906,1127,1.906,1128,2.935,1129,1.906,1130,1.906,1131,1.906,1132,2.935,1133,1.906,1134,1.906,1135,1.906,1136,2.935,1137,1.906,1138,1.73,1139,1.906,1140,1.906,1141,1.906,1142,1.906,1143,1.906,1144,3.939,1145,3.334,1146,4.02,1147,4.02,1148,4.02,1149,4.02,1150,2.935,1151,2.935,1152,2.935,1153,2.935,1154,2.935,1155,2.935,1156,2.935,1157,2.935,1158,2.935,1159,2.935,1360,4.419,1361,4.419,1362,4.419,1363,4.419,1364,4.419,1365,3.902,1366,3.902,1367,4.419,1368,4.419,1369,2.87,1370,2.87,1371,2.87,1372,2.87,1373,2.87,1374,2.87,1375,2.87,1376,2.87,1377,2.87,1378,2.87,1379,2.87,1380,2.87,1381,2.87,1382,2.87]],["title/interfaces/DatabaseManagementLogs.html",[0,0.085,65,2.194]],["body/interfaces/DatabaseManagementLogs.html",[0,0.17,1,2.167,2,0.748,3,0.064,4,0.057,5,0.049,6,1.934,7,1.934,8,1.146,9,1.233,10,2.64,11,2.713,12,1.969,13,1.837,14,2.716,15,0.147,16,0.569,17,3.71,18,1.772,19,1.087,20,1.501,21,4.356,22,0.612,23,1.082,24,0.903,25,0.009,26,1.469,27,0.319,28,2.766,29,1.085,30,1.453,31,0.164,32,1.111,33,1.165,34,0.827,35,1.224,36,0.604,37,0.59,38,1.255,39,1.504,40,1.555,41,4.212,42,2.006,43,2.779,44,2.006,45,2.779,46,2.006,47,0.152,48,1.998,49,3.833,50,2.49,51,4.693,52,2.995,53,4.061,54,0.957,55,2.995,56,2.995,57,4.061,58,4.061,59,1.897,60,1.596,61,1.599,62,2.084,63,1.837,64,0.963,65,3.142,66,2.685,67,0.173,68,2.685,69,2.084,70,2.113,71,2.167,72,2.685,73,2.084,74,1.354,75,1.111,76,2.084,77,1.675,78,1.453,79,2.779,80,2.084,81,2.724,82,2.084,83,1.39,84,3.923,85,1.138,86,0.561,87,4.228,88,1.453,89,1.255,90,2.436,91,0.729,92,3.254,93,2.638,94,1.446,95,1.644,96,3.254,97,2.995,98,1.803,99,1.294,100,1.522,101,1.111,102,1.085,103,0.038,104,2.538,105,0.298,106,0.575,107,0.575,108,1.033,109,1.635,110,1.138,111,1.011,112,1.144,113,1.138,114,0.534,115,0.619,116,1.094,117,2.308,118,1.627,119,1.714,120,1.458,121,0.875,122,2.364,123,2.084,124,1.272,125,4.457,126,1.15,127,2.7,128,2.327,129,2.491,130,2.308,131,2.7,132,2.378,133,2.422,134,2.7,135,2.422,136,2.422,137,2.422,138,2.483,139,2.422,140,1.167,141,1.665,142,2.545,143,2.084,144,2.084,145,2.084,146,1.849,147,2.436,148,2.436,149,2.084,150,2.32,151,2.084,152,0.604,153,1.467,154,1.354,155,2.084,156,1.998,157,1.194,158,1.194,159,0.004,160,0.005,161,0.004]],["title/injectables/DatabaseManagementService.html",[30,1.187,1383,3.56]],["body/injectables/DatabaseManagementService.html",[3,0.091,4,0.08,5,0.098,8,1.498,9,1.171,11,2.563,13,1.715,15,0.208,22,0.586,24,0.862,25,0.009,27,0.368,29,1.533,30,1.839,31,0.232,32,1.57,33,1.647,34,1.265,35,1.729,39,1.569,40,1.688,47,0.117,64,1.204,67,0.402,81,2.403,83,2.529,86,1.021,101,1.57,102,1.533,103,0.068,105,0.542,106,1.047,107,1.047,108,1.234,109,2.561,110,2.07,111,1.839,112,1.163,113,1.608,114,0.754,115,1.316,117,2.561,118,1.806,119,1.243,121,0.971,122,2.623,126,1.047,127,2.688,128,2.799,130,2.289,131,2.688,132,2.502,133,2.403,134,2.688,135,2.403,136,2.403,137,2.403,138,2.463,139,2.403,140,1.158,141,1.652,156,3.129,157,2.173,158,2.173,159,0.005,160,0.007,161,0.005,165,2.05,203,3.286,221,2.021,317,1.426,320,1.628,489,1.426,498,1.459,513,2.283,530,2.251,548,4.319,684,3.518,897,3.354,934,2.945,956,3.732,957,4.109,1022,3.758,1383,7.03,1384,7.301,1385,4.692,1386,5.663,1387,6.841,1388,6.841,1389,5.313,1390,6.841,1391,8.268,1392,5.313,1393,7.991,1394,6.841,1395,6.041,1396,7.301,1397,6.841,1398,6.841,1399,5.313,1400,6.681,1401,6.841,1402,6.841,1403,5.313,1404,4.692,1405,6.841,1406,5.313,1407,7.567,1408,6.841,1409,5.313,1410,6.841,1411,5.313]],["title/interfaces/DatabasePrivilege.html",[0,0.085,202,2.054]],["body/interfaces/DatabasePrivilege.html",[0,0.177,2,0.892,3,0.128,4,0.067,5,0.058,8,0.812,9,1.204,15,0.175,16,0.644,18,1.711,19,0.846,20,1.384,22,0.595,23,0.952,24,0.905,25,0.009,26,1.549,47,0.157,54,0.962,60,1.805,64,0.981,67,0.411,75,1.324,88,1.204,91,1.203,94,1.397,99,1.463,119,1.43,152,0.72,159,0.004,160,0.006,161,0.004,162,4.001,163,2.152,164,4.384,166,3.709,167,3.587,168,2.45,169,3.035,170,2.152,171,2.152,172,3.17,173,3.754,174,2.152,175,2.815,176,2.039,177,1.657,178,3.234,179,1.959,180,2.64,181,2.07,182,2.058,183,3.062,184,1.96,185,2.225,186,2.225,187,1.797,188,2.084,189,2.201,190,2.32,191,2.841,192,3.035,193,2.225,194,1.553,195,1.826,196,2.225,197,1.133,198,2.32,199,1.656,200,2.225,201,4.006,202,3.751,203,2.152,204,3.839,205,2.712,206,3.234,207,2.32,208,2.217,209,2.52,210,3.234,211,1.098,212,2.4,213,1.848,214,1.848,215,2.594,216,2.201,217,2.152,218,2.225,219,2.225,220,1.761,221,1.324,222,3.234,223,2.225,224,2.225,225,1.848,226,2.225,227,1.656,228,2.225,229,1.15,230,2.225,231,1.848,232,2.225,233,2.225,234,2.225,235,3.035,236,2.52,237,1.848,238,3.035,239,3.035,240,2.672,241,3.035,242,2.672,243,3.035,244,3.035,245,2.52,246,3.035,247,3.035,248,3.709,249,3.035,250,4.173,251,3.035,252,3.035,253,3.035,254,3.035,255,3.035,256,3.035,257,3.035,258,4.1,259,3.035,260,3.035,261,3.035,262,3.035,263,3.035,264,2.225,265,2.225,266,2.152,267,3.035,268,2.225,269,2.225,270,3.709,271,2.225,272,2.225,273,2.225,274,2.225,275,2.225,276,2.225,277,3.709,278,2.225,279,2.225,280,2.225,281,2.225,282,2.52,283,3.035,284,2.225,285,2.225,286,2.225,287,2.019,288,2.225,289,2.225,290,2.084,291,3.234,292,2.935,293,2.935,294,2.225,295,2.225]],["title/injectables/DiagnosticClinicAPIService.html",[30,1.187,422,1.875]],["body/injectables/DiagnosticClinicAPIService.html",[0,0.138,3,0.07,4,0.062,5,0.053,8,1.371,9,0.917,10,1.823,11,2.548,12,1.681,13,1.897,15,0.16,19,0.917,20,1.326,22,0.589,23,0.97,24,0.861,25,0.009,26,1.307,27,0.349,29,1.181,30,1.543,31,0.179,32,1.209,33,1.269,34,1.158,35,1.332,36,0.658,37,0.642,38,1.366,39,1.578,40,1.682,47,0.13,54,0.566,67,0.349,74,3.081,77,1.779,78,2.3,81,2.688,83,2.122,86,0.857,88,1.1,89,1.366,91,0.969,93,2.725,94,1.515,101,1.209,102,1.912,103,0.057,105,0.455,106,0.878,107,0.878,108,1.202,109,2.174,110,1.737,111,1.543,112,1.197,113,1.238,114,0.581,115,1.183,116,1.171,117,2.487,118,1.806,119,1.77,120,1.43,121,1.005,122,2.676,126,1.047,127,2.782,128,2.782,130,2.437,131,2.782,132,2.612,133,2.558,134,2.782,135,2.558,136,2.558,137,2.558,138,2.622,139,2.491,140,1.233,141,1.758,142,1.366,146,2.589,147,2.587,148,2.587,152,1.065,156,3.129,157,2.403,158,2.403,159,0.004,160,0.006,161,0.004,165,1.941,172,1.737,176,2.212,194,1.282,197,0.552,220,1.755,221,2.235,225,3.235,227,1.513,229,2.273,240,1.789,242,1.789,291,1.641,317,1.196,320,1.674,358,1.782,401,2.875,422,3.694,489,1.196,496,1.598,498,1.224,513,1.915,530,2.131,548,3.623,668,2.851,680,1.554,684,2.952,897,2.584,934,2.268,956,2.875,957,3.695,989,1.789,1020,2.952,1022,3.895,1042,1.688,1101,2.963,1110,1.641,1111,3.292,1216,4.63,1412,5.377,1413,5.74,1414,5.377,1415,5.377,1416,5.74,1417,5.74,1418,5.74,1419,4.093,1420,4.093,1421,4.295,1422,4.295,1423,4.093,1424,4.295,1425,4.093,1426,5.869,1427,4.093,1428,4.295,1429,4.093,1430,3.812,1431,4.96,1432,4.295,1433,5.377,1434,4.093,1435,4.295,1436,4.295,1437,4.295,1438,4.093,1439,3.812,1440,4.031,1441,2.757,1442,3.063,1443,2.183,1444,1.966,1445,4.295,1446,3.063,1447,4.295,1448,3.063,1449,3.061,1450,4.295,1451,3.061,1452,4.295,1453,3.063,1454,3.063,1455,3.063,1456,3.063,1457,3.063,1458,3.063,1459,3.063,1460,3.063,1461,3.063,1462,3.063,1463,3.063,1464,3.063,1465,3.063,1466,3.063,1467,3.063,1468,3.063,1469,3.063,1470,3.063,1471,3.063,1472,4.295,1473,3.063,1474,4.295,1475,3.063,1476,4.295,1477,4.295,1478,3.063,1479,3.063]],["title/interfaces/DiagnosticClinicLogs.html",[0,0.085,79,2.272]],["body/interfaces/DiagnosticClinicLogs.html",[0,0.17,1,2.195,2,0.762,3,0.066,4,0.058,5,0.05,6,1.969,7,1.969,8,1.158,9,1.236,10,2.65,11,2.72,12,1.976,13,1.85,14,2.72,15,0.15,16,0.577,17,3.683,18,1.777,19,0.965,20,1.503,21,3.865,22,0.609,23,1.084,24,0.898,25,0.009,26,1.474,27,0.321,28,2.794,29,1.104,30,1.472,31,0.167,32,1.131,33,1.187,34,0.838,35,1.246,36,0.615,37,0.601,38,1.277,39,1.508,40,1.562,41,4.23,42,2.042,43,2.816,44,2.042,45,2.816,46,2.042,47,0.152,48,2.024,49,3.865,50,2.496,51,4.705,52,3.034,53,3.034,54,0.965,55,3.034,56,3.034,57,3.034,58,3.034,59,1.921,60,1.617,61,1.611,62,2.122,63,1.748,64,0.916,65,2.719,66,2.713,67,0.176,68,2.713,69,2.122,70,2.128,71,2.195,72,2.713,73,2.122,74,1.379,75,1.131,76,2.122,77,1.981,78,1.718,79,3.287,80,2.122,81,2.733,82,2.122,83,1.415,84,3.947,85,1.158,86,0.572,87,4.253,88,1.472,89,1.277,90,2.467,91,0.738,92,3.287,93,2.657,94,1.461,95,1.674,96,3.287,97,3.034,98,1.827,99,1.311,100,1.542,101,1.131,102,1.104,103,0.038,104,2.549,105,0.303,106,0.586,107,0.586,108,1.041,109,1.656,110,1.158,111,1.029,112,1.15,113,1.158,114,0.543,115,0.631,116,1.101,117,2.322,118,1.637,119,1.726,120,1.468,121,0.881,122,2.379,123,2.122,124,1.277,125,4.478,126,1.155,127,2.709,128,2.343,129,2.511,130,2.322,131,2.709,132,2.39,133,2.437,134,2.709,135,2.437,136,2.437,137,2.437,138,2.498,139,2.437,140,1.174,141,1.675,142,2.561,143,2.122,144,2.122,145,2.122,146,1.873,147,2.467,148,2.467,149,2.122,150,2.331,151,2.122,152,0.615,153,1.493,154,1.379,155,2.122,156,2.024,157,1.216,158,1.216,159,0.004,160,0.005,161,0.004]],["title/components/ErrorComponent.html",[296,0.987,354,1.677]],["body/components/ErrorComponent.html",[3,0.106,4,0.093,5,0.08,15,0.241,16,0.792,19,1.04,22,0.495,25,0.009,27,0.346,31,0.27,47,0.106,54,1.121,61,1.348,64,0.811,67,0.373,70,2.168,91,1.014,103,0.062,105,0.489,121,0.709,124,1.291,126,1.167,159,0.006,160,0.007,161,0.006,165,1.584,177,1.461,197,1.166,211,1.513,220,1.461,296,1.81,297,2.476,298,2.707,299,2.783,300,2.621,301,2.783,302,2.783,307,1.428,308,3.652,309,2.783,310,1.95,311,1.819,313,1.567,315,1.567,317,1.567,318,1.758,320,1.651,325,1.478,336,1.841,337,1.119,343,2.476,344,2.387,345,2.783,346,2.783,347,3.8,348,2.476,349,3.8,350,2.476,351,2.783,352,2.408,353,2.783,354,3.201,355,2.783,356,2.476,357,2.476,358,2.178,359,3.652,360,2.476,361,2.476,362,2.476,363,3.388,364,2.476,365,2.167,366,2.783,367,2.476,368,2.344,369,2.783,370,2.476,371,2.344,372,2.476,373,2.344,374,2.408,375,2.01,376,2.783,377,2.783,415,2.113,484,2.844,530,1.739,1338,4.992,1480,6.796,1481,5.452,1482,8.103,1483,7.516,1484,5.452,1485,6.175,1486,6.175,1487,4.337,1488,5.452,1489,6.175,1490,6.175,1491,5.452,1492,6.175,1493,6.175,1494,6.175,1495,7.516,1496,7.516,1497,7.516,1498,6.057,1499,6.175]],["title/interfaces/ErrorLogs.html",[0,0.085,71,1.771]],["body/interfaces/ErrorLogs.html",[0,0.17,1,2.182,2,0.755,3,0.065,4,0.057,5,0.049,6,1.952,7,1.952,8,1.152,9,1.234,10,2.645,11,2.717,12,1.972,13,1.844,14,2.718,15,0.148,16,0.573,17,3.679,18,1.775,19,1.09,20,1.502,21,4.368,22,0.611,23,1.083,24,0.901,25,0.009,26,1.472,27,0.32,28,2.781,29,1.095,30,1.463,31,0.166,32,1.121,33,1.176,34,0.833,35,1.235,36,0.61,37,0.595,38,1.267,39,1.506,40,1.559,41,4.221,42,2.025,43,2.798,44,2.025,45,2.798,46,2.025,47,0.152,48,2.011,49,3.85,50,2.493,51,4.699,52,3.016,53,3.016,54,0.961,55,3.016,56,3.016,57,3.016,58,3.016,59,1.91,60,1.607,61,1.605,62,2.104,63,1.742,64,0.913,65,2.702,66,2.7,67,0.175,68,2.7,69,2.104,70,2.207,71,2.55,72,2.7,73,3.85,74,1.367,75,1.121,76,2.104,77,1.686,78,1.463,79,2.798,80,2.104,81,2.729,82,2.104,83,1.403,84,3.935,85,1.148,86,0.567,87,4.241,88,1.463,89,1.267,90,2.452,91,0.734,92,3.271,93,2.648,94,1.454,95,1.66,96,3.271,97,3.016,98,1.815,99,1.303,100,1.533,101,1.121,102,1.095,103,0.038,104,2.544,105,0.301,106,0.581,107,0.581,108,1.037,109,1.646,110,1.148,111,1.02,112,1.147,113,1.148,114,0.539,115,0.625,116,1.098,117,2.315,118,1.632,119,1.72,120,1.463,121,0.878,122,2.372,123,2.104,124,1.275,125,4.468,126,1.153,127,2.705,128,2.335,129,2.502,130,2.315,131,2.705,132,2.384,133,2.43,134,2.705,135,2.43,136,2.43,137,2.43,138,2.491,139,2.43,140,1.171,141,1.671,142,2.553,143,2.104,144,2.104,145,2.104,146,1.862,147,2.452,148,2.452,149,2.104,150,2.325,151,2.104,152,0.61,153,1.481,154,1.367,155,2.104,156,2.011,157,1.205,158,1.205,159,0.004,160,0.005,161,0.004]],["title/classes/ErrorsHandler.html",[103,0.044,1500,3.306]],["body/classes/ErrorsHandler.html",[3,0.103,4,0.09,5,0.078,8,1.452,15,0.235,22,0.487,25,0.009,27,0.395,29,1.735,31,0.263,34,1.313,40,1.405,47,0.127,50,1.694,67,0.341,70,2.649,86,1.196,103,0.083,105,0.635,106,1.132,107,1.132,108,1.196,109,1.82,111,1.617,112,1.077,114,1.05,115,1.376,116,1.281,121,0.69,140,0.92,159,0.006,160,0.007,161,0.006,165,1.898,287,2.711,307,1.521,317,1.542,320,1.507,325,1.44,399,4.457,410,1.225,419,2.408,420,1.617,421,2.058,489,1.542,498,1.578,530,2.084,561,3.937,574,2.007,684,3.804,748,4.67,869,5.311,897,3.797,926,3.334,936,5.311,971,4.632,986,4.225,1262,3.994,1480,6.456,1500,6.622,1501,6.456,1502,5.311,1503,7.397,1504,8.58,1505,7.379,1506,7.397,1507,6.015,1508,8.357,1509,6.015,1510,8.01,1511,7.397,1512,8.735,1513,6.015,1514,8.01,1515,7.397,1516,6.015,1517,6.015,1518,7.397,1519,6.015,1520,6.015,1521,6.015,1522,6.015,1523,6.015,1524,7.397,1525,7.397,1526,5.311,1527,6.015,1528,6.015,1529,6.015,1530,6.015,1531,5.311,1532,5.311,1533,6.531,1534,6.015,1535,6.015,1536,6.015,1537,6.015]],["title/modules/ErrorsModule.html",[585,2.194,743,3.103]],["body/modules/ErrorsModule.html",[3,0.109,4,0.096,5,0.107,18,1.296,25,0.009,27,0.419,29,1.835,31,0.278,47,0.109,67,0.353,70,2.514,103,0.063,140,0.973,152,1.022,159,0.006,160,0.007,161,0.006,332,2.781,343,2.551,354,3.427,391,3.833,420,1.71,550,2.176,551,2.07,585,3.159,587,3.271,590,3.393,591,4.224,592,4.224,593,4.224,594,4.224,596,3.833,597,3.271,598,4.468,599,5.182,600,4.016,601,4.831,602,4.831,603,4.016,604,4.016,605,4.831,609,4.016,610,4.016,611,4.016,612,4.016,613,4.417,614,5.375,615,4.224,617,4.224,618,5.182,619,2.985,686,4.831,720,3.393,733,4.224,734,4.016,735,5.727,743,6.341,744,5.588,749,5.375,750,3.671,752,6.757,796,5.126,865,5.126,971,3.526,1500,5.727,1501,5.126,1538,5.617,1539,5.617,1540,6.361,1541,6.361,1542,6.361,1543,6.361,1544,3.271,1545,6.361,1546,3.393,1547,3.393,1548,7.653,1549,7.653,1550,5.727,1551,5.126,1552,6.361,1553,7.653,1554,6.361,1555,7.653,1556,7.653,1557,6.361]],["title/modules/ErrorsRoutingModule.html",[585,2.194,1558,3.56]],["body/modules/ErrorsRoutingModule.html",[3,0.116,4,0.102,5,0.109,18,1.376,25,0.009,27,0.4,31,0.295,40,1.283,47,0.116,67,0.365,103,0.067,152,1.086,159,0.007,160,0.008,161,0.007,190,2.564,296,1.509,332,2.953,420,1.816,551,2.199,587,3.474,590,4.23,591,4.486,592,4.486,593,4.486,594,4.486,596,4.071,598,5.571,599,5.316,600,4.264,601,5.007,602,5.007,603,4.264,604,4.264,605,5.007,609,4.264,610,4.264,611,4.264,612,4.264,613,4.578,619,2.635,685,4.264,686,5.007,687,4.86,688,4.78,689,4.744,692,3.899,693,4.486,719,5.444,720,3.603,1505,5.964,1546,4.23,1547,4.23,1558,6.392,1559,6.755,1560,7.931,1561,6.755]],["title/injectables/FilterPipe.html",[30,1.187,741,3.103]],["body/injectables/FilterPipe.html",[3,0.088,4,0.078,5,0.067,8,0.935,9,0.714,13,1.293,15,0.202,22,0.564,23,0.609,24,0.835,25,0.009,27,0.238,30,1.804,31,0.226,47,0.088,50,2.226,54,0.714,64,1.038,67,0.309,70,1.488,78,1.804,85,2.257,91,0.905,103,0.051,105,0.409,108,1.114,111,1.804,112,0.751,116,1.18,118,1.1,121,0.592,141,2.042,159,0.005,160,0.007,161,0.005,165,1.324,177,1.536,197,1.105,211,1.264,221,1.524,229,2.155,296,2.002,307,0.98,317,1.399,320,1.051,337,1.432,339,3.874,375,2.428,391,4.045,398,2.859,402,4.319,405,3.72,431,3.934,458,1.599,480,3.797,483,2.849,496,1.367,530,1.453,640,3.122,741,5.24,886,2.127,934,2.859,991,4.237,1109,5.473,1562,4.555,1563,7.46,1564,6.712,1565,5.158,1566,6.712,1567,6.712,1568,6.712,1569,8.67,1570,7.901,1571,6.587,1572,5.022,1573,6.712,1574,5.158,1575,9.082,1576,7.55,1577,9.082,1578,7.523,1579,8.192,1580,5.158,1581,7.46,1582,5.158,1583,8.192,1584,5.158,1585,7.901,1586,7.46,1587,5.158,1588,5.158,1589,5.158,1590,5.158,1591,6.712,1592,7.901,1593,5.158,1594,5.158,1595,7.46,1596,5.158,1597,5.158,1598,5.158,1599,5.158,1600,5.158,1601,6.712,1602,6.712,1603,7.901,1604,5.158,1605,4.555]],["title/classes/HomeComponent.html",[103,0.044,791,3.103]],["body/classes/HomeComponent.html",[0,0.088,3,0.078,4,0.069,5,0.059,8,0.827,9,0.972,15,0.178,16,0.652,22,0.604,25,0.009,26,1.07,27,0.389,31,0.2,36,0.734,37,0.716,39,0.789,40,1.576,47,0.078,54,0.856,63,1.145,67,0.374,86,1.048,88,1.228,103,0.046,105,0.556,106,0.947,107,0.947,108,1.175,112,1.096,114,1.152,116,1.26,117,1.873,118,1.678,121,0.903,124,0.699,126,0.632,140,1.075,141,0.997,159,0.004,160,0.006,161,0.004,165,1.172,176,1.524,177,1.365,179,1.286,180,2.35,181,1.802,182,2.068,183,2.35,190,2.35,208,1.802,213,3.105,214,3.105,215,1.938,216,3.235,221,2.324,298,2.229,300,1.938,307,1.176,310,0.952,311,0.888,313,0.952,315,0.952,317,1.29,318,1.569,320,1.762,325,1.681,327,1.966,337,1.122,358,1.228,399,3.302,410,0.93,411,3.74,412,1.781,413,4.541,414,3.44,415,1.562,419,2.784,420,1.228,424,1.562,427,2.45,428,1.831,430,1.382,435,1.382,458,2.571,488,2.553,489,0.952,499,3.291,500,4.496,501,1.562,502,1.645,503,2.065,521,3.207,530,1.286,537,2.229,574,1.524,639,2.936,640,2.711,704,4.347,717,3.896,725,6.686,728,3.033,729,3.417,730,4.032,731,3.68,734,2.883,753,2.883,791,5.698,867,3.68,880,4.032,900,4.632,989,1.997,1036,3.73,1101,2.896,1138,4.889,1189,5.225,1214,3.417,1220,4.111,1222,6.316,1226,2.193,1227,2.193,1231,3.572,1242,3.68,1243,3.68,1246,3.68,1255,5.888,1261,6.393,1262,4.111,1314,3.68,1316,3.68,1336,3.207,1338,3.033,1339,3.207,1340,4.032,1357,3.302,1430,3.033,1606,4.032,1607,7.022,1608,7.022,1609,7.022,1610,7.868,1611,7.528,1612,4.567,1613,4.567,1614,4.632,1615,4.347,1616,5.633,1617,4.567,1618,6.647,1619,4.567,1620,5.466,1621,5.466,1622,7.022,1623,7.022,1624,6.067,1625,5.466,1626,6.2,1627,6.2,1628,7.022,1629,5.466,1630,4.567,1631,4.567,1632,4.567,1633,4.567,1634,4.567,1635,4.567,1636,4.567,1637,6.19,1638,6.19,1639,7.022,1640,4.567,1641,4.567,1642,3.417,1643,3.417,1644,4.567,1645,4.032,1646,4.567,1647,4.567,1648,4.567,1649,5.466,1650,4.032,1651,6.2,1652,6.2,1653,4.032,1654,4.632,1655,4.567,1656,3.68,1657,4.032,1658,4.032,1659,4.032,1660,4.032,1661,4.032,1662,4.032,1663,4.032,1664,4.032,1665,4.032,1666,4.032,1667,4.032,1668,4.032,1669,4.032,1670,4.032,1671,4.032,1672,4.567,1673,4.567,1674,6.19,1675,4.567,1676,6.19,1677,4.567,1678,6.19,1679,4.567,1680,6.19,1681,4.567,1682,4.567,1683,4.567,1684,6.19,1685,4.567,1686,4.567,1687,2.636,1688,4.567,1689,4.567]],["title/classes/LoadingComponent.html",[103,0.044,753,2.789]],["body/classes/LoadingComponent.html",[3,0.116,4,0.102,5,0.088,8,1.23,15,0.265,16,0.838,22,0.524,25,0.009,27,0.366,31,0.297,47,0.136,67,0.313,103,0.079,105,0.538,121,0.779,126,1.204,159,0.007,160,0.008,161,0.007,165,1.741,213,3.28,214,3.28,307,1.602,310,1.415,311,1.319,313,1.415,315,1.415,317,1.658,318,1.814,320,1.718,325,1.625,410,1.382,415,2.322,430,2.053,435,2.406,469,3.203,484,2.961,496,1.62,530,1.912,560,3.189,574,2.264,753,5.326,897,4.284,1484,5.992,1487,4.766,1491,7.022,1615,5.586,1690,5.992,1691,6.786,1692,6.786,1693,6.786,1694,6.786,1695,6.786,1696,6.786]],["title/interfaces/Location.html",[0,0.085,291,1.771]],["body/interfaces/Location.html",[0,0.177,2,0.892,3,0.128,4,0.067,5,0.058,8,0.812,9,1.204,15,0.175,16,0.644,18,1.711,19,0.846,20,1.384,22,0.595,23,0.952,24,0.903,25,0.009,26,1.57,47,0.157,54,0.962,60,1.805,64,0.981,67,0.404,75,1.324,88,1.204,91,1.203,94,1.397,99,1.463,119,1.43,152,0.72,159,0.004,160,0.006,161,0.004,162,4.001,163,2.152,164,4.384,166,3.709,167,3.587,168,2.45,169,3.035,170,2.152,171,2.152,172,3.17,173,3.754,174,2.152,175,2.815,176,2.039,177,1.657,178,3.234,179,1.959,180,2.64,181,2.07,182,2.058,183,3.062,184,1.96,185,2.225,186,2.225,187,1.797,188,2.084,189,2.201,190,2.32,191,2.841,192,3.035,193,2.225,194,1.553,195,1.826,196,2.225,197,1.133,198,2.32,199,1.656,200,2.225,201,4.006,202,3.473,203,2.152,204,3.473,205,2.712,206,3.234,207,2.32,208,2.217,209,2.52,210,3.234,211,1.098,212,2.4,213,1.848,214,1.848,215,2.594,216,2.201,217,2.152,218,2.225,219,2.225,220,1.761,221,1.324,222,3.234,223,2.225,224,2.225,225,1.848,226,2.225,227,1.656,228,2.225,229,1.15,230,2.225,231,1.848,232,2.225,233,2.225,234,2.225,235,3.035,236,2.52,237,1.848,238,3.035,239,3.035,240,2.672,241,3.035,242,2.672,243,3.035,244,3.035,245,2.52,246,3.035,247,3.035,248,3.709,249,3.035,250,4.173,251,3.035,252,3.035,253,3.035,254,3.035,255,3.035,256,3.035,257,3.035,258,4.1,259,3.035,260,3.035,261,3.035,262,3.035,263,3.035,264,2.225,265,2.225,266,2.152,267,3.035,268,2.225,269,2.225,270,3.709,271,2.225,272,2.225,273,2.225,274,2.225,275,2.225,276,2.225,277,3.709,278,2.225,279,2.225,280,2.225,281,2.225,282,2.52,283,3.035,284,2.225,285,2.225,286,2.225,287,2.019,288,2.225,289,2.225,290,2.084,291,3.369,292,3.754,293,3.754,294,2.225,295,2.225]],["title/injectables/LocationService.html",[30,1.187,1697,3.56]],["body/injectables/LocationService.html",[0,0.136,3,0.121,4,0.107,5,0.092,15,0.277,16,0.859,22,0.467,25,0.009,27,0.376,30,2.193,31,0.31,47,0.121,101,2.095,102,2.045,103,0.071,105,0.68,114,1.219,159,0.007,160,0.008,161,0.007,320,1.662,934,3.93,989,3.1,1697,6.575,1698,6.261,1699,7.584,1700,8.158]],["title/classes/LoginComponent.html",[103,0.044,688,2.662]],["body/classes/LoginComponent.html",[0,0.076,3,0.068,4,0.06,5,0.051,8,1.017,9,1.035,10,1.783,15,0.155,16,0.591,19,1.035,20,0.653,22,0.613,23,0.962,24,0.682,25,0.009,26,0.97,27,0.382,31,0.173,34,1.084,36,0.638,37,0.622,39,1.224,40,1.346,47,0.068,54,1.128,63,0.994,67,0.183,70,1.619,85,2.144,86,1.058,91,0.535,99,1.56,103,0.04,105,0.516,106,0.859,107,0.859,108,1.116,111,1.509,112,0.949,114,1.133,115,1.073,116,1.159,118,0.846,121,0.748,124,0.997,126,0.549,140,1.084,141,0.866,146,1.357,159,0.004,160,0.005,161,0.004,165,1.018,175,2.875,176,1.323,182,2.032,184,2.108,189,2.022,190,3.31,195,1.711,197,0.535,208,2.111,213,2.922,214,2.922,215,1.684,216,3.192,221,2.665,298,2.022,300,1.684,307,1.066,310,0.827,311,0.771,313,0.827,315,0.827,317,1.17,318,1.477,320,1.763,325,1.344,326,2.687,327,1.783,335,3.927,337,1.284,358,1.066,391,2.39,398,3.611,410,0.808,411,3.626,412,1.547,413,4.316,414,3.269,415,1.357,419,2.699,420,1.066,424,1.357,427,2.306,428,1.59,430,1.2,431,3.834,435,1.2,458,2.683,469,2.839,489,1.17,491,1.636,496,1.143,497,1.466,498,1.512,499,3.098,500,4.303,503,1.873,521,2.786,530,1.117,531,2.968,537,2.552,550,1.921,574,1.323,577,2.04,581,3.196,639,3.028,640,2.796,644,1.357,688,4.811,715,2.786,716,2.968,717,3.729,728,2.634,734,2.504,753,2.504,768,2.968,867,3.196,884,2.968,900,4.201,909,3.196,929,2.786,962,3.502,970,3.196,972,5.754,986,5.825,989,1.734,991,2.504,1036,4.27,1101,3.292,1138,4.811,1189,4.966,1214,2.968,1220,2.634,1222,4.876,1226,2.696,1227,2.696,1231,3.761,1242,3.196,1243,3.196,1246,3.196,1254,5.754,1255,5.596,1261,6.031,1276,6.856,1278,4.957,1280,6.257,1282,6.257,1301,1.844,1303,2.968,1314,3.196,1316,3.196,1336,3.943,1338,3.728,1339,3.943,1357,2.994,1400,4.957,1430,2.634,1614,4.201,1615,3.943,1616,5.302,1618,6.257,1620,4.957,1621,4.957,1624,5.71,1625,6.257,1642,2.968,1643,2.968,1645,3.502,1649,4.957,1650,3.502,1651,5.754,1652,5.754,1653,3.502,1654,4.201,1656,3.196,1657,3.502,1658,3.502,1659,3.502,1660,3.502,1661,3.502,1662,3.502,1663,3.502,1664,3.502,1665,3.502,1666,3.502,1667,3.502,1668,3.502,1669,3.502,1670,3.502,1671,3.502,1687,3.24,1701,3.502,1702,6.516,1703,6.516,1704,6.516,1705,6.516,1706,6.257,1707,6.516,1708,3.966,1709,3.966,1710,3.966,1711,5.614,1712,5.614,1713,3.966,1714,4.957,1715,4.957,1716,4.957,1717,4.957,1718,3.24,1719,6.856,1720,4.957,1721,4.957,1722,3.966,1723,3.966,1724,3.966,1725,3.966,1726,5.614,1727,5.614,1728,3.966,1729,3.966,1730,3.966,1731,3.966,1732,5.614,1733,7.086,1734,7.086,1735,5.614,1736,5.614,1737,5.614,1738,5.614,1739,5.614,1740,5.614,1741,5.614,1742,3.966,1743,3.966,1744,3.966,1745,3.966,1746,3.966,1747,3.966,1748,3.966,1749,3.966,1750,3.966,1751,3.966,1752,3.966,1753,3.966,1754,2.39,1755,3.966,1756,3.966,1757,3.966,1758,3.966,1759,3.966,1760,5.614,1761,3.966,1762,5.614,1763,3.966,1764,5.614,1765,3.966,1766,3.966,1767,3.966,1768,3.966,1769,3.966,1770,3.966,1771,4.524,1772,7.478,1773,3.966,1774,3.966,1775,3.966,1776,3.966,1777,3.966,1778,3.966,1779,3.502,1780,3.966]],["title/interfaces/LoginInfo.html",[0,0.085,191,2.054]],["body/interfaces/LoginInfo.html",[0,0.177,2,0.888,3,0.128,4,0.067,5,0.058,8,0.809,9,1.192,15,0.174,16,0.642,18,1.71,19,0.843,20,1.383,22,0.597,23,0.951,24,0.906,25,0.009,26,1.548,47,0.157,54,0.96,60,2.05,64,0.98,67,0.404,75,1.318,88,1.2,91,1.203,94,1.393,99,1.661,119,1.426,152,0.717,159,0.004,160,0.006,161,0.004,162,3.999,163,2.143,164,4.381,166,3.703,167,3.581,168,2.443,169,3.027,170,2.143,171,2.143,172,3.165,173,3.749,174,2.143,175,2.811,176,2.604,177,1.655,178,3.227,179,1.955,180,2.634,181,2.067,182,2.13,183,3.059,184,2.105,185,2.216,186,2.216,187,1.789,188,2.075,189,2.195,190,2.634,191,3.227,192,3.027,193,2.216,194,1.55,195,1.822,196,2.216,197,1.132,198,2.313,199,1.65,200,2.216,201,4.001,202,3.467,203,2.143,204,3.467,205,2.707,206,3.227,207,2.313,208,2.217,209,2.513,210,3.227,211,1.093,212,2.398,213,1.841,214,1.841,215,2.587,216,2.195,217,2.143,218,2.216,219,2.216,220,1.76,221,1.318,222,3.227,223,2.216,224,2.216,225,1.841,226,2.216,227,1.65,228,2.216,229,1.145,230,2.216,231,1.841,232,2.216,233,2.216,234,2.216,235,3.027,236,2.513,237,1.841,238,3.027,239,3.027,240,2.664,241,3.027,242,2.664,243,3.027,244,3.027,245,2.513,246,3.027,247,3.027,248,3.703,249,3.027,250,4.169,251,3.027,252,3.027,253,3.027,254,3.027,255,3.027,256,3.027,257,3.027,258,4.096,259,3.027,260,3.027,261,3.027,262,3.027,263,3.027,264,2.216,265,2.216,266,2.143,267,3.027,268,2.216,269,2.216,270,3.703,271,2.216,272,2.216,273,2.216,274,2.216,275,2.216,276,2.216,277,3.703,278,2.216,279,2.216,280,2.216,281,2.216,282,2.513,283,3.027,284,2.216,285,2.216,286,2.216,287,2.011,288,2.216,289,2.216,290,2.075,291,3.23,292,2.927,293,2.927,294,2.216,295,2.216]],["title/interfaces/Logs.html",[0,0.085,14,1.305]],["body/interfaces/Logs.html",[0,0.171,1,2.204,2,0.766,3,0.066,4,0.058,5,0.05,6,1.98,7,1.98,8,1.162,9,1.236,10,2.653,11,2.722,12,1.955,13,1.854,14,2.724,15,0.15,16,0.579,17,3.685,18,1.739,19,0.967,20,1.496,21,3.875,22,0.609,23,1.079,24,0.899,25,0.009,26,1.444,27,0.322,28,2.803,29,1.111,30,1.478,31,0.168,32,1.137,33,1.193,34,0.841,35,1.253,36,0.619,37,0.604,38,1.285,39,1.509,40,1.564,41,4.236,42,2.054,43,2.827,44,2.054,45,2.827,46,2.054,47,0.152,48,2.032,49,3.875,50,2.498,51,4.709,52,3.047,53,3.047,54,0.967,55,3.047,56,3.047,57,3.047,58,3.047,59,1.929,60,1.624,61,1.614,62,2.134,63,1.753,64,0.919,65,2.73,66,2.721,67,0.177,68,2.721,69,2.134,70,2.133,71,2.204,72,2.721,73,2.134,74,1.387,75,1.137,76,2.134,77,1.704,78,1.478,79,2.827,80,2.134,81,2.735,82,2.134,83,1.423,84,3.954,85,1.165,86,0.575,87,4.565,88,1.478,89,1.285,90,2.477,91,0.741,92,3.297,93,2.663,94,1.466,95,1.683,96,3.297,97,3.047,98,1.834,99,1.316,100,1.549,101,1.137,102,1.111,103,0.038,104,2.553,105,0.305,106,0.589,107,0.589,108,1.044,109,1.663,110,1.165,111,1.035,112,1.152,113,1.165,114,0.547,115,0.634,116,1.104,117,2.326,118,1.64,119,1.73,120,1.471,121,0.882,122,2.383,123,2.134,124,1.279,125,4.485,126,1.156,127,2.712,128,2.348,129,2.518,130,2.326,131,2.712,132,2.394,133,2.442,134,2.712,135,2.442,136,2.442,137,2.442,138,2.503,139,2.442,140,1.177,141,1.679,142,2.565,143,2.134,144,2.134,145,2.134,146,1.881,147,2.477,148,2.477,149,2.134,150,2.334,151,2.134,152,0.619,153,1.502,154,1.387,155,2.134,156,2.032,157,1.223,158,1.223,159,0.004,160,0.005,161,0.004]],["title/classes/MapsWindowComponent.html",[103,0.044,754,3.306]],["body/classes/MapsWindowComponent.html",[0,0.08,3,0.071,4,0.062,5,0.054,15,0.162,16,0.611,19,0.802,22,0.601,23,0.853,24,0.794,25,0.009,26,1.249,27,0.333,31,0.181,36,0.932,37,0.651,47,0.071,67,0.35,70,1.197,74,2.405,103,0.041,105,0.529,106,0.887,107,0.887,108,0.997,112,1.201,114,1.118,116,1.311,117,1.754,121,0.928,124,0.635,141,0.906,159,0.006,160,0.006,161,0.006,162,3.866,165,1.714,167,3.472,168,3.049,170,2.784,171,1.993,172,3.069,173,3.472,174,1.993,199,2.143,205,1.619,212,1.633,217,3.653,291,3.602,292,4.025,293,4.12,296,1.295,307,1.101,310,0.865,311,0.807,313,0.865,315,0.865,317,1.208,318,1.507,320,1.808,325,1.936,327,2.296,336,1.42,337,1.378,344,1.841,410,0.845,415,1.42,418,2.396,430,1.256,435,1.256,443,4.071,475,2.879,477,3.092,480,2.754,484,3.172,496,1.707,500,3.212,501,1.42,502,1.495,503,2.412,508,2.82,509,2.537,521,2.915,530,1.881,539,3.344,574,1.385,639,3.073,640,2.837,659,2.879,749,5.533,754,6.477,755,3.345,793,5.897,794,6.671,911,3.665,987,5.096,989,1.815,991,4.564,993,1.796,1036,2.501,1057,2.62,1111,2.879,1198,4.071,1205,3.161,1232,4.801,1487,2.915,1576,5.118,1699,5.897,1779,3.665,1781,7.184,1782,3.345,1783,6.679,1784,6.679,1785,6.679,1786,6.679,1787,7.229,1788,5.796,1789,5.796,1790,7.229,1791,4.151,1792,7.605,1793,7.229,1794,7.605,1795,7.229,1796,7.229,1797,5.796,1798,5.897,1799,7.229,1800,4.151,1801,4.151,1802,4.151,1803,6.679,1804,4.151,1805,7.229,1806,4.151,1807,7.229,1808,4.151,1809,4.151,1810,4.151,1811,5.796,1812,5.796,1813,5.796,1814,4.151,1815,6.715,1816,5.796,1817,4.151,1818,4.151,1819,4.151,1820,5.796,1821,5.796,1822,5.796,1823,5.796,1824,4.151,1825,5.796,1826,4.151,1827,3.665,1828,4.671,1829,3.665,1830,4.151,1831,4.151,1832,4.151,1833,4.151,1834,4.151,1835,4.151,1836,4.151,1837,4.151,1838,4.151,1839,4.151,1840,4.151,1841,4.151,1842,4.151,1843,5.796,1844,4.151,1845,4.151,1846,5.796,1847,3.345,1848,6.679,1849,4.151,1850,7.878,1851,4.151,1852,6.679,1853,6.679,1854,6.679,1855,6.679,1856,4.151,1857,4.151,1858,4.151,1859,4.151,1860,4.151,1861,3.665,1862,4.151,1863,4.151,1864,4.151,1865,4.151,1866,4.151,1867,4.151,1868,4.151,1869,5.796,1870,4.151,1871,4.151,1872,4.151,1873,4.151,1874,8.249,1875,4.151,1876,8.086,1877,4.151,1878,5.796,1879,4.151,1880,4.151,1881,4.151,1882,4.151,1883,4.151,1884,4.151,1885,4.151,1886,4.151,1887,4.151,1888,3.665,1889,4.151,1890,4.151,1891,4.151,1892,6.679,1893,4.151,1894,5.796,1895,4.151,1896,5.796,1897,4.151,1898,4.151]],["title/modules/MaterialModule.html",[585,2.194,744,2.789]],["body/modules/MaterialModule.html",[3,0.113,4,0.099,5,0.102,25,0.009,27,0.429,31,0.289,47,0.113,103,0.066,120,1.315,159,0.006,160,0.008,161,0.006,298,2.82,412,2.578,415,2.679,528,4.642,587,3.399,613,4.519,619,2.578,720,3.525,744,4.943,759,6.724,760,6.724,871,4.945,1261,4.642,1899,6.608,1900,6.608,1901,5.326,1902,6.608,1903,8.343,1904,6.608,1905,8.343,1906,6.608,1907,8.343,1908,6.608,1909,8.343,1910,6.608,1911,8.343,1912,6.608,1913,8.343,1914,6.608,1915,8.343,1916,8.343,1917,8.343,1918,6.608,1919,8.343,1920,6.608,1921,8.343,1922,6.608,1923,8.343,1924,6.608,1925,8.343,1926,8.343,1927,8.343,1928,8.343,1929,8.343,1930,8.343]],["title/interfaces/Member.html",[0,0.085,91,0.596]],["body/interfaces/Member.html",[0,0.137,2,0.501,3,0.043,4,0.038,5,0.033,9,1.092,10,1.574,11,2.721,12,0.933,13,2.082,15,0.098,16,0.42,19,1.106,20,1.457,22,0.599,23,0.902,24,0.877,25,0.009,26,0.974,27,0.316,28,2.166,29,1.151,31,0.11,32,0.744,33,0.78,34,0.758,35,0.819,36,0.405,37,0.395,38,0.84,39,1.539,40,1.73,47,0.122,54,1.194,63,0.631,64,0.9,67,0.385,81,2.752,86,0.376,88,1.757,89,1.331,91,1.23,94,1.494,98,1.653,101,0.744,102,0.726,103,0.025,105,0.199,106,0.385,107,0.385,108,1.283,109,1.207,110,0.762,111,0.677,112,1.24,113,0.762,114,0.357,115,0.657,116,1.061,117,2.354,118,1.725,119,1.319,120,0.794,121,0.972,122,2.675,124,0.94,126,0.905,127,2.874,128,2.834,129,2.03,130,2.601,131,2.881,132,2.723,133,2.73,134,2.881,135,2.73,136,2.73,137,2.73,138,2.798,139,2.704,140,1.315,141,1.892,142,2.05,146,1.365,152,1.369,153,0.982,154,2.699,156,3.305,157,2.637,158,2.637,159,0.002,160,0.004,161,0.002,175,2.558,176,2.749,177,1.271,179,1.731,181,2.052,182,1.959,183,0.956,184,1.781,187,2.26,189,1.437,197,1.135,198,2.333,205,2.199,207,1.881,211,0.617,386,3.623,387,2.102,398,1.395,399,3.278,410,0.513,427,2.798,467,1.038,489,0.525,496,1.332,498,0.537,668,1.981,672,3.623,926,1.395,987,1.453,988,1.453,989,1.101,993,2.447,1020,3.16,1022,4.154,1024,3.397,1030,2.746,1031,1.453,1042,1.038,1195,3.362,1203,2.541,1226,1.916,1227,1.916,1327,3.94,1328,2.404,1329,1.517,1441,1.916,1443,1.343,1449,3.997,1451,4.356,1687,3.953,1718,1.453,1754,2.404,1931,1.453,1932,2.519,1933,2.86,1934,2.404,1935,2.303,1936,2.404,1937,2.86,1938,1.517,1939,2.86,1940,1.517,1941,1.589,1942,1.589,1943,1.589,1944,1.517,1945,1.453,1946,3.559,1947,3.254,1948,2.303,1949,2.303,1950,2.303,1951,1.589,1952,3.559,1953,1.589,1954,3.559,1955,4.127,1956,1.589,1957,2.519,1958,2.519,1959,1.589,1960,3.879,1961,2.519,1962,3.128,1963,1.589,1964,1.395,1965,3.128,1966,1.589,1967,2.519,1968,1.589,1969,2.519,1970,1.589,1971,1.589,1972,1.589,1973,1.589,1974,4.127,1975,1.589,1976,2.519,1977,1.589,1978,1.589,1979,2.519,1980,1.589,1981,1.589,1982,2.519,1983,1.589,1984,1.589,1985,1.589,1986,2.519,1987,1.589,1988,1.589,1989,2.519,1990,1.589,1991,1.589,1992,1.589,1993,1.589,1994,2.519,1995,1.589,1996,1.589,1997,1.589,1998,2.519,1999,1.589,2000,1.589,2001,2.519,2002,1.589,2003,2.519,2004,1.589,2005,1.589,2006,3.559,2007,1.589,2008,2.519,2009,1.589,2010,1.589,2011,1.589,2012,2.519,2013,1.589,2014,1.589,2015,1.589,2016,2.519,2017,1.589,2018,1.589,2019,2.519,2020,1.589,2021,3.559,2022,2.519,2023,4.127,2024,1.589,2025,2.519,2026,1.589,2027,2.519,2028,2.519,2029,1.589,2030,2.519,2031,1.589,2032,1.589,2033,2.519,2034,1.589]],["title/classes/MemberDashboardComponent.html",[103,0.044,797,2.934]],["body/classes/MemberDashboardComponent.html",[3,0.069,4,0.06,5,0.052,8,1.024,9,0.985,15,0.156,16,0.596,19,0.782,20,0.931,22,0.609,23,0.473,24,0.685,25,0.009,26,1.383,27,0.328,31,0.175,34,1.149,36,0.644,37,0.628,39,1.23,47,0.069,54,0.782,61,1.234,67,0.185,77,1.752,78,1.761,85,1.71,86,1.163,90,3.208,91,1.177,99,1.353,100,2.423,103,0.04,105,0.519,106,0.865,107,0.865,108,1.062,112,1.21,114,1.01,115,1.079,116,1.33,120,1.125,121,0.954,132,1.71,140,1.089,150,2.501,159,0.004,160,0.005,161,0.004,165,1.028,184,2.007,195,1.721,208,2.19,212,2.114,220,1.459,229,2.225,266,2.715,307,1.074,310,0.835,311,0.779,312,4.726,313,0.835,315,0.835,317,1.178,318,1.484,320,1.844,325,1.99,326,2.702,327,1.795,329,3.407,336,2.064,337,1.571,339,3.263,344,2.474,381,2.703,392,2.87,409,2.813,410,0.816,419,2.706,420,1.077,421,1.371,422,3.186,423,2.312,424,1.371,430,1.212,431,1.924,432,2.998,433,2.998,435,1.212,438,4.917,439,4.231,448,2.4,450,6.049,451,4.556,455,2.666,456,3.115,457,2.864,458,2.666,459,2.781,460,2.775,461,3.282,462,2.864,463,2.864,464,2.864,465,2.487,466,2.907,467,2.332,468,2.907,469,2.146,470,2.907,473,3.208,475,3.535,489,1.565,490,3.66,492,4.108,493,4.108,494,3.754,496,1.151,497,2.775,498,1.518,501,1.371,502,1.443,503,2.186,508,1.562,509,1.406,510,1.7,511,1.751,512,1.805,513,1.337,525,2.808,526,2.715,527,2.808,528,3.971,529,4.556,530,1.846,531,4.231,532,4.556,549,2.776,557,1.562,558,1.521,559,3.156,560,3.449,561,3.511,562,3.622,563,3.418,564,3.309,565,2.715,566,3.418,567,3.418,568,1.989,569,2.715,570,3.418,571,1.989,572,3.418,574,1.337,577,2.06,634,5.272,639,3.242,640,2.994,644,1.371,665,2.907,676,3.537,680,2.487,797,5.759,798,5.238,799,6.374,929,3.971,1122,3.569,1165,4.351,1301,1.863,1303,2.998,1487,3.971,1847,4.556,1964,3.133,2035,5.238,2036,5.785,2037,5.785,2038,6.878,2039,5.785,2040,6.878,2041,7.506,2042,4.992,2043,4.006,2044,3.537,2045,4.006,2046,4.992,2047,4.006,2048,4.006,2049,3.537,2050,4.006,2051,4.006,2052,4.006,2053,4.006,2054,4.006,2055,4.006,2056,4.006,2057,4.006,2058,4.006,2059,4.006,2060,4.006,2061,4.006,2062,4.006,2063,4.006,2064,4.006,2065,3.537,2066,3.537,2067,4.006,2068,4.006]],["title/components/MemberHelpComponent.html",[296,0.987,356,1.771]],["body/components/MemberHelpComponent.html",[3,0.103,4,0.09,5,0.078,15,0.235,19,1.024,25,0.009,27,0.277,31,0.263,47,0.103,54,1.187,59,2.933,61,1.313,64,0.79,67,0.341,77,2.293,78,1.988,91,1.214,94,1.691,100,2.354,103,0.06,105,0.635,121,0.69,124,1.279,159,0.006,160,0.007,161,0.006,177,1.438,197,1.157,211,1.474,220,1.625,229,2.241,296,1.79,297,2.412,298,2.664,299,2.711,300,2.553,301,2.711,302,2.711,307,1.405,308,3.61,309,2.711,310,1.947,311,1.816,313,1.542,315,1.542,317,1.542,318,1.742,320,1.507,325,1.44,336,1.812,337,1.09,343,2.412,344,2.349,345,2.711,346,2.711,347,3.766,348,2.412,349,3.766,350,2.412,351,2.711,352,2.346,353,2.711,354,2.283,355,2.711,356,3.351,357,2.412,358,2.379,359,3.61,360,2.412,361,2.412,362,2.412,363,3.334,364,2.412,365,2.111,366,2.711,367,2.412,368,2.283,369,2.711,370,2.412,371,2.283,372,2.412,373,2.283,374,2.346,375,1.958,376,2.711,377,2.711,380,4.225,381,3.01,382,5.994,383,5.535,384,4.501,385,4.501,390,6.254,392,2.788,393,6.254,394,5.55,395,6.254,431,3.553,798,4.623,800,6.456,1092,4.67,1101,3.051,2035,4.623,2069,7.397,2070,5.961,2071,6.531,2072,5.961]],["title/classes/MemberMenuComponent.html",[103,0.044,801,3.306]],["body/classes/MemberMenuComponent.html",[3,0.113,4,0.099,5,0.085,15,0.257,16,0.823,22,0.549,25,0.009,27,0.303,31,0.288,36,1.058,37,1.033,47,0.113,91,1.123,100,2.478,103,0.066,105,0.66,112,0.959,116,1.166,121,0.897,159,0.006,160,0.008,161,0.006,208,2.062,307,1.484,310,1.372,311,1.28,313,1.372,315,1.372,317,1.628,318,1.796,320,1.755,325,1.87,392,2.607,410,1.341,430,1.992,435,1.992,455,2.421,456,2.888,458,2.421,459,3.536,526,3.752,559,3.162,560,3.132,561,3.521,562,3.633,564,4.006,574,2.197,576,4.372,578,6.898,582,3.062,583,4.624,584,4.624,639,2.568,640,2.371,798,5.077,801,6.234,802,7.089,2035,5.077,2073,6.584,2074,6.584]],["title/classes/MemberNotificationComponent.html",[103,0.044,803,3.306]],["body/classes/MemberNotificationComponent.html",[3,0.077,4,0.068,5,0.058,8,1.111,9,1.164,14,2.386,15,0.176,16,0.646,19,0.848,20,1.33,22,0.618,23,0.723,24,0.864,25,0.009,26,1.396,27,0.321,31,0.197,36,0.724,37,0.706,39,1.059,47,0.077,54,0.848,61,1.901,67,0.282,70,1.298,78,1.21,85,2.545,86,0.915,90,2.763,91,1.15,98,2.045,100,2.276,103,0.045,104,2.607,105,0.552,106,0.938,107,0.938,108,0.915,112,1.015,114,0.639,116,1.117,121,0.8,140,1.067,150,2.548,159,0.004,160,0.006,161,0.004,165,1.573,184,1.537,194,1.369,195,1.965,208,2.21,212,1.727,220,1.522,229,1.92,307,1.164,310,0.938,311,0.875,312,4.969,313,0.938,315,0.938,317,1.278,318,1.56,320,1.851,325,1.669,336,2.061,337,1.524,344,2.376,381,2.207,392,2.928,410,0.917,423,2.598,424,1.54,425,1.911,426,1.911,430,1.362,435,1.362,438,5.31,439,4.587,448,3.571,455,2.72,456,3.189,457,3.047,458,2.72,459,2.959,460,2.266,461,2.68,462,3.047,463,3.047,464,3.047,465,2.646,466,3.152,467,2.528,468,3.152,469,2.327,470,3.152,473,3.373,475,3.717,489,1.278,491,2.528,497,2.894,530,1.727,537,1.621,574,1.502,622,3.162,623,5.216,624,5.216,626,5.216,627,5.216,634,5.256,636,4.94,638,5.412,639,3.423,640,3.16,641,3.975,648,3.975,649,3.975,654,3.975,665,3.848,670,4.94,672,3.863,673,3.369,674,3.369,684,2.315,798,5.259,803,6.045,804,7.343,821,3.628,1487,4.305,1847,4.94,1964,3.397,2035,5.259,2036,6.155,2037,6.155,2038,7.132,2039,6.155,2040,7.132,2046,5.412,2065,3.975,2066,3.975,2075,4.502,2076,4.502,2077,4.502,2078,4.502,2079,4.502,2080,4.502,2081,4.502,2082,4.502,2083,4.502,2084,4.502,2085,4.502,2086,4.502,2087,4.502,2088,4.502,2089,4.502,2090,4.502,2091,4.502,2092,4.502]],["title/components/MemberSubmitSampleComponent.html",[296,0.987,357,1.771]],["body/components/MemberSubmitSampleComponent.html",[3,0.107,4,0.094,5,0.081,15,0.244,25,0.009,27,0.288,31,0.273,47,0.107,54,1.126,61,1.362,64,0.82,67,0.349,91,1.222,103,0.062,105,0.645,121,0.716,124,1.295,159,0.006,160,0.007,161,0.006,177,1.471,197,1.169,211,1.529,220,1.645,296,1.819,297,2.502,298,2.724,299,2.812,300,2.649,301,2.812,302,2.812,307,1.437,308,3.669,309,2.812,310,1.952,311,1.82,313,1.577,315,1.577,317,1.577,318,1.764,320,1.541,325,1.494,336,1.853,337,1.131,343,2.502,344,2.402,345,2.812,346,2.812,347,3.814,348,2.502,349,3.814,350,2.502,351,2.812,352,2.434,353,2.812,354,2.369,355,2.812,356,2.502,357,3.393,358,2.497,359,3.669,360,2.502,361,2.502,362,2.502,363,3.409,364,2.502,365,2.19,366,2.812,367,2.502,368,2.369,369,2.812,370,2.502,371,2.369,372,2.502,373,2.369,374,2.434,375,2.031,376,2.812,377,2.812,798,4.698,807,6.561,2035,4.698,2093,4.669,2094,6.561,2095,6.096,2096,5.51,2097,5.51]],["title/classes/MemberViewSamplesComponent.html",[103,0.044,809,2.789]],["body/classes/MemberViewSamplesComponent.html",[3,0.08,4,0.07,5,0.06,8,1.134,15,0.181,16,0.66,19,0.866,22,0.588,23,1,24,0.73,25,0.009,27,0.365,31,0.203,34,1.211,36,0.746,37,0.728,39,1.082,47,0.08,50,1.764,67,0.326,77,1.94,78,1.904,86,1.131,91,0.955,98,2.089,103,0.079,105,0.561,106,0.958,107,0.958,108,1.181,112,1.213,114,1.183,115,1.166,116,1.295,120,1.246,121,0.936,126,1.049,140,1.211,150,2.476,153,2.442,159,0.005,160,0.006,161,0.005,165,1.606,208,2.028,216,1.672,220,1.647,229,2.203,298,1.672,307,1.189,310,0.968,311,0.903,313,0.968,315,0.968,317,1.305,318,1.58,320,1.808,325,1.952,327,2.407,335,4.201,336,1.534,337,1.434,375,3.025,392,2.864,410,0.946,413,4.567,415,1.589,419,2.794,420,1.248,421,1.589,422,3.359,424,1.589,430,1.405,435,1.405,443,4.397,455,1.94,456,2.314,458,2.453,466,3.219,467,2.582,468,3.219,469,2.688,470,3.219,480,2.582,481,2.737,482,2.657,483,3.006,484,2.485,489,1.65,490,3.898,496,1.544,498,1.617,500,4.201,501,1.589,502,1.672,503,2.363,508,2.956,512,2.093,513,1.549,530,1.764,537,2.254,542,3.084,543,3.084,549,3.086,550,2.142,551,2.037,552,2.51,553,3.039,554,2.376,555,2.51,556,2.51,557,1.811,558,1.763,559,2.688,560,2.51,574,1.549,577,2.388,639,2.956,640,2.73,644,1.589,680,1.763,750,2.68,798,5.15,809,5.526,810,6.267,1161,3.261,1164,5.3,1165,4.703,1166,4.974,1167,5.3,1169,4.268,1171,5.672,1172,4.685,1173,4.568,1176,5.921,1179,3.475,1181,5.045,1187,3.475,1188,4.1,1195,3.642,1196,4.685,1198,4.397,1199,4.685,1200,4.685,1201,4.685,1203,2.821,1204,3.772,1205,2.737,1206,3.772,1207,3.772,1216,2.573,1217,3.475,1218,3.475,1223,3.475,1224,4.157,1226,2.23,1227,2.23,1228,3.475,1229,3.475,1230,4.685,1231,2.68,1232,2.931,1233,3.475,1234,3.475,1235,3.475,1236,3.475,1237,3.475,1238,3.475,1239,3.475,1290,5.045,1642,3.475,1643,3.475,1901,3.742,2035,5.15,2098,4.1,2099,3.742,2100,4.643,2101,4.1,2102,4.643,2103,5.527,2104,4.643,2105,4.643,2106,4.643,2107,4.1,2108,4.1]],["title/components/NotificationDivComponent.html",[296,0.987,360,1.771]],["body/components/NotificationDivComponent.html",[3,0.101,4,0.088,5,0.076,15,0.229,17,3.699,18,1.812,19,1.231,22,0.603,24,0.857,25,0.009,26,1.537,27,0.271,31,0.257,47,0.101,51,3.131,54,1.096,61,2.011,64,0.771,67,0.336,91,0.983,103,0.059,105,0.628,121,0.674,124,1.268,159,0.006,160,0.007,161,0.006,177,1.417,197,1.149,211,1.438,220,1.417,296,1.77,297,2.354,298,2.624,299,2.646,300,2.492,301,2.646,302,2.646,303,6.249,306,4.124,307,1.384,308,3.571,309,2.646,310,1.943,311,1.812,312,4.839,313,1.519,314,5.93,315,1.519,316,5.453,317,1.519,318,1.727,319,5.118,320,1.793,325,1.405,326,3.581,336,1.785,337,1.064,343,2.354,344,2.314,345,2.646,346,2.646,347,3.735,348,2.354,349,3.735,350,2.354,351,2.646,352,2.29,353,2.646,354,2.229,355,2.646,356,2.354,357,2.354,358,2.13,359,3.571,360,3.323,361,2.354,362,2.354,363,3.284,364,2.354,365,2.06,366,2.646,367,2.354,368,2.229,369,2.646,370,2.354,371,2.229,372,2.354,373,2.229,374,2.29,375,1.911,376,2.646,377,2.646,785,7.17,786,7.17,2109,7.287,2110,5.184,2111,5.871,2112,5.184,2113,5.184,2114,5.871]],["title/injectables/NotificationLoggingService.html",[30,1.187,104,1.369]],["body/injectables/NotificationLoggingService.html",[0,0.169,1,2.103,3,0.062,4,0.054,5,0.047,6,4.089,7,1.855,8,1.229,9,1.216,10,2.574,11,2.68,12,2.022,13,1.807,14,2.721,15,0.141,17,3.657,18,1.718,19,0.939,20,1.496,21,3.76,22,0.607,23,1.08,24,0.896,25,0.009,26,1.423,27,0.313,28,3.151,29,1.04,30,1.41,31,0.158,32,1.065,33,1.118,34,1.038,35,1.174,36,0.58,37,0.566,38,1.203,39,1.566,40,1.54,41,4.169,42,1.924,43,2.697,44,1.924,45,2.697,46,1.924,47,0.151,48,1.939,49,3.76,50,2.477,51,4.666,52,2.906,53,2.906,54,0.939,55,2.906,56,2.906,57,2.906,58,2.906,59,1.84,60,1.549,61,1.573,62,1.999,63,1.701,64,0.891,65,2.605,66,2.88,67,0.313,68,2.88,69,1.999,70,2.079,71,2.103,72,2.88,73,1.999,74,1.299,75,1.065,76,1.999,77,1.625,78,1.41,79,2.697,80,1.999,81,2.792,82,1.999,83,1.333,84,3.867,85,1.091,86,0.538,87,4.168,88,1.41,89,1.203,90,2.363,91,0.707,92,3.178,93,2.595,94,1.551,95,1.577,96,3.178,97,2.906,98,2.062,99,1.479,100,1.741,101,1.065,102,1.04,103,0.036,104,2.586,105,0.415,106,0.803,107,0.803,108,1.013,109,1.869,110,1.587,111,1.41,112,1.13,113,1.091,114,0.512,115,1.018,116,1.229,117,2.552,118,1.799,119,1.926,120,1.639,121,0.968,122,2.614,123,3.76,124,1.26,125,4.407,126,1.139,127,2.679,128,2.388,129,2.443,130,2.275,131,2.679,132,2.348,133,2.388,134,2.679,135,2.388,136,2.388,137,2.388,138,2.448,139,2.388,140,1.151,141,1.642,142,2.509,143,3.76,144,3.76,145,3.76,146,2.321,147,2.785,148,2.785,149,1.999,150,2.456,151,2.906,152,0.58,153,2.045,154,1.889,155,2.906,156,1.939,157,1.145,158,1.145,159,0.004,160,0.005,161,0.004,165,1.585,317,1.093,320,1.581,530,1.741,934,1.999,956,2.533,2115,5.244,2116,5.244,2117,3.607,2118,3.607,2119,3.607,2120,3.607,2121,3.607,2122,3.607,2123,3.607]],["title/injectables/NotificationService.html",[30,1.187,748,2.789]],["body/injectables/NotificationService.html",[3,0.108,4,0.095,5,0.082,15,0.246,22,0.573,24,0.899,25,0.009,27,0.391,30,2.045,31,0.275,47,0.108,67,0.4,70,1.817,74,2.268,103,0.063,105,0.499,113,1.905,114,1.08,121,0.974,126,0.871,159,0.007,160,0.007,161,0.006,165,2.23,215,3.748,216,3.286,317,1.586,320,1.77,325,2.032,354,2.391,413,4.9,414,3.712,415,2.155,499,3.326,500,4.53,530,2.448,728,4.182,748,4.802,768,6.353,864,5.561,865,5.075,934,3.49,1498,5.075,1531,5.561,1533,5.561,1706,7.496,1798,5.561,2124,5.561,2125,7.607,2126,7.607,2127,7.607,2128,7.607,2129,6.298,2130,6.298,2131,7.607,2132,6.298,2133,7.607,2134,6.298,2135,8.173,2136,7.607,2137,6.298,2138,7.607,2139,6.298,2140,6.298,2141,6.298,2142,6.298,2143,6.298,2144,6.298,2145,5.561,2146,6.298,2147,6.298]],["title/interfaces/Organisation.html",[0,0.085,175,1.591]],["body/interfaces/Organisation.html",[0,0.176,2,0.874,3,0.127,4,0.066,5,0.078,8,0.796,9,1.188,15,0.172,16,0.635,18,1.728,19,0.834,20,1.428,22,0.596,23,0.946,24,0.904,25,0.009,26,1.545,47,0.157,54,0.952,60,1.78,64,0.973,67,0.408,75,1.297,88,1.181,91,1.2,94,1.378,99,1.443,119,1.41,152,0.969,159,0.004,160,0.006,161,0.004,162,3.99,163,2.109,164,4.34,165,1.9,166,3.678,167,3.557,168,2.417,169,2.993,170,2.109,171,2.109,172,3.144,173,3.728,174,2.109,175,2.887,176,2.59,177,1.699,178,3.609,179,1.939,180,2.612,181,2.057,182,2.049,183,3.044,184,1.946,185,2.181,186,2.181,187,1.761,188,2.042,189,2.171,190,2.288,191,2.803,192,2.993,193,2.181,194,1.537,195,1.807,196,2.181,197,1.128,198,2.288,199,1.624,200,2.181,201,3.982,202,3.444,203,2.109,204,3.444,205,2.684,206,3.2,207,2.288,208,2.214,209,2.486,210,3.2,211,1.076,212,2.39,213,1.811,214,1.811,215,2.558,216,2.171,217,2.109,218,2.181,219,2.181,220,1.757,221,1.297,222,3.2,223,2.181,224,2.181,225,1.811,226,2.181,227,1.624,228,2.181,229,1.127,230,2.181,231,1.811,232,2.181,233,2.181,234,2.181,235,2.993,236,2.486,237,1.811,238,2.993,239,2.993,240,2.635,241,2.993,242,2.635,243,2.993,244,2.993,245,2.486,246,2.993,247,2.993,248,3.678,249,2.993,250,4.154,251,2.993,252,2.993,253,2.993,254,2.993,255,2.993,256,2.993,257,2.993,258,4.078,259,2.993,260,2.993,261,2.993,262,2.993,263,2.993,264,2.181,265,2.181,266,2.109,267,2.993,268,2.181,269,2.181,270,3.678,271,2.181,272,2.181,273,2.181,274,2.181,275,2.181,276,2.181,277,3.678,278,2.181,279,2.181,280,2.181,281,2.181,282,2.486,283,2.993,284,2.181,285,2.181,286,2.181,287,1.979,288,2.181,289,2.181,290,2.042,291,3.215,292,2.895,293,2.895,294,2.181,295,2.181,332,1.92,551,1.429,596,2.647,599,4.344,600,2.773,601,3.805,602,3.805,603,2.773,604,2.773,605,3.805,609,2.773,610,2.773,611,2.773,612,2.773,1544,2.259,2148,4.392,2149,2.535,2150,4.392,2151,2.434,2152,2.434,2153,3.878]],["title/interfaces/OrganisationAdmin.html",[0,0.085,178,2.054]],["body/interfaces/OrganisationAdmin.html",[0,0.176,2,0.881,3,0.127,4,0.067,5,0.057,8,0.802,9,1.19,15,0.173,16,0.638,18,1.706,19,0.838,20,1.38,22,0.599,23,0.948,24,0.906,25,0.009,26,1.558,47,0.157,54,0.956,60,1.79,64,0.976,67,0.403,75,1.307,88,1.189,91,1.201,94,1.385,99,1.45,119,1.417,152,0.711,159,0.004,160,0.006,161,0.004,162,3.994,163,2.125,164,4.376,165,1.906,166,3.69,167,3.568,168,2.429,169,3.009,170,2.125,171,2.125,172,3.154,173,3.738,174,2.125,175,2.894,176,2.021,177,1.672,178,3.455,179,2.264,180,2.623,181,2.181,182,2.126,183,3.226,184,2.1,185,2.198,186,2.198,187,1.774,188,2.058,189,2.182,190,2.3,191,2.817,192,3.009,193,2.198,194,1.543,195,1.814,196,2.198,197,1.13,198,2.3,199,1.636,200,2.198,201,3.991,202,3.455,203,2.125,204,3.455,205,2.695,206,3.212,207,2.3,208,2.215,209,2.499,210,3.212,211,1.084,212,2.394,213,1.825,214,1.825,215,2.572,216,2.182,217,2.125,218,2.198,219,2.198,220,1.759,221,1.307,222,3.212,223,2.198,224,2.198,225,1.825,226,2.198,227,1.636,228,2.198,229,1.135,230,2.198,231,1.825,232,2.198,233,2.198,234,2.198,235,3.009,236,2.499,237,1.825,238,3.009,239,3.009,240,2.649,241,3.009,242,2.649,243,3.009,244,3.009,245,2.499,246,3.009,247,3.009,248,3.69,249,3.009,250,4.161,251,3.009,252,3.009,253,3.009,254,3.009,255,3.009,256,3.009,257,3.009,258,4.086,259,3.009,260,3.009,261,3.009,262,3.009,263,3.009,264,2.198,265,2.198,266,2.125,267,3.009,268,2.198,269,2.198,270,3.69,271,2.198,272,2.198,273,2.198,274,2.198,275,2.198,276,2.198,277,3.69,278,2.198,279,2.198,280,2.198,281,2.198,282,2.499,283,3.009,284,2.198,285,2.198,286,2.198,287,1.994,288,2.198,289,2.198,290,2.058,291,3.222,292,2.91,293,2.91,294,2.198,295,2.198]],["title/interfaces/OrganisationMember.html",[0,0.085,188,2.054]],["body/interfaces/OrganisationMember.html",[0,0.176,2,0.876,3,0.127,4,0.066,5,0.057,8,0.798,9,1.2,15,0.172,16,0.636,18,1.704,19,0.835,20,1.428,22,0.601,23,0.947,24,0.906,25,0.009,26,1.557,47,0.157,54,0.953,60,1.783,64,0.974,67,0.403,75,1.301,88,1.183,91,1.206,94,1.38,99,1.445,119,1.412,152,0.708,159,0.004,160,0.006,161,0.004,162,3.991,163,2.115,164,4.372,165,2.059,166,3.682,167,3.561,168,2.421,169,2.999,170,2.115,171,2.115,172,3.147,173,3.731,174,2.115,175,2.798,176,2.015,177,1.651,178,3.204,179,2.26,180,2.616,181,2.178,182,2.125,183,3.223,184,2.098,185,2.187,186,2.999,187,1.765,188,2.808,189,2.174,190,2.292,191,2.808,192,2.999,193,2.187,194,1.539,195,1.809,196,2.187,197,1.128,198,2.292,199,1.628,200,2.187,201,3.985,202,3.448,203,2.115,204,3.448,205,2.688,206,3.204,207,2.292,208,2.215,209,2.49,210,3.204,211,1.079,212,2.392,213,1.816,214,1.816,215,2.563,216,2.174,217,2.115,218,2.187,219,2.187,220,1.758,221,1.301,222,3.204,223,2.187,224,2.187,225,1.816,226,2.187,227,1.628,228,2.187,229,1.13,230,2.187,231,1.816,232,2.187,233,2.187,234,2.187,235,2.999,236,2.49,237,1.816,238,2.999,239,2.999,240,2.64,241,2.999,242,2.64,243,2.999,244,2.999,245,2.49,246,2.999,247,2.999,248,3.682,249,2.999,250,4.156,251,2.999,252,2.999,253,2.999,254,2.999,255,2.999,256,2.999,257,2.999,258,4.081,259,2.999,260,2.999,261,2.999,262,2.999,263,2.999,264,2.187,265,2.187,266,2.115,267,2.999,268,2.187,269,2.187,270,3.682,271,2.187,272,2.187,273,2.187,274,2.187,275,2.187,276,2.187,277,3.682,278,2.187,279,2.187,280,2.187,281,2.187,282,2.49,283,2.999,284,2.187,285,2.187,286,2.187,287,1.984,288,2.187,289,2.187,290,2.047,291,3.217,292,2.9,293,2.9,294,2.187,295,2.187]],["title/components/OrganizationHelpComponent.html",[296,0.987,361,1.771]],["body/components/OrganizationHelpComponent.html",[3,0.103,4,0.091,5,0.078,15,0.235,25,0.009,27,0.277,31,0.263,47,0.103,54,1.275,59,2.934,61,1.314,64,0.791,67,0.341,77,2.294,78,1.989,91,0.998,103,0.06,105,0.635,121,0.691,124,1.279,159,0.006,160,0.007,161,0.006,177,1.439,197,1.157,211,1.475,220,1.625,229,2.242,296,1.79,297,2.413,298,2.665,299,2.713,300,2.555,301,2.713,302,2.713,307,1.406,308,3.611,309,2.713,310,1.947,311,1.816,313,1.543,315,1.543,317,1.543,318,1.742,320,1.507,325,1.441,336,1.813,337,1.091,343,2.413,344,2.35,345,2.713,346,2.713,347,3.767,348,2.413,349,3.767,350,2.413,351,2.713,352,2.348,353,2.713,354,2.285,355,2.713,356,2.413,357,2.413,358,2.379,359,3.611,360,2.413,361,3.352,362,2.413,363,3.335,364,2.413,365,2.112,366,2.713,367,2.413,368,2.285,369,2.713,370,2.413,371,2.285,372,2.413,373,2.285,374,2.348,375,2.608,376,2.713,377,2.713,380,4.227,381,3.01,382,5.996,383,5.538,384,4.504,385,4.504,386,4.101,387,2.989,390,6.255,392,2.789,393,6.255,394,5.551,395,6.255,396,6.736,431,3.554,819,6.458,1101,3.052,2070,5.964,2072,5.964,2154,5.321]],["title/modules/OrganizationMemberModule.html",[585,2.194,745,3.103]],["body/modules/OrganizationMemberModule.html",[3,0.111,4,0.097,5,0.107,18,1.317,25,0.009,27,0.42,31,0.283,47,0.111,54,1.07,67,0.356,91,0.872,103,0.065,152,1.04,159,0.006,160,0.008,161,0.006,311,1.258,332,2.828,343,2.593,412,2.523,417,5.219,418,3.733,550,2.213,551,2.105,585,3.212,587,3.326,590,3.45,591,4.295,592,4.295,593,4.295,594,4.295,596,3.898,597,3.326,598,4.543,599,5.219,600,4.083,601,4.88,602,4.88,603,4.083,604,4.083,605,4.88,609,4.083,610,4.083,611,4.083,612,4.083,613,4.461,614,5.429,615,4.295,617,5.133,618,4.083,619,3.015,720,3.45,733,4.295,734,4.083,735,4.84,742,5.901,744,5.61,745,6.36,749,5.429,750,3.733,759,6.23,760,6.23,763,6.825,764,6.825,765,6.825,766,6.825,796,5.213,811,4.84,1544,3.326,1546,3.45,2035,3.733,2155,6.468,2156,6.468,2157,8.268,2158,6.468,2159,6.468,2160,6.468,2161,5.785]],["title/classes/OrganizationMemberRoutingModule.html",[103,0.044,2161,3.306]],["body/classes/OrganizationMemberRoutingModule.html",[3,0.112,4,0.099,5,0.085,25,0.009,27,0.421,31,0.287,40,1.245,47,0.112,91,1.242,100,1.846,103,0.065,126,1.19,159,0.006,160,0.008,161,0.006,220,1.515,229,1.682,296,1.963,337,1.188,358,1.762,365,2.734,368,2.958,375,2.706,410,1.335,420,1.762,431,3.148,574,2.187,590,4.686,619,2.557,685,4.138,686,4.919,687,4.799,690,3.95,691,4.353,692,5.071,693,4.353,694,4.353,695,4.604,696,4.353,699,4.353,713,5.713,714,6.042,718,4.905,720,3.496,777,4.604,797,5.174,799,4.604,805,5.83,806,4.905,809,4.919,810,4.604,811,4.905,833,4.353,834,4.905,2035,3.783,2161,5.83,2162,5.282]],["title/components/OrganizationMenuComponent.html",[296,0.987,362,1.771]],["body/components/OrganizationMenuComponent.html",[3,0.107,4,0.094,5,0.081,15,0.244,25,0.009,27,0.288,31,0.273,47,0.107,54,1.261,61,1.365,64,0.822,67,0.349,91,1.021,103,0.062,105,0.646,121,0.718,124,1.296,159,0.006,160,0.007,161,0.006,177,1.473,197,1.17,211,1.532,220,1.473,229,2.173,296,1.82,297,2.507,298,2.728,299,2.818,300,2.654,301,2.818,302,2.818,307,1.439,308,3.672,309,2.818,310,1.952,311,1.821,313,1.579,315,1.579,317,1.579,318,1.765,320,1.543,325,1.497,336,1.856,337,1.133,343,2.507,344,2.405,345,2.818,346,2.818,347,3.817,348,2.507,349,3.817,350,2.507,351,2.818,352,2.439,353,2.818,354,2.374,355,2.818,356,2.507,357,2.507,358,2.332,359,3.672,360,2.507,361,2.507,362,3.396,363,3.414,364,2.507,365,2.195,366,2.818,367,2.507,368,2.374,369,2.818,370,2.507,371,2.374,372,2.507,373,2.374,374,2.439,375,2.652,376,2.818,377,2.818,387,2.592,396,6.104,576,4.153,582,3.522,583,5.32,584,5.723,820,6.567,2154,5.411,2163,5.521,2164,5.521]],["title/modules/OrganizationModule.html",[585,2.194,746,3.103]],["body/modules/OrganizationModule.html",[3,0.117,4,0.103,5,0.11,18,1.395,25,0.009,27,0.39,31,0.299,47,0.117,54,0.948,67,0.368,103,0.068,152,1.101,159,0.007,160,0.008,161,0.007,332,2.994,551,2.229,587,3.522,590,3.653,591,4.548,592,4.548,593,4.548,594,4.548,596,4.128,597,3.522,598,4.811,599,5.346,600,4.324,601,5.048,602,5.048,603,4.324,604,4.324,605,5.048,609,4.324,610,4.324,611,4.324,612,4.324,613,4.615,614,5.616,615,4.548,617,4.548,618,4.324,619,2.671,746,5.616,1544,3.522,2165,6.849,2166,6.849,2167,6.849,2168,3.953,2169,6.849,2170,5.983]],["title/classes/OrganizationRoutingModule.html",[103,0.044,2170,3.306]],["body/classes/OrganizationRoutingModule.html",[3,0.11,4,0.097,5,0.083,25,0.009,27,0.423,31,0.281,40,1.22,47,0.11,54,1.228,91,1.112,100,1.81,103,0.064,126,1.209,159,0.006,160,0.007,161,0.006,220,1.497,229,1.649,296,1.982,337,1.164,358,1.727,365,2.702,368,2.923,375,2.683,391,3.872,410,1.309,420,1.727,431,3.086,574,2.144,590,4.732,619,2.506,685,4.057,686,4.861,687,4.758,690,3.872,691,4.267,692,5.121,693,4.267,694,4.267,695,4.513,696,4.267,699,4.267,702,5.762,713,5.804,714,6.138,718,4.809,720,3.427,777,4.513,813,6.17,815,5.762,816,5.408,818,4.809,823,5.762,824,4.809,826,5.113,827,4.513,833,4.267,834,4.809,884,6.54,2154,4.267,2162,5.179,2170,5.762]],["title/components/OrganizationSubmitSampleComponent.html",[296,0.987,364,1.771]],["body/components/OrganizationSubmitSampleComponent.html",[3,0.107,4,0.094,5,0.081,15,0.244,25,0.009,27,0.288,31,0.273,47,0.107,54,1.261,61,1.365,64,0.822,67,0.349,91,1.021,103,0.062,105,0.646,121,0.718,124,1.296,159,0.006,160,0.007,161,0.006,177,1.473,197,1.17,211,1.532,220,1.647,296,1.82,297,2.507,298,2.728,299,2.818,300,2.654,301,2.818,302,2.818,307,1.439,308,3.672,309,2.818,310,1.952,311,1.821,313,1.579,315,1.579,317,1.579,318,1.765,320,1.543,325,1.497,336,1.856,337,1.133,343,2.507,344,2.405,345,2.818,346,2.818,347,3.817,348,2.507,349,3.817,350,2.507,351,2.818,352,2.439,353,2.818,354,2.374,355,2.818,356,2.507,357,2.507,358,2.498,359,3.672,360,2.507,361,2.507,362,2.507,363,3.414,364,3.396,365,2.195,366,2.818,367,2.507,368,2.374,369,2.818,370,2.507,371,2.374,372,2.507,373,2.374,374,2.439,375,2.035,376,2.818,377,2.818,825,6.567,2093,4.679,2094,6.567,2095,6.104,2096,5.521,2097,5.521,2154,5.411]],["title/classes/OrganizationViewSamplesComponent.html",[103,0.044,826,2.934]],["body/classes/OrganizationViewSamplesComponent.html",[3,0.085,4,0.075,5,0.065,8,1.19,15,0.195,16,0.692,22,0.584,23,0.982,24,0.751,25,0.009,27,0.374,31,0.218,34,1.241,36,0.802,37,0.783,39,1.135,47,0.085,50,1.851,54,1.122,67,0.338,77,2.036,78,1.974,86,1.165,90,2.961,103,0.05,105,0.582,106,1.005,107,1.005,108,1.21,112,1.212,114,1.107,115,1.209,116,1.242,120,1.307,121,0.93,126,1.08,140,1.124,159,0.005,160,0.006,161,0.005,165,1.686,208,1.868,216,1.798,220,1.709,229,2.235,298,1.798,307,1.248,310,1.041,311,0.971,313,1.041,315,1.041,317,1.369,318,1.626,320,1.805,325,1.94,327,2.478,335,3.641,336,1.609,337,1.469,375,3.026,410,1.017,413,4.678,415,1.708,419,2.835,420,1.342,421,1.708,422,3.441,424,1.708,430,1.51,435,1.51,458,2.036,466,3.379,467,2.709,468,3.379,469,2.788,470,3.379,480,2.709,481,2.872,482,2.789,483,3.117,484,2.577,489,1.69,490,4.012,496,1.338,497,2.429,498,1.664,500,4.324,501,1.708,502,1.798,503,2.45,512,2.25,513,1.666,530,1.851,537,2.366,542,3.315,543,3.315,549,3.162,550,2.248,551,2.138,552,2.634,553,2.634,554,2.494,555,2.634,556,2.634,557,1.947,558,1.895,560,2.634,574,1.666,577,2.567,639,2.864,640,2.644,644,1.708,680,1.895,750,2.881,826,5.838,827,6.263,1161,3.506,1164,5.495,1165,4.876,1166,5.157,1167,5.495,1171,5.838,1172,4.916,1176,6.066,1179,3.736,1181,5.294,1183,4.408,1187,3.736,1194,5.801,1195,4.169,1196,4.916,1198,4.614,1199,4.916,1200,4.916,1201,4.916,1216,2.767,1217,3.736,1218,3.736,1223,3.736,1226,2.398,1227,2.398,1228,3.736,1229,3.736,1230,3.736,1231,2.881,1232,3.152,1233,3.736,1234,3.736,1235,3.736,1236,3.736,1237,3.736,1238,3.736,1239,3.736,1642,3.736,1643,3.736,1901,4.023,2099,4.023,2101,4.408,2107,4.408,2154,5.922,2171,4.408,2172,4.992,2173,4.992,2174,4.408,2175,4.992]],["title/interfaces/POSTLog.html",[0,0.085,84,2.272]],["body/interfaces/POSTLog.html",[0,0.171,1,2.21,2,0.769,3,0.066,4,0.058,5,0.05,6,1.988,7,1.988,8,1.164,9,1.237,10,2.656,11,2.724,12,1.956,13,1.857,14,2.724,15,0.151,16,0.581,17,3.687,18,1.741,19,0.969,20,1.496,21,3.882,22,0.606,23,1.08,24,0.895,25,0.009,26,1.445,27,0.323,28,2.809,29,1.115,30,1.482,31,0.169,32,1.142,33,1.198,34,0.844,35,1.258,36,0.621,37,0.606,38,1.29,39,1.51,40,1.566,41,4.24,42,2.062,43,2.835,44,2.062,45,2.835,46,2.062,47,0.153,48,2.038,49,3.882,50,2.534,51,4.711,52,3.055,53,3.055,54,0.969,55,3.055,56,3.055,57,3.055,58,3.055,59,1.935,60,1.628,61,1.617,62,2.142,63,1.756,64,0.92,65,2.738,66,2.727,67,0.178,68,2.727,69,2.142,70,2.136,71,2.21,72,2.727,73,2.142,74,1.392,75,1.142,76,2.142,77,1.708,78,1.482,79,2.835,80,2.142,81,2.737,82,3.055,83,2.038,84,4.075,85,1.17,86,0.577,87,4.267,88,1.482,89,1.29,90,2.484,91,0.743,92,3.304,93,2.667,94,1.469,95,1.69,96,3.304,97,3.055,98,1.839,99,1.32,100,1.553,101,1.142,102,1.115,103,0.039,104,2.555,105,0.306,106,0.592,107,0.592,108,1.046,109,1.668,110,1.17,111,1.039,112,1.154,113,1.17,114,0.549,115,0.637,116,1.105,117,2.329,118,1.642,119,1.732,120,1.474,121,0.884,122,2.386,123,2.142,124,1.28,125,4.489,126,1.157,127,2.714,128,2.352,129,2.522,130,2.329,131,2.714,132,2.397,133,2.445,134,2.714,135,2.445,136,2.445,137,2.445,138,2.506,139,2.445,140,1.178,141,1.681,142,2.569,143,2.142,144,2.142,145,2.142,146,1.886,147,2.484,148,2.484,149,2.142,150,2.337,151,2.142,152,0.621,153,1.508,154,1.392,155,2.142,156,2.038,157,1.228,158,1.228,159,0.004,160,0.005,161,0.004]],["title/interfaces/POSTMember.html",[0,0.085,1441,2.122]],["body/interfaces/POSTMember.html",[0,0.144,2,0.903,3,0.078,4,0.068,5,0.059,9,0.968,10,1.957,11,2.612,12,1.441,13,1.968,15,0.177,16,0.649,19,0.853,20,1.293,22,0.586,23,0.955,24,0.857,25,0.009,26,1.209,27,0.362,29,1.308,30,1.656,31,0.198,32,1.34,33,1.406,34,1.071,35,1.476,36,0.729,37,0.712,38,1.514,39,1.537,40,1.705,47,0.134,54,0.628,74,3.035,77,1.406,78,1.656,81,2.676,83,1.677,86,0.677,88,1.219,89,1.514,91,0.944,93,3.035,94,1.409,101,1.34,102,2.018,103,0.062,105,0.359,106,0.694,107,0.694,108,1.236,109,2.117,110,1.372,111,1.219,112,1.227,113,1.372,114,0.644,115,1.015,116,1.045,117,2.271,118,1.675,119,1.637,120,1.226,121,0.95,122,2.509,126,1.086,127,2.824,128,2.743,130,2.506,131,2.824,132,2.658,133,2.63,134,2.824,135,2.63,136,2.63,137,2.63,138,2.696,139,2.571,140,1.267,141,1.808,142,1.514,146,2.394,147,2.044,148,2.044,152,0.99,156,3.193,157,2.493,158,2.493,159,0.004,160,0.006,161,0.004,172,1.925,176,2.335,194,1.013,197,0.612,220,1.738,221,2.067,225,3.339,227,1.677,229,2.237,240,1.983,242,1.983,291,1.819,358,1.656,401,3.186,422,3.701,489,0.946,496,1.425,498,0.968,513,1.514,548,2.864,668,2.253,680,1.722,684,2.333,957,3.169,989,1.983,1020,2.333,1022,4.021,1042,1.871,1101,2.886,1110,1.819,1111,3.06,1216,2.514,1412,3.395,1414,3.395,1415,3.395,1421,3.395,1422,3.395,1424,3.395,1426,5.618,1428,3.395,1430,3.012,1431,4.611,1432,3.395,1433,4.611,1435,3.395,1436,3.395,1437,3.395,1439,4.092,1440,4.328,1441,3.361,1442,3.395,1443,2.42,1444,2.179,1445,4.611,1446,3.395,1447,4.611,1448,3.395,1449,3.287,1450,4.611,1451,3.287,1452,4.611,1453,3.395,1454,3.395,1455,3.395,1456,3.395,1457,3.395,1458,3.395,1459,3.395,1460,3.395,1461,3.395,1462,3.395,1463,3.395,1464,3.395,1465,3.395,1466,3.395,1467,3.395,1468,3.395,1469,3.395,1470,3.395,1471,3.395,1472,4.611,1473,3.395,1474,4.611,1475,3.395,1476,4.611,1477,4.611,1478,3.395,1479,3.395]],["title/interfaces/POSTMember-1.html",[0,0.071,644,1.259,1441,1.767]],["body/interfaces/POSTMember-1.html",[0,0.137,2,0.503,3,0.043,4,0.038,5,0.033,9,1.093,10,1.578,11,2.722,12,0.936,13,2.084,15,0.099,16,0.422,19,1.107,20,1.458,22,0.597,23,0.903,24,0.874,25,0.009,26,0.976,27,0.316,28,2.172,29,1.154,31,0.111,32,0.747,33,0.783,34,0.76,35,0.823,36,0.406,37,0.397,38,0.843,39,1.54,40,1.731,47,0.122,54,1.195,63,0.634,64,0.901,67,0.377,81,2.753,86,0.377,88,1.76,89,1.335,91,1.229,94,1.497,98,1.658,101,0.747,102,0.729,103,0.025,105,0.2,106,0.387,107,0.387,108,1.284,109,1.211,110,0.765,111,0.679,112,1.24,113,0.765,114,0.359,115,0.659,116,1.062,117,2.356,118,1.727,119,1.322,120,0.796,121,0.973,122,2.677,124,0.942,126,0.906,127,2.875,128,2.835,129,2.035,130,2.602,131,2.882,132,2.724,133,2.731,134,2.882,135,2.731,136,2.731,137,2.731,138,2.799,139,2.706,140,1.316,141,1.893,142,2.054,146,1.369,152,1.369,153,0.986,154,2.702,156,3.307,157,2.639,158,2.639,159,0.002,160,0.004,161,0.002,175,2.562,176,2.811,177,1.273,179,1.734,181,1.964,182,1.875,183,0.96,184,1.784,187,2.265,189,1.441,197,1.136,198,2.337,205,2.204,207,1.886,211,0.619,386,3.629,387,2.107,398,1.401,399,3.284,410,0.515,427,2.799,467,1.043,489,0.527,496,1.334,498,0.539,668,1.988,672,3.629,926,1.401,987,1.459,988,1.459,989,1.105,993,2.449,1020,3.166,1022,4.157,1024,3.405,1030,2.753,1031,1.459,1042,1.043,1195,3.368,1203,2.546,1226,1.922,1227,1.922,1327,3.946,1328,2.412,1329,1.523,1441,2.386,1443,1.348,1449,4.002,1451,4.36,1687,3.959,1718,1.459,1754,2.412,1931,1.459,1932,2.527,1933,2.867,1934,2.412,1935,2.31,1936,2.412,1937,2.867,1938,1.523,1939,2.867,1940,1.523,1941,1.596,1942,1.596,1943,1.596,1944,1.523,1945,1.459,1946,3.567,1947,3.261,1948,2.31,1949,2.31,1950,2.31,1951,1.596,1952,3.567,1953,1.596,1954,3.567,1955,4.134,1956,1.596,1957,2.527,1958,2.527,1959,1.596,1960,3.887,1961,2.527,1962,3.136,1963,1.596,1964,1.401,1965,3.136,1966,1.596,1967,2.527,1968,1.596,1969,2.527,1970,1.596,1971,1.596,1972,1.596,1973,1.596,1974,4.134,1975,1.596,1976,2.527,1977,1.596,1978,1.596,1979,2.527,1980,1.596,1981,1.596,1982,2.527,1983,1.596,1984,1.596,1985,1.596,1986,2.527,1987,1.596,1988,1.596,1989,2.527,1990,1.596,1991,1.596,1992,1.596,1993,1.596,1994,2.527,1995,1.596,1996,1.596,1997,1.596,1998,2.527,1999,1.596,2000,1.596,2001,2.527,2002,1.596,2003,2.527,2004,1.596,2005,1.596,2006,3.567,2007,1.596,2008,2.527,2009,1.596,2010,1.596,2011,1.596,2012,2.527,2013,1.596,2014,1.596,2015,1.596,2016,2.527,2017,1.596,2018,1.596,2019,2.527,2020,1.596,2021,3.567,2022,2.527,2023,4.134,2024,1.596,2025,2.527,2026,1.596,2027,2.527,2028,2.527,2029,1.596,2030,2.527,2031,1.596,2032,1.596,2033,2.527,2034,1.596]],["title/interfaces/POSTOrganization.html",[0,0.085,1945,2.55]],["body/interfaces/POSTOrganization.html",[0,0.137,2,0.504,3,0.043,4,0.038,5,0.033,9,1.094,10,1.58,11,2.723,12,0.938,13,2.084,15,0.099,16,0.422,19,1.108,20,1.447,22,0.597,23,0.904,24,0.872,25,0.009,26,0.977,27,0.316,28,2.175,29,1.156,31,0.111,32,0.748,33,0.785,34,0.761,35,0.824,36,0.407,37,0.397,38,0.845,39,1.54,40,1.731,47,0.122,54,1.195,63,0.635,64,0.902,67,0.377,81,2.754,86,0.378,88,1.762,89,1.337,91,1.229,94,1.498,98,1.66,101,0.748,102,0.731,103,0.025,105,0.201,106,0.388,107,0.388,108,1.284,109,1.213,110,0.766,111,0.681,112,1.241,113,0.766,114,0.36,115,0.66,116,1.063,117,2.357,118,1.727,119,1.323,120,0.798,121,0.973,122,2.678,124,0.943,126,0.907,127,2.875,128,2.836,129,2.037,130,2.603,131,2.882,132,2.724,133,2.732,134,2.882,135,2.732,136,2.732,137,2.732,138,2.8,139,2.706,140,1.317,141,1.893,142,2.056,146,1.372,152,1.37,153,0.988,154,2.704,156,3.307,157,2.64,158,2.64,159,0.002,160,0.004,161,0.002,175,2.564,176,2.812,177,1.274,179,1.736,181,1.965,182,1.876,183,0.962,184,1.785,187,2.268,189,1.444,197,1.136,198,2.34,205,2.206,207,1.889,211,0.621,386,3.632,387,2.109,398,1.404,399,3.287,410,0.516,427,2.8,467,1.045,489,0.528,496,1.335,498,0.54,668,1.991,672,3.632,926,1.404,987,1.462,988,1.462,989,1.107,993,2.45,1020,3.169,1022,4.159,1024,3.409,1030,2.757,1031,1.462,1042,1.045,1195,3.371,1203,2.549,1226,1.925,1227,1.925,1327,3.95,1328,2.416,1329,1.526,1441,1.925,1443,1.351,1449,4.004,1451,4.361,1687,3.962,1718,1.462,1754,2.416,1931,1.462,1932,2.531,1933,2.871,1934,2.416,1935,2.314,1936,2.416,1937,2.871,1938,1.526,1939,2.871,1940,1.526,1941,1.599,1942,1.599,1943,1.599,1944,1.526,1945,2.314,1946,3.571,1947,3.264,1948,2.314,1949,2.314,1950,2.314,1951,1.599,1952,3.571,1953,1.599,1954,3.571,1955,4.138,1956,1.599,1957,2.531,1958,2.531,1959,1.599,1960,3.891,1961,2.531,1962,3.14,1963,1.599,1964,1.404,1965,3.14,1966,1.599,1967,2.531,1968,1.599,1969,2.531,1970,1.599,1971,1.599,1972,1.599,1973,1.599,1974,4.138,1975,1.599,1976,2.531,1977,1.599,1978,1.599,1979,2.531,1980,1.599,1981,1.599,1982,2.531,1983,1.599,1984,1.599,1985,1.599,1986,2.531,1987,1.599,1988,1.599,1989,2.531,1990,1.599,1991,1.599,1992,1.599,1993,1.599,1994,2.531,1995,1.599,1996,1.599,1997,1.599,1998,2.531,1999,1.599,2000,1.599,2001,2.531,2002,1.599,2003,2.531,2004,1.599,2005,1.599,2006,3.571,2007,1.599,2008,2.531,2009,1.599,2010,1.599,2011,1.599,2012,2.531,2013,1.599,2014,1.599,2015,1.599,2016,2.531,2017,1.599,2018,1.599,2019,2.531,2020,1.599,2021,3.571,2022,2.531,2023,4.138,2024,1.599,2025,2.531,2026,1.599,2027,2.531,2028,2.531,2029,1.599,2030,2.531,2031,1.599,2032,1.599,2033,2.531,2034,1.599]],["title/interfaces/POSTUpdate.html",[0,0.085,96,2.272]],["body/interfaces/POSTUpdate.html",[0,0.171,1,2.204,2,0.766,3,0.066,4,0.058,5,0.05,6,1.98,7,1.98,8,1.162,9,1.236,10,2.653,11,2.722,12,1.955,13,1.854,14,2.721,15,0.15,16,0.579,17,3.685,18,1.739,19,0.967,20,1.496,21,3.875,22,0.606,23,1.081,24,0.898,25,0.009,26,1.444,27,0.322,28,2.803,29,1.111,30,1.478,31,0.168,32,1.137,33,1.193,34,0.841,35,1.253,36,0.619,37,0.604,38,1.285,39,1.509,40,1.564,41,4.236,42,2.054,43,2.827,44,2.054,45,2.827,46,2.054,47,0.152,48,2.032,49,3.875,50,2.498,51,4.709,52,3.047,53,3.047,54,0.967,55,3.047,56,3.047,57,3.047,58,3.047,59,1.929,60,1.624,61,1.614,62,2.134,63,1.753,64,0.919,65,2.73,66,2.721,67,0.177,68,2.721,69,2.134,70,2.133,71,2.204,72,2.721,73,2.134,74,1.387,75,1.137,76,2.134,77,1.704,78,1.478,79,2.827,80,2.134,81,2.735,82,2.134,83,1.423,84,3.954,85,1.165,86,0.575,87,4.261,88,1.723,89,1.285,90,2.889,91,0.741,92,3.297,93,2.914,94,1.466,95,2.403,96,3.596,97,4.098,98,1.834,99,1.316,100,1.549,101,1.137,102,1.111,103,0.038,104,2.553,105,0.305,106,0.589,107,0.589,108,1.044,109,1.663,110,1.165,111,1.035,112,1.152,113,1.165,114,0.547,115,0.634,116,1.104,117,2.326,118,1.64,119,1.73,120,1.471,121,0.882,122,2.383,123,2.134,124,1.279,125,4.485,126,1.156,127,2.712,128,2.348,129,2.518,130,2.326,131,2.712,132,2.394,133,2.442,134,2.712,135,2.442,136,2.442,137,2.442,138,2.503,139,2.442,140,1.177,141,1.679,142,2.565,143,2.134,144,2.134,145,2.134,146,1.881,147,2.477,148,2.477,149,2.134,150,2.334,151,2.134,152,0.619,153,1.502,154,1.387,155,2.134,156,2.032,157,1.223,158,1.223,159,0.004,160,0.005,161,0.004]],["title/interfaces/POSTUpdateMember.html",[0,0.085,1948,2.55]],["body/interfaces/POSTUpdateMember.html",[0,0.137,2,0.502,3,0.043,4,0.038,5,0.033,9,1.093,10,1.576,11,2.722,12,0.935,13,2.083,15,0.099,16,0.421,19,1.107,20,1.458,22,0.598,23,0.903,24,0.874,25,0.009,26,0.975,27,0.316,28,2.169,29,1.153,31,0.11,32,0.745,33,0.782,34,0.759,35,0.821,36,0.406,37,0.396,38,0.842,39,1.539,40,1.731,47,0.122,54,1.195,63,0.632,64,0.901,67,0.376,81,2.753,86,0.377,88,1.759,89,1.333,91,1.229,94,1.496,98,1.655,101,0.745,102,0.728,103,0.025,105,0.2,106,0.386,107,0.386,108,1.284,109,1.209,110,0.763,111,0.678,112,1.24,113,0.763,114,0.358,115,0.658,116,1.061,117,2.355,118,1.726,119,1.32,120,0.795,121,0.972,122,2.676,124,0.941,126,0.905,127,2.874,128,2.835,129,2.032,130,2.601,131,2.881,132,2.724,133,2.731,134,2.881,135,2.731,136,2.731,137,2.731,138,2.798,139,2.705,140,1.316,141,1.892,142,2.052,146,1.367,152,1.369,153,0.984,154,2.7,156,3.306,157,2.638,158,2.638,159,0.002,160,0.004,161,0.002,175,2.56,176,2.81,177,1.272,179,1.733,181,1.963,182,1.874,183,0.958,184,1.782,187,2.263,189,1.439,197,1.136,198,2.335,205,2.201,207,1.884,211,0.618,386,3.626,387,2.104,398,1.398,399,3.281,410,0.514,427,2.798,467,1.04,489,0.526,496,1.333,498,0.538,668,1.985,672,3.626,926,1.398,987,1.456,988,1.456,989,1.103,993,2.448,1020,3.163,1022,4.156,1024,3.401,1030,2.75,1031,1.456,1042,1.04,1195,3.765,1203,2.543,1226,1.919,1227,1.919,1327,3.943,1328,2.408,1329,1.52,1441,1.919,1443,1.346,1449,4,1451,4.358,1687,3.956,1718,1.456,1754,2.408,1931,1.456,1932,2.523,1933,2.864,1934,2.408,1935,2.306,1936,2.408,1937,2.864,1938,1.52,1939,2.864,1940,1.52,1941,1.593,1942,1.593,1943,1.593,1944,1.52,1945,1.456,1946,3.563,1947,3.776,1948,2.864,1949,2.306,1950,2.306,1951,1.593,1952,3.563,1953,1.593,1954,3.563,1955,4.131,1956,1.593,1957,2.523,1958,2.523,1959,1.593,1960,3.883,1961,2.523,1962,3.132,1963,1.593,1964,1.398,1965,3.132,1966,1.593,1967,2.523,1968,1.593,1969,2.523,1970,1.593,1971,1.593,1972,1.593,1973,1.593,1974,4.131,1975,1.593,1976,2.523,1977,1.593,1978,1.593,1979,2.523,1980,1.593,1981,1.593,1982,2.523,1983,1.593,1984,1.593,1985,1.593,1986,2.523,1987,1.593,1988,1.593,1989,2.523,1990,1.593,1991,1.593,1992,1.593,1993,1.593,1994,2.523,1995,1.593,1996,1.593,1997,1.593,1998,2.523,1999,1.593,2000,1.593,2001,2.523,2002,1.593,2003,2.523,2004,1.593,2005,1.593,2006,3.563,2007,1.593,2008,2.523,2009,1.593,2010,1.593,2011,1.593,2012,2.523,2013,1.593,2014,1.593,2015,1.593,2016,2.523,2017,1.593,2018,1.593,2019,2.523,2020,1.593,2021,3.563,2022,2.523,2023,4.131,2024,1.593,2025,2.523,2026,1.593,2027,2.523,2028,2.523,2029,1.593,2030,2.523,2031,1.593,2032,1.593,2033,2.523,2034,1.593]],["title/interfaces/POSTUpdateOrganization.html",[0,0.085,1950,2.55]],["body/interfaces/POSTUpdateOrganization.html",[0,0.137,2,0.502,3,0.043,4,0.038,5,0.033,9,1.093,10,1.576,11,2.722,12,0.935,13,2.083,15,0.099,16,0.421,19,1.107,20,1.458,22,0.598,23,0.903,24,0.874,25,0.009,26,0.975,27,0.316,28,2.169,29,1.153,31,0.11,32,0.745,33,0.782,34,0.759,35,0.821,36,0.406,37,0.396,38,0.842,39,1.539,40,1.731,47,0.122,54,1.195,63,0.632,64,0.901,67,0.376,81,2.753,86,0.377,88,1.759,89,1.333,91,1.229,94,1.496,98,1.655,101,0.745,102,0.728,103,0.025,105,0.2,106,0.386,107,0.386,108,1.284,109,1.209,110,0.763,111,0.678,112,1.24,113,0.763,114,0.358,115,0.658,116,1.061,117,2.355,118,1.726,119,1.32,120,0.795,121,0.972,122,2.676,124,0.941,126,0.905,127,2.874,128,2.835,129,2.032,130,2.601,131,2.881,132,2.724,133,2.731,134,2.881,135,2.731,136,2.731,137,2.731,138,2.798,139,2.705,140,1.316,141,1.892,142,2.052,146,1.367,152,1.369,153,0.984,154,2.7,156,3.306,157,2.638,158,2.638,159,0.002,160,0.004,161,0.002,175,2.56,176,2.81,177,1.272,179,1.733,181,1.963,182,1.874,183,0.958,184,1.782,187,2.263,189,1.439,197,1.136,198,2.335,205,2.201,207,1.884,211,0.618,386,3.626,387,2.104,398,1.398,399,3.281,410,0.514,427,2.798,467,1.04,489,0.526,496,1.333,498,0.538,668,1.985,672,3.626,926,1.398,987,1.456,988,1.456,989,1.103,993,2.448,1020,3.163,1022,4.156,1024,3.401,1030,2.75,1031,1.456,1042,1.04,1195,3.765,1203,2.543,1226,1.919,1227,1.919,1327,3.943,1328,2.408,1329,1.52,1441,1.919,1443,1.346,1449,4,1451,4.358,1687,3.956,1718,1.456,1754,2.408,1931,1.456,1932,2.523,1933,2.864,1934,2.408,1935,2.306,1936,2.408,1937,2.864,1938,1.52,1939,2.864,1940,1.52,1941,1.593,1942,1.593,1943,1.593,1944,1.52,1945,1.456,1946,3.563,1947,3.776,1948,2.306,1949,2.306,1950,2.864,1951,1.593,1952,3.563,1953,1.593,1954,3.563,1955,4.131,1956,1.593,1957,2.523,1958,2.523,1959,1.593,1960,3.883,1961,2.523,1962,3.132,1963,1.593,1964,1.398,1965,3.132,1966,1.593,1967,2.523,1968,1.593,1969,2.523,1970,1.593,1971,1.593,1972,1.593,1973,1.593,1974,4.131,1975,1.593,1976,2.523,1977,1.593,1978,1.593,1979,2.523,1980,1.593,1981,1.593,1982,2.523,1983,1.593,1984,1.593,1985,1.593,1986,2.523,1987,1.593,1988,1.593,1989,2.523,1990,1.593,1991,1.593,1992,1.593,1993,1.593,1994,2.523,1995,1.593,1996,1.593,1997,1.593,1998,2.523,1999,1.593,2000,1.593,2001,2.523,2002,1.593,2003,2.523,2004,1.593,2005,1.593,2006,3.563,2007,1.593,2008,2.523,2009,1.593,2010,1.593,2011,1.593,2012,2.523,2013,1.593,2014,1.593,2015,1.593,2016,2.523,2017,1.593,2018,1.593,2019,2.523,2020,1.593,2021,3.563,2022,2.523,2023,4.131,2024,1.593,2025,2.523,2026,1.593,2027,2.523,2028,2.523,2029,1.593,2030,2.523,2031,1.593,2032,1.593,2033,2.523,2034,1.593]],["title/interfaces/POSTUser.html",[0,0.085,92,2.272]],["body/interfaces/POSTUser.html",[0,0.171,1,2.209,2,0.769,3,0.066,4,0.058,5,0.05,6,1.986,7,1.986,8,1.164,9,1.237,10,2.655,11,2.723,12,1.956,13,1.856,14,2.721,15,0.151,16,0.58,17,3.687,18,1.74,19,0.969,20,1.496,21,3.88,22,0.606,23,1.08,24,0.897,25,0.009,26,1.445,27,0.323,28,2.808,29,1.114,30,1.481,31,0.169,32,1.141,33,1.197,34,0.843,35,1.257,36,0.621,37,0.606,38,1.289,39,1.51,40,1.565,41,4.239,42,2.06,43,2.833,44,2.06,45,2.833,46,2.06,47,0.153,48,2.036,49,3.88,50,2.499,51,4.71,52,3.053,53,3.053,54,0.969,55,3.053,56,3.053,57,3.053,58,3.053,59,1.933,60,1.627,61,1.616,62,2.141,63,1.755,64,0.92,65,2.736,66,2.726,67,0.178,68,2.726,69,2.141,70,2.135,71,2.209,72,2.726,73,2.141,74,1.391,75,1.141,76,2.141,77,1.707,78,1.481,79,2.833,80,2.141,81,2.737,82,2.141,83,1.428,84,3.958,85,1.169,86,0.577,87,4.266,88,1.726,89,1.838,90,2.894,91,0.866,92,3.601,93,2.916,94,1.468,95,1.689,96,3.302,97,3.053,98,1.838,99,1.319,100,1.552,101,1.141,102,1.114,103,0.039,104,2.555,105,0.306,106,0.591,107,0.591,108,1.045,109,1.667,110,1.169,111,1.038,112,1.153,113,1.169,114,0.548,115,0.636,116,1.105,117,2.329,118,1.642,119,1.732,120,1.473,121,0.883,122,2.385,123,2.141,124,1.279,125,4.488,126,1.157,127,2.714,128,2.351,129,2.521,130,2.329,131,2.714,132,2.397,133,2.444,134,2.714,135,2.444,136,2.444,137,2.444,138,2.505,139,2.444,140,1.178,141,1.68,142,2.568,143,2.141,144,2.141,145,2.141,146,1.885,147,2.483,148,2.483,149,2.141,150,2.336,151,2.141,152,0.621,153,1.506,154,1.391,155,2.141,156,2.036,157,1.227,158,1.227,159,0.004,160,0.005,161,0.004]],["title/components/PageNotFoundComponent.html",[296,0.987,365,1.55]],["body/components/PageNotFoundComponent.html",[3,0.09,4,0.079,5,0.068,15,0.206,25,0.009,27,0.243,31,0.23,47,0.09,54,1.043,61,1.15,64,0.692,67,0.313,91,0.917,103,0.053,105,0.597,121,0.604,124,1.219,159,0.005,160,0.007,161,0.005,177,1.322,197,1.112,211,1.29,220,1.322,296,1.683,297,2.111,298,2.45,299,2.373,300,2.235,301,2.373,302,2.373,307,1.292,308,3.396,309,2.373,310,1.926,311,1.797,313,1.418,315,1.418,317,1.418,318,1.66,320,1.385,325,1.261,336,1.666,337,1.628,343,2.111,344,2.16,345,2.373,346,2.373,347,3.589,348,2.111,349,3.589,350,2.111,351,2.373,352,2.054,353,2.373,354,1.999,355,2.373,356,2.111,357,2.111,358,2.025,359,3.396,360,2.111,361,2.111,362,2.111,363,3.066,364,2.111,365,2.795,366,2.373,367,2.111,368,1.999,369,2.373,370,2.111,371,1.999,372,2.111,373,1.999,374,2.054,375,1.714,376,2.373,377,2.373,394,4.517,482,2.887,690,4.541,731,6.805,1656,5.482,1888,6.006,2176,6.653,2177,4.65,2178,7.535,2179,6.802,2180,5.266,2181,5.266,2182,6.802,2183,9.329,2184,6.802,2185,6.802,2186,6.802,2187,6.802,2188,6.802,2189,6.802,2190,6.802,2191,7.834,2192,7.964,2193,6.802,2194,7.964,2195,6.802,2196,8.444,2197,6.802,2198,6.802,2199,6.802,2200,6.802,2201,8.987,2202,7.964,2203,6.802,2204,6.802,2205,8.873,2206,6.802,2207,7.964,2208,7.032,2209,6.802,2210,8.873,2211,6.802,2212,6.802,2213,6.802,2214,6.802,2215,6.802,2216,6.802,2217,6.802,2218,6.802,2219,6.802,2220,6.802,2221,6.802,2222,6.802,2223,6.802,2224,6.006,2225,6.802,2226,6.802,2227,6.802,2228,6.802,2229,6.802,2230,6.802,2231,6.006,2232,6.802,2233,6.802,2234,6.802,2235,6.802,2236,6.802]],["title/injectables/Porting.html",[30,1.187,1386,3.306]],["body/injectables/Porting.html",[3,0.109,4,0.096,5,0.116,8,1.388,11,2.546,15,0.249,16,0.807,22,0.575,24,0.821,25,0.009,27,0.294,30,2.059,31,0.278,36,1.024,37,0.999,39,1.419,47,0.109,64,1.079,67,0.378,88,2.059,101,1.882,102,1.838,103,0.064,105,0.675,106,1.172,107,1.172,108,0.951,112,0.927,116,1.226,121,0.943,122,2.546,124,1.304,130,1.927,141,1.391,159,0.007,160,0.007,161,0.006,165,1.965,296,1.423,317,1.597,320,1.736,473,3.452,496,1.673,530,2.158,554,2.908,639,2.485,640,2.294,644,2.18,934,3.531,1036,4.95,1386,6.626,1395,6.763,1396,6.763,2237,5.625,2238,8.718,2239,7.66,2240,7.66,2241,7.66,2242,7.66,2243,6.37,2244,8.214,2245,8.522,2246,7.66,2247,6.37,2248,6.37,2249,6.37,2250,6.37,2251,6.37,2252,6.37,2253,6.37,2254,6.37,2255,6.37,2256,6.37]],["title/classes/PreDiagnosisComponent.html",[103,0.044,829,3.103]],["body/classes/PreDiagnosisComponent.html",[3,0.111,4,0.097,5,0.084,8,1.17,15,0.252,16,0.813,22,0.509,24,0.743,25,0.009,27,0.356,31,0.282,34,1.339,36,1.037,37,1.012,47,0.111,67,0.297,86,1.152,103,0.064,105,0.654,106,1.181,107,1.181,108,0.963,112,1.124,114,0.916,115,1.36,116,1.152,121,0.741,126,0.893,159,0.006,160,0.008,161,0.006,165,1.656,220,1.255,221,1.906,307,1.466,310,1.345,311,1.255,313,1.345,315,1.345,317,1.609,318,1.784,320,1.682,325,1.545,327,2.452,337,1.399,410,1.315,421,2.208,430,1.953,435,1.953,484,2.265,489,1.609,498,1.647,501,2.208,502,2.324,503,2.576,530,1.818,574,2.153,577,3.319,829,6.238,830,6.898,831,6.405,885,7.341,991,4.074,1015,5.699,1444,3.1,1488,5.699,2257,7.558,2258,5.699,2259,7.72,2260,6.454,2261,6.454,2262,6.454,2263,7.72,2264,7.72]],["title/interfaces/PrivilegeTypes.html",[0,0.085,206,2.054]],["body/interfaces/PrivilegeTypes.html",[0,0.176,2,0.885,3,0.128,4,0.067,5,0.058,8,0.806,9,1.202,15,0.174,16,0.641,18,1.709,19,0.841,20,1.382,22,0.598,23,0.95,24,0.903,25,0.009,26,1.547,47,0.157,54,0.959,60,1.796,64,0.978,67,0.404,75,1.314,88,1.196,91,1.202,94,1.782,99,1.456,119,1.824,152,0.715,159,0.004,160,0.006,161,0.004,162,3.997,163,2.137,164,4.379,166,3.699,167,3.577,168,2.438,169,3.02,170,2.137,171,2.137,172,3.161,173,3.745,174,2.137,175,2.808,176,2.029,177,1.654,178,3.222,179,1.952,180,2.63,181,2.065,182,2.055,183,3.056,184,1.955,185,2.21,186,2.21,187,1.784,188,2.069,189,2.19,190,2.309,191,2.828,192,3.02,193,2.21,194,1.548,195,1.819,196,2.21,197,1.131,198,2.309,199,1.645,200,2.21,201,3.998,202,3.463,203,2.137,204,3.463,205,2.702,206,3.626,207,2.96,208,2.233,209,3.216,210,3.222,211,1.09,212,2.397,213,1.835,214,1.835,215,2.581,216,2.19,217,2.137,218,2.21,219,2.21,220,1.76,221,1.314,222,3.222,223,2.21,224,2.21,225,1.835,226,2.21,227,1.645,228,2.21,229,1.142,230,2.21,231,1.835,232,2.21,233,2.21,234,2.21,235,3.02,236,2.508,237,1.835,238,3.02,239,3.02,240,2.659,241,3.02,242,2.659,243,3.02,244,3.02,245,2.508,246,3.02,247,3.02,248,3.699,249,3.02,250,4.166,251,3.02,252,3.02,253,3.02,254,3.02,255,3.02,256,3.02,257,3.02,258,4.092,259,3.02,260,3.02,261,3.02,262,3.02,263,3.02,264,2.21,265,2.21,266,2.137,267,3.02,268,2.21,269,2.21,270,3.699,271,2.21,272,2.21,273,2.21,274,2.21,275,2.21,276,2.21,277,3.699,278,2.21,279,2.21,280,2.21,281,2.21,282,2.508,283,3.02,284,2.21,285,2.21,286,2.21,287,2.005,288,2.21,289,2.21,290,2.069,291,3.227,292,2.921,293,2.921,294,2.21,295,2.21]],["title/interfaces/ProcessedForm.html",[0,0.085,1123,2.662]],["body/interfaces/ProcessedForm.html",[0,0.153,2,0.631,3,0.054,4,0.048,5,0.041,8,0.574,9,1.03,10,2.279,11,2.574,12,1.49,13,2.032,14,2.262,15,0.124,16,0.502,18,1.626,20,1.335,22,0.605,23,1.006,24,0.906,25,0.009,26,1.379,27,0.293,29,0.914,30,1.281,31,0.139,32,0.936,33,0.982,34,0.876,35,1.031,36,0.509,37,0.497,38,1.057,39,1.499,40,1.692,47,0.141,64,0.837,67,0.315,74,2.681,81,2.706,83,1.171,86,0.473,89,1.59,93,2.958,94,1.089,95,1.385,101,0.936,102,0.914,103,0.048,105,0.251,106,0.485,107,0.485,108,0.711,109,1.927,110,0.959,111,0.852,112,1.221,113,0.959,114,0.45,115,0.785,116,1.24,117,2.317,118,1.86,119,1.49,120,1.268,121,0.953,122,2.574,124,0.975,126,1.149,127,2.829,128,2.432,129,2.758,130,2.513,131,2.829,132,2.679,133,2.638,134,2.829,135,2.638,136,2.638,137,2.638,138,2.703,139,2.488,140,1.271,141,1.813,142,2.771,154,1.716,157,2.575,158,2.575,159,0.003,160,0.005,161,0.003,168,1.911,194,0.708,209,3.159,221,2.741,227,1.761,231,1.965,236,1.965,237,1.307,245,2.817,282,1.307,358,2.059,455,0.982,460,2.355,489,0.66,496,1.461,498,0.676,509,1.112,513,1.057,541,1.236,855,3.819,886,3.514,887,3.16,942,4.311,944,2,957,2.451,971,3.53,993,1.477,1021,2,1039,3.305,1040,1.909,1041,2.652,1042,1.307,1043,2.104,1044,2.104,1045,1.522,1046,3.164,1047,1.522,1048,2.581,1049,2.104,1050,3.164,1051,4.765,1052,2.104,1053,3.164,1054,1.522,1055,2.104,1056,1.522,1057,3.008,1058,2.104,1059,2.104,1060,3.164,1061,3.164,1062,2.104,1063,3.164,1064,2.872,1065,2,1066,2.872,1067,2,1068,2.872,1069,2,1070,2.872,1071,2,1072,3.451,1073,2,1074,2.872,1075,2,1076,3.451,1077,2,1078,3.451,1079,2,1080,3.451,1081,2,1082,3.451,1083,2,1084,3.451,1085,2,1086,3.451,1087,2,1088,3.451,1089,2,1090,4.535,1091,3.529,1092,2,1093,2.104,1094,2.104,1095,2.104,1096,4.23,1097,2.104,1098,2.104,1099,2.104,1100,3.615,1101,2.817,1102,2.104,1103,3.174,1104,2.147,1105,1.473,1106,2.104,1107,2.147,1108,2.147,1109,2.872,1110,1.911,1111,2.367,1112,2.104,1113,3.305,1114,2,1115,2,1116,2.104,1117,2,1118,2,1119,2,1120,2,1121,1.473,1122,5.528,1123,3.838,1124,4.23,1125,4.23,1126,2.104,1127,2.104,1128,4.535,1129,4.23,1130,2.104,1131,2.104,1132,4.535,1133,4.23,1134,2.104,1135,2.104,1136,4.535,1137,4.23,1138,1.909,1139,4.23,1140,2.104,1141,2.104,1142,4.23,1143,4.23,1144,3.451,1145,3.346,1146,2.104,1147,2.104,1148,2.104,1149,2.104,1150,2.104,1151,2.104,1152,2.104,1153,2.104,1154,2.104,1155,2.104,1156,2.104,1157,2.104,1158,2.104,1159,2.104]],["title/interfaces/Sample.html",[0,0.085,220,0.859]],["body/interfaces/Sample.html",[0,0.143,2,0.89,3,0.077,4,0.067,5,0.058,9,0.961,10,1.938,11,2.603,12,1.428,13,1.958,15,0.175,16,0.643,19,0.844,20,1.286,22,0.595,23,0.951,24,0.875,25,0.009,26,1.2,27,0.36,29,1.29,30,1.64,31,0.195,32,1.321,33,1.386,34,1.063,35,1.456,36,0.719,37,0.701,38,1.492,39,1.534,40,1.702,47,0.134,54,0.619,74,3.132,77,1.386,78,1.64,81,2.667,83,1.653,86,0.668,88,1.202,89,1.492,91,0.937,93,3.025,94,1.395,101,1.321,102,2.004,103,0.061,105,0.354,106,0.684,107,0.684,108,1.232,109,2.102,110,1.353,111,1.202,112,1.223,113,1.353,114,0.635,115,1.005,116,1.037,117,2.258,118,1.666,119,1.625,120,1.214,121,0.947,122,2.499,126,1.162,127,2.819,128,2.736,130,2.496,131,2.819,132,2.652,133,2.62,134,2.819,135,2.62,136,2.62,137,2.62,138,2.685,139,2.56,140,1.263,141,1.801,142,1.492,146,2.377,147,2.015,148,2.015,152,0.981,156,3.185,157,2.481,158,2.481,159,0.004,160,0.006,161,0.004,172,1.898,176,2.69,194,0.999,197,0.603,220,1.742,221,2.052,225,3.464,227,1.653,229,2.231,240,1.955,242,1.955,291,1.793,358,1.64,401,3.141,422,3.691,489,0.932,496,1.415,498,0.954,513,1.492,548,2.823,668,2.221,680,1.698,684,2.3,957,3.138,989,1.955,1020,2.3,1022,4.004,1042,1.844,1101,2.865,1110,2.992,1111,3.031,1216,2.478,1412,3.346,1414,3.346,1415,3.346,1421,3.346,1422,3.346,1424,3.346,1426,5.584,1428,3.346,1430,2.97,1431,4.566,1432,3.346,1433,4.566,1435,3.346,1436,3.346,1437,3.346,1439,4.052,1440,4.286,1441,2.931,1442,3.346,1443,2.385,1444,2.148,1445,4.566,1446,3.346,1447,4.566,1448,3.346,1449,3.255,1450,4.566,1451,3.255,1452,4.566,1453,3.346,1454,3.346,1455,3.346,1456,3.346,1457,3.346,1458,3.346,1459,3.346,1460,3.346,1461,3.346,1462,3.346,1463,3.346,1464,3.346,1465,3.346,1466,3.346,1467,3.346,1468,3.346,1469,3.346,1470,3.346,1471,3.346,1472,4.566,1473,3.346,1474,4.566,1475,3.346,1476,4.566,1477,4.566,1478,3.346,1479,3.346]],["title/components/SampleDivComponent.html",[296,0.987,367,1.771]],["body/components/SampleDivComponent.html",[3,0.104,4,0.091,5,0.079,15,0.237,19,1.211,22,0.53,24,0.843,25,0.009,26,1.512,27,0.279,31,0.265,47,0.104,54,1.112,61,1.324,64,0.797,67,0.343,74,3.152,91,1.002,103,0.061,105,0.637,121,0.696,124,1.283,159,0.006,160,0.007,161,0.006,177,1.445,197,1.16,211,1.486,220,1.781,296,1.796,297,2.432,298,2.677,299,2.733,300,2.574,301,2.733,302,2.733,303,6.147,306,4.259,307,1.412,308,3.623,309,2.733,310,1.948,311,1.817,312,4.937,313,1.55,314,6.016,315,1.55,316,5.563,317,1.55,318,1.747,319,5.221,320,1.752,323,4.887,325,1.452,326,3.456,336,1.821,337,1.099,343,2.432,344,2.361,345,2.733,346,2.733,347,3.777,348,2.432,349,3.777,350,2.432,351,2.733,352,2.365,353,2.733,354,2.302,355,2.733,356,2.432,357,2.432,358,2.161,359,3.623,360,2.432,361,2.432,362,2.432,363,3.35,364,2.432,365,2.128,366,2.733,367,3.36,368,2.302,369,2.733,370,2.432,371,2.302,372,2.432,373,2.302,374,2.365,375,1.974,376,2.733,377,2.733,787,7.053,788,7.053,2110,6.564,2112,5.355,2113,5.355]],["title/interfaces/SampleFormData.html",[0,0.085,222,2.054]],["body/interfaces/SampleFormData.html",[0,0.176,2,0.871,3,0.127,4,0.066,5,0.057,8,0.793,9,1.199,15,0.171,16,0.633,18,1.702,19,0.832,20,1.376,22,0.612,23,0.945,24,0.903,25,0.009,26,1.544,47,0.157,54,0.95,60,1.776,64,0.972,67,0.402,75,1.293,88,1.176,91,1.199,94,1.375,99,1.439,119,1.407,152,0.703,159,0.004,160,0.006,161,0.004,162,3.988,163,2.102,164,4.368,166,3.673,167,3.552,168,2.411,169,2.986,170,2.102,171,2.102,172,3.139,173,3.723,174,2.102,175,2.792,176,2.006,177,1.648,178,3.194,179,1.935,180,2.608,181,2.055,182,2.047,183,3.041,184,1.943,185,2.174,186,2.174,187,1.755,188,2.035,189,2.165,190,2.283,191,2.796,192,2.986,193,2.174,194,1.535,195,1.804,196,2.174,197,1.127,198,2.283,199,1.618,200,2.174,201,3.978,202,3.439,203,2.102,204,3.439,205,3.124,206,3.194,207,2.283,208,2.214,209,2.48,210,3.194,211,1.072,212,2.388,213,1.805,214,1.805,215,2.552,216,2.165,217,2.102,218,2.174,219,2.174,220,1.757,221,1.293,222,3.605,223,3.673,224,2.174,225,1.805,226,2.174,227,1.618,228,2.174,229,1.123,230,2.174,231,1.805,232,2.174,233,2.174,234,3.673,235,2.986,236,2.48,237,1.805,238,2.986,239,2.986,240,2.629,241,2.986,242,2.629,243,2.986,244,2.986,245,2.48,246,2.986,247,2.986,248,4.074,249,2.986,250,4.15,251,2.986,252,2.986,253,2.986,254,2.986,255,2.986,256,2.986,257,2.986,258,4.261,259,2.986,260,2.986,261,2.986,262,2.986,263,2.986,264,2.174,265,2.174,266,2.102,267,2.986,268,2.174,269,2.174,270,4.074,271,2.174,272,2.174,273,2.174,274,2.174,275,2.174,276,2.174,277,3.673,278,2.174,279,2.174,280,2.174,281,2.174,282,2.48,283,3.85,284,2.174,285,2.174,286,2.174,287,1.972,288,2.174,289,2.174,290,2.035,291,3.211,292,2.888,293,2.888,294,2.174,295,2.174,2265,8.734]],["title/classes/ServerErrorInterceptor.html",[103,0.044,1550,3.306]],["body/classes/ServerErrorInterceptor.html",[3,0.1,4,0.087,5,0.075,15,0.227,16,0.763,19,0.804,22,0.544,24,0.56,25,0.009,27,0.409,29,2.089,31,0.254,34,1.264,47,0.1,67,0.364,70,2.638,99,1.392,103,0.058,105,0.574,109,1.759,114,1.303,115,1.193,118,1.762,121,0.831,130,1.759,136,2.3,137,1.846,140,0.89,141,1.855,159,0.006,160,0.007,161,0.006,165,2.024,182,1.424,190,2.749,221,1.717,307,1.376,317,1.51,320,1.73,410,1.184,419,2.859,420,1.563,421,1.989,458,1.802,530,2.222,557,2.825,558,2.749,574,1.94,577,2.99,639,2.825,640,2.608,748,5.213,910,6.966,916,6.358,925,4.35,926,3.222,927,6.395,929,5.541,970,6.981,975,6.395,988,3.355,993,1.802,1036,4.364,1498,4.685,1526,5.133,1532,6.966,1550,5.42,1551,6.981,1861,5.133,2145,6.966,2231,5.133,2266,7.648,2267,5.133,2268,7.889,2269,7.242,2270,7.242,2271,7.889,2272,5.813,2273,5.813,2274,5.813,2275,7.242,2276,8.88,2277,5.813,2278,7.242,2279,7.889,2280,5.813,2281,5.813,2282,5.813,2283,5.813,2284,5.813,2285,5.813,2286,5.813,2287,5.813,2288,5.813,2289,5.813,2290,5.813,2291,5.813,2292,5.813,2293,5.813,2294,5.813,2295,5.813,2296,5.813,2297,5.813,2298,7.242,2299,7.242,2300,5.813,2301,5.813,2302,5.813,2303,5.813,2304,7.242,2305,5.813,2306,5.813,2307,5.813,2308,5.813]],["title/interfaces/Species.html",[0,0.085,225,1.822]],["body/interfaces/Species.html",[0,0.144,2,0.903,3,0.078,4,0.068,5,0.059,9,0.968,10,1.957,11,2.612,12,1.441,13,1.968,15,0.177,16,0.649,19,0.853,20,1.293,22,0.586,23,0.955,24,0.857,25,0.009,26,1.209,27,0.362,29,1.308,30,1.656,31,0.198,32,1.34,33,1.406,34,1.071,35,1.476,36,0.729,37,0.712,38,1.514,39,1.537,40,1.705,47,0.134,54,0.628,74,3.035,77,1.406,78,1.656,81,2.676,83,1.677,86,0.677,88,1.219,89,1.514,91,0.944,93,2.827,94,1.409,101,1.34,102,2.018,103,0.062,105,0.359,106,0.694,107,0.694,108,1.236,109,2.117,110,1.372,111,1.219,112,1.227,113,1.372,114,0.644,115,1.015,116,1.045,117,2.271,118,1.675,119,1.637,120,1.226,121,0.95,122,2.509,126,1.086,127,2.824,128,2.743,130,2.506,131,2.824,132,2.658,133,2.63,134,2.824,135,2.63,136,2.63,137,2.63,138,2.696,139,2.571,140,1.267,141,1.808,142,1.514,146,2.394,147,2.044,148,2.044,152,0.99,156,3.193,157,2.493,158,2.493,159,0.004,160,0.006,161,0.004,172,1.925,176,2.335,194,1.013,197,0.612,220,1.738,221,2.067,225,3.563,227,1.677,229,2.237,240,1.983,242,1.983,291,1.819,358,1.656,401,3.186,422,3.701,489,0.946,496,1.425,498,0.968,513,1.514,548,2.864,668,2.253,680,1.722,684,2.333,957,3.169,989,1.983,1020,2.333,1022,4.021,1042,1.871,1101,2.886,1110,1.819,1111,3.06,1216,2.514,1412,3.395,1414,3.395,1415,3.395,1421,3.395,1422,3.395,1424,3.395,1426,5.618,1428,3.395,1430,3.012,1431,4.611,1432,3.395,1433,4.611,1435,3.395,1436,3.395,1437,3.395,1439,4.092,1440,4.328,1441,2.959,1442,3.395,1443,2.42,1444,2.179,1445,4.611,1446,3.395,1447,4.611,1448,3.395,1449,3.287,1450,4.611,1451,3.287,1452,4.611,1453,3.395,1454,3.395,1455,3.395,1456,3.395,1457,3.395,1458,3.395,1459,3.395,1460,3.395,1461,3.395,1462,3.395,1463,3.395,1464,3.395,1465,3.395,1466,3.395,1467,3.395,1468,3.395,1469,3.395,1470,3.395,1471,3.395,1472,4.611,1473,3.395,1474,4.611,1475,3.395,1476,4.611,1477,4.611,1478,3.395,1479,3.395]],["title/classes/StaffDashboardComponent.html",[103,0.044,838,2.934]],["body/classes/StaffDashboardComponent.html",[3,0.064,4,0.056,5,0.049,8,0.977,9,1.112,15,0.146,16,0.568,19,0.518,22,0.614,23,1.051,24,0.774,25,0.009,27,0.362,31,0.164,34,1.12,36,0.602,37,0.588,39,1.388,47,0.064,50,1.518,61,1.177,63,1.583,67,0.173,77,1.67,78,1.697,83,2.704,85,2.43,86,1.24,91,0.986,98,1.798,99,0.897,100,2.263,103,0.073,104,2.536,105,0.5,106,0.825,107,0.825,108,1.172,112,1.065,114,1.179,115,1.04,116,1.29,118,1.347,120,1.073,121,0.953,124,1.057,126,0.955,140,1.166,150,2.451,153,3.191,159,0.004,160,0.005,161,0.004,165,0.961,184,1.731,194,1.204,195,1.658,197,0.851,208,2.212,212,1.778,220,1.422,229,2.099,287,3.433,307,1.024,310,0.781,311,0.728,313,0.781,315,0.781,317,1.124,318,1.439,320,1.853,325,1.988,326,1.545,327,1.712,329,3.248,331,3.579,336,1.792,337,1.456,339,3.111,381,2.273,392,2.982,409,2.631,410,0.763,419,2.663,420,1.007,421,1.282,422,3.105,423,2.162,424,2.16,425,1.59,426,1.59,427,2.381,428,1.502,430,1.133,431,1.799,432,2.803,433,2.803,435,1.133,448,3.41,449,4.724,455,2.739,456,3.141,457,2.76,458,2.739,459,2.68,460,2.334,461,2.76,462,2.76,463,2.76,464,2.76,465,2.397,466,2.772,467,2.223,468,2.772,469,2.046,470,2.772,480,2.847,481,3.019,482,2.931,483,2.931,484,2.674,488,2.847,489,1.753,490,3.551,491,2.223,492,3.985,493,3.985,494,3.579,496,1.098,497,3.07,498,1.473,501,1.282,502,1.349,503,2.106,508,2.853,509,1.315,510,1.59,511,1.638,512,1.688,513,1.25,530,1.055,537,1.941,539,2.288,549,2.853,550,1.844,551,1.754,552,2.161,553,2.161,554,2.046,555,2.161,556,2.161,557,1.461,558,1.422,559,2.892,560,2.933,561,2.845,562,2.936,563,3.032,564,2.936,565,1.799,566,2.589,567,3.032,569,1.799,570,3.032,572,3.032,574,1.25,577,1.926,639,3.412,640,3.151,644,1.282,717,3.858,838,5.434,840,6.4,886,3.017,1039,4.222,1041,2.334,1091,2.102,1103,4.054,1145,2.853,1165,4.192,1166,4.434,1169,3.804,1173,4.161,1203,2.429,1204,3.248,1205,2.356,1206,3.248,1207,3.248,1224,3.579,1301,1.742,1605,6.46,2042,3.308,2044,3.308,2049,3.308,2309,5.259,2310,6.313,2311,6.313,2312,6.313,2313,6.313,2314,7.316,2315,6.904,2316,3.429,2317,5.39,2318,3.746,2319,3.746,2320,3.746,2321,3.746,2322,3.746,2323,3.746,2324,3.746,2325,3.746,2326,3.746,2327,3.746,2328,3.746,2329,3.746,2330,3.746,2331,3.746,2332,3.746,2333,3.746,2334,3.746,2335,3.746,2336,3.746,2337,3.746,2338,3.746,2339,3.746,2340,3.746,2341,1.86,2342,3.746,2343,3.746,2344,2.162,2345,3.111]],["title/components/StaffDivComponent.html",[296,0.987,370,1.771]],["body/components/StaffDivComponent.html",[3,0.102,4,0.089,5,0.077,15,0.232,22,0.525,24,0.839,25,0.009,27,0.274,31,0.26,47,0.102,54,1.102,60,1.754,61,1.296,64,0.78,67,0.411,91,1.153,103,0.073,105,0.631,121,0.681,124,1.273,159,0.006,160,0.007,161,0.006,177,1.427,181,2.234,182,2.133,197,1.247,211,1.455,220,1.427,296,1.779,297,2.381,298,2.643,299,2.676,300,2.521,301,2.676,302,2.676,303,6.116,306,4.171,307,1.394,308,3.59,309,2.676,310,1.945,311,1.814,312,4.873,313,1.53,314,5.96,315,1.53,316,5.492,317,1.53,318,1.734,319,5.154,320,1.741,321,6.48,322,5.243,323,4.785,324,5.243,325,1.422,326,3.431,327,1.886,328,3.578,329,3.578,330,4.785,332,2.596,333,5.243,334,5.243,335,3.291,336,1.951,337,1.33,338,6.419,339,4.597,340,7.033,343,2.381,344,2.331,345,2.676,346,2.676,347,3.749,348,2.381,349,3.749,350,2.381,351,2.676,352,2.316,353,2.676,354,2.254,355,2.676,356,2.381,357,2.381,358,2.141,359,3.59,360,2.381,361,2.381,362,2.381,363,3.307,364,2.381,365,2.084,366,2.676,367,2.381,368,2.254,369,2.676,370,3.336,371,2.254,372,2.381,373,2.254,374,2.316,375,1.933,376,2.676,377,2.676,387,2.032,789,7.017,790,7.017,2346,5.938]],["title/components/StaffHelpComponent.html",[296,0.987,371,1.677]],["body/components/StaffHelpComponent.html",[3,0.102,4,0.09,5,0.077,15,0.233,25,0.009,27,0.275,31,0.261,47,0.102,54,1.104,59,2.924,61,1.302,64,0.783,67,0.339,77,2.28,78,1.978,91,0.992,103,0.06,105,0.632,118,1.569,121,0.684,124,1.275,159,0.006,160,0.007,161,0.006,177,1.43,197,1.232,211,1.461,220,1.62,229,2.236,296,1.783,297,2.391,298,2.649,299,2.687,300,2.531,301,2.687,302,2.687,307,1.397,308,3.596,309,2.687,310,1.945,311,1.814,313,1.534,315,1.534,317,1.534,318,1.737,320,1.498,325,1.427,336,1.802,337,1.08,343,2.391,344,2.336,345,2.687,346,2.687,347,3.755,348,2.391,349,3.755,350,2.391,351,2.687,352,2.325,353,2.687,354,2.263,355,2.687,356,2.391,357,2.391,358,2.417,359,3.596,360,2.391,361,2.391,362,2.391,363,3.316,364,2.391,365,2.092,366,2.687,367,2.391,368,2.263,369,2.687,370,2.391,371,3.163,372,2.391,373,2.263,374,2.325,375,1.941,376,2.687,377,2.687,380,4.188,381,3,382,5.971,383,5.505,384,4.462,385,4.462,390,6.235,392,2.78,393,6.235,394,5.533,395,6.235,431,3.533,717,3.533,841,5.604,855,4.053,886,3.034,887,3.123,1041,3.222,1091,3.4,1101,3.034,2070,5.929,2071,6.496,2072,5.929,2309,4.605,2347,7.357]],["title/interfaces/StaffInfo.html",[0,0.085,198,1.677]],["body/interfaces/StaffInfo.html",[0,0.176,2,0.876,3,0.127,4,0.066,5,0.057,8,0.797,9,1.2,15,0.172,16,0.636,18,1.704,19,0.835,20,1.428,22,0.601,23,0.947,24,0.906,25,0.009,26,1.567,47,0.157,54,0.953,60,1.783,64,0.974,67,0.403,75,1.3,88,1.183,91,1.206,94,1.38,99,1.445,119,1.412,152,0.97,159,0.004,160,0.006,161,0.004,162,3.991,163,2.114,164,4.372,165,2.058,166,3.681,167,3.56,168,2.42,169,2.998,170,2.114,171,2.114,172,3.146,173,3.73,174,2.114,175,2.797,176,2.014,177,1.65,178,3.203,179,2.26,180,2.615,181,2.178,182,2.124,183,3.222,184,1.947,185,2.186,186,2.186,187,1.764,188,2.046,189,2.174,190,2.291,191,2.807,192,2.998,193,2.186,194,1.539,195,1.809,196,2.186,197,1.145,198,2.615,199,2.74,200,2.186,201,3.984,202,3.447,203,2.114,204,3.447,205,2.687,206,3.203,207,2.291,208,2.215,209,2.489,210,3.203,211,1.078,212,2.391,213,1.815,214,1.815,215,2.562,216,2.174,217,2.114,218,2.186,219,2.186,220,1.758,221,1.3,222,3.203,223,2.186,224,2.186,225,1.815,226,2.186,227,1.627,228,2.186,229,1.129,230,2.186,231,1.815,232,2.186,233,2.186,234,2.186,235,2.998,236,2.489,237,1.815,238,2.998,239,2.998,240,2.639,241,2.998,242,2.639,243,2.998,244,2.998,245,2.489,246,2.998,247,2.998,248,3.681,249,2.998,250,4.155,251,2.998,252,2.998,253,2.998,254,2.998,255,2.998,256,2.998,257,2.998,258,4.08,259,2.998,260,2.998,261,2.998,262,2.998,263,2.998,264,2.186,265,2.186,266,2.114,267,2.998,268,2.186,269,2.186,270,3.681,271,2.186,272,2.186,273,2.186,274,2.186,275,2.186,276,2.186,277,3.681,278,2.186,279,2.186,280,2.186,281,2.186,282,2.489,283,2.998,284,2.186,285,2.186,286,2.186,287,1.983,288,2.186,289,2.186,290,2.046,291,3.217,292,2.899,293,2.899,294,2.186,295,2.186]],["title/interfaces/StaffMember.html",[0,0.085,429,1.991]],["body/interfaces/StaffMember.html",[0,0.098,2,1.01,3,0.087,4,0.076,5,0.066,9,1.087,12,1.187,14,2.319,15,0.198,16,0.7,20,1.293,22,0.605,23,0.927,24,0.869,25,0.009,26,1.445,27,0.392,31,0.222,34,1.133,36,0.816,37,0.796,39,1.408,40,0.964,47,0.114,48,1.876,61,1.45,63,1.665,70,1.464,77,1.573,78,1.785,85,2.466,86,1.217,98,1.693,100,2.085,103,0.074,104,2.526,105,0.526,106,0.777,107,0.777,108,1.272,112,1.143,114,1.226,115,1.094,116,1.105,120,1.01,124,1.247,126,1.087,140,1.304,150,2.543,152,1.067,159,0.005,160,0.006,161,0.005,179,2.212,181,2.015,182,1.924,184,1.272,194,1.134,195,1.744,197,1.149,208,2.178,212,1.43,307,0.964,310,1.058,311,0.987,313,1.058,315,1.058,318,1.058,327,1.612,337,0.92,381,1.828,387,2.533,392,2.964,410,1.034,419,2.652,420,1.364,421,1.737,422,3.142,423,2.929,424,2.533,425,2.154,426,2.154,427,2.556,428,2.035,429,3.539,430,1.536,435,1.536,438,4.192,448,3.333,452,3.565,455,2.64,456,3.091,457,2.219,458,2.591,459,2.154,460,1.876,461,2.219,462,2.219,463,2.219,464,2.219,465,1.927,466,2.61,467,2.093,468,2.61,469,1.927,470,2.61,473,2.287,488,2.739,489,1.699,490,3.415,491,2.093,492,2.929,493,4.272,496,1.353,497,2.455,498,1.083,501,1.737,502,1.828,503,1.693,508,2.887,509,1.781,510,2.154,511,2.219,535,2.36,536,2.36,537,2.828,538,2.61,539,3.333,541,1.98,559,2.521,622,3.565,623,3.798,624,3.798,625,4.09,626,3.798,627,3.798,630,4.09,631,2.521,644,1.737,673,3.798,674,3.798,680,1.927,682,3.542,683,2.707,684,2.61,843,5.872,844,3.798,1041,2.455,1091,1.98,1145,2.887,1169,3.059,1173,3.059,1203,2.287,1204,3.059,1205,2.219,1206,3.059,1207,3.059,1224,4.41,2309,2.929,2316,3.298,2341,2.521]],["title/interfaces/StaffMember-1.html",[0,0.071,429,1.658,644,1.259]],["body/interfaces/StaffMember-1.html",[0,0.114,2,0.85,3,0.073,4,0.064,5,0.055,9,1.181,12,0.999,15,0.167,16,0.623,19,0.818,20,1.265,22,0.603,23,0.962,24,0.881,25,0.009,26,1.435,27,0.389,31,0.187,34,1.038,36,0.686,37,0.67,39,1.328,47,0.116,50,1.203,60,1.261,61,0.932,63,1.482,77,1.323,78,1.589,85,2.325,86,1.147,90,1.924,99,1.022,100,2.34,103,0.043,104,2.381,105,0.468,106,0.653,107,0.653,108,1.216,111,1.147,112,1.228,114,1.197,115,0.973,116,1.287,120,1.349,124,0.905,126,0.938,140,1.271,150,2.111,152,1.335,159,0.004,160,0.006,161,0.004,177,1.318,179,2.164,181,1.971,182,1.882,184,1.835,194,0.954,195,1.552,197,1.036,207,1.621,208,2.111,212,1.91,220,1.149,229,1.878,307,0.811,310,0.89,311,0.83,313,0.89,315,0.89,318,0.89,325,1.022,326,3.018,327,1.356,328,3.562,329,4.41,331,2.835,336,2.091,337,1.547,339,4.223,344,2.324,378,2.695,381,2.635,387,2.921,388,4.763,392,2.652,407,5.073,408,2.835,409,2.998,410,0.869,411,2.964,412,1.665,413,3.411,414,2.584,415,1.461,416,5.073,417,2.695,418,2.464,419,2.207,420,1.147,421,1.461,422,2.878,423,2.464,424,2.022,425,1.812,426,1.812,427,2.382,428,1.712,429,3.298,430,1.292,431,2.05,432,3.195,433,3.195,434,5.444,435,1.292,436,3.769,437,3.769,438,4.28,439,4.423,440,3.769,441,3.769,442,3.769,443,4.151,444,5.219,445,5.986,446,3.769,447,3.769,448,3.106,449,5.073,450,3.44,451,3.44,452,4.151,453,3.44,454,3.44,455,2.381,456,2.84,457,1.866,458,2.574,459,1.812,460,2.506,461,2.964,462,1.866,463,1.866,464,1.866,465,1.621,466,3.04,467,2.438,468,3.04,469,2.244,470,3.04,471,3.769,472,3.769,473,2.664,474,5.219,475,2.935,476,3.769,477,3.153,478,5.219,479,3.769,480,2.438,481,2.584,482,2.509,483,2.509,484,2.379,485,3.769,486,3.769,487,3.44,488,2.438,489,1.602,490,3.04,491,1.761,492,3.913,493,3.913,494,2.835,495,4.423,496,0.869,497,2.185,498,1.261,499,1.866,500,2.366,501,1.461,502,1.537,503,1.972,504,3.769,505,5.219,506,3.769,507,3.769,508,1.665,509,1.498,510,1.812,511,1.866,512,1.924,513,1.424,514,3.769,515,3.769,516,3.769,517,3.769,518,3.769,519,3.769,520,3.44,521,2.998,522,3.769,523,3.769,524,3.769,525,3.367,526,3.256,527,3.367,528,4.151,529,3.44,530,1.203,531,4.423,532,3.44,533,3.769,534,3.44,535,1.985,536,1.985,537,2.128,538,2.195,539,2.509,540,3.769,541,1.665,542,2.835,543,2.835,544,3.769,545,3.769,546,5.219,547,3.769,548,2.695,549,2.305,550,1.461,551,1.389,552,1.712,553,1.712,554,1.621,555,1.712,556,1.712,557,1.665,558,1.621,559,3.017,560,3.267,561,3.055,562,3.152,563,2.05,564,1.985,565,2.05,566,2.839,567,2.05,568,2.12,569,2.05,570,2.05,571,2.12,572,2.05]],["title/interfaces/StaffMember-2.html",[0,0.071,429,1.658,1301,1.71]],["body/interfaces/StaffMember-2.html",[0,0.143,1,1.15,2,0.571,3,0.049,4,0.043,5,0.037,9,0.397,12,0.671,13,1.351,14,2.574,15,0.112,16,0.465,17,1.822,18,1.612,19,0.904,20,0.997,22,0.602,23,0.98,24,0.891,25,0.009,27,0.365,31,0.125,34,0.825,36,0.461,37,0.45,39,1.243,40,1.15,47,0.13,48,1.061,50,1.841,59,1.007,61,0.626,63,1.108,64,0.708,66,1.218,67,0.132,68,1.218,70,1.746,71,1.15,72,1.218,75,0.848,85,2.305,86,0.903,99,0.687,100,2.026,103,0.029,104,2.026,105,0.35,106,0.439,107,0.439,108,1.074,112,1.244,114,1.054,115,0.728,116,1.268,118,1.584,120,0.571,124,1.39,126,1.149,140,1.322,141,0.626,150,1.746,152,0.71,159,0.003,160,0.004,161,0.003,179,1.705,180,2.045,181,1.553,182,1.483,184,1.517,194,0.641,195,0.753,197,0.816,199,2.745,208,2.158,212,1.518,307,0.545,310,0.598,311,0.558,313,0.598,315,0.598,318,0.598,326,1.822,327,0.911,332,1.254,336,1.483,337,1.251,344,1.922,381,1.94,387,1.844,392,2.641,402,3.113,403,1.59,404,1.656,405,4.558,410,0.584,411,2.356,412,1.119,414,1.932,415,0.982,419,2.127,420,0.771,421,0.982,424,1.512,425,1.218,426,1.218,427,1.97,428,1.15,429,2.728,430,0.868,435,0.868,448,3.152,455,2.633,456,2.659,457,1.254,458,2.826,459,1.218,460,1.992,461,2.356,462,1.254,463,1.254,464,1.254,465,1.089,469,2.045,473,3.346,475,3.006,477,3.228,480,1.822,481,1.932,482,1.875,483,3.525,484,1.891,488,1.822,489,1.362,491,1.183,496,1.406,497,1.992,498,0.943,499,1.254,501,0.982,502,1.033,503,1.474,508,2.361,509,1.007,510,1.218,511,1.254,512,1.293,513,0.957,525,2.194,526,2.122,527,2.194,535,1.334,536,1.334,537,2.743,538,1.476,539,3.606,541,2.361,549,1.723,550,0.982,551,0.934,552,1.15,553,1.15,554,1.089,555,1.15,556,1.15,557,1.119,558,1.089,559,2.953,560,3.383,561,2.428,562,2.505,563,1.378,564,1.334,565,2.122,566,2.122,567,1.378,568,1.425,569,1.378,570,1.378,571,1.425,572,1.378,582,1.334,597,1.476,606,1.59,607,1.656,619,1.119,631,1.425,644,0.982,656,1.59,658,1.59,659,1.425,660,1.59,661,2.449,665,2.272,675,1.656,680,2.298,682,3.486,683,3.228,706,4.442,717,2.588,886,2.847,887,2.93,993,2.026,1041,1.633,1045,1.378,1047,1.378,1048,2.428,1054,1.378,1056,1.378,1091,1.119,1104,1.991,1105,1.334,1107,2.428,1108,1.991,1110,1.772,1121,1.334,1145,2.102,1205,2.356,1301,1.334,1356,2.55,1357,1.53,1358,3.984,1359,1.656,1444,2.907,1544,1.476,1546,1.53,1547,1.53,2149,1.656,2151,1.59,2152,1.59,2168,1.656,2316,2.194,2341,1.425,2344,1.656,2345,3.11,2348,1.656,2349,2.55,2350,1.729,2351,3.11,2352,1.656,2353,2.986,2354,1.729,2355,1.729,2356,2.986,2357,2.986,2358,2.986,2359,2.986,2360,2.986,2361,2.986,2362,1.729,2363,1.729,2364,1.729,2365,1.729,2366,1.729,2367,1.729,2368,1.729,2369,1.729,2370,1.729,2371,1.729,2372,1.729,2373,1.729,2374,1.729,2375,1.729,2376,1.729,2377,1.729,2378,1.729,2379,1.729,2380,2.663,2381,1.729,2382,2.663,2383,1.729,2384,2.663,2385,1.729,2386,2.663,2387,1.729,2388,1.729,2389,1.729,2390,1.729,2391,1.729,2392,1.59,2393,1.729,2394,2.663,2395,1.59,2396,1.729,2397,1.729,2398,1.729,2399,1.729,2400,1.729,2401,4.396,2402,3.247,2403,1.729,2404,1.729,2405,4.841,2406,3.247,2407,3.647,2408,3.647,2409,4.841,2410,3.647,2411,3.647,2412,3.647,2413,3.647,2414,3.647,2415,3.647,2416,3.647,2417,3.647,2418,3.647,2419,3.647,2420,1.729,2421,3.247,2422,1.729,2423,3.247,2424,3.247,2425,3.939,2426,3.247,2427,1.729,2428,1.729,2429,1.729,2430,1.729,2431,1.729,2432,1.729,2433,1.729,2434,1.729,2435,1.729,2436,1.729,2437,5.229,2438,1.729,2439,4.77,2440,1.729,2441,1.729,2442,1.729,2443,1.729,2444,1.729,2445,1.729,2446,1.729,2447,1.729,2448,1.729,2449,1.729,2450,1.729,2451,1.729,2452,4.841,2453,1.729,2454,1.729,2455,1.729,2456,1.729,2457,1.729,2458,1.729,2459,1.729,2460,1.729,2461,1.729,2462,1.729,2463,1.729,2464,1.729,2465,1.729,2466,1.729,2467,1.729,2468,1.729,2469,1.729,2470,1.729,2471,1.729,2472,1.729,2473,1.729,2474,3.247,2475,3.247,2476,1.729,2477,2.663,2478,4.16,2479,1.729,2480,1.729,2481,1.729,2482,1.729,2483,3.647,2484,3.647,2485,3.647,2486,1.729,2487,1.729,2488,1.729]],["title/components/StaffMenuComponent.html",[296,0.987,372,1.771]],["body/components/StaffMenuComponent.html",[3,0.107,4,0.094,5,0.081,15,0.243,25,0.009,27,0.287,31,0.272,47,0.107,54,1.125,61,1.359,64,0.818,67,0.348,91,1.019,103,0.062,105,0.644,121,0.715,124,1.294,126,1.045,159,0.006,160,0.007,161,0.006,177,1.469,197,1.239,211,1.525,220,1.644,229,1.938,296,1.817,297,2.497,298,2.721,299,2.806,300,2.643,301,2.806,302,2.806,307,1.435,308,3.666,309,2.806,310,1.952,311,1.82,313,1.575,315,1.575,317,1.575,318,1.763,320,1.539,325,1.491,336,1.851,337,1.128,343,2.497,344,2.399,345,2.806,346,2.806,347,3.811,348,2.497,349,3.811,350,2.497,351,2.806,352,2.429,353,2.806,354,2.364,355,2.806,356,2.497,357,2.497,358,2.329,359,3.666,360,2.497,361,2.497,362,2.497,363,3.405,364,2.497,365,2.185,366,2.806,367,2.497,368,2.364,369,2.806,370,2.497,371,2.364,372,3.391,373,2.364,374,2.429,375,2.647,376,2.806,377,2.806,576,4.135,582,3.513,583,5.306,584,5.712,842,6.555,855,3.513,1041,2.793,1091,2.947,2163,5.498,2164,5.498,2309,4.694,2489,7.555]],["title/modules/StaffModule.html",[585,2.194,747,3.103]],["body/modules/StaffModule.html",[3,0.122,4,0.107,5,0.093,25,0.009,27,0.397,31,0.312,47,0.122,103,0.071,159,0.007,160,0.008,161,0.007,197,0.962,587,3.67,613,4.726,614,5.751,615,4.739,617,4.739,618,4.505,619,2.784,747,5.751,2490,7.137,2491,6.128]],["title/classes/StaffNotificationComponent.html",[103,0.044,843,3.103]],["body/classes/StaffNotificationComponent.html",[0,0.075,3,0.067,4,0.059,5,0.051,8,1.278,9,1.125,12,0.918,14,2.444,15,0.153,16,0.587,18,1.32,19,0.543,20,1.162,22,0.615,23,0.99,24,0.856,25,0.009,26,1.481,27,0.367,31,0.172,34,1.14,36,0.631,37,0.616,39,1.43,40,0.746,47,0.095,48,1.451,50,1.106,59,1.378,60,1.16,61,1.738,63,1.624,67,0.325,70,1.132,77,1.727,78,1.742,85,2.568,86,1.252,93,1.414,98,2.162,99,0.94,100,2.18,103,0.074,104,2.564,105,0.513,106,0.853,107,0.853,108,1.188,112,1.027,114,1.191,115,1.067,116,1.267,120,0.781,121,0.933,124,1.14,126,0.976,140,1.284,146,1.343,147,1.769,148,1.769,150,2.599,152,1.042,159,0.004,160,0.005,161,0.004,165,1.81,179,1.106,181,1.007,182,0.962,184,1.397,194,1.245,195,1.702,197,1.156,208,2.2,212,1.57,307,1.059,310,0.818,311,0.763,313,0.818,315,0.818,317,1.162,318,1.47,320,1.845,325,1.852,327,2.058,336,1.365,337,1.278,381,2.007,387,2.549,392,2.998,410,0.8,419,2.693,420,1.055,421,1.343,422,3.162,423,2.266,424,2.217,425,1.666,426,1.666,427,2.519,428,1.574,429,3.357,430,1.188,435,1.188,438,4.453,448,3.452,452,3.914,455,2.698,456,3.168,457,2.833,458,2.656,459,2.75,460,2.06,461,2.437,462,2.833,463,2.833,464,2.833,465,2.46,466,2.866,467,2.298,468,2.866,469,2.116,470,2.866,473,1.769,488,2.909,489,1.749,490,3.627,491,2.298,492,3.74,493,4.299,496,1.437,497,2.861,498,1.189,501,1.343,502,1.414,503,1.86,508,2.905,509,1.378,510,1.666,511,1.716,530,1.987,535,1.825,536,1.825,537,2.54,538,2.019,539,3.162,541,1.531,559,2.46,574,1.31,577,2.019,622,2.757,623,4.849,624,4.849,625,5.222,626,4.849,627,4.849,630,5.222,631,3.503,632,4.921,633,5.721,634,4.551,635,4.921,636,4.491,639,3.395,640,3.135,643,3.466,644,1.907,645,3.466,647,3.466,650,3.466,651,3.466,656,2.176,658,2.176,659,1.95,660,2.176,661,2.176,662,3.466,665,2.866,666,3.466,668,2.768,670,3.164,672,2.176,673,2.938,674,2.938,680,1.49,682,2.973,683,2.094,684,2.019,843,5.712,844,6.794,1041,2.395,1091,2.174,1145,2.905,1169,3.905,1173,4.25,1203,2.512,1204,3.359,1205,2.437,1206,3.359,1207,3.359,1224,3.701,1964,2.176,2309,5.24,2316,3.503,2341,1.95,2492,5.573,2493,3.926,2494,3.926,2495,3.926,2496,3.926,2497,3.926,2498,3.926,2499,3.926,2500,3.926,2501,3.926,2502,3.926,2503,3.926,2504,3.926,2505,3.926,2506,3.926,2507,3.926,2508,3.926]],["title/classes/StaffRoutingModule.html",[103,0.044,2491,3.306]],["body/classes/StaffRoutingModule.html",[3,0.101,4,0.089,5,0.077,25,0.009,27,0.426,31,0.258,40,1.12,47,0.101,100,1.662,103,0.059,118,1.258,126,1.25,159,0.006,160,0.007,161,0.006,190,2.239,197,1.259,211,1.445,220,1.147,229,1.513,296,2.039,337,1.069,358,2.413,365,2.565,371,2.774,373,2.774,374,2.851,375,2.829,381,2.124,410,1.201,420,1.585,431,2.833,574,1.968,582,2.743,590,4.868,619,2.301,685,3.724,686,4.614,687,4.583,688,4.404,689,4.143,690,3.555,691,3.917,692,5.243,693,3.917,694,3.917,695,4.143,696,3.917,699,3.917,713,6.001,714,6.346,718,4.414,720,3.146,770,4.754,771,4.754,777,4.143,808,4.754,835,4.853,837,4.143,838,4.853,840,4.143,841,4.143,845,5.469,846,4.414,847,4.143,848,4.414,849,4.754,850,4.853,851,4.143,853,5.469,855,4.224,856,4.414,857,4.754,858,4.853,859,4.143,860,4.754,861,4.853,862,4.143,863,4.754,886,2.433,887,2.504,2162,4.754,2309,3.404,2491,5.469]],["title/components/StaffSubmitSampleComponent.html",[296,0.987,373,1.677]],["body/components/StaffSubmitSampleComponent.html",[3,0.107,4,0.094,5,0.081,15,0.244,25,0.009,27,0.288,31,0.273,47,0.107,54,1.127,61,1.365,64,0.822,67,0.349,91,1.021,103,0.062,105,0.646,121,0.718,124,1.296,159,0.006,160,0.007,161,0.006,177,1.473,197,1.24,211,1.532,220,1.647,296,1.82,297,2.507,298,2.728,299,2.818,300,2.654,301,2.818,302,2.818,307,1.439,308,3.672,309,2.818,310,1.952,311,1.821,313,1.579,315,1.579,317,1.579,318,1.765,320,1.543,325,1.497,336,1.856,337,1.133,343,2.507,344,2.405,345,2.818,346,2.818,347,3.817,348,2.507,349,3.817,350,2.507,351,2.818,352,2.439,353,2.818,354,2.374,355,2.818,356,2.507,357,2.507,358,2.498,359,3.672,360,2.507,361,2.507,362,2.507,363,3.414,364,2.507,365,2.195,366,2.818,367,2.507,368,2.374,369,2.818,370,2.507,371,2.374,372,2.507,373,3.215,374,2.439,375,2.035,376,2.818,377,2.818,847,5.723,2093,4.679,2094,6.567,2095,6.104,2309,4.703,2509,6.253,2510,6.253]],["title/classes/StaffViewSamplesComponent.html",[103,0.044,850,2.934]],["body/classes/StaffViewSamplesComponent.html",[3,0.08,4,0.071,5,0.061,8,1.143,15,0.184,16,0.665,19,0.873,22,0.589,23,1.002,24,0.733,25,0.009,27,0.366,31,0.205,34,1.216,36,0.755,37,0.737,39,1.09,47,0.08,50,1.777,67,0.328,77,1.955,78,1.915,86,1.137,98,2.105,103,0.079,105,0.564,106,0.966,107,0.966,108,1.186,112,1.217,114,1.186,115,1.173,116,1.298,120,1.256,121,0.939,126,1.054,140,1.216,150,2.482,153,2.461,159,0.005,160,0.006,161,0.005,165,1.619,197,0.961,208,2.034,216,1.692,220,1.652,229,2.208,307,1.198,310,0.979,311,0.913,313,0.979,315,0.979,317,1.315,318,1.587,320,1.811,325,1.958,327,2.418,335,4.221,336,1.546,337,1.44,375,3.027,392,2.871,410,0.957,413,4.585,415,1.607,419,2.801,420,1.263,421,1.607,422,3.372,424,1.607,430,1.421,435,1.421,443,4.431,455,1.955,456,2.332,458,2.36,466,3.245,467,2.602,468,3.245,469,2.704,470,3.245,480,2.602,481,2.758,482,2.678,483,3.024,484,2.5,489,1.656,490,3.916,496,1.551,498,1.625,500,4.221,501,1.607,502,1.692,503,2.377,508,2.97,512,2.117,513,1.567,530,1.777,537,2.272,542,3.12,543,3.12,549,3.099,550,2.159,551,2.053,552,2.53,553,3.053,554,2.395,555,2.53,556,2.53,557,1.832,558,1.783,559,2.704,560,2.53,574,1.567,577,2.416,639,2.97,640,2.742,644,1.607,680,1.783,750,2.711,809,4.497,850,5.641,851,6.277,1161,3.299,1164,5.331,1165,4.731,1166,5.003,1167,5.331,1169,4.293,1171,5.699,1172,4.721,1173,4.589,1176,5.945,1179,4.721,1187,3.515,1195,3.664,1196,4.721,1198,4.431,1199,4.721,1200,4.721,1201,4.721,1203,2.843,1204,3.802,1205,2.758,1206,3.802,1207,3.802,1216,2.604,1217,3.515,1218,3.515,1223,3.515,1224,4.19,1226,2.256,1227,2.256,1228,3.515,1229,3.515,1230,3.515,1231,2.711,1232,2.966,1233,3.515,1234,3.515,1235,3.515,1236,3.515,1237,3.515,1238,3.515,1239,3.515,1290,5.085,2098,4.148,2099,3.786,2103,5.571,2108,4.148,2171,4.148,2174,4.148,2309,5.158,2511,4.698,2512,4.698,2513,4.698,2514,4.698,2515,4.698,2516,4.698]],["title/classes/SubmitCmwRequestComponent.html",[103,0.044,858,2.934]],["body/classes/SubmitCmwRequestComponent.html",[3,0.069,4,0.06,5,0.052,8,0.728,9,0.784,12,0.939,15,0.157,16,0.597,18,1.153,19,0.784,22,0.608,23,0.965,24,0.886,25,0.009,26,0.978,27,0.377,31,0.176,34,1.15,36,0.645,37,0.63,39,1.347,47,0.069,50,1.595,60,1.673,61,1.236,63,1.645,67,0.185,70,1.158,85,2.155,86,1.221,93,1.446,98,1.34,103,0.065,104,2.535,105,0.52,106,0.867,107,0.867,108,1.196,110,2.155,111,1.915,112,1.037,114,1.197,115,1.173,116,1.221,118,1.774,120,0.799,121,0.862,124,1.252,126,0.784,140,1.004,150,2.167,152,1.054,159,0.004,160,0.006,161,0.004,165,1.03,194,1.265,195,1.487,197,1.103,208,1.705,213,2.335,214,2.335,216,2.039,221,2.711,307,1.075,310,0.837,311,0.781,313,0.837,315,0.837,317,1.18,318,1.367,320,1.808,325,1.798,327,1.275,331,3.76,335,3.138,336,1.745,337,1.361,358,2.291,387,2.57,392,2.506,410,0.818,411,3.576,412,1.566,414,3.284,415,1.374,419,2.707,420,1.079,421,1.374,424,1.937,425,1.704,426,1.704,427,2.537,428,1.61,430,1.215,435,1.215,448,2.404,455,1.755,456,2.093,458,1.755,465,2.49,480,2.335,481,2.476,482,2.404,484,2.302,488,2.938,489,1.485,491,2.335,496,1.336,497,2.093,498,1.52,499,3.115,503,1.34,508,2.209,530,1.131,535,1.867,536,1.867,537,2.039,539,2.404,549,2.93,550,2.438,551,1.843,552,2.27,553,2.27,554,2.15,555,2.27,556,2.27,557,1.566,558,1.524,559,1.524,574,1.34,631,3.538,639,2.209,640,2.039,644,1.374,659,2.812,684,2.065,855,4.332,858,5.432,859,6.261,991,3.575,993,1.244,1036,4.698,1041,2.425,1048,1.809,1091,2.209,1100,5.057,1101,2.335,1103,3.138,1104,3.61,1105,3.625,1107,3.513,1108,3.513,1110,2.857,1111,2.812,1145,2.93,1169,3.953,1173,3.953,1189,4.989,1203,1.809,1204,2.419,1205,1.755,1206,2.419,1207,2.419,1220,2.666,1231,3.268,1262,2.666,1301,1.867,1336,3.977,1338,3.76,1339,3.977,1365,6.291,1578,3.236,1614,4.237,1615,3.977,1616,4.237,1771,4.563,2316,3.538,2341,1.994,2392,3.636,2395,3.138,2517,7.184,2518,3.545,2519,6.56,2520,3.545,2521,5.662,2522,4.563,2523,4.015,2524,4.015,2525,4.015,2526,4.015,2527,4.015,2528,4.015,2529,4.015,2530,4.015,2531,4.015,2532,4.015,2533,4.015,2534,5,2535,4.015,2536,4.015,2537,4.015,2538,4.015,2539,4.015,2540,4.015,2541,4.015,2542,4.015,2543,4.015,2544,3.545,2545,3.545,2546,3.545,2547,6.56,2548,5.792,2549,6.633,2550,6.56,2551,6.56,2552,6.56,2553,5.792,2554,4.015,2555,5,2556,3.545,2557,3.545,2558,3.545,2559,3.545,2560,5,2561,3.545,2562,3.545,2563,5,2564,3.545,2565,3.545,2566,5,2567,6.56,2568,5.792,2569,6.56,2570,6.56,2571,3.545,2572,3.545,2573,3.545,2574,3.545,2575,4.015,2576,5,2577,4.015,2578,3.545,2579,3.545,2580,3.545,2581,3.545]],["title/classes/SubmitCmwRevitalizationComponent.html",[103,0.044,861,2.934]],["body/classes/SubmitCmwRevitalizationComponent.html",[3,0.064,4,0.056,5,0.048,8,0.677,9,0.744,12,0.874,15,0.146,16,0.567,18,1.55,19,0.744,22,0.611,23,0.947,24,0.893,25,0.009,26,1.191,27,0.37,31,0.163,34,1.118,36,0.6,37,0.586,39,1.315,47,0.064,50,1.515,60,1.589,61,1.174,63,1.58,67,0.337,70,1.077,85,2.086,86,1.198,93,1.345,98,1.246,103,0.063,104,2.534,105,0.499,106,0.823,107,0.823,108,1.171,110,2.086,111,1.853,112,1.004,114,1.178,115,1.136,116,1.198,120,0.743,121,0.839,124,1.3,126,0.744,140,0.965,150,2.108,152,1.013,159,0.004,160,0.005,161,0.004,165,0.958,194,1.201,195,1.412,197,1.082,208,1.651,213,2.218,214,2.218,216,1.937,221,2.718,307,1.021,310,0.779,311,0.726,313,0.779,315,0.779,317,1.121,318,1.314,320,1.814,325,1.749,327,1.186,331,3.572,335,2.981,336,1.689,337,1.324,358,2.259,387,2.5,392,2.438,410,0.761,411,3.509,412,1.457,414,3.195,415,1.278,419,2.661,420,1.004,421,1.278,424,1.84,425,1.585,426,1.585,427,2.477,428,1.498,430,1.13,435,1.13,448,2.283,455,1.667,456,1.988,458,1.667,465,2.393,480,2.218,481,2.351,482,2.283,484,2.212,488,2.844,489,1.437,491,2.218,496,1.284,497,1.988,498,1.471,499,3.015,503,1.246,508,2.098,509,1.888,530,1.052,535,1.737,536,1.737,537,1.937,539,2.283,541,2.098,549,2.85,550,2.359,551,1.75,552,2.156,553,2.156,554,2.042,555,2.156,556,2.156,557,1.457,558,1.418,559,1.418,574,1.246,631,3.424,639,2.098,640,1.937,644,1.278,659,2.671,684,1.921,855,4.332,861,5.331,862,6.276,887,3.471,991,3.395,993,1.158,1036,4.927,1041,2.33,1048,1.683,1091,2.968,1101,2.218,1104,3.535,1107,3.107,1108,3.107,1109,3.241,1110,2.765,1111,2.671,1113,3.104,1114,4.353,1115,2.358,1117,4.353,1118,3.395,1119,2.358,1120,4.613,1121,3.206,1145,2.85,1169,3.798,1173,3.798,1189,4.853,1203,1.683,1204,2.251,1205,1.633,1206,2.251,1207,2.251,1220,2.48,1231,3.104,1262,2.48,1301,1.737,1336,3.777,1338,3.572,1339,3.777,1366,6.088,1578,4.334,1614,4.025,1615,3.777,1616,4.025,1771,4.334,2316,3.424,2341,1.855,2392,3.493,2395,2.981,2517,7.201,2520,3.298,2522,4.334,2534,4.749,2544,3.298,2545,3.298,2546,3.298,2548,5.565,2549,6.925,2553,5.565,2555,6.088,2556,4.749,2557,4.749,2558,4.749,2559,4.749,2560,6.088,2561,4.749,2562,4.749,2563,6.088,2564,4.749,2565,4.749,2566,4.749,2568,5.565,2571,3.298,2572,3.298,2573,3.298,2574,3.298,2576,4.749,2578,3.298,2579,3.298,2580,3.298,2581,3.298,2582,3.298,2583,6.302,2584,6.302,2585,5.378,2586,3.735,2587,5.378,2588,3.735,2589,3.735,2590,3.735,2591,3.735,2592,3.735,2593,3.735,2594,3.735,2595,3.735,2596,3.735,2597,3.735,2598,3.735,2599,3.735,2600,3.735,2601,3.735,2602,3.735,2603,3.735,2604,3.735,2605,3.735,2606,3.735,2607,3.735,2608,3.735,2609,3.735,2610,3.735,2611,3.735,2612,3.735,2613,6.302,2614,6.302,2615,6.302,2616,6.302,2617,6.302,2618,6.302,2619,6.302,2620,6.302,2621,6.302,2622,6.302,2623,6.302,2624,5.378,2625,5.378,2626,3.735,2627,3.735]],["title/interfaces/UpdateDepositForm.html",[0,0.085,1144,2.662]],["body/interfaces/UpdateDepositForm.html",[0,0.154,2,0.647,3,0.056,4,0.049,5,0.042,8,0.589,9,1.068,10,2.3,11,2.587,12,1.509,13,2.044,14,2.279,15,0.127,16,0.512,18,1.636,20,1.343,22,0.598,23,1.01,24,0.901,25,0.009,26,1.388,27,0.297,29,0.937,30,1.305,31,0.142,32,0.96,33,1.007,34,0.89,35,1.057,36,0.522,37,0.51,38,1.084,39,1.505,40,1.696,47,0.141,64,0.847,67,0.318,74,2.936,81,2.718,83,1.201,86,0.485,89,1.62,93,2.974,94,1.11,95,2.123,101,0.96,102,0.937,103,0.048,105,0.257,106,0.497,107,0.497,108,0.725,109,1.951,110,0.983,111,0.873,112,1.227,113,0.983,114,0.461,115,0.8,116,1.246,117,2.335,118,1.866,119,1.509,120,1.284,121,0.958,122,2.587,124,0.987,126,1.155,127,2.836,128,2.451,129,2.779,130,2.526,131,2.836,132,2.687,133,2.651,134,2.836,135,2.651,136,2.651,137,2.651,138,2.717,139,2.505,140,1.277,141,1.822,142,2.785,154,1.748,157,2.589,158,2.589,159,0.003,160,0.005,161,0.003,168,1.947,194,0.726,209,3.183,221,2.744,227,1.795,231,2.002,236,2.002,237,1.34,245,2.002,282,1.34,358,2.074,455,1.007,460,2.384,489,0.677,496,1.475,498,0.693,509,1.14,513,1.084,541,1.267,855,3.84,886,3.529,887,3.186,942,4.072,944,2.051,957,2.497,971,3.575,993,1.505,1021,2.051,1039,3.355,1040,1.958,1041,2.677,1042,1.34,1043,2.158,1044,2.158,1045,1.56,1046,3.224,1047,1.56,1048,2.62,1049,2.158,1050,3.224,1051,5.239,1052,2.158,1053,3.224,1054,1.56,1055,2.158,1056,1.56,1057,3.065,1058,2.158,1059,2.158,1060,3.224,1061,3.224,1062,2.158,1063,3.224,1064,2.926,1065,2.051,1066,2.926,1067,2.051,1068,2.926,1069,2.051,1070,2.926,1071,2.051,1072,3.503,1073,2.051,1074,2.926,1075,2.051,1076,3.503,1077,2.051,1078,3.503,1079,2.051,1080,3.503,1081,2.051,1082,3.503,1083,2.051,1084,3.503,1085,2.051,1086,3.503,1087,2.051,1088,3.503,1089,2.051,1090,4.584,1091,3.536,1092,2.051,1093,2.158,1094,2.158,1095,2.158,1096,4.283,1097,2.158,1098,2.158,1099,2.158,1100,3.67,1101,2.847,1102,2.158,1103,3.222,1104,2.188,1105,1.511,1106,2.158,1107,2.188,1108,2.188,1109,2.926,1110,1.947,1111,2.411,1112,2.158,1113,3.355,1114,2.051,1115,2.051,1116,2.158,1117,2.051,1118,2.051,1119,2.051,1120,2.051,1121,1.511,1122,5.523,1123,3.503,1124,2.158,1125,2.158,1126,2.158,1127,2.158,1128,3.224,1129,2.158,1130,2.158,1131,2.158,1132,3.224,1133,2.158,1134,2.158,1135,2.158,1136,3.224,1137,2.158,1138,1.958,1139,2.158,1140,2.158,1141,2.158,1142,2.158,1143,2.158,1144,3.887,1145,3.359,1146,2.158,1147,2.158,1148,2.158,1149,2.158,1150,2.158,1151,2.158,1152,2.158,1153,2.158,1154,2.158,1155,2.158,1156,2.158,1157,2.158,1158,2.158,1159,2.158]],["title/interfaces/UpdateMember.html",[0,0.085,1947,2.55]],["body/interfaces/UpdateMember.html",[0,0.137,2,0.502,3,0.043,4,0.038,5,0.033,9,1.093,10,1.576,11,2.722,12,0.935,13,2.083,15,0.099,16,0.421,19,1.107,20,1.446,22,0.598,23,0.903,24,0.876,25,0.009,26,0.975,27,0.316,28,2.169,29,1.153,31,0.11,32,0.745,33,0.782,34,0.759,35,0.821,36,0.406,37,0.396,38,0.842,39,1.539,40,1.731,47,0.122,54,1.195,63,0.632,64,0.901,67,0.376,81,2.753,86,0.377,88,1.759,89,1.333,91,1.229,94,1.496,98,1.655,101,0.745,102,0.728,103,0.025,105,0.2,106,0.386,107,0.386,108,1.284,109,1.209,110,0.763,111,0.678,112,1.24,113,0.763,114,0.358,115,0.658,116,1.061,117,2.355,118,1.726,119,1.32,120,0.795,121,0.972,122,2.676,124,0.941,126,0.905,127,2.874,128,2.835,129,2.032,130,2.601,131,2.881,132,2.724,133,2.731,134,2.881,135,2.731,136,2.731,137,2.731,138,2.798,139,2.705,140,1.316,141,1.892,142,2.052,146,1.367,152,1.369,153,0.984,154,2.7,156,3.306,157,2.638,158,2.638,159,0.002,160,0.004,161,0.002,175,2.56,176,2.75,177,1.272,179,2.003,181,2.053,182,1.96,183,0.958,184,1.782,187,2.263,189,1.439,197,1.136,198,2.335,205,2.201,207,1.884,211,0.618,386,3.626,387,2.104,398,1.398,399,3.281,410,0.514,427,2.798,467,1.04,489,0.526,496,1.333,498,0.538,668,1.985,672,3.626,926,1.398,987,1.456,988,1.456,989,1.103,993,2.448,1020,3.163,1022,4.156,1024,3.401,1030,2.75,1031,1.456,1042,1.04,1195,3.365,1203,2.543,1226,1.919,1227,1.919,1327,3.943,1328,2.408,1329,1.52,1441,1.919,1443,1.346,1449,4,1451,4.358,1687,3.956,1718,1.456,1754,2.408,1931,1.456,1932,2.523,1933,2.864,1934,2.408,1935,2.306,1936,2.408,1937,2.864,1938,1.52,1939,2.864,1940,1.52,1941,1.593,1942,1.593,1943,1.593,1944,1.52,1945,1.456,1946,3.563,1947,3.55,1948,2.306,1949,2.306,1950,2.306,1951,1.593,1952,3.563,1953,1.593,1954,3.563,1955,4.131,1956,1.593,1957,2.523,1958,2.523,1959,1.593,1960,3.883,1961,2.523,1962,3.132,1963,1.593,1964,1.398,1965,3.132,1966,1.593,1967,2.523,1968,1.593,1969,2.523,1970,1.593,1971,1.593,1972,1.593,1973,1.593,1974,4.131,1975,1.593,1976,2.523,1977,1.593,1978,1.593,1979,2.523,1980,1.593,1981,1.593,1982,2.523,1983,1.593,1984,1.593,1985,1.593,1986,2.523,1987,1.593,1988,1.593,1989,2.523,1990,1.593,1991,1.593,1992,1.593,1993,1.593,1994,2.523,1995,1.593,1996,1.593,1997,1.593,1998,2.523,1999,1.593,2000,1.593,2001,2.523,2002,1.593,2003,2.523,2004,1.593,2005,1.593,2006,3.563,2007,1.593,2008,2.523,2009,1.593,2010,1.593,2011,1.593,2012,2.523,2013,1.593,2014,1.593,2015,1.593,2016,2.523,2017,1.593,2018,1.593,2019,2.523,2020,1.593,2021,3.563,2022,2.523,2023,4.131,2024,1.593,2025,2.523,2026,1.593,2027,2.523,2028,2.523,2029,1.593,2030,2.523,2031,1.593,2032,1.593,2033,2.523,2034,1.593]],["title/interfaces/UpdateOrganization.html",[0,0.085,1949,2.55]],["body/interfaces/UpdateOrganization.html",[0,0.137,2,0.502,3,0.043,4,0.038,5,0.033,9,1.093,10,1.576,11,2.722,12,0.935,13,2.083,15,0.099,16,0.421,19,1.107,20,1.446,22,0.598,23,0.903,24,0.876,25,0.009,26,0.975,27,0.316,28,2.169,29,1.153,31,0.11,32,0.745,33,0.782,34,0.759,35,0.821,36,0.406,37,0.396,38,0.842,39,1.539,40,1.731,47,0.122,54,1.195,63,0.632,64,0.901,67,0.376,81,2.753,86,0.377,88,1.759,89,1.333,91,1.229,94,1.496,98,1.655,101,0.745,102,0.728,103,0.025,105,0.2,106,0.386,107,0.386,108,1.284,109,1.209,110,0.763,111,0.678,112,1.24,113,0.763,114,0.358,115,0.658,116,1.061,117,2.355,118,1.726,119,1.32,120,0.795,121,0.972,122,2.676,124,0.941,126,0.905,127,2.874,128,2.835,129,2.032,130,2.601,131,2.881,132,2.724,133,2.731,134,2.881,135,2.731,136,2.731,137,2.731,138,2.798,139,2.705,140,1.316,141,1.892,142,2.052,146,1.367,152,1.369,153,0.984,154,2.7,156,3.306,157,2.638,158,2.638,159,0.002,160,0.004,161,0.002,175,2.56,176,2.75,177,1.272,179,2.003,181,2.053,182,1.96,183,0.958,184,1.782,187,2.263,189,1.439,197,1.136,198,2.335,205,2.201,207,1.884,211,0.618,386,3.626,387,2.104,398,1.398,399,3.281,410,0.514,427,2.798,467,1.04,489,0.526,496,1.333,498,0.538,668,1.985,672,3.626,926,1.398,987,1.456,988,1.456,989,1.103,993,2.448,1020,3.163,1022,4.156,1024,3.401,1030,2.75,1031,1.456,1042,1.04,1195,3.365,1203,2.543,1226,1.919,1227,1.919,1327,3.943,1328,2.408,1329,1.52,1441,1.919,1443,1.346,1449,4,1451,4.358,1687,3.956,1718,1.456,1754,2.408,1931,1.456,1932,2.523,1933,2.864,1934,2.408,1935,2.306,1936,2.408,1937,2.864,1938,1.52,1939,2.864,1940,1.52,1941,1.593,1942,1.593,1943,1.593,1944,1.52,1945,1.456,1946,3.563,1947,3.257,1948,2.306,1949,2.864,1950,2.306,1951,1.593,1952,3.563,1953,1.593,1954,3.563,1955,4.131,1956,1.593,1957,2.523,1958,2.523,1959,1.593,1960,3.883,1961,2.523,1962,3.132,1963,1.593,1964,1.398,1965,3.132,1966,1.593,1967,2.523,1968,1.593,1969,2.523,1970,1.593,1971,1.593,1972,1.593,1973,1.593,1974,4.131,1975,1.593,1976,2.523,1977,1.593,1978,1.593,1979,2.523,1980,1.593,1981,1.593,1982,2.523,1983,1.593,1984,1.593,1985,1.593,1986,2.523,1987,1.593,1988,1.593,1989,2.523,1990,1.593,1991,1.593,1992,1.593,1993,1.593,1994,2.523,1995,1.593,1996,1.593,1997,1.593,1998,2.523,1999,1.593,2000,1.593,2001,2.523,2002,1.593,2003,2.523,2004,1.593,2005,1.593,2006,3.563,2007,1.593,2008,2.523,2009,1.593,2010,1.593,2011,1.593,2012,2.523,2013,1.593,2014,1.593,2015,1.593,2016,2.523,2017,1.593,2018,1.593,2019,2.523,2020,1.593,2021,3.563,2022,2.523,2023,4.131,2024,1.593,2025,2.523,2026,1.593,2027,2.523,2028,2.523,2029,1.593,2030,2.523,2031,1.593,2032,1.593,2033,2.523,2034,1.593]],["title/interfaces/UserLogs.html",[0,0.085,48,1.633]],["body/interfaces/UserLogs.html",[0,0.17,1,2.168,2,0.749,3,0.064,4,0.057,5,0.049,6,1.935,7,1.935,8,1.147,9,1.233,10,2.64,11,2.713,12,1.969,13,1.837,14,2.716,15,0.147,16,0.57,17,3.71,18,1.773,19,1.088,20,1.501,21,4.356,22,0.612,23,1.084,24,0.903,25,0.009,26,1.469,27,0.319,28,2.767,29,1.085,30,1.453,31,0.164,32,1.111,33,1.166,34,0.827,35,1.224,36,0.605,37,0.59,38,1.255,39,1.504,40,1.556,41,4.212,42,2.007,43,2.78,44,2.007,45,2.78,46,2.007,47,0.152,48,2.339,49,3.834,50,2.491,51,4.694,52,2.996,53,4.061,54,0.957,55,2.996,56,2.996,57,4.061,58,4.061,59,1.897,60,1.597,61,1.6,62,2.085,63,1.734,64,0.909,65,2.685,66,2.686,67,0.173,68,2.686,69,2.085,70,2.114,71,2.168,72,2.686,73,2.085,74,1.355,75,1.111,76,2.085,77,1.676,78,1.453,79,2.78,80,2.085,81,2.724,82,2.085,83,1.391,84,3.923,85,1.138,86,0.562,87,4.228,88,1.453,89,1.255,90,2.436,91,0.729,92,3.254,93,2.639,94,1.447,95,1.645,96,3.254,97,2.996,98,1.804,99,1.294,100,1.523,101,1.111,102,1.085,103,0.038,104,2.539,105,0.298,106,0.576,107,0.576,108,1.033,109,1.636,110,1.138,111,1.011,112,1.144,113,1.138,114,0.534,115,0.62,116,1.094,117,2.308,118,1.628,119,1.714,120,1.458,121,0.876,122,2.365,123,2.085,124,1.272,125,4.457,126,1.15,127,2.7,128,2.327,129,2.491,130,2.308,131,2.7,132,2.378,133,2.423,134,2.7,135,2.423,136,2.423,137,2.423,138,2.483,139,2.423,140,1.168,141,1.666,142,2.546,143,2.085,144,2.085,145,2.085,146,1.85,147,2.436,148,2.436,149,2.085,150,2.32,151,2.085,152,0.605,153,1.467,154,1.355,155,2.085,156,1.998,157,1.195,158,1.195,159,0.004,160,0.005,161,0.004]],["title/interfaces/UserPrivileges.html",[0,0.085,210,2.054]],["body/interfaces/UserPrivileges.html",[0,0.177,2,0.894,3,0.128,4,0.068,5,0.058,8,0.814,9,1.204,15,0.175,16,0.645,18,1.713,19,0.847,20,1.385,22,0.593,23,0.953,24,0.903,25,0.009,26,1.549,47,0.157,54,0.963,60,1.808,64,0.982,67,0.404,75,1.327,88,1.208,91,1.204,94,1.399,99,1.465,119,1.432,152,0.722,159,0.004,160,0.006,161,0.004,162,4.003,163,2.158,164,4.386,165,1.571,166,3.713,167,3.591,168,2.454,169,3.04,170,2.158,171,2.158,172,3.174,173,3.757,174,2.158,175,2.817,176,2.042,177,1.658,178,3.238,179,1.962,180,2.643,181,2.071,182,2.06,183,3.065,184,1.961,185,2.231,186,2.231,187,1.801,188,2.089,189,2.204,190,2.324,191,2.846,192,3.04,193,2.231,194,1.556,195,1.829,196,2.231,197,1.134,198,2.324,199,1.661,200,2.231,201,4.009,202,3.754,203,2.158,204,3.477,205,2.716,206,3.238,207,2.324,208,2.218,209,2.524,210,3.638,211,1.832,212,2.402,213,1.853,214,1.853,215,2.598,216,2.204,217,2.158,218,2.231,219,2.231,220,1.762,221,1.327,222,3.238,223,2.231,224,2.231,225,1.853,226,2.231,227,1.661,228,2.231,229,1.153,230,2.231,231,1.853,232,2.231,233,2.231,234,2.231,235,3.04,236,2.524,237,1.853,238,3.04,239,3.04,240,2.676,241,3.04,242,2.676,243,3.04,244,3.04,245,2.524,246,3.04,247,3.04,248,3.713,249,3.04,250,4.176,251,3.04,252,3.04,253,3.04,254,3.04,255,3.04,256,3.04,257,3.04,258,4.103,259,3.04,260,3.04,261,3.04,262,3.04,263,3.04,264,2.231,265,2.231,266,2.158,267,3.04,268,2.231,269,2.231,270,3.713,271,2.231,272,2.231,273,2.231,274,2.231,275,2.231,276,2.231,277,3.713,278,2.231,279,2.231,280,2.231,281,2.231,282,2.524,283,3.04,284,2.231,285,2.231,286,2.231,287,2.025,288,2.231,289,2.231,290,2.089,291,3.237,292,2.94,293,2.94,294,2.231,295,2.231]],["title/interfaces/UserType.html",[0,0.085,189,1.591]],["body/interfaces/UserType.html",[0,0.177,2,0.891,3,0.128,4,0.067,5,0.058,8,0.812,9,1.204,15,0.175,16,0.644,18,1.711,19,0.845,20,1.433,22,0.597,23,0.974,24,0.904,25,0.009,26,1.56,47,0.157,54,0.962,60,1.804,64,0.981,67,0.411,75,1.323,88,1.204,91,1.203,94,1.396,99,1.462,119,1.429,152,0.72,159,0.004,160,0.006,161,0.004,162,4.001,163,2.151,164,4.384,166,3.709,167,3.586,168,2.449,169,3.034,170,2.151,171,2.151,172,3.17,173,3.753,174,2.151,175,2.814,176,2.038,177,1.657,178,3.233,179,1.958,180,2.639,181,2.069,182,2.058,183,3.062,184,1.959,185,2.224,186,2.224,187,1.796,188,2.083,189,2.504,190,2.319,191,2.841,192,3.034,193,2.224,194,1.553,195,1.826,196,2.224,197,1.133,198,2.319,199,1.656,200,2.224,201,4.006,202,3.472,203,2.151,204,3.472,205,2.712,206,3.233,207,2.319,208,2.217,209,2.519,210,3.233,211,1.097,212,2.4,213,1.847,214,1.847,215,2.593,216,2.2,217,2.151,218,2.224,219,2.224,220,1.761,221,1.323,222,3.233,223,2.224,224,2.224,225,1.847,226,2.224,227,1.656,228,2.224,229,1.149,230,2.224,231,1.847,232,2.224,233,2.224,234,2.224,235,3.034,236,2.519,237,1.847,238,3.034,239,3.034,240,2.671,241,3.034,242,2.671,243,3.034,244,3.034,245,2.519,246,3.034,247,3.034,248,3.709,249,3.034,250,4.173,251,3.034,252,3.034,253,3.034,254,3.034,255,3.034,256,3.034,257,3.034,258,4.099,259,3.034,260,3.034,261,3.034,262,3.034,263,3.034,264,2.224,265,2.224,266,2.151,267,3.034,268,2.224,269,2.224,270,3.709,271,2.224,272,2.224,273,2.224,274,2.224,275,2.224,276,2.224,277,3.709,278,2.224,279,2.224,280,2.224,281,2.224,282,2.519,283,3.034,284,2.224,285,2.224,286,2.224,287,2.018,288,2.224,289,2.224,290,2.083,291,3.234,292,2.934,293,2.934,294,2.224,295,2.224]],["title/interfaces/accessLogInterface.html",[0,0.085,2357,2.448]],["body/interfaces/accessLogInterface.html",[0,0.143,1,1.153,2,0.572,3,0.049,4,0.043,5,0.037,9,0.398,12,0.673,13,1.353,14,2.575,15,0.112,16,0.466,17,1.825,18,1.676,19,1.028,20,0.474,22,0.602,23,1.003,24,0.89,25,0.009,27,0.365,31,0.126,34,0.826,36,0.462,37,0.451,39,1.244,40,1.151,47,0.131,48,1.063,50,1.843,59,1.009,61,0.628,63,1.11,64,0.709,66,1.221,67,0.133,68,1.221,70,1.748,71,1.153,72,1.221,75,0.849,85,2.306,86,0.905,99,0.688,100,2.028,103,0.029,104,2.028,105,0.351,106,0.44,107,0.44,108,1.075,112,1.245,114,1.055,115,0.729,116,1.269,118,1.585,120,0.572,124,1.39,126,1.15,140,1.322,141,0.628,150,1.748,152,0.711,159,0.003,160,0.004,161,0.003,179,0.81,180,2.048,181,0.738,182,0.704,184,1.519,194,0.642,195,0.755,197,0.817,199,2.747,208,2.159,212,1.52,307,0.546,310,0.599,311,0.559,313,0.599,315,0.599,318,0.599,326,1.825,327,0.913,332,1.257,336,1.484,337,1.252,344,1.924,381,1.943,387,1.846,392,2.642,402,3.116,403,1.594,404,1.66,405,4.56,410,0.586,411,2.359,412,1.122,414,1.935,415,0.984,419,2.129,420,0.773,421,0.984,424,1.514,425,1.221,426,1.221,427,1.972,428,1.153,429,2.432,430,0.87,435,0.87,448,3.154,455,2.634,456,2.661,457,1.257,458,2.826,459,1.221,460,1.995,461,2.359,462,1.257,463,1.257,464,1.257,465,1.092,469,2.048,473,3.349,475,3.009,477,3.232,480,1.825,481,1.935,482,1.879,483,3.526,484,1.894,488,1.825,489,1.364,491,1.186,496,1.407,497,1.995,498,0.944,499,1.257,501,0.984,502,1.036,503,1.477,508,2.363,509,1.009,510,1.221,511,1.257,512,1.296,513,0.96,525,2.198,526,2.126,527,2.198,535,1.337,536,1.337,537,2.745,538,1.479,539,3.608,541,2.363,549,1.726,550,0.984,551,0.936,552,1.153,553,1.153,554,1.092,555,1.153,556,1.153,557,1.122,558,1.092,559,2.955,560,3.385,561,2.432,562,2.509,563,1.381,564,1.337,565,2.126,566,2.126,567,1.381,568,1.428,569,1.381,570,1.381,571,1.428,572,1.381,582,1.337,597,1.479,606,1.594,607,1.66,619,1.122,631,1.428,644,0.984,656,1.594,658,1.594,659,1.428,660,1.594,661,2.453,665,2.276,675,1.66,680,2.3,682,3.49,683,3.232,706,4.444,717,2.591,886,2.85,887,2.933,993,2.028,1041,1.636,1045,1.381,1047,1.381,1048,2.432,1054,1.381,1056,1.381,1091,1.122,1104,1.995,1105,1.337,1107,2.432,1108,1.995,1110,1.775,1121,1.337,1145,2.105,1205,2.359,1301,1.337,1356,2.555,1357,1.534,1358,3.988,1359,1.66,1444,2.91,1544,1.479,1546,1.534,1547,1.534,2149,1.66,2151,1.594,2152,1.594,2168,1.66,2316,2.198,2341,1.428,2344,1.66,2345,3.114,2348,1.66,2349,2.555,2350,1.733,2351,3.114,2352,1.66,2353,2.99,2354,1.733,2355,1.733,2356,2.99,2357,3.358,2358,2.99,2359,2.99,2360,2.99,2361,2.99,2362,1.733,2363,1.733,2364,1.733,2365,1.733,2366,1.733,2367,1.733,2368,1.733,2369,1.733,2370,1.733,2371,1.733,2372,1.733,2373,1.733,2374,1.733,2375,1.733,2376,1.733,2377,1.733,2378,1.733,2379,1.733,2380,2.667,2381,1.733,2382,2.667,2383,1.733,2384,2.667,2385,1.733,2386,2.667,2387,1.733,2388,1.733,2389,1.733,2390,1.733,2391,1.733,2392,1.594,2393,1.733,2394,2.667,2395,1.594,2396,1.733,2397,1.733,2398,1.733,2399,1.733,2400,1.733,2401,4.399,2402,3.252,2403,1.733,2404,1.733,2405,4.843,2406,3.252,2407,3.652,2408,3.652,2409,4.843,2410,3.652,2411,3.652,2412,3.652,2413,3.652,2414,3.652,2415,3.652,2416,3.652,2417,3.652,2418,3.652,2419,3.652,2420,1.733,2421,3.252,2422,1.733,2423,3.252,2424,3.252,2425,3.943,2426,3.252,2427,1.733,2428,1.733,2429,1.733,2430,1.733,2431,1.733,2432,1.733,2433,1.733,2434,1.733,2435,1.733,2436,1.733,2437,5.231,2438,1.733,2439,4.772,2440,1.733,2441,1.733,2442,1.733,2443,1.733,2444,1.733,2445,1.733,2446,1.733,2447,1.733,2448,1.733,2449,1.733,2450,1.733,2451,1.733,2452,4.843,2453,1.733,2454,1.733,2455,1.733,2456,1.733,2457,1.733,2458,1.733,2459,1.733,2460,1.733,2461,1.733,2462,1.733,2463,1.733,2464,1.733,2465,1.733,2466,1.733,2467,1.733,2468,1.733,2469,1.733,2470,1.733,2471,1.733,2472,1.733,2473,1.733,2474,3.252,2475,3.252,2476,1.733,2477,2.667,2478,4.164,2479,1.733,2480,1.733,2481,1.733,2482,1.733,2483,3.652,2484,3.652,2485,3.652,2486,1.733,2487,1.733,2488,1.733]],["title/coverage.html",[2628,4.877]],["body/coverage.html",[0,0.179,1,1.523,5,0.049,6,4.419,7,4.419,14,1.122,22,0.25,25,0.009,30,2.207,32,1.122,34,0.581,41,1.953,43,1.953,45,1.953,48,1.404,63,2.154,65,1.886,70,1.57,71,1.523,78,1.977,79,1.953,84,1.953,91,0.734,92,1.953,96,1.953,103,0.092,104,1.177,159,0.004,160,0.005,161,0.004,162,1.711,163,4.127,175,1.368,177,1.058,178,1.766,188,1.766,189,1.368,191,1.766,198,1.442,202,1.766,206,1.766,210,1.766,212,1.07,220,0.738,222,1.766,225,1.566,291,1.523,296,1.986,297,1.523,303,4.88,304,3.06,305,3.06,306,4.88,338,7.339,348,1.523,350,1.523,352,1.481,354,1.442,356,1.523,357,1.523,358,2.057,360,1.523,361,1.523,362,1.523,364,1.523,365,1.333,367,1.523,368,1.442,370,1.523,371,1.442,372,1.523,373,1.442,374,1.481,375,2.711,378,5.09,379,3.06,380,4.88,407,2.842,408,4.225,409,5.375,422,1.612,427,1.236,429,2.867,434,2.397,483,1.612,539,3.99,573,2.842,575,3.06,576,4.884,616,2.842,620,2.842,621,3.06,622,5.166,685,4.386,688,2.288,690,2.288,692,2.192,697,2.842,698,2.842,700,2.522,701,2.667,703,2.842,704,2.667,705,2.842,706,1.953,708,2.667,709,2.842,710,2.842,711,2.842,721,3.353,741,3.823,748,2.397,753,2.397,754,2.842,774,2.842,776,3.06,785,3.06,786,3.06,787,3.06,788,3.06,789,3.06,790,3.06,791,2.667,794,4.073,797,2.522,798,4.549,799,2.667,800,3.06,801,2.842,802,3.06,803,2.842,804,3.06,805,2.842,806,2.842,807,3.06,809,2.397,810,2.667,811,2.842,813,2.842,815,2.842,816,2.667,818,2.842,819,3.06,820,3.06,821,3.06,822,3.353,823,2.842,824,2.842,825,3.06,826,2.522,827,2.667,829,2.667,831,2.842,833,3.614,835,2.522,837,2.667,838,2.522,840,2.667,841,2.667,842,3.06,843,2.667,844,4.073,845,2.842,846,2.842,847,2.667,848,2.842,850,2.522,851,2.667,853,2.842,855,3.559,856,2.842,858,2.522,859,2.667,861,2.522,862,2.667,891,3.06,893,3.353,935,3.353,993,1.177,1030,2.105,1039,2.192,1040,5.356,1041,3.286,1042,3.803,1064,2.288,1066,2.288,1068,2.288,1070,2.288,1072,2.288,1074,2.288,1076,2.288,1078,2.288,1080,2.288,1082,2.288,1084,2.288,1086,2.288,1088,2.288,1103,2.105,1113,2.192,1123,2.288,1144,2.288,1145,1.481,1160,4.386,1161,4.88,1216,4.076,1247,6.494,1303,2.842,1342,3.353,1383,3.06,1384,3.353,1385,3.353,1386,2.842,1439,2.522,1441,2.614,1480,4.386,1481,3.353,1500,2.842,1501,3.06,1502,3.353,1550,2.842,1551,3.06,1562,4.806,1572,2.842,1606,3.353,1654,4.073,1690,3.353,1697,3.06,1698,3.353,1701,3.353,1715,3.353,1781,4.386,1782,4.386,1828,4.386,1931,4.959,1933,2.192,1935,2.192,1937,2.192,1939,2.192,1944,2.288,1945,2.192,1947,2.192,1948,2.192,1949,2.192,1950,2.192,2035,4.653,2093,4.76,2124,3.353,2154,5.354,2161,2.842,2170,2.842,2176,3.353,2177,3.353,2208,3.353,2224,3.353,2237,3.353,2257,3.353,2258,3.353,2266,3.353,2267,3.353,2309,4.808,2348,4.738,2353,2.105,2356,2.105,2357,2.105,2358,2.105,2359,2.105,2360,2.105,2361,2.105,2491,2.842,2517,5.127,2518,3.353,2582,3.353,2628,3.06,2629,3.797,2630,3.797,2631,5.443,2632,3.797,2633,7.882,2634,7.882,2635,8.518,2636,6.361,2637,6.361,2638,5.443,2639,3.797,2640,6.948,2641,6.948,2642,5.443,2643,9.152,2644,5.443,2645,3.797,2646,3.797,2647,3.797,2648,3.797,2649,3.797,2650,3.797,2651,3.797,2652,3.797,2653,3.797,2654,3.797,2655,7.882,2656,5.443,2657,5.443,2658,3.797,2659,5.443,2660,3.797,2661,3.797,2662,3.797,2663,3.797,2664,3.797,2665,5.443,2666,3.797,2667,3.353,2668,3.797,2669,5.443,2670,3.797,2671,5.443,2672,5.443,2673,5.443,2674,3.797,2675,3.797,2676,3.797,2677,3.797,2678,3.797,2679,3.797,2680,3.797,2681,3.797,2682,3.797,2683,5.443,2684,3.797,2685,3.797,2686,3.797,2687,3.797,2688,3.797,2689,3.797,2690,3.797,2691,3.797,2692,3.797,2693,3.797,2694,3.797,2695,3.797,2696,7.882,2697,3.797,2698,3.797,2699,4.806,2700,4.806,2701,3.353,2702,3.353,2703,3.797,2704,5.443,2705,5.443,2706,7.355,2707,7.355,2708,7.355,2709,7.355,2710,5.443,2711,5.443,2712,6.361,2713,6.361,2714,6.948,2715,6.361,2716,3.797,2717,3.797,2718,3.797,2719,3.797,2720,3.797,2721,3.797,2722,3.797,2723,3.797,2724,3.797,2725,3.797,2726,6.361,2727,3.797,2728,5.443,2729,3.797,2730,3.797,2731,3.797,2732,3.797,2733,3.797,2734,3.797,2735,3.797,2736,3.797,2737,3.797,2738,5.443,2739,3.797,2740,4.806,2741,4.806,2742,3.797,2743,4.806,2744,3.353,2745,3.797]],["title/interfaces/databaseLogInterface.html",[0,0.085,2356,2.448]],["body/interfaces/databaseLogInterface.html",[0,0.143,1,1.15,2,0.571,3,0.049,4,0.043,5,0.037,9,0.397,12,0.671,13,1.351,14,2.574,15,0.112,16,0.465,17,2.695,18,1.675,19,1.027,20,0.473,22,0.602,23,1.002,24,0.891,25,0.009,27,0.365,31,0.125,34,0.825,36,0.461,37,0.45,39,1.243,40,1.15,47,0.13,48,1.061,50,1.841,59,1.007,61,0.626,63,1.108,64,0.708,66,1.218,67,0.132,68,1.218,70,1.746,71,1.15,72,1.218,75,0.848,85,2.305,86,0.903,99,0.687,100,2.026,103,0.029,104,2.026,105,0.35,106,0.439,107,0.439,108,1.074,112,1.244,114,1.054,115,0.728,116,1.268,118,1.584,120,0.571,124,1.39,126,1.149,140,1.322,141,0.626,150,1.746,152,0.71,159,0.003,160,0.004,161,0.003,179,0.808,180,2.045,181,0.736,182,0.703,184,1.517,194,0.641,195,0.753,197,0.816,199,2.745,208,2.158,212,1.518,307,0.545,310,0.598,311,0.558,313,0.598,315,0.598,318,0.598,326,1.822,327,0.911,332,1.254,336,1.483,337,1.251,344,1.922,381,1.94,387,1.844,392,2.641,402,3.113,403,1.59,404,1.656,405,4.558,410,0.584,411,2.356,412,1.119,414,1.932,415,0.982,419,2.127,420,0.771,421,0.982,424,1.512,425,1.218,426,1.218,427,1.97,428,1.15,429,2.428,430,0.868,435,0.868,448,3.152,455,2.633,456,2.659,457,1.254,458,2.826,459,1.218,460,1.992,461,2.356,462,1.254,463,1.254,464,1.254,465,1.089,469,2.045,473,3.346,475,3.006,477,3.228,480,1.822,481,1.932,482,1.875,483,3.525,484,1.891,488,1.822,489,1.362,491,1.183,496,1.406,497,1.992,498,0.943,499,1.254,501,0.982,502,1.033,503,1.474,508,2.361,509,1.007,510,1.218,511,1.254,512,1.293,513,0.957,525,2.194,526,2.122,527,2.194,535,1.334,536,1.334,537,2.743,538,1.476,539,3.606,541,2.361,549,1.723,550,0.982,551,0.934,552,1.15,553,1.15,554,1.089,555,1.15,556,1.15,557,1.119,558,1.089,559,2.953,560,3.383,561,2.428,562,2.505,563,1.378,564,1.334,565,2.122,566,2.122,567,1.378,568,1.425,569,1.378,570,1.378,571,1.425,572,1.378,582,1.334,597,1.476,606,1.59,607,1.656,619,1.119,631,1.425,644,0.982,656,1.59,658,1.59,659,1.425,660,1.59,661,2.449,665,2.272,675,1.656,680,2.298,682,3.486,683,3.228,706,4.442,717,2.588,886,2.847,887,2.93,993,2.026,1041,1.633,1045,1.378,1047,1.378,1048,2.428,1054,1.378,1056,1.378,1091,1.119,1104,1.991,1105,1.334,1107,2.428,1108,1.991,1110,1.772,1121,1.334,1145,2.102,1205,2.356,1301,1.334,1356,2.55,1357,1.53,1358,3.984,1359,1.656,1444,2.907,1544,1.476,1546,1.53,1547,1.53,2149,1.656,2151,1.59,2152,1.59,2168,1.656,2316,2.194,2341,1.425,2344,1.656,2345,3.11,2348,1.656,2349,2.55,2350,1.729,2351,3.11,2352,1.656,2353,2.986,2354,1.729,2355,1.729,2356,3.354,2357,2.986,2358,2.986,2359,2.986,2360,2.986,2361,2.986,2362,1.729,2363,1.729,2364,1.729,2365,1.729,2366,1.729,2367,1.729,2368,1.729,2369,1.729,2370,1.729,2371,1.729,2372,1.729,2373,1.729,2374,1.729,2375,1.729,2376,1.729,2377,1.729,2378,1.729,2379,1.729,2380,2.663,2381,1.729,2382,2.663,2383,1.729,2384,2.663,2385,1.729,2386,2.663,2387,1.729,2388,1.729,2389,1.729,2390,1.729,2391,1.729,2392,1.59,2393,1.729,2394,2.663,2395,1.59,2396,1.729,2397,1.729,2398,1.729,2399,1.729,2400,1.729,2401,4.396,2402,3.247,2403,1.729,2404,1.729,2405,4.841,2406,3.247,2407,3.647,2408,3.647,2409,4.841,2410,3.647,2411,3.647,2412,3.647,2413,3.647,2414,3.647,2415,3.647,2416,3.647,2417,3.647,2418,3.647,2419,3.647,2420,1.729,2421,3.247,2422,1.729,2423,3.247,2424,3.247,2425,3.939,2426,3.247,2427,1.729,2428,1.729,2429,1.729,2430,1.729,2431,1.729,2432,1.729,2433,1.729,2434,1.729,2435,1.729,2436,1.729,2437,5.229,2438,1.729,2439,4.77,2440,1.729,2441,1.729,2442,1.729,2443,1.729,2444,1.729,2445,1.729,2446,1.729,2447,1.729,2448,1.729,2449,1.729,2450,1.729,2451,1.729,2452,4.841,2453,1.729,2454,1.729,2455,1.729,2456,1.729,2457,1.729,2458,1.729,2459,1.729,2460,1.729,2461,1.729,2462,1.729,2463,1.729,2464,1.729,2465,1.729,2466,1.729,2467,1.729,2468,1.729,2469,1.729,2470,1.729,2471,1.729,2472,1.729,2473,1.729,2474,3.247,2475,3.247,2476,1.729,2477,2.663,2478,4.16,2479,1.729,2480,1.729,2481,1.729,2482,1.729,2483,3.647,2484,3.647,2485,3.647,2486,1.729,2487,1.729,2488,1.729]],["title/dependencies.html",[733,3.532,2746,3.678]],["body/dependencies.html",[25,0.009,31,0.269,86,1.12,126,0.851,159,0.006,160,0.007,161,0.006,328,3.708,336,1.507,410,1.528,412,2.4,415,2.105,417,4.735,418,4.329,420,1.654,483,2.612,501,2.566,520,4.959,615,4.086,728,4.981,729,4.604,733,4.086,734,4.735,755,4.959,768,5.613,871,6.462,872,5.433,925,4.604,1232,4.735,1571,5.433,1572,4.604,2191,6.623,2349,3.551,2351,4.329,2352,3.551,2628,4.959,2747,7.5,2748,6.153,2749,6.153,2750,6.153,2751,6.153,2752,7.5,2753,9.04,2754,7.5,2755,6.153,2756,6.153,2757,6.153,2758,6.153,2759,6.153,2760,6.153,2761,6.153,2762,6.153,2763,6.153,2764,6.153,2765,7.5,2766,6.153,2767,6.153,2768,6.153,2769,6.153,2770,6.153,2771,6.153,2772,6.153,2773,8.635,2774,8.091,2775,7.5,2776,6.153,2777,7.5,2778,6.153,2779,6.153,2780,8.635,2781,6.153,2782,6.153,2783,6.153,2784,6.153,2785,6.153,2786,6.153,2787,7.5,2788,6.153,2789,6.153,2790,6.153,2791,6.153,2792,6.153,2793,6.153,2794,6.153,2795,6.153,2796,6.153,2797,6.153,2798,6.153,2799,6.153,2800,6.153,2801,5.433,2802,6.153,2803,6.153,2804,6.153,2805,6.153,2806,6.153,2807,6.153,2808,6.153,2809,6.153,2810,6.153,2811,6.153,2812,6.153,2813,6.153,2814,6.153,2815,6.153,2816,6.153,2817,6.153,2818,6.153,2819,6.153,2820,6.153,2821,8.091,2822,6.153,2823,7.625,2824,6.153,2825,6.153,2826,6.153,2827,6.153,2828,6.153,2829,6.153,2830,6.153,2831,5.433,2832,6.153,2833,6.153,2834,6.153,2835,6.153,2836,6.153,2837,6.153,2838,6.153,2839,6.153]],["title/interfaces/depositReportInterface.html",[0,0.085,2360,2.448]],["body/interfaces/depositReportInterface.html",[0,0.142,1,1.14,2,0.566,3,0.049,4,0.043,5,0.037,9,0.393,12,0.665,13,1.343,14,2.571,15,0.111,16,0.462,17,1.81,18,1.608,19,0.901,20,0.468,22,0.604,23,1.001,24,0.894,25,0.009,27,0.364,31,0.124,34,0.82,36,0.457,37,0.446,39,1.239,40,1.144,47,0.13,48,1.051,50,1.834,59,0.998,61,0.621,63,1.1,64,0.704,66,1.207,67,0.278,68,1.207,70,1.737,71,1.14,72,1.207,75,0.84,85,2.298,86,0.899,99,0.681,100,2.019,103,0.028,104,2.017,105,0.348,106,0.435,107,0.435,108,1.07,112,1.243,114,1.051,115,0.723,116,1.266,118,1.579,120,0.566,124,1.389,126,1.147,140,1.32,141,0.621,150,1.737,152,0.705,159,0.003,160,0.004,161,0.003,179,0.801,180,2.034,181,0.73,182,0.697,184,1.51,194,0.635,195,0.747,197,0.812,199,2.737,208,2.157,212,1.509,307,0.54,310,0.593,311,0.553,313,0.593,315,0.593,318,0.593,326,1.81,327,0.903,332,1.243,336,1.476,337,1.246,344,1.913,381,1.929,387,1.833,392,2.635,402,3.098,403,1.576,404,1.641,405,4.55,410,0.579,411,2.342,412,1.109,414,1.918,415,0.973,419,2.118,420,0.764,421,0.973,424,1.501,425,1.207,426,1.207,427,1.96,428,1.14,429,2.415,430,0.86,435,0.86,448,3.142,455,2.629,456,2.65,457,1.243,458,2.824,459,1.207,460,1.981,461,2.342,462,1.243,463,1.243,464,1.243,465,1.079,469,2.034,473,3.337,475,2.992,477,3.213,480,1.81,481,1.918,482,1.862,483,3.519,484,1.88,488,1.81,489,1.357,491,1.173,496,1.401,497,1.981,498,0.936,499,1.243,501,0.973,502,1.024,503,1.464,508,2.349,509,0.998,510,1.207,511,1.243,512,1.281,513,0.949,525,2.179,526,2.107,527,2.179,535,1.322,536,1.322,537,2.736,538,1.462,539,3.601,541,2.349,549,1.711,550,0.973,551,0.925,552,1.14,553,1.14,554,1.079,555,1.14,556,1.14,557,1.109,558,1.079,559,2.945,560,3.378,561,2.415,562,2.491,563,1.366,564,1.322,565,2.107,566,2.107,567,1.366,568,1.412,569,1.366,570,1.366,571,1.412,572,1.366,582,1.322,597,1.462,606,1.576,607,1.641,619,1.109,631,1.412,644,0.973,656,1.576,658,1.576,659,1.412,660,1.576,661,2.432,665,2.256,675,1.641,680,2.287,682,3.472,683,3.213,706,4.437,717,2.573,886,2.837,887,2.92,993,2.017,1041,1.622,1045,2.893,1047,2.893,1048,3.1,1054,2.893,1056,2.893,1091,1.109,1104,1.977,1105,1.322,1107,3.1,1108,1.977,1110,1.759,1121,1.322,1145,2.09,1205,2.342,1301,1.322,1356,2.532,1357,1.517,1358,3.97,1359,1.641,1444,2.893,1544,1.462,1546,1.517,1547,1.517,2149,1.641,2151,1.576,2152,1.576,2168,1.641,2316,2.179,2341,1.412,2344,1.641,2345,3.092,2348,1.641,2349,2.532,2350,1.713,2351,3.092,2352,1.641,2353,2.969,2354,1.713,2355,1.713,2356,2.969,2357,2.969,2358,2.969,2359,2.969,2360,3.338,2361,2.969,2362,1.713,2363,1.713,2364,1.713,2365,1.713,2366,1.713,2367,1.713,2368,1.713,2369,1.713,2370,1.713,2371,1.713,2372,1.713,2373,1.713,2374,1.713,2375,1.713,2376,1.713,2377,1.713,2378,1.713,2379,1.713,2380,2.644,2381,1.713,2382,2.644,2383,1.713,2384,2.644,2385,1.713,2386,2.644,2387,1.713,2388,1.713,2389,1.713,2390,1.713,2391,1.713,2392,1.576,2393,1.713,2394,2.644,2395,1.576,2396,1.713,2397,1.713,2398,1.713,2399,1.713,2400,1.713,2401,4.384,2402,3.229,2403,1.713,2404,1.713,2405,4.83,2406,3.229,2407,3.63,2408,3.63,2409,4.83,2410,3.63,2411,3.63,2412,3.63,2413,3.63,2414,3.63,2415,3.63,2416,3.63,2417,3.63,2418,3.63,2419,3.63,2420,1.713,2421,3.229,2422,1.713,2423,3.229,2424,3.229,2425,3.922,2426,3.229,2427,1.713,2428,1.713,2429,1.713,2430,1.713,2431,1.713,2432,1.713,2433,1.713,2434,1.713,2435,1.713,2436,1.713,2437,5.223,2438,1.713,2439,4.759,2440,1.713,2441,1.713,2442,1.713,2443,1.713,2444,1.713,2445,1.713,2446,1.713,2447,1.713,2448,1.713,2449,1.713,2450,1.713,2451,1.713,2452,4.83,2453,1.713,2454,1.713,2455,1.713,2456,1.713,2457,1.713,2458,1.713,2459,1.713,2460,1.713,2461,1.713,2462,1.713,2463,1.713,2464,1.713,2465,1.713,2466,1.713,2467,1.713,2468,1.713,2469,1.713,2470,1.713,2471,1.713,2472,1.713,2473,1.713,2474,3.229,2475,3.229,2476,1.713,2477,2.644,2478,4.145,2479,1.713,2480,1.713,2481,1.713,2482,1.713,2483,3.63,2484,3.63,2485,3.63,2486,1.713,2487,1.713,2488,1.713]],["title/miscellaneous/enumerations.html",[2840,2.753,2841,4.697]],["body/miscellaneous/enumerations.html",[5,0.105,15,0.272,18,1.419,25,0.009,67,0.372,91,1.089,152,1.12,159,0.007,160,0.008,161,0.007,197,1.089,332,3.046,551,2.268,590,3.717,591,4.627,592,4.627,593,4.627,594,4.627,596,4.199,599,5.384,600,4.399,601,5.099,602,5.099,603,4.399,604,4.399,605,5.099,606,3.862,609,4.399,610,4.399,611,4.399,612,4.399,640,3.215,694,5.363,715,5.672,716,6.044,884,6.044,1547,3.717,2151,3.862,2152,3.862,2153,6.153,2840,5.214,2841,6.153,2842,6.968,2843,6.968,2844,6.968,2845,6.968,2846,6.968]],["title/interfaces/errorLogInterface.html",[0,0.085,2358,2.448]],["body/interfaces/errorLogInterface.html",[0,0.143,1,1.15,2,0.571,3,0.049,4,0.043,5,0.037,9,0.397,12,0.671,13,1.351,14,2.574,15,0.112,16,0.465,17,1.822,18,1.675,19,1.027,20,0.473,22,0.602,23,1.002,24,0.891,25,0.009,27,0.365,31,0.125,34,0.825,36,0.461,37,0.45,39,1.243,40,1.15,47,0.13,48,1.061,50,1.841,59,1.007,61,0.626,63,1.108,64,0.708,66,1.218,67,0.132,68,1.218,70,1.746,71,1.15,72,1.218,75,1.788,85,2.305,86,0.903,99,0.687,100,2.026,103,0.029,104,2.026,105,0.35,106,0.439,107,0.439,108,1.074,112,1.244,114,1.054,115,0.728,116,1.268,118,1.584,120,0.571,124,1.39,126,1.149,140,1.322,141,0.626,150,1.746,152,0.71,159,0.003,160,0.004,161,0.003,179,0.808,180,2.045,181,0.736,182,0.703,184,1.517,194,0.641,195,0.753,197,0.816,199,2.745,208,2.158,212,1.518,307,0.545,310,0.598,311,0.558,313,0.598,315,0.598,318,0.598,326,1.822,327,0.911,332,1.254,336,1.483,337,1.251,344,1.922,381,1.94,387,1.844,392,2.641,402,3.113,403,1.59,404,1.656,405,4.558,410,0.584,411,2.356,412,1.119,414,1.932,415,0.982,419,2.127,420,0.771,421,0.982,424,1.512,425,1.218,426,1.218,427,1.97,428,1.15,429,2.428,430,0.868,435,0.868,448,3.152,455,2.633,456,2.659,457,1.254,458,2.826,459,1.218,460,1.992,461,2.356,462,1.254,463,1.254,464,1.254,465,1.089,469,2.045,473,3.346,475,3.006,477,3.228,480,1.822,481,1.932,482,1.875,483,3.525,484,1.891,488,1.822,489,1.362,491,1.183,496,1.406,497,1.992,498,0.943,499,1.254,501,0.982,502,1.033,503,1.474,508,2.361,509,1.007,510,1.218,511,1.254,512,1.293,513,0.957,525,2.194,526,2.122,527,2.194,535,1.334,536,1.334,537,2.743,538,1.476,539,3.606,541,2.361,549,1.723,550,0.982,551,0.934,552,1.15,553,1.15,554,1.089,555,1.15,556,1.15,557,1.119,558,1.089,559,2.953,560,3.383,561,2.428,562,2.505,563,1.378,564,1.334,565,2.122,566,2.122,567,1.378,568,1.425,569,1.378,570,1.378,571,1.425,572,1.378,582,1.334,597,1.476,606,1.59,607,1.656,619,1.119,631,1.425,644,0.982,656,1.59,658,1.59,659,1.425,660,1.59,661,2.449,665,2.272,675,1.656,680,2.298,682,3.486,683,3.228,706,4.442,717,2.588,886,2.847,887,2.93,993,2.026,1041,1.633,1045,1.378,1047,1.378,1048,2.428,1054,1.378,1056,1.378,1091,1.119,1104,1.991,1105,1.334,1107,2.428,1108,1.991,1110,1.772,1121,1.334,1145,2.102,1205,2.356,1301,1.334,1356,2.55,1357,1.53,1358,3.984,1359,1.656,1444,2.907,1544,1.476,1546,1.53,1547,1.53,2149,1.656,2151,1.59,2152,1.59,2168,1.656,2316,2.194,2341,1.425,2344,1.656,2345,3.11,2348,1.656,2349,2.55,2350,1.729,2351,3.11,2352,1.656,2353,2.986,2354,1.729,2355,1.729,2356,2.986,2357,2.986,2358,3.354,2359,2.986,2360,2.986,2361,2.986,2362,1.729,2363,1.729,2364,1.729,2365,1.729,2366,1.729,2367,1.729,2368,1.729,2369,1.729,2370,1.729,2371,1.729,2372,1.729,2373,1.729,2374,1.729,2375,1.729,2376,1.729,2377,1.729,2378,1.729,2379,1.729,2380,2.663,2381,1.729,2382,2.663,2383,1.729,2384,2.663,2385,1.729,2386,2.663,2387,1.729,2388,1.729,2389,1.729,2390,1.729,2391,1.729,2392,1.59,2393,1.729,2394,2.663,2395,1.59,2396,1.729,2397,1.729,2398,1.729,2399,1.729,2400,1.729,2401,4.396,2402,3.247,2403,1.729,2404,1.729,2405,4.841,2406,3.247,2407,3.647,2408,3.647,2409,4.841,2410,3.647,2411,3.647,2412,3.647,2413,3.647,2414,3.647,2415,3.647,2416,3.647,2417,3.647,2418,3.647,2419,3.647,2420,1.729,2421,3.247,2422,1.729,2423,3.247,2424,3.247,2425,3.939,2426,3.247,2427,1.729,2428,1.729,2429,1.729,2430,1.729,2431,1.729,2432,1.729,2433,1.729,2434,1.729,2435,1.729,2436,1.729,2437,5.229,2438,1.729,2439,4.77,2440,1.729,2441,1.729,2442,1.729,2443,1.729,2444,1.729,2445,1.729,2446,1.729,2447,1.729,2448,1.729,2449,1.729,2450,1.729,2451,1.729,2452,4.841,2453,1.729,2454,1.729,2455,1.729,2456,1.729,2457,1.729,2458,1.729,2459,1.729,2460,1.729,2461,1.729,2462,1.729,2463,1.729,2464,1.729,2465,1.729,2466,1.729,2467,1.729,2468,1.729,2469,1.729,2470,1.729,2471,1.729,2472,1.729,2473,1.729,2474,3.247,2475,3.247,2476,1.729,2477,2.663,2478,4.16,2479,1.729,2480,1.729,2481,1.729,2482,1.729,2483,3.647,2484,3.647,2485,3.647,2486,1.729,2487,1.729,2488,1.729]],["title/index.html",[15,0.144,2847,3.678,2848,3.678]],["body/index.html",[4,0.103,25,0.008,59,2.396,67,0.315,75,2.017,159,0.007,160,0.008,161,0.007,296,1.889,311,1.328,381,3.046,501,3.105,528,5.94,550,2.336,554,2.592,596,4.81,871,6.329,906,6.029,909,5.503,971,4.423,986,4.796,993,2.116,1444,3.279,1815,6.029,2401,4.881,2522,7.158,2801,7.468,2823,6.029,2831,6.029,2849,6.828,2850,6.828,2851,6.828,2852,6.828,2853,8.881,2854,6.828,2855,6.828,2856,6.828,2857,6.828,2858,6.828,2859,6.828,2860,6.828,2861,6.828,2862,6.828,2863,6.828,2864,6.828,2865,6.828,2866,6.828,2867,6.029,2868,7.981,2869,7.981,2870,8.718,2871,7.981,2872,7.981,2873,8.718,2874,6.828,2875,6.828,2876,6.828,2877,6.828]],["title/modules.html",[587,3.112]],["body/modules.html",[25,0.008,159,0.007,160,0.008,161,0.007,418,4.964,586,4.996,587,3.658,732,5.323,742,4.724,743,4.996,744,4.491,745,4.996,746,4.996,747,4.996,1558,5.733,2878,9.074,2879,9.074,2880,9.244,2881,8.6,2882,8.6]],["title/overview.html",[2883,5.343]],["body/overview.html",[2,1.225,25,0.009,159,0.006,160,0.007,161,0.006,297,3.245,298,2.217,343,2.469,348,3.245,350,3.565,352,3.157,354,3.073,356,3.245,357,3.245,360,3.245,361,3.245,362,3.245,364,3.245,365,2.84,367,3.245,368,3.073,370,3.245,371,3.073,372,3.245,373,3.073,374,3.157,410,1.649,550,2.107,574,2.054,585,3.058,586,5.685,587,3.167,618,3.887,644,2.567,687,3.554,720,3.284,732,7.121,733,4.089,734,3.887,735,4.608,736,5.437,737,5.437,738,5.437,739,5.437,740,5.437,741,5.917,742,5.595,743,6.246,744,5.452,745,6.246,746,5.685,747,5.685,748,5.109,749,5.27,750,3.554,891,4.962,934,3.413,1538,5.437,1539,5.437,1572,4.608,1654,5.615,2667,5.437,2883,5.437,2884,6.157,2885,6.157,2886,6.157]],["title/interfaces/requestReportInterface.html",[0,0.085,2359,2.448]],["body/interfaces/requestReportInterface.html",[0,0.142,1,1.143,2,0.567,3,0.049,4,0.043,5,0.037,9,0.394,12,0.667,13,1.345,14,2.572,15,0.111,16,0.463,17,1.813,18,1.609,19,0.902,20,0.469,22,0.604,23,1.001,24,0.893,25,0.009,27,0.364,31,0.125,34,0.821,36,0.458,37,0.447,39,1.24,40,1.145,47,0.13,48,1.053,50,1.835,59,1,61,0.622,63,1.102,64,0.705,66,1.21,67,0.131,68,1.21,70,1.739,71,1.143,72,1.21,75,0.842,85,2.3,86,0.9,99,0.682,100,2.021,103,0.028,104,2.019,105,0.348,106,0.436,107,0.436,108,1.071,112,1.243,114,1.052,115,0.724,116,1.267,118,1.581,120,0.567,124,1.389,126,1.148,140,1.321,141,0.622,150,1.739,152,0.706,159,0.003,160,0.004,161,0.003,179,0.803,180,2.037,181,0.731,182,0.698,184,1.512,194,0.637,195,0.748,197,0.813,199,2.739,208,2.157,212,1.511,307,0.541,310,0.594,311,0.554,313,0.594,315,0.594,318,0.594,326,1.813,327,0.905,332,1.246,336,1.477,337,1.247,344,1.915,381,1.932,387,1.836,392,2.636,402,3.101,403,1.579,404,1.645,405,4.552,410,0.58,411,2.346,412,1.112,414,1.922,415,0.975,419,2.121,420,0.766,421,0.975,424,1.504,425,1.21,426,1.21,427,1.963,428,1.143,429,2.418,430,0.862,435,0.862,448,3.145,455,2.63,456,2.652,457,1.246,458,2.824,459,1.21,460,1.983,461,2.346,462,1.246,463,1.246,464,1.246,465,1.082,469,2.037,473,3.339,475,2.995,477,3.217,480,1.813,481,1.922,482,1.866,483,3.52,484,1.883,488,1.813,489,1.358,491,1.175,496,1.402,497,1.983,498,0.938,499,1.246,501,0.975,502,1.026,503,1.467,508,2.352,509,1,510,1.21,511,1.246,512,1.284,513,0.951,525,2.183,526,2.111,527,2.183,535,1.325,536,1.325,537,2.738,538,1.466,539,3.602,541,2.352,549,1.714,550,0.975,551,0.928,552,1.143,553,1.143,554,1.082,555,1.143,556,1.143,557,1.112,558,1.082,559,2.947,560,3.379,561,2.418,562,2.495,563,1.369,564,1.325,565,2.111,566,2.111,567,1.369,568,1.415,569,1.369,570,1.369,571,1.415,572,1.369,582,1.325,597,1.466,606,1.579,607,1.645,619,1.112,631,1.415,644,0.975,656,1.579,658,1.579,659,1.415,660,1.579,661,2.436,665,2.26,675,1.645,680,2.289,682,3.475,683,3.217,706,4.438,717,2.577,886,2.839,887,2.922,993,2.019,1041,1.625,1045,1.369,1047,1.369,1048,3.103,1054,1.369,1056,1.369,1091,1.112,1104,2.936,1105,2.804,1107,3.103,1108,2.936,1110,2.612,1121,1.325,1145,2.093,1205,2.346,1301,1.325,1356,2.537,1357,1.52,1358,3.973,1359,1.645,1444,2.896,1544,1.466,1546,1.52,1547,1.52,2149,1.645,2151,1.579,2152,1.579,2168,1.645,2316,2.183,2341,1.415,2344,1.645,2345,3.097,2348,1.645,2349,2.537,2350,1.717,2351,3.097,2352,1.645,2353,2.974,2354,1.717,2355,1.717,2356,2.974,2357,2.974,2358,2.974,2359,3.342,2360,2.974,2361,2.974,2362,1.717,2363,1.717,2364,1.717,2365,1.717,2366,1.717,2367,1.717,2368,1.717,2369,1.717,2370,1.717,2371,1.717,2372,1.717,2373,1.717,2374,1.717,2375,1.717,2376,1.717,2377,1.717,2378,1.717,2379,1.717,2380,2.649,2381,1.717,2382,2.649,2383,1.717,2384,2.649,2385,1.717,2386,2.649,2387,1.717,2388,1.717,2389,1.717,2390,1.717,2391,1.717,2392,1.579,2393,1.717,2394,2.649,2395,1.579,2396,1.717,2397,1.717,2398,1.717,2399,1.717,2400,1.717,2401,4.387,2402,3.233,2403,1.717,2404,1.717,2405,4.833,2406,3.233,2407,3.634,2408,3.634,2409,4.833,2410,3.634,2411,3.634,2412,3.634,2413,3.634,2414,3.634,2415,3.634,2416,3.634,2417,3.634,2418,3.634,2419,3.634,2420,1.717,2421,3.233,2422,1.717,2423,3.233,2424,3.233,2425,3.926,2426,3.233,2427,1.717,2428,1.717,2429,1.717,2430,1.717,2431,1.717,2432,1.717,2433,1.717,2434,1.717,2435,1.717,2436,1.717,2437,5.225,2438,1.717,2439,4.762,2440,1.717,2441,1.717,2442,1.717,2443,1.717,2444,1.717,2445,1.717,2446,1.717,2447,1.717,2448,1.717,2449,1.717,2450,1.717,2451,1.717,2452,4.833,2453,1.717,2454,1.717,2455,1.717,2456,1.717,2457,1.717,2458,1.717,2459,1.717,2460,1.717,2461,1.717,2462,1.717,2463,1.717,2464,1.717,2465,1.717,2466,1.717,2467,1.717,2468,1.717,2469,1.717,2470,1.717,2471,1.717,2472,1.717,2473,1.717,2474,3.233,2475,3.233,2476,1.717,2477,2.649,2478,4.149,2479,1.717,2480,1.717,2481,1.717,2482,1.717,2483,3.634,2484,3.634,2485,3.634,2486,1.717,2487,1.717,2488,1.717]],["title/interfaces/revitalizationReportInterface.html",[0,0.085,2361,2.448]],["body/interfaces/revitalizationReportInterface.html",[0,0.142,1,1.14,2,0.566,3,0.049,4,0.043,5,0.037,9,0.393,12,0.665,13,1.343,14,2.571,15,0.111,16,0.462,17,1.81,18,1.608,19,0.901,20,0.468,22,0.604,23,1.001,24,0.894,25,0.009,27,0.364,31,0.124,34,0.82,36,0.457,37,0.446,39,1.239,40,1.144,47,0.13,48,1.051,50,1.834,59,0.998,61,0.621,63,1.1,64,0.704,66,1.207,67,0.131,68,1.207,70,1.737,71,1.14,72,1.207,75,0.84,85,2.298,86,0.899,99,0.681,100,2.019,103,0.028,104,2.017,105,0.348,106,0.435,107,0.435,108,1.07,112,1.243,114,1.051,115,0.723,116,1.266,118,1.579,120,0.566,124,1.389,126,1.147,140,1.32,141,0.621,150,1.737,152,0.705,159,0.003,160,0.004,161,0.003,179,0.801,180,2.034,181,0.73,182,0.697,184,1.51,194,0.635,195,0.747,197,0.812,199,2.737,208,2.157,212,1.509,307,0.54,310,0.593,311,0.553,313,0.593,315,0.593,318,0.593,326,1.81,327,0.903,332,1.243,336,1.476,337,1.246,344,1.913,381,1.929,387,1.833,392,2.635,402,3.098,403,1.576,404,1.641,405,4.55,410,0.579,411,2.342,412,1.109,414,1.918,415,0.973,419,2.118,420,0.764,421,0.973,424,1.501,425,1.207,426,1.207,427,1.96,428,1.14,429,2.415,430,0.86,435,0.86,448,3.142,455,2.629,456,2.65,457,1.243,458,2.824,459,1.207,460,1.981,461,2.342,462,1.243,463,1.243,464,1.243,465,1.079,469,2.034,473,3.337,475,2.992,477,3.213,480,1.81,481,1.918,482,1.862,483,3.519,484,1.88,488,1.81,489,1.357,491,1.173,496,1.401,497,1.981,498,0.936,499,1.243,501,0.973,502,1.024,503,1.464,508,2.349,509,0.998,510,1.207,511,1.243,512,1.281,513,0.949,525,2.179,526,2.107,527,2.179,535,1.322,536,1.322,537,2.736,538,1.462,539,3.601,541,2.349,549,1.711,550,0.973,551,0.925,552,1.14,553,1.14,554,1.079,555,1.14,556,1.14,557,1.109,558,1.079,559,2.945,560,3.378,561,2.415,562,2.491,563,1.366,564,1.322,565,2.107,566,2.107,567,1.366,568,1.412,569,1.366,570,1.366,571,1.412,572,1.366,582,1.322,597,1.462,606,1.576,607,1.641,619,1.109,631,1.412,644,0.973,656,1.576,658,1.576,659,1.412,660,1.576,661,2.432,665,2.256,675,1.641,680,2.287,682,3.472,683,3.213,706,4.437,717,2.573,886,2.837,887,2.92,993,2.017,1041,1.622,1045,1.366,1047,1.366,1048,3.1,1054,1.366,1056,1.366,1091,1.109,1104,2.933,1105,1.322,1107,3.1,1108,2.933,1110,2.61,1121,2.801,1145,2.09,1205,2.342,1301,1.322,1356,2.532,1357,1.517,1358,3.97,1359,1.641,1444,2.893,1544,1.462,1546,1.517,1547,1.517,2149,1.641,2151,1.576,2152,1.576,2168,1.641,2316,2.179,2341,1.412,2344,1.641,2345,3.092,2348,1.641,2349,2.532,2350,1.713,2351,3.092,2352,1.641,2353,2.969,2354,1.713,2355,1.713,2356,2.969,2357,2.969,2358,2.969,2359,2.969,2360,2.969,2361,3.338,2362,3.63,2363,1.713,2364,1.713,2365,1.713,2366,1.713,2367,1.713,2368,1.713,2369,1.713,2370,1.713,2371,1.713,2372,1.713,2373,1.713,2374,1.713,2375,1.713,2376,1.713,2377,1.713,2378,1.713,2379,1.713,2380,2.644,2381,1.713,2382,2.644,2383,1.713,2384,2.644,2385,1.713,2386,2.644,2387,1.713,2388,1.713,2389,1.713,2390,1.713,2391,1.713,2392,1.576,2393,1.713,2394,2.644,2395,1.576,2396,1.713,2397,1.713,2398,1.713,2399,1.713,2400,1.713,2401,4.384,2402,3.229,2403,1.713,2404,1.713,2405,4.83,2406,3.229,2407,3.63,2408,3.63,2409,4.83,2410,3.63,2411,3.63,2412,3.63,2413,3.63,2414,3.63,2415,3.63,2416,3.63,2417,3.63,2418,3.63,2419,3.63,2420,1.713,2421,3.229,2422,1.713,2423,3.229,2424,3.229,2425,3.922,2426,3.229,2427,1.713,2428,1.713,2429,1.713,2430,1.713,2431,1.713,2432,1.713,2433,1.713,2434,1.713,2435,1.713,2436,1.713,2437,5.223,2438,1.713,2439,4.759,2440,1.713,2441,1.713,2442,1.713,2443,1.713,2444,1.713,2445,1.713,2446,1.713,2447,1.713,2448,1.713,2449,1.713,2450,1.713,2451,1.713,2452,4.83,2453,1.713,2454,1.713,2455,1.713,2456,1.713,2457,1.713,2458,1.713,2459,1.713,2460,1.713,2461,1.713,2462,1.713,2463,1.713,2464,1.713,2465,1.713,2466,1.713,2467,1.713,2468,1.713,2469,1.713,2470,1.713,2471,1.713,2472,1.713,2473,1.713,2474,3.229,2475,3.229,2476,1.713,2477,2.644,2478,4.145,2479,1.713,2480,1.713,2481,1.713,2482,1.713,2483,3.63,2484,3.63,2485,3.63,2486,1.713,2487,1.713,2488,1.713]],["title/routes.html",[687,3.493]],["body/routes.html",[25,0.008,159,0.007,160,0.008,161,0.007,687,4.239]],["title/interfaces/userLogInterface.html",[0,0.085,2353,2.448]],["body/interfaces/userLogInterface.html",[0,0.143,1,1.15,2,0.571,3,0.049,4,0.043,5,0.037,9,0.397,12,0.671,13,1.351,14,2.574,15,0.112,16,0.465,17,2.695,18,1.675,19,0.904,20,0.473,22,0.602,23,0.98,24,0.891,25,0.009,27,0.365,31,0.125,34,0.825,36,0.461,37,0.45,39,1.243,40,1.15,47,0.13,48,1.061,50,1.841,59,1.007,61,0.626,63,1.108,64,0.708,66,1.218,67,0.132,68,1.218,70,1.746,71,1.15,72,1.218,75,0.848,85,2.305,86,0.903,99,0.687,100,2.026,103,0.029,104,2.026,105,0.35,106,0.439,107,0.439,108,1.074,112,1.244,114,1.054,115,0.728,116,1.268,118,1.584,120,0.571,124,1.39,126,1.149,140,1.322,141,0.626,150,1.746,152,0.71,159,0.003,160,0.004,161,0.003,179,0.808,180,2.045,181,0.736,182,0.703,184,1.517,194,0.641,195,0.753,197,0.816,199,2.745,208,2.158,212,1.518,307,0.545,310,0.598,311,0.558,313,0.598,315,0.598,318,0.598,326,1.822,327,0.911,332,1.254,336,1.483,337,1.251,344,1.922,381,1.94,387,1.844,392,2.641,402,3.113,403,1.59,404,1.656,405,4.558,410,0.584,411,2.356,412,1.119,414,1.932,415,0.982,419,2.127,420,0.771,421,0.982,424,1.512,425,1.218,426,1.218,427,1.97,428,1.15,429,2.428,430,0.868,435,0.868,448,3.152,455,2.633,456,2.659,457,1.254,458,2.826,459,1.218,460,1.992,461,2.356,462,1.254,463,1.254,464,1.254,465,1.089,469,2.045,473,3.346,475,3.006,477,3.228,480,1.822,481,1.932,482,1.875,483,3.525,484,1.891,488,1.822,489,1.362,491,1.183,496,1.406,497,1.992,498,0.943,499,1.254,501,0.982,502,1.033,503,1.474,508,2.361,509,1.007,510,1.218,511,1.254,512,1.293,513,0.957,525,2.194,526,2.122,527,2.194,535,1.334,536,1.334,537,2.743,538,1.476,539,3.606,541,2.361,549,1.723,550,0.982,551,0.934,552,1.15,553,1.15,554,1.089,555,1.15,556,1.15,557,1.119,558,1.089,559,2.953,560,3.383,561,2.428,562,2.505,563,1.378,564,1.334,565,2.122,566,2.122,567,1.378,568,1.425,569,1.378,570,1.378,571,1.425,572,1.378,582,1.334,597,1.476,606,1.59,607,1.656,619,1.119,631,1.425,644,0.982,656,1.59,658,1.59,659,1.425,660,1.59,661,2.449,665,2.272,675,1.656,680,2.298,682,3.486,683,3.228,706,4.442,717,2.588,886,2.847,887,2.93,993,2.026,1041,1.633,1045,1.378,1047,1.378,1048,2.428,1054,1.378,1056,1.378,1091,1.119,1104,1.991,1105,1.334,1107,2.428,1108,1.991,1110,1.772,1121,1.334,1145,2.102,1205,2.356,1301,1.334,1356,2.55,1357,1.53,1358,3.984,1359,1.656,1444,2.907,1544,1.476,1546,1.53,1547,1.53,2149,1.656,2151,1.59,2152,1.59,2168,1.656,2316,2.194,2341,1.425,2344,1.656,2345,3.11,2348,1.656,2349,2.55,2350,1.729,2351,3.11,2352,1.656,2353,3.354,2354,3.647,2355,3.647,2356,2.986,2357,2.986,2358,2.986,2359,2.986,2360,2.986,2361,2.986,2362,1.729,2363,1.729,2364,1.729,2365,1.729,2366,1.729,2367,1.729,2368,1.729,2369,1.729,2370,1.729,2371,1.729,2372,1.729,2373,1.729,2374,1.729,2375,1.729,2376,1.729,2377,1.729,2378,1.729,2379,1.729,2380,2.663,2381,1.729,2382,2.663,2383,1.729,2384,2.663,2385,1.729,2386,2.663,2387,1.729,2388,1.729,2389,1.729,2390,1.729,2391,1.729,2392,1.59,2393,1.729,2394,2.663,2395,1.59,2396,1.729,2397,1.729,2398,1.729,2399,1.729,2400,1.729,2401,4.396,2402,3.247,2403,1.729,2404,1.729,2405,4.841,2406,3.247,2407,3.647,2408,3.647,2409,4.841,2410,3.647,2411,3.647,2412,3.647,2413,3.647,2414,3.647,2415,3.647,2416,3.647,2417,3.647,2418,3.647,2419,3.647,2420,1.729,2421,3.247,2422,1.729,2423,3.247,2424,3.247,2425,3.939,2426,3.247,2427,1.729,2428,1.729,2429,1.729,2430,1.729,2431,1.729,2432,1.729,2433,1.729,2434,1.729,2435,1.729,2436,1.729,2437,5.229,2438,1.729,2439,4.77,2440,1.729,2441,1.729,2442,1.729,2443,1.729,2444,1.729,2445,1.729,2446,1.729,2447,1.729,2448,1.729,2449,1.729,2450,1.729,2451,1.729,2452,4.841,2453,1.729,2454,1.729,2455,1.729,2456,1.729,2457,1.729,2458,1.729,2459,1.729,2460,1.729,2461,1.729,2462,1.729,2463,1.729,2464,1.729,2465,1.729,2466,1.729,2467,1.729,2468,1.729,2469,1.729,2470,1.729,2471,1.729,2472,1.729,2473,1.729,2474,3.247,2475,3.247,2476,1.729,2477,2.663,2478,4.16,2479,1.729,2480,1.729,2481,1.729,2482,1.729,2483,3.647,2484,3.647,2485,3.647,2486,1.729,2487,1.729,2488,1.729]],["title/miscellaneous/variables.html",[37,0.834,2840,2.753]],["body/miscellaneous/variables.html",[6,2.697,7,4.089,9,1.1,15,0.205,22,0.61,25,0.009,26,1.299,32,2.004,36,1.09,37,0.823,41,3.489,42,2.797,43,3.489,44,2.797,45,3.489,46,2.797,63,2.204,67,0.242,78,2.021,140,0.803,152,1.356,159,0.005,160,0.007,161,0.005,177,1.462,181,1.346,182,1.662,184,2.181,212,1.477,216,3.265,337,1.229,496,1.382,509,1.84,639,3.63,640,3.351,794,3.924,833,3.482,875,4.63,993,1.625,1030,3.76,1031,3.027,1040,3.16,1041,3.364,1042,3.816,1064,4.088,1065,3.311,1066,4.088,1067,3.311,1068,4.088,1069,3.311,1070,4.088,1071,3.311,1072,4.088,1073,3.311,1074,4.088,1075,3.311,1076,4.088,1077,3.311,1078,4.088,1079,3.311,1080,4.088,1081,3.311,1082,4.088,1083,3.311,1084,4.088,1085,3.311,1086,4.088,1087,3.311,1088,4.088,1089,3.311,1216,2.906,1255,3.924,1261,6.175,1262,5.28,1404,4.63,1439,4.505,1440,3.683,1624,6.408,1626,4.63,1627,4.63,1629,7.021,1714,6.64,1716,6.64,1717,6.64,1718,4.34,1719,7.763,1720,6.64,1721,6.64,1781,4.226,1782,5.467,1827,5.99,1828,6.798,1829,5.99,1931,3.027,1933,3.915,1934,3.16,1935,3.915,1936,3.16,1937,3.915,1938,3.16,1939,3.915,1940,3.16,2699,4.63,2700,6.64,2701,5.99,2702,5.99,2740,4.63,2741,5.99,2743,4.63,2744,5.99,2840,3.924,2867,4.63,2887,6.784,2888,6.784,2889,9.026,2890,8.234,2891,7.52,2892,5.244,2893,5.244,2894,5.244,2895,5.244,2896,5.244,2897,7.52,2898,5.244,2899,5.244,2900,5.244,2901,5.244,2902,5.244,2903,5.244,2904,5.244,2905,5.244,2906,8.435,2907,8.435,2908,5.244,2909,5.244,2910,5.244,2911,5.244,2912,5.244,2913,5.244,2914,5.244,2915,5.244,2916,5.244,2917,5.244]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"modules/AdminModule.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"interfaces/Location.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"modules/MaterialModule.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"modules/StaffModule.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"dependencies.html":{},"interfaces/depositReportInterface.html":{},"miscellaneous/enumerations.html":{},"interfaces/errorLogInterface.html":{},"index.html":{},"modules.html":{},"overview.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"routes.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":539,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["0.1",{"_index":2221,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["0.13.9",{"_index":2798,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2830,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":2202,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["0.5.5",{"_index":2756,"title":{},"body":{"dependencies.html":{}}}],["0.6",{"_index":2212,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["0.7",{"_index":2215,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["0.7.8",{"_index":2763,"title":{},"body":{"dependencies.html":{}}}],["0.8",{"_index":2217,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["0.8.26",{"_index":2796,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2643,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2726,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2635,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2655,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2634,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2633,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2657,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2656,"title":{},"body":{"coverage.html":{}}}],["0px",{"_index":1803,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["1",{"_index":644,"title":{"interfaces/POSTMember-1.html":{},"interfaces/StaffMember-1.html":{}},"body":{"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"injectables/Porting.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"overview.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["1.0.0",{"_index":2747,"title":{},"body":{"dependencies.html":{}}}],["1.0.13",{"_index":2769,"title":{},"body":{"dependencies.html":{}}}],["1.0.2",{"_index":2767,"title":{},"body":{"dependencies.html":{}}}],["1.0.4",{"_index":2786,"title":{},"body":{"dependencies.html":{}}}],["1.1.2",{"_index":2829,"title":{},"body":{"dependencies.html":{}}}],["1.10.17",{"_index":2806,"title":{},"body":{"dependencies.html":{}}}],["1.10.19",{"_index":2774,"title":{},"body":{"dependencies.html":{}}}],["1.3.0",{"_index":2777,"title":{},"body":{"dependencies.html":{}}}],["1.5.3",{"_index":2784,"title":{},"body":{"dependencies.html":{}}}],["1.6.55",{"_index":2804,"title":{},"body":{"dependencies.html":{}}}],["1.9.0",{"_index":2794,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2738,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":2703,"title":{},"body":{"coverage.html":{}}}],["1/11",{"_index":2728,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":2721,"title":{},"body":{"coverage.html":{}}}],["1/14",{"_index":2723,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":2715,"title":{},"body":{"coverage.html":{}}}],["1/27",{"_index":2718,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2707,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":2709,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":2637,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":2705,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":2711,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":2713,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":2720,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":2208,"title":{},"body":{"components/PageNotFoundComponent.html":{},"coverage.html":{}}}],["10.0.4",{"_index":2788,"title":{},"body":{"dependencies.html":{}}}],["10/14",{"_index":2673,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":2696,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":2719,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":2716,"title":{},"body":{"coverage.html":{}}}],["11/39",{"_index":2742,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":2712,"title":{},"body":{"coverage.html":{}}}],["12/14",{"_index":2735,"title":{},"body":{"coverage.html":{}}}],["12/20",{"_index":2645,"title":{},"body":{"coverage.html":{}}}],["1234",{"_index":2046,"title":{},"body":{"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{}}}],["1234567890",{"_index":1324,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["128/129",{"_index":2664,"title":{},"body":{"coverage.html":{}}}],["13/17",{"_index":2737,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":2710,"title":{},"body":{"coverage.html":{}}}],["14/15",{"_index":2682,"title":{},"body":{"coverage.html":{}}}],["14px",{"_index":2230,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["15",{"_index":1853,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["15/15",{"_index":2717,"title":{},"body":{"coverage.html":{}}}],["157",{"_index":2433,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["15th",{"_index":2846,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["16",{"_index":2704,"title":{},"body":{"coverage.html":{}}}],["17/18",{"_index":2693,"title":{},"body":{"coverage.html":{}}}],["180",{"_index":2406,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["19",{"_index":2884,"title":{},"body":{"overview.html":{}}}],["19/21",{"_index":2670,"title":{},"body":{"coverage.html":{}}}],["19th",{"_index":608,"title":{},"body":{"modules/AdminModule.html":{}}}],["2",{"_index":1301,"title":{"interfaces/StaffMember-2.html":{}},"body":{"classes/ClinicHandlerComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-2.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["2.0.1",{"_index":2828,"title":{},"body":{"dependencies.html":{}}}],["2.0.3",{"_index":2812,"title":{},"body":{"dependencies.html":{}}}],["2.1.4",{"_index":2792,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":2787,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":2772,"title":{},"body":{"dependencies.html":{}}}],["2.8.16",{"_index":2810,"title":{},"body":{"dependencies.html":{}}}],["2.99.1",{"_index":2819,"title":{},"body":{"dependencies.html":{}}}],["2/4",{"_index":2739,"title":{},"body":{"coverage.html":{}}}],["2/5",{"_index":2668,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2636,"title":{},"body":{"coverage.html":{}}}],["20/21",{"_index":2695,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1227,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Member.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"classes/StaffViewSamplesComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["2019",{"_index":599,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"interfaces/Organisation.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"miscellaneous/enumerations.html":{}}}],["20th",{"_index":2150,"title":{},"body":{"interfaces/Organisation.html":{}}}],["21/23",{"_index":2639,"title":{},"body":{"coverage.html":{}}}],["21/24",{"_index":2666,"title":{},"body":{"coverage.html":{}}}],["21/27",{"_index":2688,"title":{},"body":{"coverage.html":{}}}],["21/29",{"_index":2647,"title":{},"body":{"coverage.html":{}}}],["21st",{"_index":1545,"title":{},"body":{"modules/ErrorsModule.html":{}}}],["22/26",{"_index":2732,"title":{},"body":{"coverage.html":{}}}],["24/25",{"_index":2685,"title":{},"body":{"coverage.html":{}}}],["24th",{"_index":598,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{}}}],["25",{"_index":2708,"title":{},"body":{"coverage.html":{}}}],["25/29",{"_index":2642,"title":{},"body":{"coverage.html":{}}}],["25th",{"_index":2169,"title":{},"body":{"modules/OrganizationModule.html":{}}}],["26/30",{"_index":2671,"title":{},"body":{"coverage.html":{}}}],["26th",{"_index":2160,"title":{},"body":{"modules/OrganizationMemberModule.html":{}}}],["28",{"_index":2224,"title":{},"body":{"components/PageNotFoundComponent.html":{},"coverage.html":{}}}],["28/29",{"_index":2684,"title":{},"body":{"coverage.html":{}}}],["288.8463px",{"_index":2197,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["295",{"_index":2408,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["2c4d40",{"_index":2206,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["2px",{"_index":1895,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["3",{"_index":1303,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberDashboardComponent.html":{},"coverage.html":{}}}],["3.1.2",{"_index":2766,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":2839,"title":{},"body":{"dependencies.html":{}}}],["3.2.4",{"_index":2785,"title":{},"body":{"dependencies.html":{}}}],["3.3.31",{"_index":2814,"title":{},"body":{"dependencies.html":{}}}],["3.37.0",{"_index":2808,"title":{},"body":{"dependencies.html":{}}}],["3.4.0",{"_index":2781,"title":{},"body":{"dependencies.html":{}}}],["3.4.1",{"_index":2783,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":2697,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":2698,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":2886,"title":{},"body":{"overview.html":{}}}],["30/33",{"_index":2678,"title":{},"body":{"coverage.html":{}}}],["30/37",{"_index":2632,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":1771,"title":{},"body":{"classes/LoginComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["31/34",{"_index":2677,"title":{},"body":{"coverage.html":{}}}],["32/39",{"_index":2652,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":2706,"title":{},"body":{"coverage.html":{}}}],["35/41",{"_index":2660,"title":{},"body":{"coverage.html":{}}}],["36px",{"_index":2226,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["37/38",{"_index":2691,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":2824,"title":{},"body":{"dependencies.html":{}}}],["4.1.3",{"_index":2758,"title":{},"body":{"dependencies.html":{}}}],["4.2.1",{"_index":2822,"title":{},"body":{"dependencies.html":{}}}],["4.3.1",{"_index":2770,"title":{},"body":{"dependencies.html":{}}}],["4.4.8",{"_index":2791,"title":{},"body":{"dependencies.html":{}}}],["4.5.0",{"_index":2818,"title":{},"body":{"dependencies.html":{}}}],["4.7.0",{"_index":2778,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":2730,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":2667,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["40/49",{"_index":2649,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":2294,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["403",{"_index":2300,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["404",{"_index":2231,"title":{},"body":{"components/PageNotFoundComponent.html":{},"classes/ServerErrorInterceptor.html":{}}}],["45",{"_index":2733,"title":{},"body":{"coverage.html":{}}}],["45/51",{"_index":2676,"title":{},"body":{"coverage.html":{}}}],["48",{"_index":2885,"title":{},"body":{"overview.html":{}}}],["4a7261",{"_index":2210,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["5",{"_index":2897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.11.0",{"_index":2837,"title":{},"body":{"dependencies.html":{}}}],["5.2.7",{"_index":2760,"title":{},"body":{"dependencies.html":{}}}],["5.4.0",{"_index":2832,"title":{},"body":{"dependencies.html":{}}}],["5/11",{"_index":2734,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":2724,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":2714,"title":{},"body":{"coverage.html":{}}}],["6.3.3",{"_index":2789,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":2644,"title":{},"body":{"coverage.html":{}}}],["6000",{"_index":1340,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{}}}],["61/62",{"_index":2654,"title":{},"body":{"coverage.html":{}}}],["61ad8f",{"_index":2203,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["66",{"_index":2679,"title":{},"body":{"coverage.html":{}}}],["6a6d64",{"_index":2222,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["6th",{"_index":2153,"title":{},"body":{"interfaces/Organisation.html":{},"miscellaneous/enumerations.html":{}}}],["7",{"_index":2722,"title":{},"body":{"coverage.html":{}}}],["7.0.0",{"_index":2835,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":2753,"title":{},"body":{"dependencies.html":{}}}],["7.2.15",{"_index":2750,"title":{},"body":{"dependencies.html":{}}}],["7.3.7",{"_index":2752,"title":{},"body":{"dependencies.html":{}}}],["7.3.8",{"_index":2851,"title":{},"body":{"index.html":{}}}],["7.3.9",{"_index":2800,"title":{},"body":{"dependencies.html":{}}}],["7/8",{"_index":2727,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":2672,"title":{},"body":{"coverage.html":{}}}],["72",{"_index":2646,"title":{},"body":{"coverage.html":{}}}],["76",{"_index":2736,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":2687,"title":{},"body":{"coverage.html":{}}}],["7faa51",{"_index":2189,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["8",{"_index":1715,"title":{},"body":{"classes/LoginComponent.html":{},"coverage.html":{}}}],["8.0.0",{"_index":2764,"title":{},"body":{"dependencies.html":{}}}],["8.10.49",{"_index":2816,"title":{},"body":{"dependencies.html":{}}}],["8/12",{"_index":2680,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":2729,"title":{},"body":{"coverage.html":{}}}],["81",{"_index":2631,"title":{},"body":{"coverage.html":{}}}],["82",{"_index":2651,"title":{},"body":{"coverage.html":{}}}],["84",{"_index":2731,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":2659,"title":{},"body":{"coverage.html":{}}}],["86",{"_index":2641,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":2665,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":2675,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1654,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"coverage.html":{},"overview.html":{}}}],["9/9",{"_index":2725,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":2669,"title":{},"body":{"coverage.html":{}}}],["91",{"_index":2638,"title":{},"body":{"coverage.html":{}}}],["93",{"_index":2681,"title":{},"body":{"coverage.html":{}}}],["94",{"_index":2692,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":2694,"title":{},"body":{"coverage.html":{}}}],["96",{"_index":2683,"title":{},"body":{"coverage.html":{}}}],["97",{"_index":2690,"title":{},"body":{"coverage.html":{}}}],["98",{"_index":2653,"title":{},"body":{"coverage.html":{}}}],["99",{"_index":2663,"title":{},"body":{"coverage.html":{}}}],["9_",{"_index":1653,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["_errors/error",{"_index":864,"title":{},"body":{"modules/AppModule.html":{},"injectables/NotificationService.html":{}}}],["_errors/errors.module",{"_index":866,"title":{},"body":{"modules/AppModule.html":{}}}],["_guards/authentication.guard",{"_index":693,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"modules/ErrorsRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["_interfaces/interfaces",{"_index":989,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/ClinicHandlerComponent.html":{},"injectables/DiagnosticClinicAPIService.html":{},"classes/HomeComponent.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["_interfaces/role",{"_index":695,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["_loading/loading.component",{"_index":867,"title":{},"body":{"modules/AppModule.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["_pipes/filter.pipe",{"_index":868,"title":{},"body":{"modules/AppModule.html":{}}}],["_services/authentication.service",{"_index":581,"title":{},"body":{"classes/AdminMenuComponent.html":{},"guards/AuthenticationGuard.html":{},"classes/LoginComponent.html":{}}}],["_services/culture",{"_index":2341,"title":{},"body":{"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["_services/diagnostic",{"_index":423,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffNotificationComponent.html":{}}}],["_services/notification",{"_index":425,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["_services/notification.service",{"_index":869,"title":{},"body":{"modules/AppModule.html":{},"classes/ErrorsHandler.html":{}}}],["_services/user",{"_index":428,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["a4",{"_index":2417,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["abitdry",{"_index":1465,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["accept",{"_index":135,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["access",{"_index":13,"title":{},"body":{"interfaces/AccessLogs.html":{},"classes/AdminNotificationComponent.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"injectables/FilterPipe.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/StaffMember-2.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["accessed",{"_index":69,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["accessloginterface",{"_index":2357,"title":{"interfaces/accessLogInterface.html":{}},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["accesslogs",{"_index":1,"title":{"interfaces/AccessLogs.html":{}},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/StaffMember-2.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["accesslogsarray",{"_index":2375,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["accessors",{"_index":952,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["accl",{"_index":68,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/StaffMember-2.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["according",{"_index":1727,"title":{},"body":{"classes/LoginComponent.html":{}}}],["accordingly",{"_index":1517,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["account",{"_index":2071,"title":{},"body":{"components/MemberHelpComponent.html":{},"components/StaffHelpComponent.html":{}}}],["action",{"_index":17,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/StaffMember-2.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["activate",{"_index":908,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["activated",{"_index":912,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["activatedroutesnapshot",{"_index":902,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["activating",{"_index":894,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["active",{"_index":2480,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["actual",{"_index":1102,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["actual_component",{"_index":377,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["actucal",{"_index":49,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["add",{"_index":386,"title":{},"body":{"components/AdminHelpComponent.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Member.html":{},"components/OrganizationHelpComponent.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["add_staff_validators",{"_index":1248,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["added",{"_index":1203,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Member.html":{},"classes/MemberViewSamplesComponent.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["addfabiadmin(staffinfo",{"_index":2002,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["addfabiadminurl",{"_index":2003,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["additional",{"_index":282,"title":{},"body":{"interfaces/Address.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["additionalnotes",{"_index":1043,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["addjwttoken",{"_index":2269,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["addjwttoken(request",{"_index":2275,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["addmemberurl",{"_index":2008,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["addorgmember(orginfo",{"_index":2007,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["address",{"_index":162,"title":{"interfaces/Address.html":{}},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"coverage.html":{}}}],["address_details",{"_index":1870,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["address_details.address_components.foreach(component",{"_index":1873,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["address_details.formatted_address",{"_index":1872,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["addstaff",{"_index":1256,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["addstaffform",{"_index":1249,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["addstaffmember(staffinfo",{"_index":1988,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["addstaffmemberurl",{"_index":1994,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["adjust",{"_index":1726,"title":{},"body":{"classes/LoginComponent.html":{}}}],["admin",{"_index":177,"title":{},"body":{"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"modules/AdminModule.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"components/ErrorComponent.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Member.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"components/PageNotFoundComponent.html":{},"interfaces/PrivilegeTypes.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember-1.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin's",{"_index":664,"title":{},"body":{"classes/AdminNotificationComponent.html":{}}}],["admin.module.ts",{"_index":589,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin/admin",{"_index":769,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["admin/admin.module",{"_index":773,"title":{},"body":{"modules/AppModule.html":{}}}],["admin/clinic",{"_index":775,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["admin/database",{"_index":778,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["admin/organization",{"_index":779,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["admin/reporting/reporting.component",{"_index":780,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["admin/staff",{"_index":781,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["admin/view",{"_index":782,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["admin_details",{"_index":1684,"title":{},"body":{"classes/HomeComponent.html":{}}}],["admin_email",{"_index":1623,"title":{},"body":{"classes/HomeComponent.html":{}}}],["admin_name",{"_index":1626,"title":{},"body":{"classes/HomeComponent.html":{},"miscellaneous/variables.html":{}}}],["admin_phone",{"_index":1628,"title":{},"body":{"classes/HomeComponent.html":{}}}],["admin_surname",{"_index":1627,"title":{},"body":{"classes/HomeComponent.html":{},"miscellaneous/variables.html":{}}}],["adminapiservice",{"_index":1645,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["admincontainer",{"_index":440,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["admindashboardcomponent",{"_index":434,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/StaffMember-1.html":{},"coverage.html":{}}}],["admindivcomponent",{"_index":297,"title":{"components/AdminDivComponent.html":{}},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["adminform",{"_index":2701,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminhelpcomponent",{"_index":348,"title":{"components/AdminHelpComponent.html":{}},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["administrative_area_level_1",{"_index":1883,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["administrator",{"_index":341,"title":{},"body":{"components/AdminDivComponent.html":{}}}],["administrators",{"_index":331,"title":{},"body":{"components/AdminDivComponent.html":{},"interfaces/AdminMember.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["adminmember",{"_index":407,"title":{"interfaces/AdminMember.html":{}},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{},"coverage.html":{}}}],["adminmenucomponent",{"_index":573,"title":{"classes/AdminMenuComponent.html":{}},"body":{"classes/AdminMenuComponent.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["adminmodule",{"_index":586,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["adminnotificationcomponent",{"_index":620,"title":{"classes/AdminNotificationComponent.html":{}},"body":{"classes/AdminNotificationComponent.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["adminprofilecomponent",{"_index":697,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"coverage.html":{}}}],["adminroutingmodule",{"_index":616,"title":{"classes/AdminRoutingModule.html":{}},"body":{"modules/AdminModule.html":{},"classes/AdminRoutingModule.html":{},"coverage.html":{}}}],["admins",{"_index":449,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["adminsitrator",{"_index":342,"title":{},"body":{"components/AdminDivComponent.html":{}}}],["adminstrators",{"_index":533,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["admintableloading",{"_index":471,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["admintypes",{"_index":1250,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["adminusers",{"_index":1251,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["aeb0ad",{"_index":2199,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["affected",{"_index":268,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["again",{"_index":2581,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["agar",{"_index":1126,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["agarslants",{"_index":1125,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["agm",{"_index":2761,"title":{},"body":{"dependencies.html":{}}}],["agm/core",{"_index":755,"title":{},"body":{"modules/AppModule.html":{},"classes/MapsWindowComponent.html":{},"dependencies.html":{}}}],["aizasyco9bq9xt6uuq5dwnipbrf0hz8bx1oxd_m",{"_index":2917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alert(\"geolocation",{"_index":1862,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["alldatabasenames",{"_index":1252,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["alllogs",{"_index":623,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{}}}],["allnotifications",{"_index":624,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{}}}],["allow",{"_index":157,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["allwos",{"_index":1637,"title":{},"body":{"classes/HomeComponent.html":{}}}],["already",{"_index":1752,"title":{},"body":{"classes/LoginComponent.html":{}}}],["altered",{"_index":566,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["anchorscrolling",{"_index":890,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["angular",{"_index":871,"title":{},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"dependencies.html":{},"index.html":{}}}],["angular/animations",{"_index":2749,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":2751,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/layout",{"_index":757,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/cli",{"_index":2799,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":615,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"modules/StaffModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":29,"title":{},"body":{"interfaces/AccessLogs.html":{},"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["angular/compiler",{"_index":2754,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":31,"title":{},"body":{"interfaces/AccessLogs.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"modules/AdminModule.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"modules/MaterialModule.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"components/OrganizationHelpComponent.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"modules/StaffModule.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"dependencies.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["angular/forms",{"_index":412,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"modules/AppModule.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"modules/MaterialModule.html":{},"modules/OrganizationMemberModule.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"dependencies.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["angular/language",{"_index":2802,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":415,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"components/ErrorComponent.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"modules/MaterialModule.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"dependencies.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["angular/material/autocomplete",{"_index":762,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/button",{"_index":1910,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/card",{"_index":1912,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/expansion",{"_index":1914,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/grid",{"_index":1924,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/icon",{"_index":1906,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/menu",{"_index":1904,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/sidenav",{"_index":1922,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/table",{"_index":1920,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/tabs",{"_index":1918,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/toolbar",{"_index":1908,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/platform",{"_index":417,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"modules/AppModule.html":{},"classes/ClinicHandlerComponent.html":{},"modules/OrganizationMemberModule.html":{},"interfaces/StaffMember-1.html":{},"dependencies.html":{}}}],["angular/router",{"_index":420,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"dependencies.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["angular7",{"_index":2768,"title":{},"body":{"dependencies.html":{}}}],["anyway",{"_index":1536,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["api",{"_index":39,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["api.service",{"_index":424,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["api.service.ts",{"_index":1042,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/Member.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["api.service.ts:111",{"_index":1423,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{}}}],["api.service.ts:138",{"_index":1425,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{}}}],["api.service.ts:170",{"_index":1427,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{}}}],["api.service.ts:175",{"_index":1369,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["api.service.ts:201",{"_index":1376,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["api.service.ts:204",{"_index":1434,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{}}}],["api.service.ts:227",{"_index":1374,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["api.service.ts:254",{"_index":1377,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["api.service.ts:256",{"_index":1429,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{}}}],["api.service.ts:279",{"_index":1375,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["api.service.ts:290",{"_index":1438,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{}}}],["api.service.ts:305",{"_index":1378,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["api.service.ts:335",{"_index":1379,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["api.service.ts:363",{"_index":1380,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["api.service.ts:393",{"_index":1381,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["api.service.ts:422",{"_index":1382,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["api.service.ts:450",{"_index":1370,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["api.service.ts:480",{"_index":1372,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["api.service.ts:510",{"_index":1373,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["api.service.ts:540",{"_index":1371,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["api.service.ts:58",{"_index":1419,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{}}}],["api.service.ts:82",{"_index":1420,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{}}}],["apikey",{"_index":875,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":311,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"components/ErrorComponent.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"modules/OrganizationMemberModule.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"components/PageNotFoundComponent.html":{},"classes/PreDiagnosisComponent.html":{},"components/SampleDivComponent.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"index.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["app.component",{"_index":783,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":723,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":722,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":350,"title":{"components/AppComponent.html":{}},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["application",{"_index":552,"title":{},"body":{"interfaces/AdminMember.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["application/json",{"_index":134,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["applications",{"_index":1568,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["apply",{"_index":1657,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["appmodule",{"_index":732,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1737,"title":{},"body":{"classes/LoginComponent.html":{}}}],["approutingmodule",{"_index":742,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/OrganizationMemberModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":397,"title":{},"body":{"components/AdminHelpComponent.html":{}}}],["apr",{"_index":2459,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["april",{"_index":2460,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["area",{"_index":166,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["array",{"_index":85,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"injectables/FilterPipe.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["array.prototype.filter.call(this.forms",{"_index":1665,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["artifacts",{"_index":2862,"title":{},"body":{"index.html":{}}}],["associated",{"_index":153,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"classes/StaffDashboardComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["assword",{"_index":2900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["asym_dis",{"_index":1458,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["aug",{"_index":2463,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["august",{"_index":607,"title":{},"body":{"modules/AdminModule.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["auth_header",{"_index":2268,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["authenticate",{"_index":1732,"title":{},"body":{"classes/LoginComponent.html":{}}}],["authenticated",{"_index":1733,"title":{},"body":{"classes/LoginComponent.html":{}}}],["authentication",{"_index":498,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"classes/ErrorsHandler.html":{},"classes/LoginComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["authentication.service",{"_index":35,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["authenticationguard",{"_index":692,"title":{"guards/AuthenticationGuard.html":{}},"body":{"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"modules/ErrorsRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"coverage.html":{}}}],["authenticationservice",{"_index":34,"title":{"injectables/AuthenticationService.html":{}},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["author",{"_index":600,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"interfaces/Organisation.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"miscellaneous/enumerations.html":{}}}],["authorization",{"_index":136,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["authservice",{"_index":115,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["autocomplete",{"_index":1839,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["autocomplete.addlistener(\"place_changed",{"_index":1841,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["autocomplete.getplace",{"_index":1844,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["automatically",{"_index":2857,"title":{},"body":{"index.html":{}}}],["autotable",{"_index":2352,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"dependencies.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["available",{"_index":2879,"title":{},"body":{"modules.html":{}}}],["awesome",{"_index":2765,"title":{},"body":{"dependencies.html":{}}}],["back",{"_index":1822,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["bar",{"_index":1615,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["based",{"_index":991,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/FilterPipe.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/PreDiagnosisComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["bearer",{"_index":137,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["bedropped",{"_index":1401,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["before",{"_index":87,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["behalf",{"_index":2069,"title":{},"body":{"components/MemberHelpComponent.html":{}}}],["behaviorsubject",{"_index":975,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/ServerErrorInterceptor.html":{}}}],["behaviorsubject(json.parse(localstorage.getitem('sessiondetails",{"_index":994,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["behaviorsubject(null",{"_index":2288,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["being",{"_index":1576,"title":{},"body":{"injectables/FilterPipe.html":{},"classes/MapsWindowComponent.html":{}}}],["belonging",{"_index":90,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"injectables/NotificationLoggingService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/StaffMember-1.html":{},"interfaces/UserLogs.html":{}}}],["belongs",{"_index":1443,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/Member.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["beta.7",{"_index":2748,"title":{},"body":{"dependencies.html":{}}}],["bionumeric",{"_index":1116,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["bionumerics",{"_index":2587,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["bionumericsname",{"_index":2583,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["body",{"_index":139,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["boolean",{"_index":208,"title":{},"body":{"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"classes/HomeComponent.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["bootstrap",{"_index":734,"title":{},"body":{"modules/AppModule.html":{},"modules/ErrorsModule.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"modules/OrganizationMemberModule.html":{},"dependencies.html":{},"overview.html":{}}}],["bootstrap/ng",{"_index":2757,"title":{},"body":{"dependencies.html":{}}}],["browse",{"_index":2880,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":418,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"modules/AppModule.html":{},"classes/ClinicHandlerComponent.html":{},"classes/MapsWindowComponent.html":{},"modules/OrganizationMemberModule.html":{},"interfaces/StaffMember-1.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/animations",{"_index":766,"title":{},"body":{"modules/AppModule.html":{},"modules/OrganizationMemberModule.html":{}}}],["browseranimationsmodule",{"_index":764,"title":{},"body":{"modules/AppModule.html":{},"modules/OrganizationMemberModule.html":{}}}],["browsermodule",{"_index":763,"title":{},"body":{"modules/AppModule.html":{},"modules/OrganizationMemberModule.html":{}}}],["bs",{"_index":2775,"title":{},"body":{"dependencies.html":{}}}],["build",{"_index":2522,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"index.html":{}}}],["busy",{"_index":1711,"title":{},"body":{"classes/LoginComponent.html":{}}}],["button",{"_index":461,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["c",{"_index":610,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"interfaces/Organisation.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"miscellaneous/enumerations.html":{}}}],["c18",{"_index":1132,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["c:\\users\\kendra\\documents\\varsity\\third",{"_index":591,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"miscellaneous/enumerations.html":{}}}],["cache",{"_index":131,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["call",{"_index":680,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"injectables/DiagnosticClinicAPIService.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["called",{"_index":327,"title":{},"body":{"components/AdminDivComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/PreDiagnosisComponent.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["calling",{"_index":489,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"classes/ErrorsHandler.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["calls",{"_index":111,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"injectables/FilterPipe.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/StaffMember-1.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["canactivate",{"_index":713,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["canactivate(next",{"_index":901,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["canactivatechild",{"_index":895,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["canactivatechild(next",{"_index":919,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["cancel",{"_index":217,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["canceled",{"_index":218,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["cancels",{"_index":1811,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["cankers",{"_index":255,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["canload",{"_index":896,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["canload(route",{"_index":921,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["canvas.height",{"_index":2410,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["canvas.todataurl('image/png",{"_index":2414,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["canvas.width",{"_index":2411,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["can’t",{"_index":2235,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["catcherror",{"_index":2281,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["catcherror((error",{"_index":2292,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["change",{"_index":1815,"title":{},"body":{"classes/MapsWindowComponent.html":{},"index.html":{}}}],["changed",{"_index":340,"title":{},"body":{"components/AdminDivComponent.html":{},"components/StaffDivComponent.html":{}}}],["changemaptype",{"_index":1787,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["changepasswordformvalidators",{"_index":2702,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["changes",{"_index":1821,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["characters",{"_index":1716,"title":{},"body":{"classes/LoginComponent.html":{},"miscellaneous/variables.html":{}}}],["check",{"_index":986,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/ClinicHandlerComponent.html":{},"classes/ErrorsHandler.html":{},"classes/LoginComponent.html":{},"index.html":{}}}],["checks",{"_index":1212,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["chrome",{"_index":2825,"title":{},"body":{"dependencies.html":{}}}],["city",{"_index":167,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["class",{"_index":103,"title":{"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/ErrorsHandler.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/PreDiagnosisComponent.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}},"body":{"interfaces/AccessLogs.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"modules/AdminModule.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"modules/MaterialModule.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"components/OrganizationHelpComponent.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"modules/StaffModule.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["classes",{"_index":574,"title":{},"body":{"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/ErrorsHandler.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/PreDiagnosisComponent.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"overview.html":{}}}],["clear",{"_index":553,"title":{},"body":{"interfaces/AdminMember.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["cli",{"_index":2801,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["click",{"_index":393,"title":{},"body":{"components/AdminHelpComponent.html":{},"components/MemberHelpComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/StaffHelpComponent.html":{}}}],["clicked",{"_index":2476,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["client",{"_index":1504,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["clinic",{"_index":78,"title":{},"body":{"interfaces/AccessLogs.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"injectables/FilterPipe.html":{},"interfaces/Logs.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"components/OrganizationHelpComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"interfaces/UserLogs.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["clinicadmin",{"_index":715,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"classes/ClinicHandlerComponent.html":{},"classes/LoginComponent.html":{},"miscellaneous/enumerations.html":{}}}],["clinicadminviewsamplescomponent",{"_index":774,"title":{"classes/ClinicAdminViewSamplesComponent.html":{}},"body":{"modules/AppModule.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"coverage.html":{}}}],["clinichandlercomponent",{"_index":700,"title":{"classes/ClinicHandlerComponent.html":{}},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/ClinicHandlerComponent.html":{},"coverage.html":{}}}],["closes",{"_index":1813,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["clumps",{"_index":262,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["cluster_appmodule",{"_index":736,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":739,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":737,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":738,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":740,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_errorsmodule",{"_index":1538,"title":{},"body":{"modules/ErrorsModule.html":{},"overview.html":{}}}],["cluster_errorsmodule_declarations",{"_index":1539,"title":{},"body":{"modules/ErrorsModule.html":{},"overview.html":{}}}],["cluster_errorsmodule_imports",{"_index":1540,"title":{},"body":{"modules/ErrorsModule.html":{}}}],["cluster_organizationmembermodule",{"_index":2155,"title":{},"body":{"modules/OrganizationMemberModule.html":{}}}],["cluster_organizationmembermodule_imports",{"_index":2156,"title":{},"body":{"modules/OrganizationMemberModule.html":{}}}],["cmw",{"_index":855,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"classes/StaffRoutingModule.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{}}}],["cmwculturenumber",{"_index":1044,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["cmwdeposit",{"_index":1039,"title":{"interfaces/CMWDeposit.html":{}},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{}}}],["cmwmenucomponent",{"_index":835,"title":{"classes/CmwMenuComponent.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CmwMenuComponent.html":{},"classes/StaffRoutingModule.html":{},"coverage.html":{}}}],["cmwrequest",{"_index":1103,"title":{"interfaces/CMWRequest.html":{}},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"classes/StaffDashboardComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{}}}],["cmwrequestform",{"_index":2519,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["cmwrevitalization",{"_index":1113,"title":{"interfaces/CMWRevitalization.html":{}},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{}}}],["cmwrevitalizationform",{"_index":2584,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["code",{"_index":75,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember-2.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"index.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["codelyzer",{"_index":2817,"title":{},"body":{"dependencies.html":{}}}],["collar",{"_index":1463,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["collected",{"_index":231,"title":{},"body":{"interfaces/Address.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["collectedby",{"_index":1045,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/StaffMember-2.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["collection",{"_index":1041,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["collections",{"_index":1095,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["column",{"_index":1237,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["commonmodule",{"_index":614,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"modules/StaffModule.html":{}}}],["complete",{"_index":1185,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["completed",{"_index":450,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/MemberDashboardComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["completedsamples",{"_index":451,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/MemberDashboardComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["compliment",{"_index":389,"title":{},"body":{"components/AdminHelpComponent.html":{}}}],["component",{"_index":296,"title":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"components/ErrorComponent.html":{},"modules/ErrorsRoutingModule.html":{},"injectables/FilterPipe.html":{},"classes/MapsWindowComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"index.html":{}}}],["component.long_name",{"_index":1876,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["component.types[0",{"_index":1874,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["component.types[1",{"_index":1880,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["component/error.component",{"_index":865,"title":{},"body":{"modules/AppModule.html":{},"modules/ErrorsModule.html":{},"injectables/NotificationService.html":{}}}],["component/error.component.ts",{"_index":1481,"title":{},"body":{"components/ErrorComponent.html":{},"coverage.html":{}}}],["component/error.component.ts:26",{"_index":1485,"title":{},"body":{"components/ErrorComponent.html":{}}}],["component/error.component.ts:28",{"_index":1489,"title":{},"body":{"components/ErrorComponent.html":{}}}],["component/error.component.ts:30",{"_index":1486,"title":{},"body":{"components/ErrorComponent.html":{}}}],["component_template",{"_index":346,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["components",{"_index":298,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"guards/AuthenticationGuard.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"components/ErrorComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"modules/MaterialModule.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"overview.html":{}}}],["components/admin",{"_index":304,"title":{},"body":{"components/AdminDivComponent.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["components/notification",{"_index":785,"title":{},"body":{"modules/AppModule.html":{},"components/NotificationDivComponent.html":{},"coverage.html":{}}}],["components/sample",{"_index":787,"title":{},"body":{"modules/AppModule.html":{},"components/SampleDivComponent.html":{},"coverage.html":{}}}],["components/staff",{"_index":789,"title":{},"body":{"modules/AppModule.html":{},"components/StaffDivComponent.html":{},"coverage.html":{}}}],["condition",{"_index":1118,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{}}}],["conditions",{"_index":270,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["conditons",{"_index":269,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["config",{"_index":32,"title":{},"body":{"interfaces/AccessLogs.html":{},"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["config.apikey",{"_index":876,"title":{},"body":{"modules/AppModule.html":{}}}],["config.cultureclinicurl}/deletecmwdepositform",{"_index":1083,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"miscellaneous/variables.html":{}}}],["config.cultureclinicurl}/deletecmwprocessingform",{"_index":1089,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"miscellaneous/variables.html":{}}}],["config.cultureclinicurl}/deletecmwrequestform",{"_index":1085,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"miscellaneous/variables.html":{}}}],["config.cultureclinicurl}/deletecmwrevitalizationform",{"_index":1087,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"miscellaneous/variables.html":{}}}],["config.cultureclinicurl}/getalldepositforms",{"_index":1067,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"miscellaneous/variables.html":{}}}],["config.cultureclinicurl}/getallprocessingforms",{"_index":1071,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"miscellaneous/variables.html":{}}}],["config.cultureclinicurl}/getallrequestforms",{"_index":1065,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"miscellaneous/variables.html":{}}}],["config.cultureclinicurl}/getallrevitalizationforms",{"_index":1069,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"miscellaneous/variables.html":{}}}],["config.cultureclinicurl}/submitcmwdepositform",{"_index":1073,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"miscellaneous/variables.html":{}}}],["config.cultureclinicurl}/submitcmwprocessingform",{"_index":1079,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"miscellaneous/variables.html":{}}}],["config.cultureclinicurl}/submitcmwrequestform",{"_index":1075,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"miscellaneous/variables.html":{}}}],["config.cultureclinicurl}/submitcmwrevitalizationform",{"_index":1077,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"miscellaneous/variables.html":{}}}],["config.cultureclinicurl}/updatedepositstatus",{"_index":1081,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"miscellaneous/variables.html":{}}}],["config.databasemanagementurl}/dropdatabase",{"_index":1411,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["config.databasemanagementurl}/getdbnames",{"_index":2020,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["config.databasemanagementurl}/porting",{"_index":1409,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["config.databasemanagementurl}/retrievedatabase",{"_index":1406,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["config.diagnosticclinicurl}/retrieveallorgsamples",{"_index":1448,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["config.diagnosticclinicurl}/retrieveallsamples",{"_index":1446,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["config.diagnosticclinicurl}/retrievesample",{"_index":1475,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["config.diagnosticclinicurl}/retrievesamplesformember",{"_index":1440,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"miscellaneous/variables.html":{}}}],["config.diagnosticclinicurl}/submitsample",{"_index":1473,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["config.diagnosticclinicurl}/updatesamplestatus",{"_index":1478,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["config.loginurl}/login",{"_index":1019,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["config.loginurl}/registerneworganization",{"_index":1980,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["config.logsurl}/deleteuserlogs",{"_index":46,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{},"miscellaneous/variables.html":{}}}],["config.logsurl}/getlogs",{"_index":42,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{},"miscellaneous/variables.html":{}}}],["config.logsurl}/getuserlogs",{"_index":44,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{},"miscellaneous/variables.html":{}}}],["config.usermanagementurl}/addfabiadmin",{"_index":2004,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["config.usermanagementurl}/addmembertoorg",{"_index":2009,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["config.usermanagementurl}/addstaff",{"_index":1995,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["config.usermanagementurl}/createorganization",{"_index":1977,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["config.usermanagementurl}/getadmintypes",{"_index":2017,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["config.usermanagementurl}/getallfabimembers",{"_index":2034,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["config.usermanagementurl}/getallorganizations",{"_index":1970,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["config.usermanagementurl}/getallorgmembers",{"_index":1936,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"miscellaneous/variables.html":{}}}],["config.usermanagementurl}/getallpendingorganizations",{"_index":1983,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["config.usermanagementurl}/getallstaff",{"_index":1934,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"miscellaneous/variables.html":{}}}],["config.usermanagementurl}/getorgdetails",{"_index":1963,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["config.usermanagementurl}/getorgmember",{"_index":1966,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["config.usermanagementurl}/getuserdetails",{"_index":1031,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"miscellaneous/variables.html":{}}}],["config.usermanagementurl}/removemember",{"_index":2013,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["config.usermanagementurl}/removeorg",{"_index":1987,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["config.usermanagementurl}/removestaff",{"_index":1999,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["config.usermanagementurl}/updateorgmember",{"_index":1940,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"miscellaneous/variables.html":{}}}],["config.usermanagementurl}/updateorgmemberpassword",{"_index":2031,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["config.usermanagementurl}/updatestaffmember",{"_index":1938,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"miscellaneous/variables.html":{}}}],["config.usermanagementurl}/updatestaffpassword",{"_index":2026,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["confirm",{"_index":212,"title":{"interfaces/Confirm.html":{}},"body":{"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["confirm_password",{"_index":2899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["confirmed",{"_index":219,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["confirminput",{"_index":478,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["confirmpasswordinput",{"_index":463,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["connection",{"_index":1525,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["console.error(error",{"_index":1537,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["console.log(error",{"_index":1861,"title":{},"body":{"classes/MapsWindowComponent.html":{},"classes/ServerErrorInterceptor.html":{}}}],["const",{"_index":40,"title":{},"body":{"interfaces/AccessLogs.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicHandlerComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsRoutingModule.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["constructor",{"_index":105,"title":{},"body":{"interfaces/AccessLogs.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["constructor(@core.inject(mat_dialog_data",{"_index":1696,"title":{},"body":{"classes/LoadingComponent.html":{}}}],["constructor(@inject(mat_dialog_data",{"_index":1492,"title":{},"body":{"components/ErrorComponent.html":{}}}],["constructor(authservice",{"_index":577,"title":{},"body":{"classes/AdminMenuComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/PreDiagnosisComponent.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["constructor(cookieservice",{"_index":724,"title":{},"body":{"components/AppComponent.html":{}}}],["constructor(data",{"_index":1484,"title":{},"body":{"components/ErrorComponent.html":{},"classes/LoadingComponent.html":{}}}],["constructor(dialogref",{"_index":1791,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["constructor(formbuilder",{"_index":2520,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["constructor(http",{"_index":956,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"injectables/NotificationLoggingService.html":{}}}],["constructor(injector",{"_index":1507,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["constructor(notificationloggingservice",{"_index":2075,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["constructor(private",{"_index":113,"title":{},"body":{"interfaces/AccessLogs.html":{},"components/AppComponent.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["constructor(router",{"_index":898,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(sanitizer",{"_index":637,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{}}}],["constructor(snackbar",{"_index":2129,"title":{},"body":{"injectables/NotificationService.html":{}}}],["constructor(usermanagementservice",{"_index":1612,"title":{},"body":{"classes/HomeComponent.html":{}}}],["contact",{"_index":1610,"title":{},"body":{"classes/HomeComponent.html":{}}}],["contact_form",{"_index":1607,"title":{},"body":{"classes/HomeComponent.html":{}}}],["contain",{"_index":1718,"title":{},"body":{"classes/LoginComponent.html":{},"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"miscellaneous/variables.html":{}}}],["contained",{"_index":400,"title":{},"body":{"components/AdminHelpComponent.html":{}}}],["containing",{"_index":12,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["contains",{"_index":443,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["content",{"_index":133,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["contentdataurl",{"_index":2413,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["continent",{"_index":1046,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["control",{"_index":132,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicHandlerComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["controlling",{"_index":940,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["convert",{"_index":2244,"title":{},"body":{"injectables/Porting.html":{}}}],["converted",{"_index":2246,"title":{},"body":{"injectables/Porting.html":{}}}],["converttojson",{"_index":2239,"title":{},"body":{"injectables/Porting.html":{}}}],["converttojson(text",{"_index":2242,"title":{},"body":{"injectables/Porting.html":{}}}],["cookie",{"_index":729,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/HomeComponent.html":{},"dependencies.html":{}}}],["cookieservice",{"_index":725,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/HomeComponent.html":{}}}],["coordinates",{"_index":237,"title":{},"body":{"interfaces/Address.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["copyright",{"_index":609,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"interfaces/Organisation.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"miscellaneous/enumerations.html":{}}}],["core",{"_index":410,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/ErrorsHandler.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"classes/PreDiagnosisComponent.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"dependencies.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"overview.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["core.agmcoremodule.forroot",{"_index":874,"title":{},"body":{"modules/AppModule.html":{}}}],["core.component",{"_index":430,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/PreDiagnosisComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["core.componentfactoryresolver",{"_index":492,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffNotificationComponent.html":{}}}],["core.elementref",{"_index":477,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/MapsWindowComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["core.errorhandler",{"_index":1515,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["core.injectable",{"_index":926,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/ErrorsHandler.html":{},"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["core.injector",{"_index":1508,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["core.ngmodule",{"_index":718,"title":{},"body":{"classes/AdminRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["core.ngzone",{"_index":1796,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["core.oninit",{"_index":435,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/PreDiagnosisComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["core.renderer2",{"_index":2394,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["core.viewchild(\"confirminput",{"_index":479,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["core.viewchild(\"depositreportpdf",{"_index":2385,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["core.viewchild(\"errorreportpdf",{"_index":2381,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["core.viewchild(\"passwordinput",{"_index":476,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["core.viewchild(\"requestreportpdf",{"_index":2383,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["core.viewchild(\"revitalizationreportpdf",{"_index":2387,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["core.viewchild('admincontainer",{"_index":437,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["core.viewchild('notificationcontainer",{"_index":2066,"title":{},"body":{"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{}}}],["core.viewchild('samplecontainer",{"_index":2065,"title":{},"body":{"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{}}}],["core.viewchild('search",{"_index":1834,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["core.viewchild('staffcontainer",{"_index":441,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["core.viewcontainerref",{"_index":439,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["core.viewencapsulation.none",{"_index":1643,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{}}}],["correctly",{"_index":1282,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"classes/LoginComponent.html":{}}}],["corresponding",{"_index":1424,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["country",{"_index":168,"title":{},"body":{"interfaces/Address.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["coverage",{"_index":2628,"title":{"coverage.html":{}},"body":{"coverage.html":{},"dependencies.html":{}}}],["create",{"_index":207,"title":{},"body":{"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Member.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember-1.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["created",{"_index":332,"title":{},"body":{"components/AdminDivComponent.html":{},"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"interfaces/Organisation.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"components/StaffDivComponent.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"miscellaneous/enumerations.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["createorganization(orginfo",{"_index":1975,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["createorganizationurl",{"_index":1976,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["creates",{"_index":106,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["creating",{"_index":1357,"title":{},"body":{"classes/CmwMenuComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["crud",{"_index":52,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["csv",{"_index":1395,"title":{},"body":{"injectables/DatabaseManagementService.html":{},"injectables/Porting.html":{}}}],["culture",{"_index":1091,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["culture_condition",{"_index":2610,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["culture_number",{"_index":2544,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["cultureclinicurl",{"_index":2911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["culturecollectionapiservice",{"_index":1145,"title":{"injectables/CultureCollectionAPIService.html":{}},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["culturecollectionnumber",{"_index":1143,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["culturecollectionservice",{"_index":2316,"title":{},"body":{"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["culturecondition",{"_index":1117,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{}}}],["culturename",{"_index":2362,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["culturenumber",{"_index":1107,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/StaffMember-2.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["current",{"_index":509,"title":{},"body":{"interfaces/AdminMember.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"interfaces/ProcessedForm.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["current_name",{"_index":2608,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["current_password",{"_index":2896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currentdate",{"_index":2395,"title":{},"body":{"interfaces/StaffMember-2.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["currentdate.getdate()).slice",{"_index":2397,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["currentdate.getfullyear",{"_index":2399,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["currentdate.getmonth",{"_index":2398,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["currently",{"_index":194,"title":{},"body":{"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["currentname",{"_index":1114,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{}}}],["currentsession",{"_index":945,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["currentsessionsubject",{"_index":946,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["currentuser",{"_index":465,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["currentuserprivileges",{"_index":487,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["custom",{"_index":1658,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["d",{"_index":1459,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["d9ddd8",{"_index":2186,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["dashboard",{"_index":431,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"injectables/FilterPipe.html":{},"classes/LoginComponent.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"components/OrganizationHelpComponent.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffRoutingModule.html":{}}}],["dashboard.component",{"_index":696,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["dashboard.component.html",{"_index":432,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["dashboard.component.scss",{"_index":433,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["dashboard.component.ts",{"_index":409,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"coverage.html":{}}}],["dashboard.component.ts:101",{"_index":2060,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:109",{"_index":2336,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:117",{"_index":2058,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:127",{"_index":2335,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:130",{"_index":2059,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:142",{"_index":2063,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:143",{"_index":2338,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:154",{"_index":2064,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:156",{"_index":2333,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:166",{"_index":2057,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:178",{"_index":2056,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:190",{"_index":2062,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:192",{"_index":2334,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:224",{"_index":2339,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:236",{"_index":2340,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:249",{"_index":2332,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:261",{"_index":2331,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:273",{"_index":2337,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:36",{"_index":2054,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:38",{"_index":2049,"title":{},"body":{"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:40",{"_index":2330,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:41",{"_index":2047,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:42",{"_index":2329,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:43",{"_index":2052,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:44",{"_index":2319,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:45",{"_index":2050,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:46",{"_index":2324,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:47",{"_index":2048,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:48",{"_index":2320,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:49",{"_index":2051,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:50",{"_index":2325,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:51",{"_index":2053,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:52",{"_index":2326,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:53",{"_index":2055,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:54",{"_index":2322,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:55",{"_index":2043,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:56",{"_index":2323,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:57",{"_index":2045,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard.component.ts:58",{"_index":2044,"title":{},"body":{"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:60",{"_index":2042,"title":{},"body":{"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:62",{"_index":2321,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:64",{"_index":2318,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:66",{"_index":2327,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:68",{"_index":2328,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:70",{"_index":2317,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["dashboard.component.ts:92",{"_index":2061,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["dashboard/admin",{"_index":408,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/StaffMember-1.html":{},"coverage.html":{}}}],["dashboard/member",{"_index":799,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/MemberDashboardComponent.html":{},"classes/OrganizationMemberRoutingModule.html":{},"coverage.html":{}}}],["dashboard/organization",{"_index":818,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"coverage.html":{}}}],["dashboard/staff",{"_index":840,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffDashboardComponent.html":{},"classes/StaffRoutingModule.html":{},"coverage.html":{}}}],["data",{"_index":126,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"dependencies.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["data.error",{"_index":1497,"title":{},"body":{"components/ErrorComponent.html":{}}}],["data.error_title",{"_index":1493,"title":{},"body":{"components/ErrorComponent.html":{}}}],["data.error_title}}{{data.message",{"_index":1499,"title":{},"body":{"components/ErrorComponent.html":{}}}],["data.message",{"_index":1494,"title":{},"body":{"components/ErrorComponent.html":{}}}],["data.status",{"_index":1495,"title":{},"body":{"components/ErrorComponent.html":{}}}],["data.type",{"_index":1496,"title":{},"body":{"components/ErrorComponent.html":{}}}],["database",{"_index":64,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"injectables/FilterPipe.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["database's",{"_index":203,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["database_privileges",{"_index":1300,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["databasehandlercomponent",{"_index":352,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["databaseloginterface",{"_index":2356,"title":{"interfaces/databaseLogInterface.html":{}},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["databaselogs",{"_index":2365,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["databaselogsarray",{"_index":2374,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["databasemanagementlogs",{"_index":65,"title":{"interfaces/DatabaseManagementLogs.html":{}},"body":{"interfaces/AccessLogs.html":{},"classes/AdminNotificationComponent.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{},"coverage.html":{}}}],["databasemanagementservice",{"_index":1383,"title":{"injectables/DatabaseManagementService.html":{}},"body":{"injectables/DatabaseManagementService.html":{},"coverage.html":{}}}],["databasemanagementurl",{"_index":1404,"title":{},"body":{"injectables/DatabaseManagementService.html":{},"miscellaneous/variables.html":{}}}],["databasename",{"_index":1407,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["databaseprivilege",{"_index":202,"title":{"interfaces/DatabasePrivilege.html":{}},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"coverage.html":{}}}],["databaseprivileges",{"_index":1328,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["databaseprivileges).subscribe((response",{"_index":1335,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["databaseprivileges.push(dbprivilege",{"_index":1333,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["databases",{"_index":211,"title":{},"body":{"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"components/ErrorComponent.html":{},"injectables/FilterPipe.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Member.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"components/PageNotFoundComponent.html":{},"interfaces/PrivilegeTypes.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"components/StaffMenuComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["databases.component",{"_index":849,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["databases.component.ts",{"_index":2686,"title":{},"body":{"coverage.html":{}}}],["databases/staff",{"_index":848,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"coverage.html":{}}}],["databse",{"_index":62,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["datatables",{"_index":872,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["datatables.net",{"_index":2773,"title":{},"body":{"dependencies.html":{}}}],["datatablesmodule",{"_index":870,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":18,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"modules/AdminModule.html":{},"classes/AdminNotificationComponent.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"miscellaneous/enumerations.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["date).split",{"_index":2436,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["date.getdate()).slice",{"_index":2571,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["date.getfullyear",{"_index":2573,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["date.getmonth",{"_index":2572,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["date_collected",{"_index":230,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["date_planted",{"_index":274,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["date_problem_noticed",{"_index":271,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["date_requested",{"_index":2545,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["date_returned",{"_index":2612,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["date_sent",{"_index":232,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["datecollected",{"_index":1047,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/StaffMember-2.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["dateofcollectionvalidation",{"_index":1137,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["daterequested",{"_index":1108,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/StaffMember-2.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["datereturned",{"_index":1121,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/StaffMember-2.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["datesubmitted",{"_index":1048,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/StaffMember-2.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["datesubmittedprocessedform",{"_index":1142,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["day",{"_index":2563,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["db",{"_index":1942,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["dbjson",{"_index":2251,"title":{},"body":{"injectables/Porting.html":{}}}],["dbml",{"_index":66,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/StaffMember-2.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["dbname",{"_index":1396,"title":{},"body":{"injectables/DatabaseManagementService.html":{},"injectables/Porting.html":{}}}],["dbprivilege",{"_index":1331,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["deactivate",{"_index":1228,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["death",{"_index":256,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["dec",{"_index":2470,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["december",{"_index":2471,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["declaration",{"_index":1827,"title":{},"body":{"classes/MapsWindowComponent.html":{},"miscellaneous/variables.html":{}}}],["declarations",{"_index":618,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ErrorsModule.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"modules/StaffModule.html":{},"overview.html":{}}}],["declare",{"_index":1830,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["decorators",{"_index":1487,"title":{},"body":{"components/ErrorComponent.html":{},"classes/LoadingComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{}}}],["def1f5",{"_index":2184,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["default",{"_index":639,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"injectables/Porting.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":320,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"components/ErrorComponent.html":{},"classes/ErrorsHandler.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"components/SampleDivComponent.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["defines",{"_index":164,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["defining",{"_index":10,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicHandlerComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["defning",{"_index":1946,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["delete",{"_index":209,"title":{},"body":{"interfaces/Address.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["deletedepositform",{"_index":1360,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["deletedepositform(id",{"_index":1156,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["deletedepositformurl",{"_index":1082,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["deleteprocessedform",{"_index":1361,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["deleteprocessedform(id",{"_index":1159,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["deleteprocessedformurl",{"_index":1088,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["deleterequestform",{"_index":1362,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["deleterequestform(id",{"_index":1157,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["deleterequestformurl",{"_index":1084,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["deleterevitalizationform",{"_index":1363,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["deleterevitalizationform(id",{"_index":1158,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["deleterevitalizationformurl",{"_index":1086,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":733,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ErrorsModule.html":{},"modules/OrganizationMemberModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deposit",{"_index":886,"title":{},"body":{"modules/AppRoutingModule.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/FilterPipe.html":{},"interfaces/ProcessedForm.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffRoutingModule.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["deposit.component",{"_index":857,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["deposit.component.ts",{"_index":2689,"title":{},"body":{"coverage.html":{}}}],["deposit/submit",{"_index":856,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"coverage.html":{}}}],["depositforms",{"_index":2310,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["depositlogs",{"_index":2367,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["depositlogsarray",{"_index":2378,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["depositreport",{"_index":2371,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["depositreportinterface",{"_index":2360,"title":{"interfaces/depositReportInterface.html":{}},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["depositreportpdf",{"_index":2384,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["deposits",{"_index":1605,"title":{},"body":{"injectables/FilterPipe.html":{},"classes/StaffDashboardComponent.html":{}}}],["deregister",{"_index":1984,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/SampleFormData.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffInfo.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["details",{"_index":19,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["details.orgname",{"_index":1027,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["dev",{"_index":2855,"title":{},"body":{"index.html":{}}}],["dev.appspot.com",{"_index":2907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["development",{"_index":2852,"title":{},"body":{"index.html":{}}}],["devkit/build",{"_index":2797,"title":{},"body":{"dependencies.html":{}}}],["dgcl",{"_index":80,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["diagnosing",{"_index":1186,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["diagnosis",{"_index":885,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"classes/PreDiagnosisComponent.html":{}}}],["diagnosis.component",{"_index":832,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["diagnosis.component.html",{"_index":2261,"title":{},"body":{"classes/PreDiagnosisComponent.html":{}}}],["diagnosis.component.scss",{"_index":2262,"title":{},"body":{"classes/PreDiagnosisComponent.html":{}}}],["diagnosis.component.ts",{"_index":2258,"title":{},"body":{"classes/PreDiagnosisComponent.html":{},"coverage.html":{}}}],["diagnosis.component.ts:30",{"_index":2259,"title":{},"body":{"classes/PreDiagnosisComponent.html":{}}}],["diagnosis.component.ts:56",{"_index":2260,"title":{},"body":{"classes/PreDiagnosisComponent.html":{}}}],["diagnosis/pre",{"_index":831,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/PreDiagnosisComponent.html":{},"coverage.html":{}}}],["diagnostic",{"_index":77,"title":{},"body":{"interfaces/AccessLogs.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"components/OrganizationHelpComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"interfaces/UserLogs.html":{}}}],["diagnosticclinicapiservice",{"_index":422,"title":{"injectables/DiagnosticClinicAPIService.html":{}},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"injectables/DiagnosticClinicAPIService.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"coverage.html":{}}}],["diagnosticcliniclogs",{"_index":79,"title":{"interfaces/DiagnosticClinicLogs.html":{}},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{},"coverage.html":{}}}],["diagnosticclinicservice",{"_index":490,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["diagnosticclinicurl",{"_index":2915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dialog",{"_index":500,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["dialogref",{"_index":1798,"title":{},"body":{"classes/MapsWindowComponent.html":{},"injectables/NotificationService.html":{}}}],["dialogref.afterclosed().subscribe((result",{"_index":2147,"title":{},"body":{"injectables/NotificationService.html":{}}}],["dialogs",{"_index":1178,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["dieback",{"_index":254,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["directed",{"_index":1735,"title":{},"body":{"classes/LoginComponent.html":{}}}],["direction",{"_index":2762,"title":{},"body":{"dependencies.html":{}}}],["directive",{"_index":345,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["directives",{"_index":376,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":2861,"title":{},"body":{"index.html":{}}}],["directory",{"_index":2864,"title":{},"body":{"index.html":{}}}],["disable",{"_index":468,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["dismiss",{"_index":1338,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"components/ErrorComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["display",{"_index":560,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/LoadingComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["displayconfirmpasswordinput",{"_index":570,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["displayed",{"_index":1205,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["displayes",{"_index":1604,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["displayprofilesavebtn",{"_index":567,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["dist",{"_index":2863,"title":{},"body":{"index.html":{}}}],["distribution",{"_index":258,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["distributions",{"_index":264,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["disturbances",{"_index":278,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["div",{"_index":312,"title":{},"body":{"components/AdminDivComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/NotificationDivComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{}}}],["div'},{'name",{"_index":347,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["div.component",{"_index":784,"title":{},"body":{"modules/AppModule.html":{}}}],["div.component.html",{"_index":316,"title":{},"body":{"components/AdminDivComponent.html":{},"components/NotificationDivComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{}}}],["div.component.scss",{"_index":314,"title":{},"body":{"components/AdminDivComponent.html":{},"components/NotificationDivComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{}}}],["div.component.ts",{"_index":306,"title":{},"body":{"components/AdminDivComponent.html":{},"components/NotificationDivComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"coverage.html":{}}}],["div.component.ts:10",{"_index":2112,"title":{},"body":{"components/NotificationDivComponent.html":{},"components/SampleDivComponent.html":{}}}],["div.component.ts:11",{"_index":2113,"title":{},"body":{"components/NotificationDivComponent.html":{},"components/SampleDivComponent.html":{}}}],["div.component.ts:12",{"_index":2110,"title":{},"body":{"components/NotificationDivComponent.html":{},"components/SampleDivComponent.html":{}}}],["div.component.ts:13",{"_index":2111,"title":{},"body":{"components/NotificationDivComponent.html":{}}}],["div.component.ts:14",{"_index":2109,"title":{},"body":{"components/NotificationDivComponent.html":{}}}],["div.component.ts:15",{"_index":322,"title":{},"body":{"components/AdminDivComponent.html":{},"components/StaffDivComponent.html":{}}}],["div.component.ts:16",{"_index":323,"title":{},"body":{"components/AdminDivComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{}}}],["div.component.ts:17",{"_index":321,"title":{},"body":{"components/AdminDivComponent.html":{},"components/StaffDivComponent.html":{}}}],["div.component.ts:18",{"_index":2114,"title":{},"body":{"components/NotificationDivComponent.html":{}}}],["div.component.ts:21",{"_index":324,"title":{},"body":{"components/AdminDivComponent.html":{},"components/StaffDivComponent.html":{}}}],["div/admin",{"_index":305,"title":{},"body":{"components/AdminDivComponent.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["div/notification",{"_index":786,"title":{},"body":{"modules/AppModule.html":{},"components/NotificationDivComponent.html":{},"coverage.html":{}}}],["div/sample",{"_index":788,"title":{},"body":{"modules/AppModule.html":{},"components/SampleDivComponent.html":{},"coverage.html":{}}}],["div/staff",{"_index":790,"title":{},"body":{"modules/AppModule.html":{},"components/StaffDivComponent.html":{},"coverage.html":{}}}],["document.getelementsbyclassname(\"needs",{"_index":1660,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["documentation",{"_index":2629,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":1359,"title":{},"body":{"classes/CmwMenuComponent.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["dom",{"_index":301,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["domsanitizer",{"_index":416,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["donated",{"_index":1099,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["donatedby",{"_index":1049,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["dot",{"_index":2906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["down",{"_index":1755,"title":{},"body":{"classes/LoginComponent.html":{}}}],["download",{"_index":403,"title":{},"body":{"components/AdminHelpComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["downloadable",{"_index":2350,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["downloaded",{"_index":2252,"title":{},"body":{"injectables/Porting.html":{}}}],["downs",{"_index":1753,"title":{},"body":{"classes/LoginComponent.html":{}}}],["dried",{"_index":1135,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["drop",{"_index":1400,"title":{},"body":{"injectables/DatabaseManagementService.html":{},"classes/LoginComponent.html":{}}}],["dropdburl",{"_index":1410,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["dropdown",{"_index":1276,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"classes/LoginComponent.html":{}}}],["dry",{"_index":1462,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["dt",{"_index":2776,"title":{},"body":{"dependencies.html":{}}}],["due",{"_index":1891,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["duration",{"_index":1339,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["dynamic",{"_index":328,"title":{},"body":{"components/AdminDivComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"modules/AppModule.html":{},"classes/ClinicHandlerComponent.html":{},"components/StaffDivComponent.html":{},"interfaces/StaffMember-1.html":{},"dependencies.html":{}}}],["dynamically",{"_index":339,"title":{},"body":{"components/AdminDivComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"injectables/FilterPipe.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["dynmically",{"_index":333,"title":{},"body":{"components/AdminDivComponent.html":{},"components/StaffDivComponent.html":{}}}],["e2e",{"_index":2874,"title":{},"body":{"index.html":{}}}],["e5f1d9",{"_index":2219,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["editingsample",{"_index":1162,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["eg",{"_index":1739,"title":{},"body":{"classes/LoginComponent.html":{}}}],["element",{"_index":344,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["elementref",{"_index":475,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["elements",{"_index":329,"title":{},"body":{"components/AdminDivComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["elss",{"_index":1038,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["email",{"_index":182,"title":{},"body":{"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"interfaces/AdminMember.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"classes/HomeComponent.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Member.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"components/StaffDivComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["enabled",{"_index":889,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["encapsulation",{"_index":1642,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{}}}],["end",{"_index":2873,"title":{},"body":{"index.html":{}}}],["ensures",{"_index":1204,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["enter",{"_index":1629,"title":{},"body":{"classes/HomeComponent.html":{},"miscellaneous/variables.html":{}}}],["entrycomponents",{"_index":752,"title":{},"body":{"modules/AppModule.html":{},"modules/ErrorsModule.html":{}}}],["enumerations",{"_index":2841,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":2744,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["environments/environment.prod",{"_index":33,"title":{},"body":{"interfaces/AccessLogs.html":{},"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["epitheton",{"_index":1050,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["errl",{"_index":72,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/StaffMember-2.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["error",{"_index":70,"title":{},"body":{"interfaces/AccessLogs.html":{},"classes/AdminNotificationComponent.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"injectables/FilterPipe.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberNotificationComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["error'},{'name",{"_index":355,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["error.component.html",{"_index":1483,"title":{},"body":{"components/ErrorComponent.html":{}}}],["error.component.scss",{"_index":1482,"title":{},"body":{"components/ErrorComponent.html":{}}}],["error.error.message",{"_index":1532,"title":{},"body":{"classes/ErrorsHandler.html":{},"classes/ServerErrorInterceptor.html":{}}}],["error.error.title",{"_index":1531,"title":{},"body":{"classes/ErrorsHandler.html":{},"injectables/NotificationService.html":{}}}],["error.message",{"_index":1533,"title":{},"body":{"classes/ErrorsHandler.html":{},"injectables/NotificationService.html":{}}}],["error.name",{"_index":2146,"title":{},"body":{"injectables/NotificationService.html":{}}}],["error.status",{"_index":2145,"title":{},"body":{"injectables/NotificationService.html":{},"classes/ServerErrorInterceptor.html":{}}}],["error_title",{"_index":2144,"title":{},"body":{"injectables/NotificationService.html":{}}}],["errorcomponent",{"_index":354,"title":{"components/ErrorComponent.html":{}},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ErrorComponent.html":{},"modules/ErrorsModule.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationService.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["errorhandler",{"_index":1548,"title":{},"body":{"modules/ErrorsModule.html":{}}}],["errorloginterface",{"_index":2358,"title":{"interfaces/errorLogInterface.html":{}},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["errorlogs",{"_index":71,"title":{"interfaces/ErrorLogs.html":{}},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/StaffMember-2.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["errorlogsarray",{"_index":2376,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["errorreport",{"_index":2369,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["errorreportpdf",{"_index":2380,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["errorroutingmodule",{"_index":1553,"title":{},"body":{"modules/ErrorsModule.html":{}}}],["errors",{"_index":1505,"title":{},"body":{"classes/ErrorsHandler.html":{},"modules/ErrorsRoutingModule.html":{}}}],["errors.module.ts",{"_index":1542,"title":{},"body":{"modules/ErrorsModule.html":{}}}],["errorshandler",{"_index":1500,"title":{"classes/ErrorsHandler.html":{}},"body":{"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"coverage.html":{}}}],["errorsmodule",{"_index":743,"title":{"modules/ErrorsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ErrorsModule.html":{},"modules.html":{},"overview.html":{}}}],["errorsroutingmodule",{"_index":1558,"title":{"modules/ErrorsRoutingModule.html":{}},"body":{"modules/ErrorsRoutingModule.html":{},"modules.html":{}}}],["estate",{"_index":169,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["etc",{"_index":1741,"title":{},"body":{"classes/LoginComponent.html":{}}}],["eucalyptus",{"_index":1455,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["event",{"_index":521,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["event.coords.lat",{"_index":1863,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["event.coords.lng",{"_index":1864,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["event.preventdefault",{"_index":1668,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["event.stoppropagation",{"_index":1669,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["example",{"_index":897,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"classes/ErrorsHandler.html":{},"classes/LoadingComponent.html":{}}}],["execute",{"_index":2871,"title":{},"body":{"index.html":{}}}],["exists",{"_index":928,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["export",{"_index":47,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"modules/AdminModule.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"interfaces/Location.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"modules/MaterialModule.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"modules/StaffModule.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["exports",{"_index":720,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"modules/MaterialModule.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"overview.html":{}}}],["extractdatabase",{"_index":2240,"title":{},"body":{"injectables/Porting.html":{}}}],["extractdatabase(dbjson",{"_index":2247,"title":{},"body":{"injectables/Porting.html":{}}}],["f",{"_index":1461,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["fabi",{"_index":152,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"modules/AdminModule.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"injectables/AuthenticationService.html":{},"interfaces/Confirm.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"miscellaneous/enumerations.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["fabi's",{"_index":388,"title":{},"body":{"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["fabi/organisation",{"_index":2346,"title":{},"body":{"components/StaffDivComponent.html":{}}}],["fabi\\'s",{"_index":406,"title":{},"body":{"components/AdminHelpComponent.html":{}}}],["fabiweb",{"_index":2849,"title":{},"body":{"index.html":{}}}],["failed",{"_index":1890,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["false",{"_index":458,"title":{},"body":{"interfaces/AdminMember.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["family",{"_index":2192,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["farm",{"_index":235,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["feb",{"_index":2455,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["february",{"_index":2456,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["fetch",{"_index":1430,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["fetched",{"_index":668,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/Member.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["feteched",{"_index":149,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["field",{"_index":569,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["fields",{"_index":1195,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Member.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"classes/StaffViewSamplesComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"modules/AdminModule.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"interfaces/Location.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"modules/MaterialModule.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"modules/StaffModule.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"miscellaneous/enumerations.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["files",{"_index":2859,"title":{},"body":{"index.html":{}}}],["fill",{"_index":2183,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["filled",{"_index":1740,"title":{},"body":{"classes/LoginComponent.html":{}}}],["filling",{"_index":2534,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["filter",{"_index":1571,"title":{},"body":{"injectables/FilterPipe.html":{},"dependencies.html":{}}}],["filterpipe",{"_index":741,"title":{"injectables/FilterPipe.html":{}},"body":{"modules/AppModule.html":{},"injectables/FilterPipe.html":{},"coverage.html":{},"overview.html":{}}}],["find",{"_index":2236,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["first",{"_index":180,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"classes/HomeComponent.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember-2.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["flag",{"_index":2866,"title":{},"body":{"index.html":{}}}],["flase",{"_index":1206,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["fname",{"_index":179,"title":{},"body":{"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"classes/HomeComponent.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Member.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["fo",{"_index":192,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["font",{"_index":2191,"title":{},"body":{"components/PageNotFoundComponent.html":{},"dependencies.html":{}}}],["form",{"_index":221,"title":{},"body":{"interfaces/Address.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"interfaces/StaffInfo.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["form'},{'name",{"_index":369,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["form.addeventlistener",{"_index":1666,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["form.checkvalidity",{"_index":1667,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["form.classlist.add(\"was",{"_index":1670,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["form.component",{"_index":834,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{}}}],["form.component.ts",{"_index":2741,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["form/sample",{"_index":833,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["formarray",{"_index":1295,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["formarray).push(control",{"_index":1313,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["format",{"_index":661,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["formatted",{"_index":295,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["formatted_address",{"_index":170,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["formbuilder",{"_index":411,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["formcontrol",{"_index":1296,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["formcontrol(false",{"_index":1311,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["formdetails",{"_index":1436,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["formgroup",{"_index":1189,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["formid",{"_index":1051,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["forms",{"_index":717,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["forms.component",{"_index":712,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["forms.component.ts",{"_index":2662,"title":{},"body":{"coverage.html":{}}}],["forms/view",{"_index":711,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"coverage.html":{}}}],["formsmodule",{"_index":759,"title":{},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"modules/OrganizationMemberModule.html":{}}}],["found",{"_index":1888,"title":{},"body":{"classes/MapsWindowComponent.html":{},"components/PageNotFoundComponent.html":{}}}],["found'},{'name",{"_index":366,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["found.component",{"_index":691,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["found.component.html",{"_index":2179,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["found.component.scss",{"_index":2178,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["found.component.ts",{"_index":2177,"title":{},"body":{"components/PageNotFoundComponent.html":{},"coverage.html":{}}}],["found.component.ts:12",{"_index":2181,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["found.component.ts:8",{"_index":2180,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["found/page",{"_index":690,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"components/PageNotFoundComponent.html":{},"classes/StaffRoutingModule.html":{},"coverage.html":{}}}],["freeze",{"_index":1136,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["freezed",{"_index":1134,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["freezedried",{"_index":1133,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["fri",{"_index":2448,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["friday",{"_index":597,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["full",{"_index":883,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["function",{"_index":116,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["functions",{"_index":513,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTMember.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["further",{"_index":2875,"title":{},"body":{"index.html":{}}}],["gatherer",{"_index":2489,"title":{},"body":{"components/StaffMenuComponent.html":{}}}],["gauteng",{"_index":1454,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["general",{"_index":261,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["generate",{"_index":2401,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"index.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["generated",{"_index":1444,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"index.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["generatedepositreport",{"_index":2429,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["generaterequestreport",{"_index":2422,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["generaterevitalizationreport",{"_index":2431,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["genus",{"_index":227,"title":{},"body":{"interfaces/Address.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["geocoder",{"_index":1699,"title":{},"body":{"injectables/LocationService.html":{},"classes/MapsWindowComponent.html":{}}}],["getaddress",{"_index":1788,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["getaddress(latitude",{"_index":1816,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["getadmintypesurl",{"_index":2016,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getallaccesslogs",{"_index":144,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["getalldatabasemanagementlogs",{"_index":143,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["getalldepositlogs",{"_index":1147,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["getallerrorlogs",{"_index":145,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["getallfabistaff",{"_index":1951,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getallfabistaffurl",{"_index":1933,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getalllogsurl",{"_index":41,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getallorganizationmembers",{"_index":1935,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getallorganizations",{"_index":1968,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getallorganizationsmembersurl",{"_index":1967,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getallorganizationsurl",{"_index":1969,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getallprocessedlogs",{"_index":1149,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["getallrequestlogs",{"_index":1146,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["getallrevitalizationlogs",{"_index":1148,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["getallsamples",{"_index":1412,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["getallsamplesformemberurl",{"_index":1439,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getallsamplesurl",{"_index":1445,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["getallstaff",{"_index":631,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["getallstaffmembers",{"_index":2000,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getalluserlogs",{"_index":123,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["getcurrentsessionvalue",{"_index":953,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcurrentuservalue",{"_index":954,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getdatabasenames",{"_index":2018,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getdate",{"_index":632,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/StaffNotificationComponent.html":{}}}],["getdate(date",{"_index":656,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["getdbnames",{"_index":1257,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["getdbnamesurl",{"_index":2019,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getdepositlogsurl",{"_index":1066,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getfabiadmins",{"_index":2032,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getfabiadmintypes",{"_index":2015,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getfabiadminurl",{"_index":2033,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getfabiuserprivileges",{"_index":947,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getgetcurrentsessionvalue",{"_index":980,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getgetcurrentuservalue",{"_index":982,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getisloggedin",{"_index":984,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getnumberofcompletedmembersamples",{"_index":2041,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["getnumberoffabimembers",{"_index":534,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["getnumberoffabisamples",{"_index":1302,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["getnumberofmembersamples",{"_index":2067,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["getorganizationdetails",{"_index":1962,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getorganizationmemberdetails",{"_index":1965,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getpendingorganizations",{"_index":1981,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getpendingorganizationurl",{"_index":1982,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getprocessedlogsurl",{"_index":1070,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrequestlogsurl",{"_index":1064,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrevitalizationlogsurl",{"_index":1068,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getsamplesforfabistaff",{"_index":1413,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{}}}],["getsamplesforfabistaff(id",{"_index":1422,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["getstaffmembersurl",{"_index":2001,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getting",{"_index":2847,"title":{"index.html":{}},"body":{}}],["getuserdetails(organization",{"_index":1953,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getuserdetailsurl",{"_index":1030,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuserlogs",{"_index":2115,"title":{},"body":{"injectables/NotificationLoggingService.html":{}}}],["getuserlogs(id",{"_index":151,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["getuserlogsurl",{"_index":43,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getusertypes(orgname",{"_index":1971,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["getusertypesurl",{"_index":1972,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["girdled",{"_index":1467,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["global",{"_index":36,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["go",{"_index":2876,"title":{},"body":{"index.html":{}}}],["google",{"_index":1828,"title":{},"body":{"classes/MapsWindowComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["google.maps.geocoder",{"_index":1838,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["google.maps.places.autocomplete(this.searchelementref.nativeelement",{"_index":1840,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["google/maps",{"_index":2755,"title":{},"body":{"dependencies.html":{}}}],["gps",{"_index":236,"title":{},"body":{"interfaces/Address.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["granted",{"_index":289,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["graph",{"_index":2878,"title":{},"body":{"modules.html":{}}}],["growthtip",{"_index":1468,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["guard",{"_index":891,"title":{"guards/AuthenticationGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":892,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["handle",{"_index":936,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/ErrorsHandler.html":{}}}],["handled",{"_index":944,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["handleerror",{"_index":1506,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["handleerror(error",{"_index":1511,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["handler",{"_index":391,"title":{},"body":{"components/AdminHelpComponent.html":{},"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"classes/ClinicHandlerComponent.html":{},"modules/ErrorsModule.html":{},"injectables/FilterPipe.html":{},"classes/LoginComponent.html":{},"classes/OrganizationRoutingModule.html":{}}}],["handler'},{'name",{"_index":353,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["handler.component",{"_index":702,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{}}}],["handler.component.html",{"_index":1297,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.scss",{"_index":1298,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts",{"_index":1247,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"coverage.html":{}}}],["handler.component.ts:118",{"_index":1288,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:135",{"_index":1286,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:160",{"_index":1287,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:173",{"_index":1293,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:185",{"_index":1294,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:197",{"_index":1285,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:209",{"_index":1284,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:221",{"_index":1292,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:233",{"_index":1291,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:237",{"_index":1283,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:292",{"_index":1289,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:41",{"_index":1271,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:43",{"_index":1272,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:45",{"_index":1274,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:47",{"_index":1268,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:49",{"_index":1270,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:51",{"_index":1269,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:53",{"_index":1264,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:55",{"_index":1277,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:57",{"_index":1281,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:59",{"_index":1279,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:61",{"_index":1275,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:62",{"_index":1265,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:63",{"_index":1267,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:64",{"_index":1266,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:69",{"_index":1263,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:73",{"_index":1260,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.component.ts:92",{"_index":1273,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["handler.ts",{"_index":1502,"title":{},"body":{"classes/ErrorsHandler.html":{},"coverage.html":{}}}],["handler.ts:30",{"_index":1509,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["handler.ts:59",{"_index":1513,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["handler/clinic",{"_index":701,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/ClinicHandlerComponent.html":{},"coverage.html":{}}}],["handler/database",{"_index":703,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"coverage.html":{}}}],["handler/error",{"_index":1501,"title":{},"body":{"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"coverage.html":{}}}],["handler/member",{"_index":815,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"coverage.html":{}}}],["handler/organization",{"_index":705,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"coverage.html":{}}}],["handler/staff",{"_index":709,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"coverage.html":{}}}],["handles",{"_index":1514,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["handling",{"_index":684,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"classes/ErrorsHandler.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["happend",{"_index":1534,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["happened",{"_index":1522,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["harding",{"_index":1453,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["headers",{"_index":130,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["heading",{"_index":532,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/MemberDashboardComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["healthy",{"_index":1471,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["heightleft",{"_index":2412,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["help",{"_index":381,"title":{},"body":{"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"modules/AppRoutingModule.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/OrganizationHelpComponent.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"index.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["help'},{'name",{"_index":349,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["help.component",{"_index":770,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["help.component.html",{"_index":383,"title":{},"body":{"components/AdminHelpComponent.html":{},"components/MemberHelpComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/StaffHelpComponent.html":{}}}],["help.component.scss",{"_index":382,"title":{},"body":{"components/AdminHelpComponent.html":{},"components/MemberHelpComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/StaffHelpComponent.html":{}}}],["help.component.ts",{"_index":380,"title":{},"body":{"components/AdminHelpComponent.html":{},"components/MemberHelpComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/StaffHelpComponent.html":{},"coverage.html":{}}}],["help.component.ts:23",{"_index":384,"title":{},"body":{"components/AdminHelpComponent.html":{},"components/MemberHelpComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/StaffHelpComponent.html":{}}}],["help.component.ts:27",{"_index":385,"title":{},"body":{"components/AdminHelpComponent.html":{},"components/MemberHelpComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/StaffHelpComponent.html":{}}}],["help/admin",{"_index":379,"title":{},"body":{"components/AdminHelpComponent.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["help/member",{"_index":800,"title":{},"body":{"modules/AppModule.html":{},"components/MemberHelpComponent.html":{},"coverage.html":{}}}],["help/organization",{"_index":819,"title":{},"body":{"modules/AppModule.html":{},"components/OrganizationHelpComponent.html":{},"coverage.html":{}}}],["help/staff",{"_index":841,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/StaffHelpComponent.html":{},"classes/StaffRoutingModule.html":{},"coverage.html":{}}}],["helptab",{"_index":464,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["herbarium",{"_index":1094,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["herbariumnumber",{"_index":1052,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["here",{"_index":394,"title":{},"body":{"components/AdminHelpComponent.html":{},"injectables/AuthenticationService.html":{},"components/MemberHelpComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/PageNotFoundComponent.html":{},"components/StaffHelpComponent.html":{}}}],["hidden/shown",{"_index":456,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["hide",{"_index":522,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["hides",{"_index":1207,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["hold",{"_index":678,"title":{},"body":{"classes/AdminNotificationComponent.html":{}}}],["holding",{"_index":448,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["holds",{"_index":473,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"injectables/Porting.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["home",{"_index":880,"title":{},"body":{"modules/AppRoutingModule.html":{},"classes/HomeComponent.html":{}}}],["home.component.html",{"_index":1640,"title":{},"body":{"classes/HomeComponent.html":{}}}],["home.component.scss",{"_index":1641,"title":{},"body":{"classes/HomeComponent.html":{}}}],["home/home.component",{"_index":792,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["homecomponent",{"_index":791,"title":{"classes/HomeComponent.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/HomeComponent.html":{},"coverage.html":{}}}],["host",{"_index":1053,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["html",{"_index":336,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"components/ErrorComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"dependencies.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["html2canvas",{"_index":2349,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"dependencies.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["htmlcollectionof",{"_index":1618,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["http",{"_index":109,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["http.httpclient",{"_index":957,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{}}}],["http.httperrorresponse",{"_index":2293,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["http.httphandler",{"_index":2279,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["http.httpheaders",{"_index":1021,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["http.httpinterceptor",{"_index":2285,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["http.httprequest",{"_index":2276,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["http://localhost:4200",{"_index":2856,"title":{},"body":{"index.html":{}}}],["http_interceptors",{"_index":1549,"title":{},"body":{"modules/ErrorsModule.html":{}}}],["httpclient",{"_index":28,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["httpclientmodule",{"_index":758,"title":{},"body":{"modules/AppModule.html":{}}}],["httperrorresponse",{"_index":1512,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["httpheaders",{"_index":1932,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["httprequest",{"_index":2283,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["https://culture",{"_index":2912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://database",{"_index":2908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://diagnostic",{"_index":2916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://logging",{"_index":2914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://login",{"_index":2905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://user",{"_index":2910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hybrid",{"_index":1893,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["id",{"_index":20,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["identified",{"_index":1098,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["identifiedby",{"_index":1054,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/StaffMember-2.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["identifier",{"_index":1944,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"coverage.html":{}}}],["identifies",{"_index":1516,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["idno",{"_index":1952,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["if(!this.previoususerdata.email",{"_index":1745,"title":{},"body":{"classes/LoginComponent.html":{}}}],["if(!this.previoususerdata.organization",{"_index":1747,"title":{},"body":{"classes/LoginComponent.html":{}}}],["if(error",{"_index":2299,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["if(text",{"_index":2253,"title":{},"body":{"injectables/Porting.html":{}}}],["if(this.authservice.isloggedin",{"_index":1526,"title":{},"body":{"classes/ErrorsHandler.html":{},"classes/ServerErrorInterceptor.html":{}}}],["if(this.session",{"_index":2303,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["if(type",{"_index":1575,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["imageheight",{"_index":2409,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["imagewidth",{"_index":2405,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["immediately",{"_index":2479,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["implements",{"_index":307,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"guards/AuthenticationGuard.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"components/ErrorComponent.html":{},"classes/ErrorsHandler.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"components/PageNotFoundComponent.html":{},"classes/PreDiagnosisComponent.html":{},"components/SampleDivComponent.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["import",{"_index":27,"title":{},"body":{"interfaces/AccessLogs.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"modules/AdminModule.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"modules/MaterialModule.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"components/OrganizationHelpComponent.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"modules/StaffModule.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["imports",{"_index":619,"title":{},"body":{"modules/AdminModule.html":{},"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"modules/MaterialModule.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationRoutingModule.html":{},"interfaces/StaffMember-2.html":{},"modules/StaffModule.html":{},"classes/StaffRoutingModule.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["include",{"_index":2107,"title":{},"body":{"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"interfaces/Location.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"miscellaneous/enumerations.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":455,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"interfaces/ProcessedForm.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"modules/AdminModule.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"interfaces/Location.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"modules/MaterialModule.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"modules/StaffModule.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["information",{"_index":60,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"injectables/AuthenticationService.html":{},"interfaces/Confirm.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"components/StaffDivComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["infotitle",{"_index":1783,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["init",{"_index":502,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/HomeComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/PreDiagnosisComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["inject",{"_index":1490,"title":{},"body":{"components/ErrorComponent.html":{}}}],["inject(mat_dialog_data",{"_index":1488,"title":{},"body":{"components/ErrorComponent.html":{},"classes/PreDiagnosisComponent.html":{}}}],["injectable",{"_index":30,"title":{"injectables/AuthenticationService.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"injectables/FilterPipe.html":{},"injectables/LocationService.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"injectables/Porting.html":{}},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"injectables/FilterPipe.html":{},"injectables/LocationService.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserLogs.html":{},"coverage.html":{}}}],["injectables",{"_index":934,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"injectables/FilterPipe.html":{},"injectables/LocationService.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"injectables/Porting.html":{},"overview.html":{}}}],["injector",{"_index":1510,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["input",{"_index":326,"title":{},"body":{"components/AdminDivComponent.html":{},"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberDashboardComponent.html":{},"components/NotificationDivComponent.html":{},"components/SampleDivComponent.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["inputs",{"_index":319,"title":{},"body":{"components/AdminDivComponent.html":{},"classes/ClinicHandlerComponent.html":{},"components/NotificationDivComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{}}}],["insect",{"_index":246,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["inserted",{"_index":334,"title":{},"body":{"components/AdminDivComponent.html":{},"components/StaffDivComponent.html":{}}}],["inserting",{"_index":494,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["instance",{"_index":107,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["instanceof",{"_index":1521,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["intercept",{"_index":2270,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["intercept(request",{"_index":2278,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["interceptor",{"_index":1552,"title":{},"body":{"modules/ErrorsModule.html":{}}}],["interceptor.ts",{"_index":2267,"title":{},"body":{"classes/ServerErrorInterceptor.html":{},"coverage.html":{}}}],["interceptor.ts:27",{"_index":2272,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["interceptor.ts:35",{"_index":2273,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["interceptor.ts:36",{"_index":2274,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["interceptor.ts:40",{"_index":2280,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["interceptor.ts:74",{"_index":2277,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["interceptor/server",{"_index":1551,"title":{},"body":{"modules/ErrorsModule.html":{},"classes/ServerErrorInterceptor.html":{},"coverage.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"interfaces/Confirm.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/HomeComponent.html":{},"interfaces/Location.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["interface.address",{"_index":1799,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["interface.databaseprivilege",{"_index":1329,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["interface.location",{"_index":1805,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["interface.logininfo",{"_index":962,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/LoginComponent.html":{}}}],["interface.organisation",{"_index":1687,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["interface.organisationadmin",{"_index":1685,"title":{},"body":{"classes/HomeComponent.html":{}}}],["interface.organisationmember",{"_index":2006,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["interface.sampleformdata",{"_index":1433,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["interface.staffinfo",{"_index":1327,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["interface.userprivileges",{"_index":978,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["interface.usertype",{"_index":1278,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"classes/LoginComponent.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"interfaces/Confirm.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"overview.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["interfaces.ts",{"_index":2148,"title":{},"body":{"interfaces/Organisation.html":{}}}],["internal",{"_index":2347,"title":{},"body":{"components/StaffHelpComponent.html":{}}}],["international",{"_index":1093,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["internationalcollectionnumber",{"_index":1055,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["internet",{"_index":1524,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["invalid",{"_index":1625,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["iseditingsample",{"_index":1163,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["isloggedin",{"_index":955,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isn’t",{"_index":2234,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["isolated",{"_index":1097,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["isolatedby",{"_index":1056,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/StaffMember-2.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["issatellite",{"_index":1784,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["istanbul",{"_index":2827,"title":{},"body":{"dependencies.html":{}}}],["it's",{"_index":1201,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["item",{"_index":481,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["items",{"_index":1569,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["items.filter((val",{"_index":1577,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["jan",{"_index":2453,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["january",{"_index":2454,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["jasmine",{"_index":2780,"title":{},"body":{"dependencies.html":{}}}],["jquery",{"_index":2782,"title":{},"body":{"dependencies.html":{}}}],["js",{"_index":2771,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":11,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["json.parse(localstorage.getitem('loggedin",{"_index":1014,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["json.stringify(false",{"_index":1017,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["json.stringify(sess",{"_index":1005,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["json.stringify(true",{"_index":1007,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jsonfile",{"_index":2238,"title":{},"body":{"injectables/Porting.html":{}}}],["jsonobject",{"_index":1391,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["jspdf",{"_index":2351,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"dependencies.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["jspdf('p",{"_index":2415,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["jul",{"_index":2462,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["july",{"_index":1547,"title":{},"body":{"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"miscellaneous/enumerations.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["jun",{"_index":2461,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["june",{"_index":1544,"title":{},"body":{"modules/ErrorsModule.html":{},"interfaces/Organisation.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["karma",{"_index":2823,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["ladminemail",{"_index":1680,"title":{},"body":{"classes/HomeComponent.html":{}}}],["ladminname",{"_index":1676,"title":{},"body":{"classes/HomeComponent.html":{}}}],["ladminphone",{"_index":1682,"title":{},"body":{"classes/HomeComponent.html":{}}}],["ladminsurname",{"_index":1678,"title":{},"body":{"classes/HomeComponent.html":{}}}],["landowner",{"_index":288,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["landowner's",{"_index":285,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["landowner_name",{"_index":284,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["last",{"_index":604,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"interfaces/Organisation.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"miscellaneous/enumerations.html":{}}}],["lat",{"_index":1866,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["latitude",{"_index":292,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["launcher",{"_index":2826,"title":{},"body":{"dependencies.html":{}}}],["layoutmodule",{"_index":756,"title":{},"body":{"modules/AppModule.html":{}}}],["leafspot",{"_index":252,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["learn",{"_index":395,"title":{},"body":{"components/AdminHelpComponent.html":{},"components/MemberHelpComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/StaffHelpComponent.html":{}}}],["leaves",{"_index":242,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["legend",{"_index":343,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ErrorComponent.html":{},"modules/ErrorsModule.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"modules/OrganizationMemberModule.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"overview.html":{}}}],["lemail",{"_index":1760,"title":{},"body":{"classes/LoginComponent.html":{}}}],["libraries",{"_index":877,"title":{},"body":{"modules/AppModule.html":{}}}],["lines",{"_index":2254,"title":{},"body":{"injectables/Porting.html":{}}}],["lines[0].split",{"_index":2256,"title":{},"body":{"injectables/Porting.html":{}}}],["linked",{"_index":2070,"title":{},"body":{"components/MemberHelpComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/StaffHelpComponent.html":{}}}],["list",{"_index":120,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"modules/MaterialModule.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["literal",{"_index":2265,"title":{},"body":{"interfaces/SampleFormData.html":{}}}],["lname",{"_index":1955,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["lng",{"_index":1867,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["load",{"_index":497,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["loaddepositforms",{"_index":2314,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["loaded",{"_index":445,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["loadfabiuserprivileges",{"_index":948,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["loading",{"_index":469,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["loading.component.html",{"_index":1694,"title":{},"body":{"classes/LoadingComponent.html":{}}}],["loading.component.scss",{"_index":1695,"title":{},"body":{"classes/LoadingComponent.html":{}}}],["loadingcomponent",{"_index":753,"title":{"classes/LoadingComponent.html":{}},"body":{"modules/AppModule.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"coverage.html":{}}}],["loadingref",{"_index":1242,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["loadingref.close",{"_index":1246,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["loadlogs",{"_index":633,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/StaffNotificationComponent.html":{}}}],["loadnotifications",{"_index":634,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/StaffNotificationComponent.html":{}}}],["loadrequestforms",{"_index":2315,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["loads",{"_index":503,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/PreDiagnosisComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["loaduserdetails",{"_index":635,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/StaffNotificationComponent.html":{}}}],["loaduserdetails(userid",{"_index":666,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/StaffNotificationComponent.html":{}}}],["local",{"_index":555,"title":{},"body":{"interfaces/AdminMember.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["locality",{"_index":1057,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"classes/MapsWindowComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["localized",{"_index":259,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["localnotificationnumber",{"_index":625,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{}}}],["localstorage.getitem('loggedin",{"_index":1013,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["localstorage.getitem('pre",{"_index":2263,"title":{},"body":{"classes/PreDiagnosisComponent.html":{}}}],["localstorage.removeitem('pre",{"_index":1015,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/PreDiagnosisComponent.html":{}}}],["localstorage.removeitem('sessiondetails",{"_index":1016,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["localstorage.setitem('loggedin",{"_index":1006,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["localstorage.setitem('sessiondetails",{"_index":1004,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["location",{"_index":291,"title":{"interfaces/Location.html":{}},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"coverage.html":{}}}],["locationservice",{"_index":1697,"title":{"injectables/LocationService.html":{}},"body":{"injectables/LocationService.html":{},"coverage.html":{}}}],["log",{"_index":50,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"injectables/FilterPipe.html":{},"interfaces/Logs.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["logged",{"_index":195,"title":{},"body":{"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["loggedin",{"_index":972,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/LoginComponent.html":{}}}],["logging",{"_index":491,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["logging.service",{"_index":426,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["logging.service.ts",{"_index":7,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logging.service.ts:200",{"_index":2117,"title":{},"body":{"injectables/NotificationLoggingService.html":{}}}],["logging.service.ts:225",{"_index":2121,"title":{},"body":{"injectables/NotificationLoggingService.html":{}}}],["logging.service.ts:256",{"_index":2119,"title":{},"body":{"injectables/NotificationLoggingService.html":{}}}],["logging.service.ts:287",{"_index":2118,"title":{},"body":{"injectables/NotificationLoggingService.html":{}}}],["logging.service.ts:318",{"_index":2120,"title":{},"body":{"injectables/NotificationLoggingService.html":{}}}],["logging.service.ts:351",{"_index":2122,"title":{},"body":{"injectables/NotificationLoggingService.html":{}}}],["logging.service.ts:381",{"_index":2123,"title":{},"body":{"injectables/NotificationLoggingService.html":{}}}],["logid",{"_index":21,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["logids",{"_index":97,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["login",{"_index":190,"title":{},"body":{"interfaces/Address.html":{},"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"modules/ErrorsRoutingModule.html":{},"classes/HomeComponent.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/StaffInfo.html":{},"classes/StaffRoutingModule.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["login(details",{"_index":961,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["login.component.html",{"_index":1743,"title":{},"body":{"classes/LoginComponent.html":{}}}],["login.component.scss",{"_index":1744,"title":{},"body":{"classes/LoginComponent.html":{}}}],["login/login.component",{"_index":689,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ErrorsRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["login_validation_messages",{"_index":1702,"title":{},"body":{"classes/LoginComponent.html":{}}}],["logincomponent",{"_index":688,"title":{"classes/LoginComponent.html":{}},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ErrorsRoutingModule.html":{},"classes/LoginComponent.html":{},"classes/StaffRoutingModule.html":{},"coverage.html":{}}}],["loginform",{"_index":1703,"title":{},"body":{"classes/LoginComponent.html":{}}}],["logininfo",{"_index":191,"title":{"interfaces/LoginInfo.html":{}},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"coverage.html":{}}}],["loginurl",{"_index":2904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logout",{"_index":549,"title":{},"body":{"interfaces/AdminMember.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["logoutuser",{"_index":949,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["logs",{"_index":14,"title":{"interfaces/Logs.html":{}},"body":{"interfaces/AccessLogs.html":{},"components/AdminHelpComponent.html":{},"classes/AdminNotificationComponent.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"classes/MemberNotificationComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["logstab",{"_index":2389,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["logsurl",{"_index":2913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["long",{"_index":1717,"title":{},"body":{"classes/LoginComponent.html":{},"miscellaneous/variables.html":{}}}],["longitude",{"_index":293,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["looking",{"_index":482,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"components/PageNotFoundComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["loop",{"_index":1661,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["lorg",{"_index":1764,"title":{},"body":{"classes/LoginComponent.html":{}}}],["lorgname",{"_index":1674,"title":{},"body":{"classes/HomeComponent.html":{}}}],["lowercase",{"_index":1721,"title":{},"body":{"classes/LoginComponent.html":{},"miscellaneous/variables.html":{}}}],["lpassw",{"_index":1762,"title":{},"body":{"classes/LoginComponent.html":{}}}],["lstaffemail",{"_index":1321,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["lstaffname",{"_index":1317,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["lstaffphone",{"_index":1323,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["lstaffposition",{"_index":1325,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["lstaffsurname",{"_index":1319,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["mail",{"_index":1954,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["making",{"_index":110,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["manage",{"_index":396,"title":{},"body":{"components/AdminHelpComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{}}}],["management",{"_index":63,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["management.service.ts",{"_index":1385,"title":{},"body":{"injectables/DatabaseManagementService.html":{},"coverage.html":{}}}],["management.service.ts:122",{"_index":1399,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["management.service.ts:31",{"_index":1389,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["management.service.ts:55",{"_index":1403,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["management.service.ts:88",{"_index":1392,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["map",{"_index":987,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["map_type",{"_index":1785,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["maploader",{"_index":1793,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["maps",{"_index":793,"title":{},"body":{"modules/AppModule.html":{},"classes/MapsWindowComponent.html":{}}}],["mapsapiloader",{"_index":1794,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["mapswindowcomponent",{"_index":754,"title":{"classes/MapsWindowComponent.html":{}},"body":{"modules/AppModule.html":{},"classes/MapsWindowComponent.html":{},"coverage.html":{}}}],["mar",{"_index":2457,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["march",{"_index":2458,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["mat_dialog_data",{"_index":1491,"title":{},"body":{"components/ErrorComponent.html":{},"classes/LoadingComponent.html":{}}}],["matautocompletemodule",{"_index":761,"title":{},"body":{"modules/AppModule.html":{}}}],["matbuttonmodule",{"_index":1909,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matcardmodule",{"_index":1911,"title":{},"body":{"modules/MaterialModule.html":{}}}],["match",{"_index":2903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matcheckboxmodule",{"_index":1930,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matching",{"_index":160,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"modules/AdminModule.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"interfaces/Location.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"modules/MaterialModule.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"modules/StaffModule.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"dependencies.html":{},"interfaces/depositReportInterface.html":{},"miscellaneous/enumerations.html":{},"interfaces/errorLogInterface.html":{},"index.html":{},"modules.html":{},"overview.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"routes.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["matdatepickermodule",{"_index":1929,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matdialog",{"_index":413,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["matdialogmodule",{"_index":1927,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matdialogref",{"_index":1792,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["material",{"_index":1901,"title":{},"body":{"modules/MaterialModule.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{}}}],["materialmodule",{"_index":744,"title":{"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ErrorsModule.html":{},"modules/MaterialModule.html":{},"modules/OrganizationMemberModule.html":{},"modules.html":{},"overview.html":{}}}],["materials",{"_index":796,"title":{},"body":{"modules/AppModule.html":{},"modules/ErrorsModule.html":{},"modules/OrganizationMemberModule.html":{}}}],["matexpansionmodule",{"_index":1913,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matformfieldmodule",{"_index":1915,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matgridlistmodule",{"_index":1923,"title":{},"body":{"modules/MaterialModule.html":{}}}],["maticonmodule",{"_index":1905,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matinputmodule",{"_index":1916,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matmenumodule",{"_index":1903,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matnativedatemodule",{"_index":1928,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matselectmodule",{"_index":1925,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsidenavmodule",{"_index":1921,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsnackbar",{"_index":414,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"injectables/NotificationService.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["matsnackbarmodule",{"_index":1926,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattablemodule",{"_index":1919,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattabsmodule",{"_index":1917,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matters",{"_index":938,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["mattoolbarmodule",{"_index":1907,"title":{},"body":{"modules/MaterialModule.html":{}}}],["media",{"_index":244,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["member",{"_index":91,"title":{"interfaces/Member.html":{}},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"interfaces/Confirm.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"injectables/FilterPipe.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["member's",{"_index":1964,"title":{},"body":{"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["member.module",{"_index":812,"title":{},"body":{"modules/AppModule.html":{}}}],["member.module.ts",{"_index":2157,"title":{},"body":{"modules/OrganizationMemberModule.html":{}}}],["member/member",{"_index":798,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"coverage.html":{}}}],["member/organization",{"_index":811,"title":{},"body":{"modules/AppModule.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"coverage.html":{}}}],["member\\organization",{"_index":2159,"title":{},"body":{"modules/OrganizationMemberModule.html":{}}}],["memberdashboardcomponent",{"_index":797,"title":{"classes/MemberDashboardComponent.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/MemberDashboardComponent.html":{},"classes/OrganizationMemberRoutingModule.html":{},"coverage.html":{}}}],["memberhandlercomponent",{"_index":813,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"coverage.html":{}}}],["memberhelpcomponent",{"_index":356,"title":{"components/MemberHelpComponent.html":{}},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["memberid",{"_index":2036,"title":{},"body":{"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{}}}],["memberinfo",{"_index":187,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Member.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["memberinfo.id",{"_index":2014,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["membermenucomponent",{"_index":801,"title":{"classes/MemberMenuComponent.html":{}},"body":{"modules/AppModule.html":{},"classes/MemberMenuComponent.html":{},"coverage.html":{}}}],["membernotificationcomponent",{"_index":803,"title":{"classes/MemberNotificationComponent.html":{}},"body":{"modules/AppModule.html":{},"classes/MemberNotificationComponent.html":{},"coverage.html":{}}}],["memberof",{"_index":112,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["memberprofilecomponent",{"_index":805,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"coverage.html":{}}}],["members",{"_index":387,"title":{},"body":{"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"interfaces/Member.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"components/StaffDivComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["membersamples",{"_index":2037,"title":{},"body":{"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{}}}],["membersubmitsamplecomponent",{"_index":357,"title":{"components/MemberSubmitSampleComponent.html":{}},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["memberviewsamplescomponent",{"_index":809,"title":{"classes/MemberViewSamplesComponent.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/StaffViewSamplesComponent.html":{},"coverage.html":{}}}],["menu",{"_index":582,"title":{},"body":{"classes/AdminMenuComponent.html":{},"modules/AppRoutingModule.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberMenuComponent.html":{},"components/OrganizationMenuComponent.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"classes/StaffRoutingModule.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["menu'},{'name",{"_index":363,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["menu.component",{"_index":771,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["menu.component.html",{"_index":583,"title":{},"body":{"classes/AdminMenuComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberMenuComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/StaffMenuComponent.html":{}}}],["menu.component.scss",{"_index":584,"title":{},"body":{"classes/AdminMenuComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberMenuComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/StaffMenuComponent.html":{}}}],["menu.component.ts",{"_index":576,"title":{},"body":{"classes/AdminMenuComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberMenuComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/StaffMenuComponent.html":{},"coverage.html":{}}}],["menu.component.ts:110",{"_index":1349,"title":{},"body":{"classes/CmwMenuComponent.html":{}}}],["menu.component.ts:122",{"_index":1348,"title":{},"body":{"classes/CmwMenuComponent.html":{}}}],["menu.component.ts:134",{"_index":1352,"title":{},"body":{"classes/CmwMenuComponent.html":{}}}],["menu.component.ts:146",{"_index":1350,"title":{},"body":{"classes/CmwMenuComponent.html":{}}}],["menu.component.ts:23",{"_index":2163,"title":{},"body":{"components/OrganizationMenuComponent.html":{},"components/StaffMenuComponent.html":{}}}],["menu.component.ts:27",{"_index":2164,"title":{},"body":{"components/OrganizationMenuComponent.html":{},"components/StaffMenuComponent.html":{}}}],["menu.component.ts:29",{"_index":579,"title":{},"body":{"classes/AdminMenuComponent.html":{}}}],["menu.component.ts:30",{"_index":578,"title":{},"body":{"classes/AdminMenuComponent.html":{},"classes/MemberMenuComponent.html":{}}}],["menu.component.ts:33",{"_index":1346,"title":{},"body":{"classes/CmwMenuComponent.html":{}}}],["menu.component.ts:34",{"_index":2073,"title":{},"body":{"classes/MemberMenuComponent.html":{}}}],["menu.component.ts:35",{"_index":1347,"title":{},"body":{"classes/CmwMenuComponent.html":{}}}],["menu.component.ts:37",{"_index":580,"title":{},"body":{"classes/AdminMenuComponent.html":{},"classes/CmwMenuComponent.html":{}}}],["menu.component.ts:39",{"_index":1344,"title":{},"body":{"classes/CmwMenuComponent.html":{}}}],["menu.component.ts:41",{"_index":1345,"title":{},"body":{"classes/CmwMenuComponent.html":{}}}],["menu.component.ts:43",{"_index":1343,"title":{},"body":{"classes/CmwMenuComponent.html":{}}}],["menu.component.ts:45",{"_index":2074,"title":{},"body":{"classes/MemberMenuComponent.html":{}}}],["menu.component.ts:73",{"_index":1351,"title":{},"body":{"classes/CmwMenuComponent.html":{}}}],["menu.component.ts:85",{"_index":1353,"title":{},"body":{"classes/CmwMenuComponent.html":{}}}],["menu.component.ts:97",{"_index":1354,"title":{},"body":{"classes/CmwMenuComponent.html":{}}}],["menu/admin",{"_index":575,"title":{},"body":{"classes/AdminMenuComponent.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["menu/cmw",{"_index":837,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CmwMenuComponent.html":{},"classes/StaffRoutingModule.html":{},"coverage.html":{}}}],["menu/member",{"_index":802,"title":{},"body":{"modules/AppModule.html":{},"classes/MemberMenuComponent.html":{},"coverage.html":{}}}],["menu/organization",{"_index":820,"title":{},"body":{"modules/AppModule.html":{},"components/OrganizationMenuComponent.html":{},"coverage.html":{}}}],["menu/staff",{"_index":842,"title":{},"body":{"modules/AppModule.html":{},"components/StaffMenuComponent.html":{},"coverage.html":{}}}],["mesage",{"_index":1647,"title":{},"body":{"classes/HomeComponent.html":{}}}],["message",{"_index":216,"title":{},"body":{"interfaces/Address.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"classes/HomeComponent.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":1616,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["metadata",{"_index":309,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["method",{"_index":128,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["methods",{"_index":317,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"components/ErrorComponent.html":{},"classes/ErrorsHandler.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"components/SampleDivComponent.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["microscope",{"_index":1140,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["microscopeslides",{"_index":1139,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["minlength",{"_index":1714,"title":{},"body":{"classes/LoginComponent.html":{},"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":2840,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["miterlimit",{"_index":2207,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["mm",{"_index":2416,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["mobile\\fabi",{"_index":594,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"miscellaneous/enumerations.html":{}}}],["modal",{"_index":1290,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["modified",{"_index":605,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"interfaces/Organisation.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"miscellaneous/enumerations.html":{}}}],["module",{"_index":585,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"modules/MaterialModule.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"modules/StaffModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ErrorsModule.html":{},"modules/OrganizationMemberModule.html":{},"overview.html":{}}}],["modules",{"_index":587,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"modules/MaterialModule.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"modules/StaffModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":914,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["mon",{"_index":2440,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["monday",{"_index":606,"title":{},"body":{"modules/AdminModule.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"miscellaneous/enumerations.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["month",{"_index":2560,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["montserrat",{"_index":2193,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["more",{"_index":59,"title":{},"body":{"interfaces/AccessLogs.html":{},"components/AdminHelpComponent.html":{},"classes/AdminNotificationComponent.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"components/MemberHelpComponent.html":{},"injectables/NotificationLoggingService.html":{},"components/OrganizationHelpComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"index.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["moreinfo",{"_index":58,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["multi",{"_index":1557,"title":{},"body":{"modules/ErrorsModule.html":{}}}],["n/a",{"_index":2549,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["na",{"_index":263,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["name",{"_index":67,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"classes/AdminMenuComponent.html":{},"modules/AdminModule.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"modules/OrganizationMemberModule.html":{},"components/OrganizationMenuComponent.html":{},"modules/OrganizationModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"miscellaneous/enumerations.html":{},"interfaces/errorLogInterface.html":{},"index.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["name_bionumerics",{"_index":2609,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["namebionumerics",{"_index":1115,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{}}}],["names",{"_index":1754,"title":{},"body":{"classes/LoginComponent.html":{},"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["navigate",{"_index":909,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/LoginComponent.html":{},"index.html":{}}}],["navigating",{"_index":390,"title":{},"body":{"components/AdminHelpComponent.html":{},"components/MemberHelpComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/StaffHelpComponent.html":{}}}],["navigator.geolocation",{"_index":1856,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["navigator.geolocation.getcurrentposition((position",{"_index":1857,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["navigator.online",{"_index":1523,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["neccessary",{"_index":512,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["need",{"_index":148,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UserLogs.html":{}}}],["needles",{"_index":1470,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["needs",{"_index":2005,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["new",{"_index":993,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicHandlerComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/ProcessedForm.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/StaffMember-2.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"index.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["new_password",{"_index":2898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["newdate",{"_index":2437,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["newnotifications",{"_index":626,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{}}}],["newpass",{"_index":2028,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["newpassword",{"_index":2023,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["next",{"_index":910,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/ServerErrorInterceptor.html":{}}}],["next.data.roles",{"_index":930,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["next.data.roles.indexof(user.user.permission",{"_index":931,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["next.handle(request).pipe",{"_index":2290,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["ng",{"_index":501,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/HomeComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/PreDiagnosisComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"dependencies.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"index.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["ng_on_init",{"_index":1751,"title":{},"body":{"classes/LoginComponent.html":{}}}],["ngmodule",{"_index":613,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"modules/MaterialModule.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"modules/StaffModule.html":{}}}],["ngondestroy",{"_index":518,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["ngoninit",{"_index":318,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"components/ErrorComponent.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"components/PageNotFoundComponent.html":{},"classes/PreDiagnosisComponent.html":{},"components/SampleDivComponent.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["ngx",{"_index":728,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"injectables/NotificationService.html":{},"dependencies.html":{}}}],["ngzone",{"_index":1795,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["node",{"_index":2834,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":731,"title":{},"body":{"components/AppComponent.html":{},"classes/HomeComponent.html":{},"components/PageNotFoundComponent.html":{}}}],["noopanimationsmodule",{"_index":765,"title":{},"body":{"modules/AppModule.html":{},"modules/OrganizationMemberModule.html":{}}}],["notes",{"_index":1100,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"classes/SubmitCmwRequestComponent.html":{},"interfaces/UpdateDepositForm.html":{}}}],["noticed",{"_index":273,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["notification",{"_index":61,"title":{},"body":{"interfaces/AccessLogs.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["notification.component",{"_index":772,"title":{},"body":{"modules/AppModule.html":{}}}],["notification.component.html",{"_index":673,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{}}}],["notification.component.scss",{"_index":674,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts",{"_index":622,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{},"coverage.html":{}}}],["notification.component.ts:106",{"_index":669,"title":{},"body":{"classes/AdminNotificationComponent.html":{}}}],["notification.component.ts:107",{"_index":2089,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:111",{"_index":2506,"title":{},"body":{"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:121",{"_index":655,"title":{},"body":{"classes/AdminNotificationComponent.html":{}}}],["notification.component.ts:126",{"_index":2502,"title":{},"body":{"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:153",{"_index":2503,"title":{},"body":{"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:154",{"_index":657,"title":{},"body":{"classes/AdminNotificationComponent.html":{}}}],["notification.component.ts:229",{"_index":662,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:253",{"_index":663,"title":{},"body":{"classes/AdminNotificationComponent.html":{}}}],["notification.component.ts:254",{"_index":2504,"title":{},"body":{"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:330",{"_index":2505,"title":{},"body":{"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:34",{"_index":2077,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:350",{"_index":2507,"title":{},"body":{"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:36",{"_index":2080,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:37",{"_index":642,"title":{},"body":{"classes/AdminNotificationComponent.html":{}}}],["notification.component.ts:374",{"_index":2508,"title":{},"body":{"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:38",{"_index":2076,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:39",{"_index":646,"title":{},"body":{"classes/AdminNotificationComponent.html":{}}}],["notification.component.ts:41",{"_index":641,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:43",{"_index":2081,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:432",{"_index":667,"title":{},"body":{"classes/AdminNotificationComponent.html":{}}}],["notification.component.ts:44",{"_index":652,"title":{},"body":{"classes/AdminNotificationComponent.html":{}}}],["notification.component.ts:45",{"_index":2493,"title":{},"body":{"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:453",{"_index":671,"title":{},"body":{"classes/AdminNotificationComponent.html":{}}}],["notification.component.ts:46",{"_index":649,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:47",{"_index":2497,"title":{},"body":{"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:48",{"_index":648,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:49",{"_index":2498,"title":{},"body":{"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:50",{"_index":2082,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:51",{"_index":650,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:52",{"_index":2079,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:53",{"_index":651,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:54",{"_index":2084,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:55",{"_index":647,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:56",{"_index":2085,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:57",{"_index":645,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:58",{"_index":2086,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:59",{"_index":2499,"title":{},"body":{"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:60",{"_index":654,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:61",{"_index":2500,"title":{},"body":{"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:62",{"_index":2078,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:63",{"_index":643,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:64",{"_index":2083,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:65",{"_index":2494,"title":{},"body":{"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:66",{"_index":638,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:67",{"_index":2496,"title":{},"body":{"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:69",{"_index":2495,"title":{},"body":{"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:71",{"_index":2501,"title":{},"body":{"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:73",{"_index":2492,"title":{},"body":{"classes/StaffNotificationComponent.html":{}}}],["notification.component.ts:84",{"_index":2088,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["notification.component.ts:85",{"_index":653,"title":{},"body":{"classes/AdminNotificationComponent.html":{}}}],["notification.component.ts:95",{"_index":2087,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["notification/admin",{"_index":621,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["notification/member",{"_index":804,"title":{},"body":{"modules/AppModule.html":{},"classes/MemberNotificationComponent.html":{},"coverage.html":{}}}],["notification/organization",{"_index":822,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["notification/staff",{"_index":844,"title":{},"body":{"modules/AppModule.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{},"coverage.html":{}}}],["notificationcontainer",{"_index":2038,"title":{},"body":{"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{}}}],["notificationdivcomponent",{"_index":360,"title":{"components/NotificationDivComponent.html":{}},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["notificationloggingapiservice",{"_index":2541,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["notificationloggingservice",{"_index":104,"title":{"injectables/NotificationLoggingService.html":{}},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"classes/MemberNotificationComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["notifications",{"_index":150,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["notificationservice",{"_index":748,"title":{"injectables/NotificationService.html":{}},"body":{"modules/AppModule.html":{},"classes/ErrorsHandler.html":{},"injectables/NotificationService.html":{},"classes/ServerErrorInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["notificationservice.showerrornotification(`${error.error.code",{"_index":1530,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["notificationservice.showerrornotification(error.name",{"_index":1535,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["notificationservice.showwarningnotification('offline",{"_index":1529,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["notificationservie",{"_index":2271,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["notificationsloading",{"_index":627,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{}}}],["notificationstab",{"_index":457,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["notify",{"_index":1518,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["nov",{"_index":2468,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["nova",{"_index":602,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"interfaces/Organisation.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"miscellaneous/enumerations.html":{}}}],["novacapstone@gmail.com",{"_index":603,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"interfaces/Organisation.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"miscellaneous/enumerations.html":{}}}],["november",{"_index":2469,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["null",{"_index":1036,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"injectables/Porting.html":{},"classes/ServerErrorInterceptor.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["num_samples",{"_index":228,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["number",{"_index":26,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/HomeComponent.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"miscellaneous/variables.html":{}}}],["numberofaccesslogs",{"_index":628,"title":{},"body":{"classes/AdminNotificationComponent.html":{}}}],["numberofdatabaselogs",{"_index":629,"title":{},"body":{"classes/AdminNotificationComponent.html":{}}}],["numberoffabimembers",{"_index":453,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["numberofmembersamples",{"_index":2039,"title":{},"body":{"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{}}}],["numberofsamples",{"_index":454,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["numberofuserlogs",{"_index":630,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{}}}],["nurseryfield",{"_index":1460,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["nuts",{"_index":247,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["obj",{"_index":1236,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["object",{"_index":9,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["object.keys(this.selectedsampledata).foreach((column",{"_index":1235,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["objects",{"_index":1280,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"classes/LoginComponent.html":{}}}],["observable",{"_index":916,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"classes/ServerErrorInterceptor.html":{}}}],["occured",{"_index":76,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["oct",{"_index":2467,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["october",{"_index":2152,"title":{},"body":{"interfaces/Organisation.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"miscellaneous/enumerations.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["oil",{"_index":1128,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["ok",{"_index":1868,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["old",{"_index":2022,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["oldpass",{"_index":2027,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["oldpassword",{"_index":2021,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["one",{"_index":1719,"title":{},"body":{"classes/LoginComponent.html":{},"miscellaneous/variables.html":{}}}],["oninit",{"_index":308,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["onto",{"_index":968,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["opacity",{"_index":2201,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["open",{"_index":524,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["operation",{"_index":56,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["option",{"_index":565,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["optional",{"_index":165,"title":{},"body":{"interfaces/Address.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"components/ErrorComponent.html":{},"classes/ErrorsHandler.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"classes/OrganizationViewSamplesComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffInfo.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UserPrivileges.html":{}}}],["options",{"_index":127,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["options).pipe(map((response",{"_index":1957,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["options).pipe(map(response",{"_index":1023,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["options).subscribe((response",{"_index":1033,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["org",{"_index":966,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["org_details",{"_index":1686,"title":{},"body":{"classes/HomeComponent.html":{}}}],["organisation",{"_index":175,"title":{"interfaces/Organisation.html":{}},"body":{"interfaces/Address.html":{},"injectables/AuthenticationService.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Member.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"coverage.html":{}}}],["organisation's",{"_index":186,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["organisationadmin",{"_index":178,"title":{"interfaces/OrganisationAdmin.html":{}},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"coverage.html":{}}}],["organisationmember",{"_index":188,"title":{"interfaces/OrganisationMember.html":{}},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"coverage.html":{}}}],["organisations",{"_index":1960,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["organizaion",{"_index":1638,"title":{},"body":{"classes/HomeComponent.html":{}}}],["organization",{"_index":54,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"modules/OrganizationMemberModule.html":{},"components/OrganizationMenuComponent.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["organization.module.ts",{"_index":2166,"title":{},"body":{"modules/OrganizationModule.html":{}}}],["organization/member",{"_index":814,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["organization/organization",{"_index":817,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["organization/organization.module",{"_index":828,"title":{},"body":{"modules/AppModule.html":{}}}],["organization1",{"_index":53,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["organization2",{"_index":57,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["organization_name",{"_index":1622,"title":{},"body":{"classes/HomeComponent.html":{}}}],["organizationadmin",{"_index":884,"title":{},"body":{"modules/AppRoutingModule.html":{},"classes/LoginComponent.html":{},"classes/OrganizationRoutingModule.html":{},"miscellaneous/enumerations.html":{}}}],["organizationdashboardcomponent",{"_index":816,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/ClinicHandlerComponent.html":{},"classes/OrganizationRoutingModule.html":{},"coverage.html":{}}}],["organizationhandlercomponent",{"_index":704,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/HomeComponent.html":{},"coverage.html":{}}}],["organizationhelpcomponent",{"_index":361,"title":{"components/OrganizationHelpComponent.html":{}},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["organizationmembermodule",{"_index":745,"title":{"modules/OrganizationMemberModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OrganizationMemberModule.html":{},"modules.html":{},"overview.html":{}}}],["organizationmemberroutingmodule",{"_index":2161,"title":{"classes/OrganizationMemberRoutingModule.html":{}},"body":{"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"coverage.html":{}}}],["organizationmenucomponent",{"_index":362,"title":{"components/OrganizationMenuComponent.html":{}},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["organizationmodule",{"_index":746,"title":{"modules/OrganizationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OrganizationModule.html":{},"modules.html":{},"overview.html":{}}}],["organizationnotificationcomponent",{"_index":821,"title":{},"body":{"modules/AppModule.html":{},"classes/MemberNotificationComponent.html":{},"coverage.html":{}}}],["organizationprofilecomponent",{"_index":823,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"coverage.html":{}}}],["organizationroutingmodule",{"_index":2170,"title":{"classes/OrganizationRoutingModule.html":{}},"body":{"modules/OrganizationModule.html":{},"classes/OrganizationRoutingModule.html":{},"coverage.html":{}}}],["organizations",{"_index":398,"title":{},"body":{"components/AdminHelpComponent.html":{},"injectables/FilterPipe.html":{},"classes/LoginComponent.html":{},"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["organizationsubmitsamplecomponent",{"_index":364,"title":{"components/OrganizationSubmitSampleComponent.html":{}},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["organizationviewsamplescomponent",{"_index":826,"title":{"classes/OrganizationViewSamplesComponent.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/OrganizationViewSamplesComponent.html":{},"coverage.html":{}}}],["orginfo",{"_index":1974,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["orginfo.orgname",{"_index":2010,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["orgname",{"_index":176,"title":{},"body":{"interfaces/Address.html":{},"injectables/AuthenticationService.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"classes/HomeComponent.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Member.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["origin",{"_index":158,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["originated",{"_index":1096,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["otherfabicollections",{"_index":1058,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["others",{"_index":281,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["out",{"_index":550,"title":{},"body":{"interfaces/AdminMember.html":{},"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"modules/ErrorsModule.html":{},"classes/LoginComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"index.html":{},"overview.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["over",{"_index":1662,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["overview",{"_index":2883,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":2746,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":337,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"components/ErrorComponent.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"components/PageNotFoundComponent.html":{},"classes/PreDiagnosisComponent.html":{},"components/SampleDivComponent.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["pageheight",{"_index":2407,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["pagenotfoundcomponent",{"_index":365,"title":{"components/PageNotFoundComponent.html":{}},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["panel",{"_index":562,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["param",{"_index":108,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["parameter",{"_index":507,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["parameters",{"_index":530,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"components/ErrorComponent.html":{},"classes/ErrorsHandler.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["part",{"_index":1902,"title":{},"body":{"modules/MaterialModule.html":{}}}],["passed",{"_index":1766,"title":{},"body":{"classes/LoginComponent.html":{}}}],["passsword",{"_index":185,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["password",{"_index":184,"title":{},"body":{"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["passwordinput",{"_index":474,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["passwordmatch",{"_index":2901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwords",{"_index":2902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":590,"title":{},"body":{"modules/AdminModule.html":{},"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"miscellaneous/enumerations.html":{}}}],["pathmatch",{"_index":882,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["pattern",{"_index":1624,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"miscellaneous/variables.html":{}}}],["pdf",{"_index":1358,"title":{},"body":{"classes/CmwMenuComponent.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["pdf.addimage(contentdataurl",{"_index":2418,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["pdf.save('deposit_report.pdf",{"_index":2430,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["pdf.save('error_report.pdf",{"_index":2420,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["pdf.save('request_report.pdf",{"_index":2428,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["pdf.save('revitalization_report.pdf",{"_index":2434,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["percentage",{"_index":266,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MemberDashboardComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["percentage_plants_affected",{"_index":265,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["perform",{"_index":2249,"title":{},"body":{"injectables/Porting.html":{}}}],["performed",{"_index":51,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["performing",{"_index":55,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["permission",{"_index":290,"title":{},"body":{"interfaces/Address.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["permission_granted",{"_index":286,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["permissions",{"_index":283,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["permissions/privileges",{"_index":907,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["personal",{"_index":1092,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"components/MemberHelpComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["personalcollectionnumber",{"_index":1059,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["pertaining",{"_index":330,"title":{},"body":{"components/AdminDivComponent.html":{},"injectables/AuthenticationService.html":{},"components/StaffDivComponent.html":{}}}],["phone",{"_index":183,"title":{},"body":{"interfaces/Address.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"classes/HomeComponent.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Member.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["pinning",{"_index":1825,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["pipe",{"_index":1572,"title":{},"body":{"injectables/FilterPipe.html":{},"coverage.html":{},"dependencies.html":{},"overview.html":{}}}],["pipetransform",{"_index":1573,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["place",{"_index":1843,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["place.geometry",{"_index":1846,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["place.geometry.location.lat",{"_index":1849,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["place.geometry.location.lng",{"_index":1851,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["places",{"_index":878,"title":{},"body":{"modules/AppModule.html":{}}}],["plant_genus",{"_index":226,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["plant_species",{"_index":224,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["plantation",{"_index":233,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["plantation_details",{"_index":234,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["planted",{"_index":275,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["plants",{"_index":267,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["please",{"_index":1262,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"classes/ErrorsHandler.html":{},"classes/HomeComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"miscellaneous/variables.html":{}}}],["png",{"_index":2419,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["political",{"_index":1879,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["pop",{"_index":213,"title":{},"body":{"interfaces/Address.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["populate",{"_index":531,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/LoginComponent.html":{},"classes/MemberDashboardComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["populating",{"_index":540,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["popup",{"_index":1231,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["port",{"_index":1394,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["ported",{"_index":1397,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["porting",{"_index":1386,"title":{"injectables/Porting.html":{}},"body":{"injectables/DatabaseManagementService.html":{},"injectables/Porting.html":{},"coverage.html":{}}}],["porting(dbname",{"_index":1390,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["portingurl",{"_index":1408,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["position",{"_index":199,"title":{},"body":{"interfaces/Address.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember-2.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["position.coords.latitude",{"_index":1858,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["position.coords.longitude",{"_index":1859,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["positionerror",{"_index":1860,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["positions",{"_index":200,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["post",{"_index":81,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["postal",{"_index":294,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["postal_code",{"_index":171,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["postdata",{"_index":156,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["posting",{"_index":82,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["postlog",{"_index":84,"title":{"interfaces/POSTLog.html":{}},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{},"coverage.html":{}}}],["postmember",{"_index":1441,"title":{"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{}},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/Member.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"coverage.html":{}}}],["postorganization",{"_index":1945,"title":{"interfaces/POSTOrganization.html":{}},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"coverage.html":{}}}],["postupdate",{"_index":96,"title":{"interfaces/POSTUpdate.html":{}},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{},"coverage.html":{}}}],["postupdatemember",{"_index":1948,"title":{"interfaces/POSTUpdateMember.html":{}},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"coverage.html":{}}}],["postupdateorganization",{"_index":1950,"title":{"interfaces/POSTUpdateOrganization.html":{}},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"coverage.html":{}}}],["postuser",{"_index":92,"title":{"interfaces/POSTUser.html":{}},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{},"coverage.html":{}}}],["pre",{"_index":830,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/PreDiagnosisComponent.html":{}}}],["prediagnosiscomponent",{"_index":829,"title":{"classes/PreDiagnosisComponent.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/PreDiagnosisComponent.html":{},"coverage.html":{}}}],["prefill",{"_index":2296,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["pretoria",{"_index":612,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"interfaces/Organisation.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"miscellaneous/enumerations.html":{}}}],["prevent",{"_index":1663,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["prior",{"_index":280,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["private",{"_index":114,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"classes/HomeComponent.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["privilege",{"_index":201,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["privileges",{"_index":204,"title":{},"body":{"interfaces/Address.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["privilegetypes",{"_index":206,"title":{"interfaces/PrivilegeTypes.html":{}},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"coverage.html":{}}}],["problem",{"_index":272,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["proccess",{"_index":1812,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["process",{"_index":1153,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["processed",{"_index":1122,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"classes/MemberDashboardComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["processedform",{"_index":1123,"title":{"interfaces/ProcessedForm.html":{}},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{}}}],["processing",{"_index":1421,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["prod",{"_index":2865,"title":{},"body":{"index.html":{}}}],["production",{"_index":2867,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":100,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"injectables/NotificationLoggingService.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["profile.component",{"_index":699,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["profile.component.ts",{"_index":2640,"title":{},"body":{"coverage.html":{}}}],["profile/admin",{"_index":698,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"coverage.html":{}}}],["profile/member",{"_index":806,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"coverage.html":{}}}],["profile/organization",{"_index":824,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"coverage.html":{}}}],["profile/staff",{"_index":846,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"coverage.html":{}}}],["profiletab",{"_index":459,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["project",{"_index":596,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"interfaces/Organisation.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["promise",{"_index":917,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["properties",{"_index":16,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"interfaces/Location.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["protractor",{"_index":2831,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["provide",{"_index":1555,"title":{},"body":{"modules/ErrorsModule.html":{}}}],["provided",{"_index":659,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/MapsWindowComponent.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["providedin",{"_index":101,"title":{},"body":{"interfaces/AccessLogs.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"injectables/LocationService.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["providers",{"_index":735,"title":{},"body":{"modules/AppModule.html":{},"modules/ErrorsModule.html":{},"modules/OrganizationMemberModule.html":{},"overview.html":{}}}],["provides",{"_index":1900,"title":{},"body":{"modules/MaterialModule.html":{}}}],["province",{"_index":172,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["public",{"_index":484,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"components/ErrorComponent.html":{},"classes/LoadingComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/PreDiagnosisComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["pure",{"_index":1574,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["put",{"_index":658,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["radiata",{"_index":1456,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["rc.3",{"_index":2779,"title":{},"body":{"dependencies.html":{}}}],["reactiveformsmodule",{"_index":760,"title":{},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"modules/OrganizationMemberModule.html":{}}}],["read",{"_index":438,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffNotificationComponent.html":{}}}],["readable",{"_index":660,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["readme",{"_index":2877,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":1011,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["ready",{"_index":2402,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["receive",{"_index":529,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/MemberDashboardComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["received",{"_index":1442,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["redirectto",{"_index":881,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["reference",{"_index":1111,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"classes/MapsWindowComponent.html":{},"interfaces/POSTMember.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{}}}],["reference_number",{"_index":2546,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["referencenumber",{"_index":1110,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/StaffMember-2.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["refnum",{"_index":1476,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["refresh",{"_index":2295,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["refreshtokeninprogress",{"_index":2286,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["refreshtokensubject",{"_index":2287,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["region",{"_index":1060,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["register",{"_index":1639,"title":{},"body":{"classes/HomeComponent.html":{}}}],["register_organization_validators",{"_index":1608,"title":{},"body":{"classes/HomeComponent.html":{}}}],["regular",{"_index":2194,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["related",{"_index":937,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["reload",{"_index":2858,"title":{},"body":{"index.html":{}}}],["remove",{"_index":672,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"interfaces/Member.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["removed",{"_index":98,"title":{},"body":{"interfaces/AccessLogs.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["removed***/getusertypes",{"_index":1973,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["removedatabase",{"_index":1387,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["removedatabase(dbname",{"_index":1398,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["removefabistaffmember(staffinfo",{"_index":1997,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["removememberurl",{"_index":2012,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["removenotification",{"_index":636,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/StaffNotificationComponent.html":{}}}],["removenotification(id",{"_index":670,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/StaffNotificationComponent.html":{}}}],["removeorganization(orginfo",{"_index":1985,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["removeorganizationmember(memberinfo",{"_index":2011,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["removeorganizationurl",{"_index":1986,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["removestaffmemberurl",{"_index":1998,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["renderer",{"_index":1356,"title":{},"body":{"classes/CmwMenuComponent.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["renderer2",{"_index":1355,"title":{},"body":{"classes/CmwMenuComponent.html":{}}}],["repo\\fabi",{"_index":593,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"miscellaneous/enumerations.html":{}}}],["report",{"_index":405,"title":{},"body":{"components/AdminHelpComponent.html":{},"injectables/FilterPipe.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["reporter",{"_index":2821,"title":{},"body":{"dependencies.html":{}}}],["reporting",{"_index":402,"title":{},"body":{"components/AdminHelpComponent.html":{},"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"injectables/FilterPipe.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["reporting.component.html",{"_index":2363,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["reporting.component.scss",{"_index":2364,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["reporting/reporting.component",{"_index":707,"title":{},"body":{"classes/AdminRoutingModule.html":{}}}],["reportingcomponent",{"_index":706,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["reportingtab",{"_index":2388,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["reports",{"_index":404,"title":{},"body":{"components/AdminHelpComponent.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["represents",{"_index":913,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["request",{"_index":118,"title":{},"body":{"interfaces/AccessLogs.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffRoutingModule.html":{},"classes/SubmitCmwRequestComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["request.clone",{"_index":2306,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["request.component",{"_index":860,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["request.component.html",{"_index":2539,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.component.scss",{"_index":2540,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.component.ts",{"_index":2518,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"coverage.html":{}}}],["request.component.ts:109",{"_index":2535,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.component.ts:121",{"_index":2537,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.component.ts:203",{"_index":2533,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.component.ts:225",{"_index":2538,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.component.ts:239",{"_index":2536,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.component.ts:38",{"_index":2523,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.component.ts:41",{"_index":2530,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.component.ts:44",{"_index":2529,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.component.ts:46",{"_index":2531,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.component.ts:48",{"_index":2524,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.component.ts:50",{"_index":2526,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.component.ts:52",{"_index":2528,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.component.ts:54",{"_index":2527,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.component.ts:57",{"_index":2532,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.component.ts:60",{"_index":2525,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.component.ts:63",{"_index":2521,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["request.headers.set",{"_index":2307,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["request/submit",{"_index":859,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"classes/SubmitCmwRequestComponent.html":{},"coverage.html":{}}}],["request_register_org",{"_index":1609,"title":{},"body":{"classes/HomeComponent.html":{}}}],["requested",{"_index":1109,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/FilterPipe.html":{},"interfaces/ProcessedForm.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{}}}],["requestforms",{"_index":2311,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["requesting",{"_index":89,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["requestlogs",{"_index":2366,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["requestlogsarray",{"_index":2377,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["requestor",{"_index":1104,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/StaffMember-2.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["requestreport",{"_index":2370,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["requestreportinterface",{"_index":2359,"title":{"interfaces/requestReportInterface.html":{}},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["requestreportpdf",{"_index":2382,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["requests",{"_index":83,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserLogs.html":{}}}],["requesttoregister",{"_index":1611,"title":{},"body":{"classes/HomeComponent.html":{}}}],["requesttoregisterorganizationurl",{"_index":1979,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["require",{"_index":1621,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["required",{"_index":1261,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["rerouted",{"_index":933,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["reset",{"_index":750,"title":{},"body":{"modules/AppModule.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"modules/ErrorsModule.html":{},"classes/MemberViewSamplesComponent.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"overview.html":{}}}],["resetaddfields",{"_index":1258,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["resets",{"_index":1194,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{}}}],["resetsamplefields",{"_index":1171,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["resetstafffields",{"_index":1259,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["resolver",{"_index":493,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffNotificationComponent.html":{}}}],["respective",{"_index":1736,"title":{},"body":{"classes/LoginComponent.html":{}}}],["response",{"_index":122,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["response.code",{"_index":1226,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Member.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"classes/StaffViewSamplesComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["response.data.content.data.logs",{"_index":682,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["response.data.databases",{"_index":1034,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["response.data.docs",{"_index":1309,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["response.data.organizations",{"_index":1758,"title":{},"body":{"classes/LoginComponent.html":{}}}],["response.data.qs.admins",{"_index":681,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{}}}],["response.data.qs.forms",{"_index":2345,"title":{},"body":{"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["response.data.qs.staff",{"_index":538,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["response.data.samples",{"_index":543,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["response.success",{"_index":537,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["response.token",{"_index":1024,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["response.userdetails",{"_index":1026,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["response.userdetails.databases",{"_index":1028,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["response.userdetails.fname",{"_index":1770,"title":{},"body":{"classes/LoginComponent.html":{}}}],["response.userdetails.usertype",{"_index":1772,"title":{},"body":{"classes/LoginComponent.html":{}}}],["responsible",{"_index":1503,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["result",{"_index":159,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"modules/AdminModule.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"interfaces/Location.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"modules/MaterialModule.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"modules/StaffModule.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"dependencies.html":{},"interfaces/depositReportInterface.html":{},"miscellaneous/enumerations.html":{},"interfaces/errorLogInterface.html":{},"index.html":{},"modules.html":{},"overview.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"routes.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":161,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"modules/AdminModule.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"interfaces/Location.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"modules/MaterialModule.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"modules/StaffModule.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"dependencies.html":{},"interfaces/depositReportInterface.html":{},"miscellaneous/enumerations.html":{},"interfaces/errorLogInterface.html":{},"index.html":{},"modules.html":{},"overview.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"routes.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["results[0",{"_index":1869,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["retreive",{"_index":1426,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["retreived",{"_index":467,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["retreivesampledetailsurl",{"_index":1474,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["retrieve",{"_index":119,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["retrieveallmembersamples",{"_index":1450,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["retrieveallorganizationsamples",{"_index":1414,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["retrieveallorgsamples",{"_index":1447,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["retrieved",{"_index":548,"title":{},"body":{"interfaces/AdminMember.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/StaffMember-1.html":{}}}],["retrievedatabase",{"_index":1388,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["retrievedatabase(database",{"_index":1402,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["retrievedatabaseurl",{"_index":1405,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["retrievemembersamples",{"_index":1415,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["retrievesampledetails",{"_index":1416,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{}}}],["retrievesampledetails(samplerefnum",{"_index":1428,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["retriving",{"_index":436,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["retry",{"_index":1498,"title":{},"body":{"components/ErrorComponent.html":{},"injectables/NotificationService.html":{},"classes/ServerErrorInterceptor.html":{}}}],["retry(1",{"_index":2291,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["retuned",{"_index":679,"title":{},"body":{"classes/AdminNotificationComponent.html":{}}}],["return",{"_index":141,"title":{},"body":{"interfaces/AccessLogs.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicHandlerComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"interfaces/StaffMember-2.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["returned",{"_index":541,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["returns",{"_index":121,"title":{},"body":{"interfaces/AccessLogs.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["reverse",{"_index":2250,"title":{},"body":{"injectables/Porting.html":{}}}],["revilization",{"_index":1112,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["revitalization",{"_index":887,"title":{},"body":{"modules/AppRoutingModule.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffRoutingModule.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["revitalization.component",{"_index":863,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["revitalization.component.html",{"_index":2605,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.scss",{"_index":2606,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts",{"_index":2582,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{},"coverage.html":{}}}],["revitalization.component.ts:117",{"_index":2601,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:130",{"_index":2603,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:231",{"_index":2600,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:253",{"_index":2604,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:267",{"_index":2602,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:37",{"_index":2588,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:40",{"_index":2598,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:43",{"_index":2596,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:45",{"_index":2591,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:47",{"_index":2586,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:49",{"_index":2590,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:51",{"_index":2589,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:53",{"_index":2597,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:55",{"_index":2595,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:57",{"_index":2593,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:59",{"_index":2594,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:62",{"_index":2599,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:65",{"_index":2592,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization.component.ts:68",{"_index":2585,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["revitalization/submit",{"_index":862,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"coverage.html":{}}}],["revitalizationlogs",{"_index":2368,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["revitalizationlogsarray",{"_index":2379,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["revitalizationreport",{"_index":2372,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["revitalizationreportinterface",{"_index":2361,"title":{"interfaces/revitalizationReportInterface.html":{}},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["revitalizationreportpdf",{"_index":2386,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["roadmap",{"_index":1807,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["roboto",{"_index":2228,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["role",{"_index":694,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"miscellaneous/enumerations.html":{}}}],["role.ts",{"_index":2844,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["roles",{"_index":714,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["room",{"_index":1130,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["roomtemperature",{"_index":1129,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["root",{"_index":102,"title":{},"body":{"interfaces/AccessLogs.html":{},"components/AppComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"injectables/LocationService.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["root'},{'name",{"_index":351,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["rootrot",{"_index":253,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["roots",{"_index":240,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["route",{"_index":911,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/MapsWindowComponent.html":{}}}],["router",{"_index":419,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/ErrorsHandler.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["router.navigate(['/login",{"_index":1528,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["router.navigate(['/login']);this.authservice.logoutuser",{"_index":1527,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["routermodule",{"_index":686,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["routermodule.forchild(routes",{"_index":2162,"title":{},"body":{"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":719,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"modules/ErrorsRoutingModule.html":{}}}],["routerstatesnapshot",{"_index":904,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["routes",{"_index":687,"title":{"routes.html":{}},"body":{"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"modules/ErrorsRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"overview.html":{},"routes.html":{}}}],["routing.module",{"_index":617,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ErrorsModule.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"modules/StaffModule.html":{}}}],["routing.module.ts",{"_index":685,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"modules/ErrorsRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"coverage.html":{}}}],["routing.ts",{"_index":1560,"title":{},"body":{"modules/ErrorsRoutingModule.html":{}}}],["routing/error",{"_index":1554,"title":{},"body":{"modules/ErrorsModule.html":{}}}],["routing/navigating",{"_index":900,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["run",{"_index":2853,"title":{},"body":{"index.html":{}}}],["running",{"_index":2868,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":925,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"classes/ServerErrorInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":988,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["sample",{"_index":220,"title":{"interfaces/Sample.html":{}},"body":{"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"components/ErrorComponent.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTMember.html":{},"components/PageNotFoundComponent.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember-1.html":{},"components/StaffMenuComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"coverage.html":{}}}],["sample's",{"_index":2103,"title":{},"body":{"classes/MemberViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["sample'},{'name",{"_index":359,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["sample.component",{"_index":808,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["sample.component.html",{"_index":2095,"title":{},"body":{"components/MemberSubmitSampleComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["sample.component.scss",{"_index":2094,"title":{},"body":{"components/MemberSubmitSampleComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["sample.component.ts",{"_index":2093,"title":{},"body":{"components/MemberSubmitSampleComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{}}}],["sample.component.ts:12",{"_index":2510,"title":{},"body":{"components/StaffSubmitSampleComponent.html":{}}}],["sample.component.ts:24",{"_index":2096,"title":{},"body":{"components/MemberSubmitSampleComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{}}}],["sample.component.ts:28",{"_index":2097,"title":{},"body":{"components/MemberSubmitSampleComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{}}}],["sample.component.ts:8",{"_index":2509,"title":{},"body":{"components/StaffSubmitSampleComponent.html":{}}}],["sample.data",{"_index":1234,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["sample.referencenumber",{"_index":1479,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["sample/member",{"_index":807,"title":{},"body":{"modules/AppModule.html":{},"components/MemberSubmitSampleComponent.html":{},"coverage.html":{}}}],["sample/organization",{"_index":825,"title":{},"body":{"modules/AppModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"coverage.html":{}}}],["sample/staff",{"_index":847,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{}}}],["sample_details",{"_index":223,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["sample_status",{"_index":1221,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["samplecontainer",{"_index":2040,"title":{},"body":{"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{}}}],["sampledivcomponent",{"_index":367,"title":{"components/SampleDivComponent.html":{}},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["samplefields",{"_index":1164,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["sampleformcomponent",{"_index":368,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["sampleformdata",{"_index":222,"title":{"interfaces/SampleFormData.html":{}},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"coverage.html":{}}}],["samplerefnum",{"_index":1431,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["samples",{"_index":229,"title":{},"body":{"interfaces/Address.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"modules/AppRoutingModule.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"injectables/FilterPipe.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"classes/OrganizationRoutingModule.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember-1.html":{},"components/StaffMenuComponent.html":{},"classes/StaffRoutingModule.html":{},"classes/StaffViewSamplesComponent.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["samples.component",{"_index":777,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/StaffRoutingModule.html":{}}}],["samples.component.html",{"_index":1217,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["samples.component.scss",{"_index":1218,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["samples.component.ts",{"_index":1161,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"coverage.html":{}}}],["samples.component.ts:101",{"_index":1202,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["samples.component.ts:105",{"_index":2174,"title":{},"body":{"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["samples.component.ts:107",{"_index":2100,"title":{},"body":{"classes/MemberViewSamplesComponent.html":{}}}],["samples.component.ts:114",{"_index":1191,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["samples.component.ts:119",{"_index":2516,"title":{},"body":{"classes/StaffViewSamplesComponent.html":{}}}],["samples.component.ts:121",{"_index":2106,"title":{},"body":{"classes/MemberViewSamplesComponent.html":{}}}],["samples.component.ts:128",{"_index":1213,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["samples.component.ts:132",{"_index":2173,"title":{},"body":{"classes/OrganizationViewSamplesComponent.html":{}}}],["samples.component.ts:145",{"_index":2514,"title":{},"body":{"classes/StaffViewSamplesComponent.html":{}}}],["samples.component.ts:148",{"_index":2104,"title":{},"body":{"classes/MemberViewSamplesComponent.html":{}}}],["samples.component.ts:154",{"_index":1197,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["samples.component.ts:155",{"_index":2172,"title":{},"body":{"classes/OrganizationViewSamplesComponent.html":{}}}],["samples.component.ts:167",{"_index":2513,"title":{},"body":{"classes/StaffViewSamplesComponent.html":{}}}],["samples.component.ts:170",{"_index":2102,"title":{},"body":{"classes/MemberViewSamplesComponent.html":{}}}],["samples.component.ts:174",{"_index":1193,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["samples.component.ts:188",{"_index":1211,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["samples.component.ts:201",{"_index":1209,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["samples.component.ts:35",{"_index":2511,"title":{},"body":{"classes/StaffViewSamplesComponent.html":{}}}],["samples.component.ts:36",{"_index":2512,"title":{},"body":{"classes/StaffViewSamplesComponent.html":{}}}],["samples.component.ts:37",{"_index":2098,"title":{},"body":{"classes/MemberViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["samples.component.ts:38",{"_index":1188,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{}}}],["samples.component.ts:39",{"_index":2099,"title":{},"body":{"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["samples.component.ts:40",{"_index":1183,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{}}}],["samples.component.ts:41",{"_index":1187,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["samples.component.ts:42",{"_index":1190,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["samples.component.ts:43",{"_index":1179,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["samples.component.ts:44",{"_index":1180,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["samples.component.ts:45",{"_index":1181,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{}}}],["samples.component.ts:46",{"_index":1182,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["samples.component.ts:47",{"_index":1184,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["samples.component.ts:49",{"_index":1177,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["samples.component.ts:76",{"_index":2515,"title":{},"body":{"classes/StaffViewSamplesComponent.html":{}}}],["samples.component.ts:77",{"_index":2101,"title":{},"body":{"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{}}}],["samples.component.ts:84",{"_index":1192,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["samples.component.ts:91",{"_index":2171,"title":{},"body":{"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["samples.component.ts:94",{"_index":2105,"title":{},"body":{"classes/MemberViewSamplesComponent.html":{}}}],["samples/clinic",{"_index":776,"title":{},"body":{"modules/AppModule.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"coverage.html":{}}}],["samples/member",{"_index":810,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationMemberRoutingModule.html":{},"coverage.html":{}}}],["samples/organization",{"_index":827,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/OrganizationRoutingModule.html":{},"classes/OrganizationViewSamplesComponent.html":{},"coverage.html":{}}}],["samples/staff",{"_index":851,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"classes/StaffViewSamplesComponent.html":{},"coverage.html":{}}}],["samplestats",{"_index":447,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["sampletableloading",{"_index":1165,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["sampletype",{"_index":1457,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["sanitizer",{"_index":495,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/StaffMember-1.html":{}}}],["sat",{"_index":2449,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["saturday",{"_index":2450,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["save",{"_index":460,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/ProcessedForm.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["savebtn",{"_index":462,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["saves",{"_index":1820,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["scaffolding",{"_index":2860,"title":{},"body":{"index.html":{}}}],["scattered",{"_index":260,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["screen",{"_index":2421,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["scroll",{"_index":520,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{},"dependencies.html":{}}}],["scrollpositionrestoration",{"_index":888,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["search",{"_index":480,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"injectables/FilterPipe.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["searchadmins",{"_index":485,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["searchdeposit",{"_index":2312,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["searched",{"_index":1570,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["searchelementref",{"_index":1786,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["searchitem",{"_index":2392,"title":{},"body":{"interfaces/StaffMember-2.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["searchreports",{"_index":2393,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["searchsample",{"_index":1166,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["searchstaff",{"_index":486,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["section",{"_index":665,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["seedlings",{"_index":243,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["segments",{"_index":922,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["select",{"_index":1232,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"dependencies.html":{}}}],["selected",{"_index":335,"title":{},"body":{"components/AdminDivComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/LoginComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"components/StaffDivComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["selectedorg",{"_index":1704,"title":{},"body":{"classes/LoginComponent.html":{}}}],["selectedsampledata",{"_index":1167,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["selectedusertype",{"_index":1253,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["selectlocation",{"_index":1789,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["selectlocation(event",{"_index":1823,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["selector",{"_index":310,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"components/ErrorComponent.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"components/PageNotFoundComponent.html":{},"classes/PreDiagnosisComponent.html":{},"components/SampleDivComponent.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["selects",{"_index":1198,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["selectsample",{"_index":1172,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["selectsample(sample",{"_index":1196,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["send",{"_index":1020,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/Member.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["sending",{"_index":1673,"title":{},"body":{"classes/HomeComponent.html":{}}}],["sendrequesttoregisterorganization(orginfo",{"_index":1978,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["sends",{"_index":117,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/HomeComponent.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["sent",{"_index":88,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/HomeComponent.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["sep",{"_index":2464,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["sept",{"_index":2465,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["september",{"_index":2466,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["sequence",{"_index":1120,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{}}}],["sequence_data_submitted",{"_index":2611,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["sequencedatesubmitted",{"_index":1119,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{}}}],["serve",{"_index":2854,"title":{},"body":{"index.html":{}}}],["server",{"_index":971,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"index.html":{}}}],["servererrorinterceptor",{"_index":1550,"title":{"classes/ServerErrorInterceptor.html":{}},"body":{"modules/ErrorsModule.html":{},"classes/ServerErrorInterceptor.html":{},"coverage.html":{}}}],["service",{"_index":86,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"dependencies.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["sess",{"_index":1003,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["session",{"_index":929,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"classes/LoginComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/ServerErrorInterceptor.html":{}}}],["sessions",{"_index":941,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["set",{"_index":508,"title":{},"body":{"interfaces/AdminMember.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["setaccesslogtable",{"_index":2487,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["setcurrentlocation",{"_index":1790,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["setdatabaselogtable",{"_index":2486,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["seterrorlogtable",{"_index":2488,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["sets",{"_index":1199,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["setsessionvariables",{"_index":950,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["setsessionvariables(tokendetails",{"_index":965,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["setting",{"_index":990,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["setuserlogtable",{"_index":2482,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["showdialognotification",{"_index":2125,"title":{},"body":{"injectables/NotificationService.html":{}}}],["showdialognotification(message",{"_index":2131,"title":{},"body":{"injectables/NotificationService.html":{}}}],["showerrornotification",{"_index":2126,"title":{},"body":{"injectables/NotificationService.html":{}}}],["showerrornotification(title",{"_index":2133,"title":{},"body":{"injectables/NotificationService.html":{}}}],["shown",{"_index":1738,"title":{},"body":{"classes/LoginComponent.html":{}}}],["showsuccessnotification",{"_index":2127,"title":{},"body":{"injectables/NotificationService.html":{}}}],["showsuccessnotification(title",{"_index":2136,"title":{},"body":{"injectables/NotificationService.html":{}}}],["showwarningnotification",{"_index":2128,"title":{},"body":{"injectables/NotificationService.html":{}}}],["showwarningnotification(title",{"_index":2138,"title":{},"body":{"injectables/NotificationService.html":{}}}],["side",{"_index":561,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/ErrorsHandler.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["size",{"_index":2196,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["slants",{"_index":1127,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["slides",{"_index":1141,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["snack",{"_index":1614,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["snackbar",{"_index":499,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"injectables/NotificationService.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["snackbarref",{"_index":1336,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["soil",{"_index":238,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["something",{"_index":1712,"title":{},"body":{"classes/LoginComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"modules/AdminModule.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"interfaces/Location.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"modules/MaterialModule.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"modules/StaffModule.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"index.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["spec",{"_index":2820,"title":{},"body":{"dependencies.html":{}}}],["species",{"_index":225,"title":{"interfaces/Species.html":{}},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"coverage.html":{}}}],["specifc",{"_index":1435,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["specific",{"_index":146,"title":{},"body":{"interfaces/AccessLogs.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["specifies",{"_index":466,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["spinner",{"_index":470,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["spinners",{"_index":1229,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["src/.../culture",{"_index":2889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../diagnostic",{"_index":2892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":2888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../form",{"_index":2887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../maps",{"_index":2893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../notification",{"_index":2891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.ts",{"_index":2842,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../sample",{"_index":2894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":2890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/_errors/error",{"_index":1480,"title":{},"body":{"components/ErrorComponent.html":{},"classes/ErrorsHandler.html":{},"coverage.html":{}}}],["src/app/_errors/errors",{"_index":1559,"title":{},"body":{"modules/ErrorsRoutingModule.html":{}}}],["src/app/_errors/errors.module.ts",{"_index":1541,"title":{},"body":{"modules/ErrorsModule.html":{}}}],["src/app/_errors/server",{"_index":2266,"title":{},"body":{"classes/ServerErrorInterceptor.html":{},"coverage.html":{}}}],["src/app/_guards/authentication.guard.ts",{"_index":893,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/app/_guards/authentication.guard.ts:33",{"_index":899,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/app/_guards/authentication.guard.ts:60",{"_index":905,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/app/_guards/authentication.guard.ts:86",{"_index":920,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/app/_guards/authentication.guard.ts:92",{"_index":924,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/app/_interfaces/form",{"_index":2699,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/_interfaces/interfaces.ts",{"_index":163,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"coverage.html":{}}}],["src/app/_interfaces/role.ts",{"_index":2843,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/_loading/loading.component",{"_index":1215,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["src/app/_loading/loading.component.ts",{"_index":1690,"title":{},"body":{"classes/LoadingComponent.html":{},"coverage.html":{}}}],["src/app/_loading/loading.component.ts:33",{"_index":1691,"title":{},"body":{"classes/LoadingComponent.html":{}}}],["src/app/_loading/loading.component.ts:35",{"_index":1692,"title":{},"body":{"classes/LoadingComponent.html":{}}}],["src/app/_loading/loading.component.ts:37",{"_index":1693,"title":{},"body":{"classes/LoadingComponent.html":{}}}],["src/app/_pipes/filter.pipe.ts",{"_index":1562,"title":{},"body":{"injectables/FilterPipe.html":{},"coverage.html":{}}}],["src/app/_pipes/filter.pipe.ts:37",{"_index":1565,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["src/app/_services/authentication.service",{"_index":421,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/ErrorsHandler.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/PreDiagnosisComponent.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["src/app/_services/authentication.service.ts",{"_index":935,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/app/_services/authentication.service.ts:113",{"_index":974,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/_services/authentication.service.ts:143",{"_index":981,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/_services/authentication.service.ts:158",{"_index":983,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/_services/authentication.service.ts:174",{"_index":985,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/_services/authentication.service.ts:190",{"_index":964,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/_services/authentication.service.ts:208",{"_index":963,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/_services/authentication.service.ts:250",{"_index":960,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/_services/authentication.service.ts:289",{"_index":959,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/_services/authentication.service.ts:43",{"_index":979,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/_services/authentication.service.ts:45",{"_index":976,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/_services/authentication.service.ts:47",{"_index":958,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/_services/authentication.service.ts:81",{"_index":967,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/app/_services/culture",{"_index":1040,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/_services/database",{"_index":1384,"title":{},"body":{"injectables/DatabaseManagementService.html":{},"coverage.html":{}}}],["src/app/_services/diagnostic",{"_index":1216,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"injectables/DiagnosticClinicAPIService.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffViewSamplesComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/_services/location.service.ts",{"_index":1698,"title":{},"body":{"injectables/LocationService.html":{},"coverage.html":{}}}],["src/app/_services/location.service.ts:10",{"_index":1700,"title":{},"body":{"injectables/LocationService.html":{}}}],["src/app/_services/notification",{"_index":6,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/_services/notification.service",{"_index":2284,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["src/app/_services/notification.service.ts",{"_index":2124,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["src/app/_services/notification.service.ts:24",{"_index":2130,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/_services/notification.service.ts:28",{"_index":2134,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/_services/notification.service.ts:32",{"_index":2139,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/_services/notification.service.ts:36",{"_index":2137,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/_services/notification.service.ts:40",{"_index":2132,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/_services/porting.service.ts",{"_index":2237,"title":{},"body":{"injectables/Porting.html":{},"coverage.html":{}}}],["src/app/_services/porting.service.ts:29",{"_index":2241,"title":{},"body":{"injectables/Porting.html":{}}}],["src/app/_services/porting.service.ts:52",{"_index":2243,"title":{},"body":{"injectables/Porting.html":{}}}],["src/app/_services/porting.service.ts:88",{"_index":2248,"title":{},"body":{"injectables/Porting.html":{}}}],["src/app/_services/user",{"_index":1931,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/admin/admin",{"_index":378,"title":{},"body":{"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"interfaces/StaffMember-1.html":{},"coverage.html":{}}}],["src/app/admin/admin.module.ts",{"_index":588,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/app/admin/clinic",{"_index":1160,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"coverage.html":{}}}],["src/app/admin/database",{"_index":2648,"title":{},"body":{"coverage.html":{}}}],["src/app/admin/organization",{"_index":2650,"title":{},"body":{"coverage.html":{}}}],["src/app/admin/reporting/reporting.component.ts",{"_index":2348,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["src/app/admin/staff",{"_index":2658,"title":{},"body":{"coverage.html":{}}}],["src/app/admin/view",{"_index":2661,"title":{},"body":{"coverage.html":{}}}],["src/app/app",{"_index":879,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":721,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:10",{"_index":726,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:15",{"_index":727,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":751,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/dynamic",{"_index":303,"title":{},"body":{"components/AdminDivComponent.html":{},"components/NotificationDivComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"coverage.html":{}}}],["src/app/home/home.component.ts",{"_index":1606,"title":{},"body":{"classes/HomeComponent.html":{},"coverage.html":{}}}],["src/app/home/home.component.ts:120",{"_index":1635,"title":{},"body":{"classes/HomeComponent.html":{}}}],["src/app/home/home.component.ts:152",{"_index":1634,"title":{},"body":{"classes/HomeComponent.html":{}}}],["src/app/home/home.component.ts:167",{"_index":1636,"title":{},"body":{"classes/HomeComponent.html":{}}}],["src/app/home/home.component.ts:39",{"_index":1617,"title":{},"body":{"classes/HomeComponent.html":{}}}],["src/app/home/home.component.ts:41",{"_index":1619,"title":{},"body":{"classes/HomeComponent.html":{}}}],["src/app/home/home.component.ts:42",{"_index":1631,"title":{},"body":{"classes/HomeComponent.html":{}}}],["src/app/home/home.component.ts:43",{"_index":1632,"title":{},"body":{"classes/HomeComponent.html":{}}}],["src/app/home/home.component.ts:44",{"_index":1633,"title":{},"body":{"classes/HomeComponent.html":{}}}],["src/app/home/home.component.ts:50",{"_index":1630,"title":{},"body":{"classes/HomeComponent.html":{}}}],["src/app/home/home.component.ts:68",{"_index":1613,"title":{},"body":{"classes/HomeComponent.html":{}}}],["src/app/login/login.component.ts",{"_index":1701,"title":{},"body":{"classes/LoginComponent.html":{},"coverage.html":{}}}],["src/app/login/login.component.ts:132",{"_index":1742,"title":{},"body":{"classes/LoginComponent.html":{}}}],["src/app/login/login.component.ts:175",{"_index":1731,"title":{},"body":{"classes/LoginComponent.html":{}}}],["src/app/login/login.component.ts:41",{"_index":1723,"title":{},"body":{"classes/LoginComponent.html":{}}}],["src/app/login/login.component.ts:43",{"_index":1709,"title":{},"body":{"classes/LoginComponent.html":{}}}],["src/app/login/login.component.ts:45",{"_index":1728,"title":{},"body":{"classes/LoginComponent.html":{}}}],["src/app/login/login.component.ts:47",{"_index":1730,"title":{},"body":{"classes/LoginComponent.html":{}}}],["src/app/login/login.component.ts:49",{"_index":1713,"title":{},"body":{"classes/LoginComponent.html":{}}}],["src/app/login/login.component.ts:51",{"_index":1724,"title":{},"body":{"classes/LoginComponent.html":{}}}],["src/app/login/login.component.ts:53",{"_index":1729,"title":{},"body":{"classes/LoginComponent.html":{}}}],["src/app/login/login.component.ts:55",{"_index":1710,"title":{},"body":{"classes/LoginComponent.html":{}}}],["src/app/login/login.component.ts:57",{"_index":1725,"title":{},"body":{"classes/LoginComponent.html":{}}}],["src/app/login/login.component.ts:63",{"_index":1722,"title":{},"body":{"classes/LoginComponent.html":{}}}],["src/app/login/login.component.ts:76",{"_index":1708,"title":{},"body":{"classes/LoginComponent.html":{}}}],["src/app/maps",{"_index":1781,"title":{},"body":{"classes/MapsWindowComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/materials.ts",{"_index":1899,"title":{},"body":{"modules/MaterialModule.html":{}}}],["src/app/organization",{"_index":2035,"title":{},"body":{"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"modules/OrganizationMemberModule.html":{},"classes/OrganizationMemberRoutingModule.html":{},"coverage.html":{}}}],["src/app/organization/member",{"_index":2674,"title":{},"body":{"coverage.html":{}}}],["src/app/organization/organization",{"_index":2154,"title":{},"body":{"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"coverage.html":{}}}],["src/app/organization/organization.module.ts",{"_index":2165,"title":{},"body":{"modules/OrganizationModule.html":{}}}],["src/app/page",{"_index":2176,"title":{},"body":{"components/PageNotFoundComponent.html":{},"coverage.html":{}}}],["src/app/pre",{"_index":2257,"title":{},"body":{"classes/PreDiagnosisComponent.html":{},"coverage.html":{}}}],["src/app/sample",{"_index":2740,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/staff/cmw",{"_index":1342,"title":{},"body":{"classes/CmwMenuComponent.html":{},"coverage.html":{}}}],["src/app/staff/staff",{"_index":2309,"title":{},"body":{"classes/StaffDashboardComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"coverage.html":{}}}],["src/app/staff/staff.module.ts",{"_index":2490,"title":{},"body":{"modules/StaffModule.html":{}}}],["src/app/staff/submit",{"_index":2517,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"coverage.html":{}}}],["src/environments/environment.prod.ts",{"_index":2743,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["st0",{"_index":2182,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st1",{"_index":2185,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st10",{"_index":2211,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st11",{"_index":2213,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st12",{"_index":2214,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st13",{"_index":2216,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st14",{"_index":2218,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st15",{"_index":2220,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st16",{"_index":2225,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st17",{"_index":2227,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st18",{"_index":2229,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st2",{"_index":2187,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st3",{"_index":2188,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st4",{"_index":2190,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st5",{"_index":2195,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st6",{"_index":2198,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st7",{"_index":2200,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st8",{"_index":2204,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["st9",{"_index":2209,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["staff",{"_index":197,"title":{},"body":{"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"components/ErrorComponent.html":{},"injectables/FilterPipe.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Member.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"components/PageNotFoundComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"modules/StaffModule.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"miscellaneous/enumerations.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["staff/cmw",{"_index":836,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["staff/staff",{"_index":839,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["staff/staff.module",{"_index":852,"title":{},"body":{"modules/AppModule.html":{}}}],["staff/submit",{"_index":854,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["staff_details",{"_index":1326,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["staffcontainer",{"_index":442,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["staffdashboardcomponent",{"_index":838,"title":{"classes/StaffDashboardComponent.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffDashboardComponent.html":{},"classes/StaffRoutingModule.html":{},"coverage.html":{}}}],["staffdetails",{"_index":1989,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["staffdivcomponent",{"_index":370,"title":{"components/StaffDivComponent.html":{}},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["staffhandlercomponent",{"_index":708,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/ClinicHandlerComponent.html":{},"coverage.html":{}}}],["staffhelpcomponent",{"_index":371,"title":{"components/StaffHelpComponent.html":{}},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["staffinfo",{"_index":198,"title":{"interfaces/StaffInfo.html":{}},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Member.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"coverage.html":{}}}],["staffinfo.email",{"_index":1992,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["staffinfo.fname",{"_index":1990,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["staffinfo.phone",{"_index":1993,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["staffinfo.position",{"_index":1996,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["staffinfo.surname",{"_index":1991,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["staffmember",{"_index":429,"title":{"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{}},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["staffmenucomponent",{"_index":372,"title":{"components/StaffMenuComponent.html":{}},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["staffmodule",{"_index":747,"title":{"modules/StaffModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StaffModule.html":{},"modules.html":{},"overview.html":{}}}],["staffnotificationcomponent",{"_index":843,"title":{"classes/StaffNotificationComponent.html":{}},"body":{"modules/AppModule.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{},"coverage.html":{}}}],["staffprofilecomponent",{"_index":845,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"coverage.html":{}}}],["staffroutingmodule",{"_index":2491,"title":{"classes/StaffRoutingModule.html":{}},"body":{"modules/StaffModule.html":{},"classes/StaffRoutingModule.html":{},"coverage.html":{}}}],["staffsubmitsamplecomponent",{"_index":373,"title":{"components/StaffSubmitSampleComponent.html":{}},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["stafftableloading",{"_index":472,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["staffviewdatabasescomponent",{"_index":374,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"coverage.html":{},"overview.html":{}}}],["staffviewsamplescomponent",{"_index":850,"title":{"classes/StaffViewSamplesComponent.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"classes/StaffViewSamplesComponent.html":{},"coverage.html":{}}}],["started",{"_index":2848,"title":{"index.html":{}},"body":{}}],["state",{"_index":903,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["statements",{"_index":2630,"title":{},"body":{"coverage.html":{}}}],["stats",{"_index":444,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["status",{"_index":74,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserLogs.html":{}}}],["statuscode",{"_index":73,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["statusofculture",{"_index":1124,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["statustypes",{"_index":1168,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["stem",{"_index":1466,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["stems",{"_index":239,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["storage",{"_index":556,"title":{},"body":{"interfaces/AdminMember.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["stored",{"_index":554,"title":{},"body":{"interfaces/AdminMember.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"injectables/Porting.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"index.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["stores",{"_index":2390,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["storing",{"_index":1620,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["street",{"_index":173,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["street_number",{"_index":174,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["string",{"_index":24,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"injectables/FilterPipe.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["stroke",{"_index":2205,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["structured",{"_index":1941,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["stunting",{"_index":251,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["styles",{"_index":300,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["styleurls",{"_index":313,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"components/ErrorComponent.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"components/PageNotFoundComponent.html":{},"classes/PreDiagnosisComponent.html":{},"components/SampleDivComponent.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["subject",{"_index":977,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["sublocality",{"_index":1878,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["submission",{"_index":1664,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["submit",{"_index":358,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"components/ErrorComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"interfaces/POSTMember.html":{},"components/PageNotFoundComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/Species.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{}}}],["submitcmwdepositcomponent",{"_index":853,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"coverage.html":{}}}],["submitcmwdepositform",{"_index":1364,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["submitcmwdepositform(data",{"_index":1150,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["submitcmwdepositformurl",{"_index":1072,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["submitcmwrequestcomponent",{"_index":858,"title":{"classes/SubmitCmwRequestComponent.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"classes/SubmitCmwRequestComponent.html":{},"coverage.html":{}}}],["submitcmwrequestform",{"_index":1365,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{},"classes/SubmitCmwRequestComponent.html":{}}}],["submitcmwrequestform(data",{"_index":1151,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["submitcmwrequestformurl",{"_index":1074,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["submitcmwrevitalizationcomponent",{"_index":861,"title":{"classes/SubmitCmwRevitalizationComponent.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/StaffRoutingModule.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"coverage.html":{}}}],["submitcmwrevitalizationform",{"_index":1366,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["submitcmwrevitalizationform(data",{"_index":1152,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["submitcmwrevitalizationformurl",{"_index":1076,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["submitprocessedform",{"_index":1367,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["submitprocessedform(data",{"_index":1154,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["submitprocessedformurl",{"_index":1078,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["submitsampleform",{"_index":1417,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{}}}],["submitsampleform(formdetails",{"_index":1432,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["submitsampleurl",{"_index":1472,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["submitted",{"_index":1101,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"components/MemberHelpComponent.html":{},"components/OrganizationHelpComponent.html":{},"interfaces/POSTMember.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"components/StaffHelpComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{}}}],["submittedsamples",{"_index":2313,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["submitting",{"_index":1090,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["subscribing",{"_index":535,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["substrate",{"_index":1061,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["successful",{"_index":1768,"title":{},"body":{"classes/LoginComponent.html":{}}}],["successfully",{"_index":2576,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["such",{"_index":939,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["suer",{"_index":196,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["sun",{"_index":2451,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["sunday",{"_index":2151,"title":{},"body":{"interfaces/Organisation.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"miscellaneous/enumerations.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["superuser",{"_index":716,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppRoutingModule.html":{},"classes/LoginComponent.html":{},"miscellaneous/enumerations.html":{}}}],["support",{"_index":2881,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":1779,"title":{},"body":{"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{}}}],["surname",{"_index":181,"title":{},"body":{"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"interfaces/AdminMember.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"classes/HomeComponent.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Member.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"components/StaffDivComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["surname_email",{"_index":2895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["svg",{"_index":2882,"title":{},"body":{"modules.html":{}}}],["swelling",{"_index":1469,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["symptom",{"_index":250,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["symptoms",{"_index":248,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["system",{"_index":399,"title":{},"body":{"components/AdminHelpComponent.html":{},"injectables/AuthenticationService.html":{},"classes/ErrorsHandler.html":{},"classes/HomeComponent.html":{},"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["tab",{"_index":392,"title":{},"body":{"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/OrganizationHelpComponent.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["table",{"_index":483,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"injectables/FilterPipe.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"dependencies.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["tables",{"_index":1566,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2745,"title":{},"body":{"coverage.html":{}}}],["tablewidget",{"_index":2391,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["tabs",{"_index":523,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["tar",{"_index":2790,"title":{},"body":{"dependencies.html":{}}}],["taxon",{"_index":1106,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["taxon_name",{"_index":2543,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["taxonname",{"_index":1105,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/StaffMember-2.html":{},"classes/SubmitCmwRequestComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["team",{"_index":601,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"interfaces/Organisation.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"miscellaneous/enumerations.html":{}}}],["teh",{"_index":193,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["temp",{"_index":1578,"title":{},"body":{"injectables/FilterPipe.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["temp[0",{"_index":2556,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["temp[1",{"_index":2557,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["temp[2",{"_index":2558,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["temp[3",{"_index":2559,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["temp[5",{"_index":2561,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["temp[6",{"_index":2562,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["temp[8",{"_index":2564,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["temp[9",{"_index":2565,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["tempdate",{"_index":2435,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["tempdate[0",{"_index":2439,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["tempdate[1",{"_index":2452,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["tempdate[2",{"_index":2438,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["tempdate[3",{"_index":2472,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["tempdetails",{"_index":1452,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["temperature",{"_index":1131,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["template",{"_index":299,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["templateurl",{"_index":315,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"components/ErrorComponent.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"components/PageNotFoundComponent.html":{},"classes/PreDiagnosisComponent.html":{},"components/SampleDivComponent.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["templog",{"_index":125,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["temporarily",{"_index":683,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["temporary",{"_index":677,"title":{},"body":{"classes/AdminNotificationComponent.html":{}}}],["test",{"_index":906,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["tests",{"_index":2870,"title":{},"body":{"index.html":{}}}],["text",{"_index":2245,"title":{},"body":{"injectables/Porting.html":{}}}],["text.split(\"\\n",{"_index":2255,"title":{},"body":{"injectables/Porting.html":{}}}],["thats",{"_index":1393,"title":{},"body":{"injectables/DatabaseManagementService.html":{}}}],["they're",{"_index":1734,"title":{},"body":{"classes/LoginComponent.html":{}}}],["third",{"_index":506,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["this.accesslogs",{"_index":2484,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.addjwttoken(request",{"_index":2289,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["this.address",{"_index":1897,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.address.area",{"_index":1881,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.address.city",{"_index":1882,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.address.country",{"_index":1885,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.address.formatted_address",{"_index":1871,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.address.postal_code",{"_index":1886,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.address.province",{"_index":1884,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.address.street",{"_index":1877,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.address.street_number",{"_index":1875,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.addstaffform",{"_index":1299,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["this.addstaffform.controls.database_privileges",{"_index":1312,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["this.addstaffform.controls.database_privileges.value.foreach((value",{"_index":1330,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["this.addstaffform.controls.user.value.email",{"_index":1322,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["this.addstaffform.controls.user.value.fname",{"_index":1318,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["this.addstaffform.controls.user.value.surname",{"_index":1320,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["this.addstaffform.invalid",{"_index":1315,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["this.addstaffform.reset",{"_index":1341,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["this.adminusers",{"_index":1306,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["this.alldatabasenames",{"_index":1308,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["this.alldatabasenames.map",{"_index":1310,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["this.alldatabasenames[i",{"_index":1332,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["this.auth_header",{"_index":2308,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["this.authservice.getcurrentsessionvalue",{"_index":927,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/ServerErrorInterceptor.html":{}}}],["this.authservice.getcurrentsessionvalue.token",{"_index":138,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["this.authservice.getcurrentsessionvalue.user",{"_index":511,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.authservice.getcurrentsessionvalue.user.id",{"_index":1451,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/Member.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["this.authservice.getcurrentsessionvalue.user.organisation",{"_index":1449,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/Member.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["this.authservice.getcurrentuservalue",{"_index":517,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["this.authservice.login(details).subscribe((response",{"_index":1767,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.authservice.logoutuser",{"_index":557,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.authservice.updatesessionvariables(response.data",{"_index":1958,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["this.bionumericsname",{"_index":2617,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.cmwrequestform",{"_index":2542,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["this.cmwrequestform.controls.culture_number.value",{"_index":2552,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["this.cmwrequestform.controls.date_requested.value).tostring",{"_index":2554,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["this.cmwrequestform.controls.notes.value",{"_index":2569,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["this.cmwrequestform.controls.reference_number.value",{"_index":2567,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["this.cmwrequestform.controls.requestor.value",{"_index":2547,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["this.cmwrequestform.controls.taxon_name.value",{"_index":2550,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["this.cmwrequestform.reset",{"_index":2577,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["this.cmwrevitalizationform",{"_index":2607,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.cmwrevitalizationform.controls.culture_condition.value",{"_index":2619,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.cmwrevitalizationform.controls.culture_number.value",{"_index":2618,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.cmwrevitalizationform.controls.current_name.value",{"_index":2614,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.cmwrevitalizationform.controls.date_requested.value).tostring",{"_index":2624,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.cmwrevitalizationform.controls.name_bionumerics.value",{"_index":2616,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.cmwrevitalizationform.controls.reference_number.value",{"_index":2623,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.cmwrevitalizationform.controls.requestor.value",{"_index":2613,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.cmwrevitalizationform.controls.sequence.value",{"_index":2621,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.cmwrevitalizationform.reset",{"_index":2627,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.confirmpasswordinput",{"_index":571,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.contact_form",{"_index":1646,"title":{},"body":{"classes/HomeComponent.html":{}}}],["this.cookieservice.set('samesite",{"_index":730,"title":{},"body":{"components/AppComponent.html":{},"classes/HomeComponent.html":{}}}],["this.culturecollectionservice.getalldepositlogs().subscribe((response",{"_index":2344,"title":{},"body":{"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.culturecollectionservice.getallrequestlogs().subscribe((response",{"_index":2427,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.culturecollectionservice.getallrevitalizationlogs().subscribe((response",{"_index":2432,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.culturecollectionservice.submitcmwrequestform(request).subscribe((response",{"_index":2575,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["this.culturecollectionservice.submitcmwrevitalizationform(revitalization).subscribe((response",{"_index":2626,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.culturecondition",{"_index":2620,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.culturenumber",{"_index":2553,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.currentname",{"_index":2615,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.currentsession",{"_index":995,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.currentsessionsubject",{"_index":992,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.currentsessionsubject.asobservable",{"_index":996,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.currentsessionsubject.next(null",{"_index":1018,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.currentsessionsubject.next(sess",{"_index":1008,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.currentsessionsubject.value",{"_index":1012,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.currentuser",{"_index":510,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.currentuser.databases",{"_index":1029,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.currentuser.id",{"_index":2574,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.currentuserprivileges",{"_index":516,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["this.databaselogs",{"_index":2483,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.date",{"_index":2396,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.daterequested",{"_index":2566,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.datereturned",{"_index":2625,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.depositreport",{"_index":2424,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.diagnosis",{"_index":2264,"title":{},"body":{"classes/PreDiagnosisComponent.html":{}}}],["this.diagnosticclinicservice.getallsamples().subscribe((response",{"_index":1225,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["this.diagnosticclinicservice.retrieveallorganizationsamples().subscribe((response",{"_index":2175,"title":{},"body":{"classes/OrganizationViewSamplesComponent.html":{}}}],["this.diagnosticclinicservice.retrievemembersamples().subscribe((response",{"_index":2108,"title":{},"body":{"classes/MemberViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["this.diagnosticclinicservice.updatesamplesstatus(sample",{"_index":1244,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["this.dialog.open(errorcomponent",{"_index":2143,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.dialog.open(loadingcomponent",{"_index":1243,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["this.dialogref.close",{"_index":1896,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.editingsample",{"_index":1240,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["this.errorlogs",{"_index":2485,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.errorreport",{"_index":2423,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.formbuilder.group",{"_index":1220,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.forms",{"_index":1659,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["this.generaterequestreport",{"_index":2403,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.geocoder",{"_index":1837,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.geocoder.geocode",{"_index":1865,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.getaddress(this.location.latitude",{"_index":1855,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.getallstaff",{"_index":675,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.getcurrentsessionvalue.token",{"_index":1010,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.getcurrentsessionvalue.user.id",{"_index":1032,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.getcurrentsessionvalue.user.organisation",{"_index":1009,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.getcurrentuservalue",{"_index":1035,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.getdbnames",{"_index":1304,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["this.getnumberofcompletedmembersamples",{"_index":2068,"title":{},"body":{"classes/MemberDashboardComponent.html":{}}}],["this.getnumberoffabimembers",{"_index":514,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["this.getnumberoffabisamples",{"_index":515,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["this.helptab",{"_index":527,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.http.request('post",{"_index":142,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["this.http.request(method",{"_index":1022,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/Member.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["this.infotitle",{"_index":1854,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.injector.get(notificationservice",{"_index":1519,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["this.injector.get(router",{"_index":1520,"title":{},"body":{"classes/ErrorsHandler.html":{}}}],["this.iseditingsample",{"_index":1241,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["this.issatellite",{"_index":1894,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.loadalllogs",{"_index":2400,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.loaddepositforms",{"_index":2342,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["this.loadfabiuserprivileges",{"_index":1037,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.loading",{"_index":1780,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.loadnotifications",{"_index":676,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"classes/MemberDashboardComponent.html":{}}}],["this.loadrequestforms",{"_index":2343,"title":{},"body":{"classes/StaffDashboardComponent.html":{}}}],["this.location",{"_index":1898,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.location.latitude",{"_index":1848,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.location.longitude",{"_index":1850,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.loginform",{"_index":1749,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.loginform.controls.email.value",{"_index":1761,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.loginform.controls.organization.value",{"_index":1765,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.loginform.controls.password.value",{"_index":1763,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.loginform.invalid",{"_index":1759,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.logstab",{"_index":2475,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.map_type",{"_index":1892,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.maploader.load().then",{"_index":1835,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.newnotifications).subscribe((response",{"_index":2092,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["this.newnotifications.push(id",{"_index":2090,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["this.ngzone.run",{"_index":1842,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.notes",{"_index":2570,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["this.notificationloggingservice.updatefabimembernotifications(this.currentuser.id",{"_index":2091,"title":{},"body":{"classes/MemberNotificationComponent.html":{}}}],["this.notificationservie.showerrornotification(\"unauthorized",{"_index":2301,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["this.notificationservie.showerrornotification(error.error.title",{"_index":2302,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["this.notificationservie.showwarningnotification(\"incorrect",{"_index":2297,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["this.notificationstab",{"_index":525,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.numberofsamples",{"_index":544,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["this.numberofsamples.tostring",{"_index":547,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["this.organizations",{"_index":1757,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.previoususerdata.email",{"_index":1746,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.previoususerdata.organization",{"_index":1748,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.profiletab",{"_index":526,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.referencenumber",{"_index":2568,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.reportingtab",{"_index":2474,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.request_register_org",{"_index":1648,"title":{},"body":{"classes/HomeComponent.html":{}}}],["this.request_register_org.controls.admin_email.value",{"_index":1681,"title":{},"body":{"classes/HomeComponent.html":{}}}],["this.request_register_org.controls.admin_name.value",{"_index":1677,"title":{},"body":{"classes/HomeComponent.html":{}}}],["this.request_register_org.controls.admin_phone.value",{"_index":1683,"title":{},"body":{"classes/HomeComponent.html":{}}}],["this.request_register_org.controls.admin_surname.value",{"_index":1679,"title":{},"body":{"classes/HomeComponent.html":{}}}],["this.request_register_org.controls.organization_name.value",{"_index":1675,"title":{},"body":{"classes/HomeComponent.html":{}}}],["this.request_register_org.invalid",{"_index":1672,"title":{},"body":{"classes/HomeComponent.html":{}}}],["this.requestlogs",{"_index":2477,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.requestor",{"_index":2548,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.requestreport",{"_index":2425,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.revitalizationreport",{"_index":2426,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.router.navigate",{"_index":932,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.router.navigate(['/admin",{"_index":1773,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.router.navigate(['/clinic",{"_index":1774,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.router.navigate(['/login",{"_index":558,"title":{},"body":{"interfaces/AdminMember.html":{},"guards/AuthenticationGuard.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.router.navigate(['/member",{"_index":1776,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.router.navigate(['/organization",{"_index":1775,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.router.navigate(['/staff",{"_index":1777,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.samplefields",{"_index":1239,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["this.samplefields.push(obj",{"_index":1238,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["this.samples",{"_index":542,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["this.samples.length",{"_index":545,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["this.samplestats",{"_index":546,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["this.sampletableloading",{"_index":1230,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["this.savebtn",{"_index":568,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.scroll",{"_index":505,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["this.selectedsampledata",{"_index":1233,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["this.sequence",{"_index":2622,"title":{},"body":{"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.session",{"_index":2304,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["this.session.token",{"_index":2305,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["this.setcurrentlocation",{"_index":1836,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["this.setsessionvariables(response.token",{"_index":1025,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.setuserlogtable",{"_index":2404,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.snackbar.open(\"clinic",{"_index":1337,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["this.snackbar.open(\"cmw",{"_index":2578,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.snackbar.open(\"could",{"_index":2579,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["this.snackbar.open(\"successfully",{"_index":1689,"title":{},"body":{"classes/HomeComponent.html":{}}}],["this.snackbar.open(\"user",{"_index":1778,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.snackbar.open(`welcome",{"_index":1769,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.submitted",{"_index":1314,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["this.taxonname",{"_index":2551,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{}}}],["this.toastr.error(message",{"_index":2140,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.toastr.success(message",{"_index":2142,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.toastr.warning(message",{"_index":2141,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.toggle_status",{"_index":1224,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["this.updatesamplestatusform",{"_index":1219,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["this.updatesamplestatusform.controls.sample_status.value).subscribe((response",{"_index":1245,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["this.userlogs",{"_index":2478,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.usermanagementservice.addstaffmember(staff_details",{"_index":1334,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["this.usermanagementservice.getallfabistaff().subscribe((response",{"_index":536,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["this.usermanagementservice.getdatabasenames().subscribe((response",{"_index":1307,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["this.usermanagementservice.getfabiadmins().subscribe((response",{"_index":1305,"title":{},"body":{"classes/ClinicHandlerComponent.html":{}}}],["this.usermanagementservice.sendrequesttoregisterorganization(org_details).subscribe((response",{"_index":1688,"title":{},"body":{"classes/HomeComponent.html":{}}}],["this.usermanagementservicee.getallorganizations().subscribe((response",{"_index":1756,"title":{},"body":{"classes/LoginComponent.html":{}}}],["this.valid",{"_index":1316,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["this.viewsamples",{"_index":1223,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["this.zoom",{"_index":1852,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["throughout",{"_index":1567,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["throught",{"_index":1829,"title":{},"body":{"classes/MapsWindowComponent.html":{},"miscellaneous/variables.html":{}}}],["throwerror",{"_index":2282,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["throwerror(error",{"_index":2298,"title":{},"body":{"classes/ServerErrorInterceptor.html":{}}}],["thu",{"_index":2445,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["thur",{"_index":2446,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["thurs",{"_index":2447,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["thursday",{"_index":2149,"title":{},"body":{"interfaces/Organisation.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["time",{"_index":915,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["title",{"_index":215,"title":{},"body":{"interfaces/Address.html":{},"components/AppComponent.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"classes/HomeComponent.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"injectables/NotificationService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["toaster",{"_index":1705,"title":{},"body":{"classes/LoginComponent.html":{}}}],["toastr",{"_index":768,"title":{},"body":{"modules/AppModule.html":{},"classes/LoginComponent.html":{},"injectables/NotificationService.html":{},"dependencies.html":{}}}],["toastrmodule",{"_index":767,"title":{},"body":{"modules/AppModule.html":{}}}],["toastrmodule.forroot",{"_index":873,"title":{},"body":{"modules/AppModule.html":{}}}],["toastrservice",{"_index":1706,"title":{},"body":{"classes/LoginComponent.html":{},"injectables/NotificationService.html":{}}}],["toggle",{"_index":559,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["toggle_status",{"_index":1169,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["togglehelptab",{"_index":572,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["togglelogsection",{"_index":2481,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["togglenotificaitonstab",{"_index":1173,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["togglenotificationstab",{"_index":563,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["toggleprofiletab",{"_index":564,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["togglereportsection",{"_index":2473,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["token",{"_index":970,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/LoginComponent.html":{},"classes/ServerErrorInterceptor.html":{}}}],["tokendetails",{"_index":969,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["total",{"_index":452,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"classes/StaffNotificationComponent.html":{}}}],["transform",{"_index":1563,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["transform(items",{"_index":1564,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["tree",{"_index":302,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"components/AppComponent.html":{},"components/ErrorComponent.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"components/StaffSubmitSampleComponent.html":{}}}],["true",{"_index":140,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"modules/ErrorsModule.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":2580,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["ts",{"_index":2833,"title":{},"body":{"dependencies.html":{}}}],["tslib",{"_index":2793,"title":{},"body":{"dependencies.html":{}}}],["tslint",{"_index":2836,"title":{},"body":{"dependencies.html":{}}}],["tu",{"_index":2442,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["tue",{"_index":2441,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["tues",{"_index":2443,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["tuesday",{"_index":2168,"title":{},"body":{"modules/OrganizationModule.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["twigs",{"_index":241,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["type",{"_index":22,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"components/AdminDivComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DatabaseManagementService.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/ErrorsHandler.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"interfaces/Location.html":{},"injectables/LocationService.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"injectables/NotificationService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"components/SampleDivComponent.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":205,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["types/angular",{"_index":2803,"title":{},"body":{"dependencies.html":{}}}],["types/datatables.net",{"_index":2805,"title":{},"body":{"dependencies.html":{}}}],["types/googlemaps",{"_index":2807,"title":{},"body":{"dependencies.html":{}}}],["types/jasmine",{"_index":2809,"title":{},"body":{"dependencies.html":{}}}],["types/jasminewd2",{"_index":2811,"title":{},"body":{"dependencies.html":{}}}],["types/jquery",{"_index":2813,"title":{},"body":{"dependencies.html":{}}}],["types/mocha",{"_index":2759,"title":{},"body":{"dependencies.html":{}}}],["types/node",{"_index":2815,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":2838,"title":{},"body":{"dependencies.html":{}}}],["typestatus",{"_index":1062,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["undefined",{"_index":1847,"title":{},"body":{"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{}}}],["unique",{"_index":1943,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["unit",{"_index":2869,"title":{},"body":{"index.html":{}}}],["university",{"_index":611,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"interfaces/Organisation.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"miscellaneous/enumerations.html":{}}}],["up",{"_index":214,"title":{},"body":{"interfaces/Address.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["update",{"_index":94,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"components/MemberHelpComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["updated",{"_index":154,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["updatedepositform",{"_index":1144,"title":{"interfaces/UpdateDepositForm.html":{}},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{}}}],["updatedepositformstatus",{"_index":1368,"title":{},"body":{"injectables/CultureCollectionAPIService.html":{}}}],["updatedepositformstatus(data",{"_index":1155,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["updatedepositformstatusurl",{"_index":1080,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updatefabimemberdetails(mail",{"_index":1956,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["updatefabimembernotifications",{"_index":2116,"title":{},"body":{"injectables/NotificationLoggingService.html":{}}}],["updatefabimembernotifications(id",{"_index":155,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{}}}],["updatemember",{"_index":1947,"title":{"interfaces/UpdateMember.html":{}},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"coverage.html":{}}}],["updateorganization",{"_index":1949,"title":{"interfaces/UpdateOrganization.html":{}},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"coverage.html":{}}}],["updateorganizationmemberdetails(mail",{"_index":1959,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["updateorganizationmemberdetailsurl",{"_index":1939,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateorganizationmemberpassword(oldpassword",{"_index":2029,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["updateorganizationmemberpasswordurl",{"_index":2030,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["updatesamplesstatus",{"_index":1418,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{}}}],["updatesamplesstatus(sample",{"_index":1437,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["updatesamplestatus",{"_index":1174,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["updatesamplestatus(sample",{"_index":1208,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["updatesamplestatusform",{"_index":1170,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["updatesamplestatusurl",{"_index":1477,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["updatesessionvariables",{"_index":951,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["updatesessionvariables(user",{"_index":973,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["updatestaffmemberdetailsurl",{"_index":1937,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updatestaffpassword(oldpassword",{"_index":2024,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["updatestaffpasswordurl",{"_index":2025,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["updateuserlogsurl",{"_index":45,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/UserLogs.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updating",{"_index":95,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserLogs.html":{}}}],["updatingsamplestatus",{"_index":1175,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["updatingsamplestatus(sample",{"_index":1210,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{}}}],["uppercase",{"_index":1720,"title":{},"body":{"classes/LoginComponent.html":{},"miscellaneous/variables.html":{}}}],["url",{"_index":129,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["url's",{"_index":38,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"interfaces/Member.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{}}}],["urlsegment",{"_index":923,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["urltree",{"_index":918,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["use",{"_index":528,"title":{},"body":{"interfaces/AdminMember.html":{},"modules/MaterialModule.html":{},"classes/MemberDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"index.html":{}}}],["useclass",{"_index":1556,"title":{},"body":{"modules/ErrorsModule.html":{}}}],["used",{"_index":496,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"injectables/DiagnosticClinicAPIService.html":{},"injectables/FilterPipe.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"injectables/Porting.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":23,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DatabasePrivilege.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"injectables/FilterPipe.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/SampleFormData.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["user's",{"_index":99,"title":{},"body":{"interfaces/AccessLogs.html":{},"interfaces/Address.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Logs.html":{},"classes/MemberDashboardComponent.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UserLogs.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["user.email",{"_index":1001,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.fname",{"_index":999,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.id",{"_index":998,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.surname",{"_index":1000,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.usertype",{"_index":1002,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user1",{"_index":2354,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["user2",{"_index":2355,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["userid",{"_index":93,"title":{},"body":{"interfaces/AccessLogs.html":{},"classes/AdminNotificationComponent.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserLogs.html":{}}}],["userloginterface",{"_index":2353,"title":{"interfaces/userLogInterface.html":{}},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["userlogs",{"_index":48,"title":{"interfaces/UserLogs.html":{}},"body":{"interfaces/AccessLogs.html":{},"classes/AdminNotificationComponent.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["userlogsarray",{"_index":2373,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["usermanagementapiservice",{"_index":427,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/accessLogInterface.html":{},"coverage.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["usermanagementservice",{"_index":488,"title":{},"body":{"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["usermanagementservicee",{"_index":1707,"title":{},"body":{"classes/LoginComponent.html":{}}}],["usermanagementurl",{"_index":2909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userprivileges",{"_index":210,"title":{"interfaces/UserPrivileges.html":{}},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"coverage.html":{}}}],["users",{"_index":943,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["usersdetails",{"_index":997,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["userstats",{"_index":446,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["usertype",{"_index":189,"title":{"interfaces/UserType.html":{}},"body":{"interfaces/Address.html":{},"classes/ClinicHandlerComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"classes/LoginComponent.html":{},"interfaces/LoginInfo.html":{},"interfaces/Member.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{},"coverage.html":{}}}],["usertypes",{"_index":1254,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"classes/LoginComponent.html":{}}}],["using",{"_index":1961,"title":{},"body":{"interfaces/Member.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{}}}],["vaidators",{"_index":1644,"title":{},"body":{"classes/HomeComponent.html":{}}}],["val.action.tolocalelowercase().includes(value",{"_index":1591,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.code.tolocalelowercase().includes(value",{"_index":1596,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.collectedby.tolocalelowercase().includes(value",{"_index":1587,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.culturenumber.tolocalelowercase().includes(value",{"_index":1581,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.date.tolocalelowercase().includes(value",{"_index":1592,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.datecollected.tolocalelowercase().includes(value",{"_index":1588,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.daterequested.tolocalelowercase().includes(value",{"_index":1584,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.datesubmitted.tolocalelowercase().includes(value",{"_index":1585,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.details.tolocalelowercase().includes(value",{"_index":1595,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.email.tolocalelowercase().includes(value",{"_index":1599,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.fname.tolocalelowercase().includes(value",{"_index":1597,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.identifiedby.tolocalelowercase().includes(value",{"_index":1590,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.isolatedby.tolocalelowercase().includes(value",{"_index":1589,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.name.tolocalelowercase().includes(value",{"_index":1586,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.orgname.tolocalelowercase().includes(value",{"_index":1601,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.referencenumber.tolocalelowercase().includes(value",{"_index":1583,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.requestor.tolocalelowercase().includes(value",{"_index":1580,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.status.tolocalelowercase().includes(value",{"_index":1603,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.surname.tolocalelowercase().includes(value",{"_index":1598,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.taxonname.tolocalelowercase().includes(value",{"_index":1582,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.tolocalelowercase().includes(value",{"_index":1600,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.user.tolocalelowercase().includes(value",{"_index":1579,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.user1.tolocalelowercase().includes(value",{"_index":1593,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.user2.tolocalelowercase().includes(value",{"_index":1594,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["val.userid.tolocalelowercase().includes(value",{"_index":1602,"title":{},"body":{"injectables/FilterPipe.html":{}}}],["valid",{"_index":1255,"title":{},"body":{"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"miscellaneous/variables.html":{}}}],["validated",{"_index":1671,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["validation",{"_index":1138,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["validators",{"_index":1214,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["validators.compose",{"_index":1649,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["validators.minlength(8",{"_index":1750,"title":{},"body":{"classes/LoginComponent.html":{}}}],["validators.pattern",{"_index":1655,"title":{},"body":{"classes/HomeComponent.html":{}}}],["validators.pattern('^[a",{"_index":1650,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["validators.required",{"_index":1222,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["validators.ts",{"_index":2700,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":640,"title":{},"body":{"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/FilterPipe.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"injectables/Porting.html":{},"classes/ServerErrorInterceptor.html":{},"classes/StaffDashboardComponent.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":942,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["var",{"_index":124,"title":{},"body":{"interfaces/AccessLogs.html":{},"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicHandlerComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"interfaces/DiagnosticClinicLogs.html":{},"components/ErrorComponent.html":{},"interfaces/ErrorLogs.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationLoggingService.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"components/PageNotFoundComponent.html":{},"injectables/Porting.html":{},"interfaces/ProcessedForm.html":{},"components/SampleDivComponent.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["variable",{"_index":338,"title":{},"body":{"components/AdminDivComponent.html":{},"components/StaffDivComponent.html":{},"coverage.html":{}}}],["variables",{"_index":37,"title":{"miscellaneous/variables.html":{}},"body":{"interfaces/AccessLogs.html":{},"interfaces/AdminMember.html":{},"injectables/AuthenticationService.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"interfaces/Logs.html":{},"classes/MapsWindowComponent.html":{},"interfaces/Member.html":{},"classes/MemberDashboardComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"injectables/NotificationLoggingService.html":{},"classes/OrganizationViewSamplesComponent.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTMember-1.html":{},"interfaces/POSTOrganization.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUpdateMember.html":{},"interfaces/POSTUpdateOrganization.html":{},"interfaces/POSTUser.html":{},"injectables/Porting.html":{},"classes/PreDiagnosisComponent.html":{},"interfaces/ProcessedForm.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffNotificationComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UpdateMember.html":{},"interfaces/UpdateOrganization.html":{},"interfaces/UserLogs.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{},"miscellaneous/variables.html":{}}}],["vector",{"_index":1063,"title":{},"body":{"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/ProcessedForm.html":{},"interfaces/UpdateDepositForm.html":{}}}],["verify",{"_index":1845,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["version",{"_index":2850,"title":{},"body":{"index.html":{}}}],["via",{"_index":2872,"title":{},"body":{"index.html":{}}}],["view",{"_index":375,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"classes/AdminRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"components/ErrorComponent.html":{},"injectables/FilterPipe.html":{},"components/MemberHelpComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"components/OrganizationHelpComponent.html":{},"classes/OrganizationMemberRoutingModule.html":{},"components/OrganizationMenuComponent.html":{},"classes/OrganizationRoutingModule.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SampleDivComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"components/StaffMenuComponent.html":{},"classes/StaffRoutingModule.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"coverage.html":{}}}],["viewed",{"_index":2072,"title":{},"body":{"components/MemberHelpComponent.html":{},"components/OrganizationHelpComponent.html":{},"components/StaffHelpComponent.html":{}}}],["viewformscomponent",{"_index":710,"title":{},"body":{"classes/AdminRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"coverage.html":{}}}],["viewsamples",{"_index":1176,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["void",{"_index":325,"title":{},"body":{"components/AdminDivComponent.html":{},"components/AdminHelpComponent.html":{},"interfaces/AdminMember.html":{},"classes/AdminMenuComponent.html":{},"classes/AdminNotificationComponent.html":{},"components/AppComponent.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"components/ErrorComponent.html":{},"classes/ErrorsHandler.html":{},"classes/HomeComponent.html":{},"classes/LoadingComponent.html":{},"classes/LoginComponent.html":{},"classes/MapsWindowComponent.html":{},"classes/MemberDashboardComponent.html":{},"components/MemberHelpComponent.html":{},"classes/MemberMenuComponent.html":{},"classes/MemberNotificationComponent.html":{},"components/MemberSubmitSampleComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"components/NotificationDivComponent.html":{},"injectables/NotificationService.html":{},"components/OrganizationHelpComponent.html":{},"components/OrganizationMenuComponent.html":{},"components/OrganizationSubmitSampleComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"components/PageNotFoundComponent.html":{},"classes/PreDiagnosisComponent.html":{},"components/SampleDivComponent.html":{},"classes/StaffDashboardComponent.html":{},"components/StaffDivComponent.html":{},"components/StaffHelpComponent.html":{},"interfaces/StaffMember-1.html":{},"components/StaffMenuComponent.html":{},"classes/StaffNotificationComponent.html":{},"components/StaffSubmitSampleComponent.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["want",{"_index":1656,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{},"components/PageNotFoundComponent.html":{}}}],["water",{"_index":245,"title":{},"body":{"interfaces/Address.html":{},"interfaces/CMWDeposit.html":{},"interfaces/CMWRequest.html":{},"interfaces/CMWRevitalization.html":{},"interfaces/Confirm.html":{},"injectables/CultureCollectionAPIService.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/ProcessedForm.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UpdateDepositForm.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["weather",{"_index":277,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["weather_disturbances",{"_index":276,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["weather_prior",{"_index":279,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["web",{"_index":551,"title":{},"body":{"interfaces/AdminMember.html":{},"modules/AdminModule.html":{},"components/AppComponent.html":{},"injectables/AuthenticationService.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"classes/ClinicHandlerComponent.html":{},"classes/CmwMenuComponent.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"classes/MemberViewSamplesComponent.html":{},"interfaces/Organisation.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffMember-1.html":{},"interfaces/StaffMember-2.html":{},"classes/StaffViewSamplesComponent.html":{},"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"miscellaneous/enumerations.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["web\\src\\app\\_errors\\errors",{"_index":1561,"title":{},"body":{"modules/ErrorsRoutingModule.html":{}}}],["web\\src\\app\\admin\\admin.module.ts",{"_index":595,"title":{},"body":{"modules/AdminModule.html":{}}}],["web\\src\\app\\errors\\errors.module.ts",{"_index":1543,"title":{},"body":{"modules/ErrorsModule.html":{}}}],["web\\src\\app\\organization",{"_index":2158,"title":{},"body":{"modules/OrganizationMemberModule.html":{}}}],["web\\src\\app\\organization\\organization.module.ts",{"_index":2167,"title":{},"body":{"modules/OrganizationModule.html":{}}}],["web\\src\\app_interfaces\\role.ts",{"_index":2845,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["wed",{"_index":2444,"title":{},"body":{"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["wednesday",{"_index":1546,"title":{},"body":{"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"modules/OrganizationMemberModule.html":{},"interfaces/StaffMember-2.html":{},"interfaces/accessLogInterface.html":{},"interfaces/databaseLogInterface.html":{},"interfaces/depositReportInterface.html":{},"interfaces/errorLogInterface.html":{},"interfaces/requestReportInterface.html":{},"interfaces/revitalizationReportInterface.html":{},"interfaces/userLogInterface.html":{}}}],["well",{"_index":1200,"title":{},"body":{"classes/ClinicAdminViewSamplesComponent.html":{},"classes/MemberViewSamplesComponent.html":{},"classes/OrganizationViewSamplesComponent.html":{},"classes/StaffViewSamplesComponent.html":{}}}],["whether",{"_index":287,"title":{},"body":{"interfaces/Address.html":{},"classes/ClinicAdminViewSamplesComponent.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"classes/ErrorsHandler.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"classes/StaffDashboardComponent.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["whose",{"_index":147,"title":{},"body":{"interfaces/AccessLogs.html":{},"injectables/AuthenticationService.html":{},"interfaces/DatabaseManagementLogs.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/DiagnosticClinicLogs.html":{},"interfaces/ErrorLogs.html":{},"interfaces/Logs.html":{},"injectables/NotificationLoggingService.html":{},"interfaces/POSTLog.html":{},"interfaces/POSTMember.html":{},"interfaces/POSTUpdate.html":{},"interfaces/POSTUser.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{},"classes/StaffNotificationComponent.html":{},"interfaces/UserLogs.html":{}}}],["width",{"_index":2223,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["wilt",{"_index":249,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["wilted",{"_index":1464,"title":{},"body":{"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["window",{"_index":1831,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.addeventlistener('scroll",{"_index":504,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["window.alert('geocoder",{"_index":1889,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.alert('no",{"_index":1887,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.component",{"_index":795,"title":{},"body":{"modules/AppModule.html":{}}}],["window.component.html",{"_index":1832,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.component.scss",{"_index":1833,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.component.ts",{"_index":1782,"title":{},"body":{"classes/MapsWindowComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["window.component.ts:117",{"_index":1826,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.component.ts:142",{"_index":1824,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.component.ts:158",{"_index":1817,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.component.ts:212",{"_index":1814,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.component.ts:234",{"_index":1819,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.component.ts:251",{"_index":1810,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.component.ts:36",{"_index":1806,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.component.ts:38",{"_index":1800,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.component.ts:40",{"_index":1809,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.component.ts:41",{"_index":1802,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.component.ts:43",{"_index":1808,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.component.ts:44",{"_index":1801,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.component.ts:45",{"_index":1804,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.component.ts:48",{"_index":1797,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.component.ts:77",{"_index":1818,"title":{},"body":{"classes/MapsWindowComponent.html":{}}}],["window.removeeventlistener('scroll",{"_index":519,"title":{},"body":{"interfaces/AdminMember.html":{},"interfaces/StaffMember-1.html":{}}}],["window/maps",{"_index":794,"title":{},"body":{"modules/AppModule.html":{},"classes/MapsWindowComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["within",{"_index":401,"title":{},"body":{"components/AdminHelpComponent.html":{},"injectables/DiagnosticClinicAPIService.html":{},"interfaces/POSTMember.html":{},"interfaces/Sample.html":{},"interfaces/Species.html":{}}}],["wood",{"_index":257,"title":{},"body":{"interfaces/Address.html":{},"interfaces/Confirm.html":{},"interfaces/DatabasePrivilege.html":{},"interfaces/Location.html":{},"interfaces/LoginInfo.html":{},"interfaces/Organisation.html":{},"interfaces/OrganisationAdmin.html":{},"interfaces/OrganisationMember.html":{},"interfaces/PrivilegeTypes.html":{},"interfaces/SampleFormData.html":{},"interfaces/StaffInfo.html":{},"interfaces/UserPrivileges.html":{},"interfaces/UserType.html":{}}}],["woops",{"_index":2232,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["year",{"_index":2555,"title":{},"body":{"classes/SubmitCmwRequestComponent.html":{},"classes/SubmitCmwRevitalizationComponent.html":{}}}],["year\\cos301\\capstone\\git",{"_index":592,"title":{},"body":{"modules/AdminModule.html":{},"modules/ErrorsModule.html":{},"modules/ErrorsRoutingModule.html":{},"modules/OrganizationMemberModule.html":{},"modules/OrganizationModule.html":{},"miscellaneous/enumerations.html":{}}}],["yes",{"_index":2135,"title":{},"body":{"injectables/NotificationService.html":{}}}],["you’re",{"_index":2233,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["z0",{"_index":1652,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["za",{"_index":1651,"title":{},"body":{"classes/HomeComponent.html":{},"classes/LoginComponent.html":{}}}],["zone.js",{"_index":2795,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":749,"title":{},"body":{"modules/AppModule.html":{},"modules/ErrorsModule.html":{},"classes/MapsWindowComponent.html":{},"modules/OrganizationMemberModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccessLogs.html":{"url":"interfaces/AccessLogs.html","title":"interface - AccessLogs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AccessLogs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/notification-logging.service.ts\n        \n\n            \n                Description\n            \n            \n                //Object for defining the JSON object containing the access logs\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Action\n                                \n                                \n                                        Date\n                                \n                                \n                                        Details\n                                \n                                \n                                        ID\n                                \n                                \n                                        LogID\n                                \n                                \n                                        Type\n                                \n                                \n                                        User\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Action\n                                    \n                                \n                                \n                                    \n                                        Action:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Date\n                                    \n                                \n                                \n                                    \n                                        Date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Details\n                                    \n                                \n                                \n                                    \n                                        Details:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ID\n                                    \n                                \n                                \n                                    \n                                        ID:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        LogID\n                                    \n                                \n                                \n                                    \n                                        LogID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Type\n                                    \n                                \n                                \n                                    \n                                        Type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        User\n                                    \n                                \n                                \n                                    \n                                        User:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport { AuthenticationService } from './authentication.service';\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllLogsURL = `${config.logsURL}/getLogs`;\nconst getUserLogsURL = `${config.logsURL}/getUserLogs`;\nconst updateUserLogsURL = `${config.logsURL}/deleteUserLogs`;\n\n///////////////////////////////////////////////////////////////////////\n//                           USER LOGS\n/**\n *  //Object for defining the JSON object containing the user logs\n *\n * @export\n * @interface UserLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface UserLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: USER\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The user on which the action was performed (their ID)\n  User: string;           //The user who performed the action (their ID)\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DATABSE MANAGEMENT LOGS\n/**\n *  //Object for defining the JSON object containing the database \n *  management logs\n *\n * @export\n * @interface DatabaseManagementLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DatabaseManagementLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: DBML (Database Management Log)\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The name of the database that the action was performed on\n  User: string;           //The user who performed the action\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;            //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ACCESS LOGS\n/**\n *  //Object for defining the JSON object containing the access logs\n *\n * @export\n * @interface AccessLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface AccessLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ACCL\n  Action: string;         //The action performed: ACCESS\n  Date: string;           //The date that the action was performed\n  Details: string;        //Description of what was accessed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ERROR LOGS\n/**\n *  //Object for defining the JSON object containing the error logs\n *\n * @export\n * @interface ErrorLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface ErrorLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ERRL\n  Date: string;           //The date that the action was performed\n  StatusCode: string;     //The status code of the error that occured\n  Details: string;        //Description of the error\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DIAGNOSTIC CLINIC LOGS\n/**\n *  //Object for defining the JSON object containing the diagnostic \n *  clinic logs\n *\n * @export\n * @interface DiagnosticClinicLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DiagnosticClinicLogs {\n  Type: string;           //The type of the log: DGCL\n  Date: string;           //The date that the action was performed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                              POST LOG\n/**\n *  //Object for defining the JSON object for posting log requests\n *\n * @export\n * @interface POSTLog\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTLog {\n  Log: Logs;              //The array of logs to post to the API service\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               LOGS\n/**\n *  //Object for defining the JSON object for the logs\n *\n * @export\n * @interface Logs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface Logs {\n  type: string;           //The type of the log\n  before: string;         //The before date\n  after: string;          //The after date\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST USER\n/**\n *  //Object for defining the JSON object to be sent when requesting \n *  the logs belonging to a member\n *\n * @export\n * @interface POSTUser\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUser {\n  userID: string;         //The ID of the user\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST UPDATE\n/**\n *  //Object for defining the JSON object to be sent when updating \n *  to logs belonging to a user\n *\n * @export\n * @interface POSTUpdate\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUpdate {\n  userID: string;         //The ID of the user\n  logIDs: string[];       //The logs to be removed from the user's profile\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class NotificationLoggingService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of NotificationLoggingService.\n  * \n  * @param {HttpClient} http For making calls to the API\n  * \n  * @memberof NotificationLoggingService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       GET ALL USER LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'USER'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllUserLogs() {\n    var tempLog: Logs = { type: 'USER', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                 GET ALL DATABASE MANAGEMENT LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'DBML'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllDatabaseManagementLogs() {\n    var tempLog: Logs = { type: 'DBML', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL ACCESS LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ACCL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllAccessLogs() {\n    var tempLog: Logs = { type: 'ACCL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GET ALL ERROR LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ERRL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllErrorLogs() {\n    var tempLog: Logs = { type: 'ERRL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET USER LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs for a specific user.\n   *\n   * @param {string} userID The id number of the user whose logs need to be feteched for the notifications.\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserLogs(id: string) {\n    var data: POSTUser = { userID: id };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getUserLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE FABI MEMBER NOTIFICATIONS\n  /**\n   * Method that sends a request to the API to update the notifications associated with a specific user.\n   * \n   * @param {string} id The ID of the user whose notifications need to be updated\n   * @param {string[]} notifications The notifications to be removed from the user's profile\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateFABIMemberNotifications(id: string, notifications: string[]) {\n    var postData: POSTUpdate = { userID: id, logIDs: notifications };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', updateUserLogsURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Address.html":{"url":"interfaces/Address.html","title":"interface - Address","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_interfaces/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Defines a Address object\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        area\n                                \n                                \n                                        city\n                                \n                                \n                                        country\n                                \n                                \n                                            Optional\n                                        estate\n                                \n                                \n                                        formatted_address\n                                \n                                \n                                            Optional\n                                        postal_code\n                                \n                                \n                                        province\n                                \n                                \n                                        street\n                                \n                                \n                                            Optional\n                                        street_number\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        area\n                                    \n                                \n                                \n                                    \n                                        area:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        city\n                                    \n                                \n                                \n                                    \n                                        city:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                    \n                                \n                                \n                                    \n                                        country:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        estate\n                                    \n                                \n                                \n                                    \n                                        estate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        formatted_address\n                                    \n                                \n                                \n                                    \n                                        formatted_address:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postal_code\n                                    \n                                \n                                \n                                    \n                                        postal_code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        province\n                                    \n                                \n                                \n                                    \n                                        province:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        street\n                                    \n                                \n                                \n                                    \n                                        street:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        street_number\n                                    \n                                \n                                \n                                    \n                                        street_number:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Organisation {\n  ID?: string;                                //The id of Organisation \n  orgName: string;                            //The name of Organisation\n  admin?: OrganisationAdmin;                  //The admin of Organisation\n}\n\n\n/////////////////////////////////////////////////////\n//              ORGANIZATION ADMIN\n/**\n * Defines an Admin of an Organisation\n *\n * @export\n * @interface OrganisationAdmin\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationAdmin {\n  fname: string;                              //The first name of Admin\n  surname: string;                            //The surname of Admin\n  email: string;                              //The email of Admin\n  phone?: number;                             //The phone number of Admin\n  password?: string;                          //The passsword of Admin\n}\n\n\n/////////////////////////////////////////////////////\n//            ORGANIZATION MEMBER\n/**\n * Defines a Organisation's Member object\n *\n * @export\n * @interface MemberInfo\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationMember {\n  id?: string,                                  //The id of the Member\n  fname: string,                                //The first name of Member\n  surname: string,                              //The surname of Member\n  email: string,                                //The email of Member\n  phone?: number;                               //The phone number of Member\n  password?: string                             //The password of Member\n}\n\n\n/////////////////////////////////////////////////////\n//                  USER TYPE\n/**\n * Defines a User Type object\n *\n * @export\n * @interface UserType\n */\n/////////////////////////////////////////////////////\nexport interface UserType {\n  ID: number;                                 //The id of the User Type\n  Name: string;                               //The name of the User Type\n}\n\n\n/////////////////////////////////////////////////////\n//                LOGIN INFO\n/**\n * Defines the User's Login Information\n *\n * @export\n * @interface LoginInfo\n */\n/////////////////////////////////////////////////////\nexport interface LoginInfo {\n  orgName: string;                            //The organization fo teh user currently logged in\n  email: string;                              //The email of the suer currently logged in\n  password: string;                           //The password of the user currently logged in\n}\n\n\n/////////////////////////////////////////////////////\n//                 STAFF INFO\n/**\n * Defines a FABI Staff Member object\n *\n * @export\n * @interface StaffInfo\n */\n/////////////////////////////////////////////////////\nexport interface StaffInfo {\n  ID?: number,                                  //The id number of the staff member\n  fname: string                                 //The first name of the staff member\n  surname: string,                              //The surname of the staff member\n  email: string,                                //The email address fo the staff member\n  phone?: number,                               //The phone number of the staff member\n  position?: string,                            //The positions of the staff member\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            DATABASE PRIVILEGE\n/**\n * Defines a DatabasePrivilege object\n *\n * @export\n * @interface DatabasePrivilege\n */\n/////////////////////////////////////////////////////\nexport interface DatabasePrivilege {\n  name: string,                                 //The database's name\n  privileges: string[]                          //The privileges for the database                          \n}\n\n\n/////////////////////////////////////////////////////\n//                PRIVILEGE TYPES\n/**\n * Defines a PrivilegeTypes object\n *\n * @export\n * @interface PrivilegeTypes\n */\n/////////////////////////////////////////////////////\nexport interface PrivilegeTypes {\n  create: boolean,                              //The create privilege\n  retrieve: boolean,                            //The retrieve privilege\n  update: boolean,                              //The update privilege\n  delete: boolean                               //The delete privilege\n}\n\n\n/////////////////////////////////////////////////////\n//              USER'S PRIVILEGES\n/**\n * Defines a UserPrivileges object\n *\n * @export\n * @interface UserPrivileges\n */\n/////////////////////////////////////////////////////\nexport interface UserPrivileges {\n  databases?: DatabasePrivilege[]               //The database privileges for a database\n}\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            CONFIRM (for confirm pop-up)\n/**\n * Defines a Confirm object\n *\n * @export\n * @interface Confirm\n */\n/////////////////////////////////////////////////////\nexport interface Confirm {\n  title: string,                                //The confirm title\n  message: string,                              //The confirm message\n  info: string,                                 //The confirm information\n  cancel: string,                               //If it has been canceled or not\n  confirm: string                               //If it has been confirmed or not\n}\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  SAMPLE FORM\n/**\n * Defines a SampleFormData object\n *\n * @export\n * @interface SampleFormData\n */\n/////////////////////////////////////////////////////\nexport interface SampleFormData {\n  // Sample Details\n  sample_details: {\n    plant_species: string,                 //The species of the sample\n    plant_genus: string                    //The genus of the sample\n    num_samples: number,                   //The number of samples\n    date_collected: Date,                  //The date that the sample was collected\n    date_sent: Date,                       //The date that the sample was sent\n  }\n\n  // Plantation Details\n  plantation_details: {\n    street: string,                        //The street name\n    area: string,                          //The area\n    city: string,                          //The city \n    farm: string,                          //The farm name\n    province: string,                      //The province\n    gps: string,                           //Sample GPS coordinates\n  }\n\n  // Type of Sample\n  types: string[],\n  // types: {\n  //   soil: boolean,                     //Soil sample type\n  //   stems: boolean,                    //Stems sample type\n  //   roots: boolean,                    //Roots sample type\n  //   twigs: boolean,                    //Twigs sample type\n  //   leaves: boolean,                   //Leaves sample type\n  //   seedlings: boolean,                //Seedlings sample type\n  //   media: boolean,                    //Media sample type\n  //   water: boolean,                    //Water sample type\n  //   insect: boolean,                   //Insect sample type\n  //   nuts: boolean,                     //Nuts sample type\n  //   other: boolean,                    //Other type of sample (if any)\n  // }\n\n  // Symptoms\n  symptoms: {\n    wilt: boolean,                         //Wilt symptom\n    stunting: boolean,                     //Stunting symptom\n    leafspot: boolean,                     //Leafspot symptom\n    rootrot: boolean,                      //Rootrot symptom\n    dieback: boolean,                      //Dieback symptom\n    cankers: boolean,                      //Cankers symptom \n    death: boolean,                        //Death symptom \n    wood: boolean,                         //Wood symptom\n    other: boolean,                        //Other symptoms (if any)\n  }\n\n  // Distribution of Symptoms\n  distribution: {\n    localized: boolean,               //The localized distribution\n    scattered: boolean,                //The scattered distribution\n    general: boolean,                  //The general distribution\n    clumps: boolean,                   //The clumps distribution\n    na: boolean,                       //The na distribution\n    other: boolean,                    //Other distributions (if any)\n    percentage_plants_affected: number,           //The percentage of plants affected\n  }\n\n  // Conditons\n  conditions: {\n    date_problem_noticed: Date,        //The date the problem was noticed\n    date_planted: Date,                //The date the plants were planted\n    weather_disturbances: string,      //The weather disturbances\n    weather_prior: string,             //The weather conditions prior\n    others: string,                    //Other weather conditions (if any)\n    additional?: string                 //Additional weather conditions (if any)\n  }\n\n  // Permissions\n  permissions: {\n    landowner_name: string,                       //The landowner's name\n    permission_granted: boolean                   //Whether or not the landowner has granted permission\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  LOCATION\n/**\n * Defines a Location object\n *\n * @export\n * @interface Location\n */\n/////////////////////////////////////////////////////\nexport interface Location {\n  latitude: number,                             //The latitude of the location\n  longitude: number                             //The longitude of the location\n}\n\n\n/////////////////////////////////////////////////////\n//                     ADDRESS\n/**\n * Defines a Address object\n *\n * @export\n * @interface Address\n */\n/////////////////////////////////////////////////////\nexport interface Address {\n  street_number?: number,                       //The street number of the address (if any)\n  street: string,                               //The street name of the address\n  estate?: string,                              //The estate of the address (if any)\n  area?: string,                                //The area of the address (if any)\n  city: string,                                 //The city of the address\n  province: string,                             //The province of the address\n  country: string,                              //The country of the address\n  postal_code?: string,                         //The postal code of the address (if any)\n  formatted_address: string                     //The formatted address\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AdminDivComponent.html":{"url":"components/AdminDivComponent.html","title":"component - AdminDivComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AdminDivComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/Dynamic-Components/admin-div/admin-div.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-admin-div\n            \n\n            \n                styleUrls\n                ./admin-div.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./admin-div.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                Email\n                            \n                            \n                                Name\n                            \n                            \n                                Surname\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/Dynamic-Components/admin-div/admin-div.component.ts:17\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        Email\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/Dynamic-Components/admin-div/admin-div.component.ts:17\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Name\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/Dynamic-Components/admin-div/admin-div.component.ts:15\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Surname\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/Dynamic-Components/admin-div/admin-div.component.ts:16\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Dynamic-Components/admin-div/admin-div.component.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-admin-div',\n  templateUrl: './admin-div.component.html',\n  styleUrls: ['./admin-div.component.scss']\n})\n\n/*\n*   This class is called when dynamic elements pertaining information about administrators\n*   are created and dynmically inserted into the selected HTML page\n*/\nexport class AdminDivComponent implements OnInit {\n\n  @Input() Name: string;      //This variable will be dynamically changed to the name of the administrator\n  @Input() Surname: string;   //This variable will be dynamically changed to the surname of the administrator\n  @Input() Email: string;     //This variable will be dynamically changed to the email of the adminsitrator\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n  {{Name}} {{Surname}}\n  {{Email}}\n\n    \n\n    \n                \n                    ./admin-div.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{Name}} {{Surname}}  {{Email}}'\n    var COMPONENTS = [{'name': 'AdminDivComponent', 'selector': 'app-admin-div'},{'name': 'AdminHelpComponent', 'selector': 'app-admin-help'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DatabaseHandlerComponent', 'selector': 'app-database-handler'},{'name': 'ErrorComponent', 'selector': 'app-error'},{'name': 'MemberHelpComponent', 'selector': 'app-member-help'},{'name': 'MemberSubmitSampleComponent', 'selector': 'app-member-submit-sample'},{'name': 'NotificationDivComponent', 'selector': 'app-notification-div'},{'name': 'OrganizationHelpComponent', 'selector': 'app-organization-help'},{'name': 'OrganizationMenuComponent', 'selector': 'app-organization-menu'},{'name': 'OrganizationSubmitSampleComponent', 'selector': 'app-organization-submit-sample'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'SampleDivComponent', 'selector': 'app-sample-div'},{'name': 'SampleFormComponent', 'selector': 'app-sample-form'},{'name': 'StaffDivComponent', 'selector': 'app-staff-div'},{'name': 'StaffHelpComponent', 'selector': 'app-staff-help'},{'name': 'StaffMenuComponent', 'selector': 'app-staff-menu'},{'name': 'StaffSubmitSampleComponent', 'selector': 'app-staff-submit-sample'},{'name': 'StaffViewDatabasesComponent', 'selector': 'app-staff-view-databases'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AdminDivComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AdminHelpComponent.html":{"url":"components/AdminHelpComponent.html","title":"component - AdminHelpComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AdminHelpComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/Admin/admin-help/admin-help.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-admin-help\n            \n\n            \n                styleUrls\n                ./admin-help.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./admin-help.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/Admin/admin-help/admin-help.component.ts:23\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/admin-help/admin-help.component.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-admin-help',\n  templateUrl: './admin-help.component.html',\n  styleUrls: ['./admin-help.component.scss']\n})\nexport class AdminHelpComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        HELP\n\n\n\n  \n  \n    \n      \n    \n    \n      Staff\n    \n    \n      You can add staff members to FABI's staff compliment by navigating to the Staff Handler tab\n        \n        \n        Click here to learn more\n      \n    \n  \n  \n\n  \n  \n    \n      \n    \n    \n      Organization\n    \n    \n      You can view and manage all approved organizations by navigating to the Organization Handler tab\n        \n        \n        Click here to learn more\n      \n    \n  \n  \n\n  \n  \n    \n      \n    \n    \n      Databases\n    \n    \n      You can add, view and manage the system databases by navigating to the Database Handler tab\n        \n        \n        Click here to learn more\n      \n    \n  \n  \n\n  \n  \n    \n      \n    \n    \n      Diagnostic Clinic\n    \n    \n      You can view all samples contained within the Diagnostic Clinic by navigating to the Diagnostic Clinic Handler\n        tab\n        \n        \n        Click here to learn more\n      \n    \n  \n  \n\n  \n  \n    \n      \n    \n    \n      Reporting\n    \n    \n      You can view and download all system reports by navigating to the Report and Logs tab\n        \n        \n        Click here to learn more\n      \n    \n  \n  \n\n\n\n    \n\n    \n                \n                    ./admin-help.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'HELP                            Staff              You can add staff members to FABI\\'s staff compliment by navigating to the Staff Handler tab                        Click here to learn more                                          Organization              You can view and manage all approved organizations by navigating to the Organization Handler tab                        Click here to learn more                                          Databases              You can add, view and manage the system databases by navigating to the Database Handler tab                        Click here to learn more                                          Diagnostic Clinic              You can view all samples contained within the Diagnostic Clinic by navigating to the Diagnostic Clinic Handler        tab                        Click here to learn more                                          Reporting              You can view and download all system reports by navigating to the Report and Logs tab                        Click here to learn more              '\n    var COMPONENTS = [{'name': 'AdminDivComponent', 'selector': 'app-admin-div'},{'name': 'AdminHelpComponent', 'selector': 'app-admin-help'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DatabaseHandlerComponent', 'selector': 'app-database-handler'},{'name': 'ErrorComponent', 'selector': 'app-error'},{'name': 'MemberHelpComponent', 'selector': 'app-member-help'},{'name': 'MemberSubmitSampleComponent', 'selector': 'app-member-submit-sample'},{'name': 'NotificationDivComponent', 'selector': 'app-notification-div'},{'name': 'OrganizationHelpComponent', 'selector': 'app-organization-help'},{'name': 'OrganizationMenuComponent', 'selector': 'app-organization-menu'},{'name': 'OrganizationSubmitSampleComponent', 'selector': 'app-organization-submit-sample'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'SampleDivComponent', 'selector': 'app-sample-div'},{'name': 'SampleFormComponent', 'selector': 'app-sample-form'},{'name': 'StaffDivComponent', 'selector': 'app-staff-div'},{'name': 'StaffHelpComponent', 'selector': 'app-staff-help'},{'name': 'StaffMenuComponent', 'selector': 'app-staff-menu'},{'name': 'StaffSubmitSampleComponent', 'selector': 'app-staff-submit-sample'},{'name': 'StaffViewDatabasesComponent', 'selector': 'app-staff-view-databases'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AdminHelpComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AdminMember.html":{"url":"interfaces/AdminMember.html","title":"interface - AdminMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AdminMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Admin/admin-dashboard/admin-dashboard.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        fname\n                                \n                                \n                                        id\n                                \n                                \n                                        surname\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fname\n                                    \n                                \n                                \n                                    \n                                        fname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surname\n                                    \n                                \n                                \n                                    \n                                        surname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { MatDialog, MatSnackBar } from '@angular/material';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { DiagnosticClinicAPIService } from '../../_services/diagnostic-clinic-api.service';\nimport { NotificationLoggingService } from '../../_services/notification-logging.service';\nimport { UserManagementAPIService } from '../../_services/user-management-api.service';\n\n\nexport interface AdminMember {\n  fname: string;\n  surname: string;\n  email: string;\n  id: string;\n  type: string;\n}\n\nexport interface StaffMember {\n  fname: string;\n  surname: string;\n  email: string;\n  id: string;\n}\n\n@core.Component({\n  selector: 'app-admin-dashboard',\n  templateUrl: './admin-dashboard.component.html',\n  styleUrls: ['./admin-dashboard.component.scss']\n})\n\nexport class AdminDashboardComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  //Retriving an HTML element from the HTML page\n  @core.ViewChild('adminContainer', { read: core.ViewContainerRef }) adminContainer;\n  @core.ViewChild('staffContainer', { read: core.ViewContainerRef }) staffContainer;\n\n  /** Contains the user stats that will be dynamically loaded in the HTML page - @type {string} */\n  userStats: string;\n  /** Contains the sample stats that will be dynamically loaded in the HTML page - @type {string} */\n  sampleStats: string;\n\n  /** Object array for holding the administrators -  @type {AdminMember[]} */\n  admins: AdminMember[] = [];\n  /** Object array for holding the staff members -  @type {StaffMember\n   * []} */\n  staff: StaffMember[] = [];\n\n  /** Object array for holding all of FABI's samples -  @type {Object[]} */\n  samples: Object[] = [];\n  /** Object array for holding all of FABI's completed samples -  @type {Object[]} */\n  completedSamples: Object[] = [];\n\n  /** The total number of FABI staff members - @type {number} */\n  numberOfFABIMembers: number;\n  /** The total number of FABI samples - @type {number} */\n  numberOfSamples: number;\n\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  notificationsTab: boolean = false;\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n  /** Indicates if the save button is hidden/shown on the profile tab- @type {boolean} */\n  saveBtn: boolean = false;\n  /** Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} */\n  confirmPasswordInput: boolean = false;\n  /** Indicates if the help tab is hidden/shown - @type {boolean} */\n  helpTab: boolean = false;\n\n  /** The details of the user currently logged in -  @type {any} */\n  currentUser: any;\n\n  /** Specifies if the list of admins have been retreived to disable the loading spinner - @type {boolean} */\n  adminTableLoading: boolean = true;\n  /** Specifies if the list of staff have been retreived to disable the loading spinner - @type {boolean} */\n  staffTableLoading: boolean = true;\n\n  /** Holds the input element (passwordInput) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"passwordInput\") passwordInput: core.ElementRef;\n  /** Holds the input element (confirmInput) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"confirmInput\") confirmInput: core.ElementRef;\n\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchAdmins: string = \"\";\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchStaff: string = \"\";\n\n  currentUserPrivileges: any;\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of AdminDashboardComponent.\n   * \n   * @param {UserManagementAPIService} userManagementService For calling the User Management API service\n   * @param {DiagnosticClinicAPIService} diagnosticClinicService For calling the Diagnostic Clinic API service\n   * @param {NotificationLoggingService} notificationLoggingService For calling the Notification Logging API service\n   * @param {core.ComponentFactoryResolver} resolver For dynamically inserting elements into the HTML page\n   * @param {DomSanitizer} sanitizer\n   * @param {core.ComponentFactoryResolver} resolver Used to load dynamic elements in the HTML\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    public sanitizer: DomSanitizer,\n    private userManagementService: UserManagementAPIService,\n    private diagnosticClinicService: DiagnosticClinicAPIService,\n    private notificationLoggingService: NotificationLoggingService,\n    private resolver: core.ComponentFactoryResolver,\n    private authService: AuthenticationService,\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private snackBar: MatSnackBar,\n    private dialog: MatDialog\n  ) { }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n\n    window.addEventListener('scroll', this.scroll, true); //third parameter\n\n    // Set current user logged in\n    this.currentUser = this.authService.getCurrentSessionValue.user;\n    //Calling the neccessary functions as the page loads\n    this.getNumberOfFABIMembers();\n    this.getNumberOfFABISamples();\n    this.currentUserPrivileges = this.authService.getCurrentUserValue;\n  }\n\n  ngOnDestroy() {\n    window.removeEventListener('scroll', this.scroll, true);\n  }\n\n  scroll = (event: any): void => {\n\n    //Hide the notifications, profile, and help tabs if open\n    // this.notificationsTab = false;\n    // this.profileTab = false;\n    // this.helpTab = false;\n\n  };\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                              GET NUMBER OF FABI MEMBERS\n  /**\n   *  This function will use an API service to get all the members of FABI. These members will be read into the\n   *  'members' Object. The function does not receive any parameters but it will populate a 'heading' element on the\n   *  HTML page with the number of members belonging to FABI. This function will also use API calls to populate\n   *  the admins object.\n   * \n   *  This function will also dynamically create elements and load them with information about the adminstrators\n   *  and other FABI staff members. These dynamic elements will be loaded into the HTML page\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getNumberOfFABIMembers() {\n    //Subscribing to the UserManagementAPIService to get a list containing all the FABI members\n    this.userManagementService.getAllFABIStaff().subscribe((response: any) => {\n      if (response.success == true) {\n        var data = response.data.qs.staff;\n\n        for (var i = 0; i  {\n      if (response.success == true) {\n        //Populating the sample array with the returned data\n        this.samples = response.data.samples;\n\n        this.numberOfSamples = this.samples.length;\n        this.sampleStats = this.numberOfSamples.toString();\n      }\n      else {\n        //The FABI members could not be retrieved\n        this.sampleStats = '0';\n      }\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      TOGGLE NOTIFICATIONS \n  /**\n   * This function will toggle the display of the notifications side panel\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificationsTab() {\n    this.notificationsTab = !this.notificationsTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         TOGGLE PROFILE \n  /**\n   * This function will toggle the display of the profile side panel\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleProfileTab() {\n    this.profileTab = !this.profileTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      DISPLAY PROFILE SAVE BUTTON \n  /**\n   * This function will display the save button option if any details in the profile have been altered\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayProfileSaveBtn() {\n    this.saveBtn = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                   DISPLAY PASSWORD CONFIRM INPUT \n  /**\n   * This function will display the confirm password input field in the user's password was altered\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayConfirmPasswordInput() {\n    this.confirmPasswordInput = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE HELP \n  /**\n   * This function will toggle the display of the help side panel\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleHelpTab() {\n    this.helpTab = !this.helpTab;\n  }\n\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AdminMenuComponent.html":{"url":"classes/AdminMenuComponent.html","title":"class - AdminMenuComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminMenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Admin/admin-menu/admin-menu.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentUser\n                            \n                            \n                                currentUserPrivileges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService, userManagementService: UserManagementAPIService)\n                    \n                \n                        \n                            \n                                Defined in src/app/Admin/admin-menu/admin-menu.component.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userManagementService\n                                                  \n                                                        \n                                                                        UserManagementAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/admin-menu/admin-menu.component.ts:29\n                            \n                        \n\n                \n                    \n                        The details of the user currently logged in -  @type {any} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUserPrivileges\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/admin-menu/admin-menu.component.ts:30\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/admin-menu/admin-menu.component.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { AuthenticationService } from '../../_services/authentication.service';\nimport { UserManagementAPIService } from '../../_services/user-management-api.service';\n\n\n@core.Component({\n  selector: 'app-admin-menu',\n  templateUrl: './admin-menu.component.html',\n  styleUrls: ['./admin-menu.component.scss']\n})\nexport class AdminMenuComponent implements core.OnInit {\n\n  /** The details of the user currently logged in -  @type {any} */\n  currentUser: any;\n  currentUserPrivileges: any\n\n  constructor(\n    private authService: AuthenticationService,\n    private userManagementService: UserManagementAPIService,\n  ) { }\n\n  ngOnInit() { }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/Admin/admin.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        /**\n * File Name: admin.module.ts\n * File Path: c:\\Users\\Kendra\\Documents\\Varsity\\Third Year\\COS301\\CAPSTONE\\Git Repo\\FABI-Mobile\\FABI-Web\\src\\app\\Admin\\admin.module.ts\n * Project Name: fabi-web\n * Created Date: Friday, May 24th 2019\n * Author: Team Nova - novacapstone@gmail.com\n * -----\n * Last Modified: Monday, August 19th 2019\n * Modified By: Team Nova\n * -----\n * Copyright (c) 2019 University of Pretoria\n * \n * >\n */\n\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AdminRoutingModule } from './admin-routing.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    AdminRoutingModule\n  ]\n})\nexport class AdminModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AdminNotificationComponent.html":{"url":"classes/AdminNotificationComponent.html","title":"class - AdminNotificationComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminNotificationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Admin/admin-notification/admin-notification.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                allLogs\n                            \n                            \n                                allNotifications\n                            \n                            \n                                currentUser\n                            \n                            \n                                localNotificationNumber\n                            \n                            \n                                newNotifications\n                            \n                            \n                                notifications\n                            \n                            \n                                notificationsLoading\n                            \n                            \n                                numberOfAccessLogs\n                            \n                            \n                                numberOfDatabaseLogs\n                            \n                            \n                                numberOfFABIMembers\n                            \n                            \n                                numberOfSamples\n                            \n                            \n                                numberOfUserLogs\n                            \n                            \n                                    Public\n                                sanitizer\n                            \n                            \n                                staff\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllStaff\n                            \n                            \n                                getDate\n                            \n                            \n                                loadLogs\n                            \n                            \n                                loadNotifications\n                            \n                            \n                                loadUserDetails\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                removeNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sanitizer: DomSanitizer, userManagementService: UserManagementAPIService, diagnosticClinicService: DiagnosticClinicAPIService, notificationLoggingService: NotificationLoggingService, resolver: core.ComponentFactoryResolver, authService: AuthenticationService, router: Router, formBuilder: FormBuilder, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/Admin/admin-notification/admin-notification.component.ts:66\n                            \n                        \n\n                \n                    \n                            Creates an instance of AdminNotificationComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sanitizer\n                                                  \n                                                        \n                                                                        DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        userManagementService\n                                                  \n                                                        \n                                                                        UserManagementAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the User Management API service\n\n                                                        \n                                                \n                                                \n                                                        diagnosticClinicService\n                                                  \n                                                        \n                                                                        DiagnosticClinicAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Diagnostic Clinic API service\n\n                                                        \n                                                \n                                                \n                                                        notificationLoggingService\n                                                  \n                                                        \n                                                                        NotificationLoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Notification Logging API service\n\n                                                        \n                                                \n                                                \n                                                        resolver\n                                                  \n                                                        \n                                                                    core.ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For dynamically inserting elements into the HTML page\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            allLogs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:41\n                            \n                        \n\n                \n                    \n                        Object array for holding all of the logs that have not been read -  @type {string[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            allNotifications\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:37\n                            \n                        \n\n                \n                    \n                        Object array for holding all of the logs -  @type {any[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:63\n                            \n                        \n\n                \n                    \n                        The details of the user currently logged in -  @type {any} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            localNotificationNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:57\n                            \n                        \n\n                \n                    \n                        The number of the notifications - @type {number} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            newNotifications\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:39\n                            \n                        \n\n                \n                    \n                        Object array for holding all of the logs that have not been read -  @type {string[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notifications\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:55\n                            \n                        \n\n                \n                    \n                        Indicates if there are notifications to load - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notificationsLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:66\n                            \n                        \n\n                \n                    \n                        Specifies if the notifications have been retreived to disable the loading spinner - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numberOfAccessLogs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:48\n                            \n                        \n\n                \n                    \n                        The total number of Access Logs - @type {number} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numberOfDatabaseLogs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:46\n                            \n                        \n\n                \n                    \n                        The total number of Database Management Logs - @type {number} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numberOfFABIMembers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:51\n                            \n                        \n\n                \n                    \n                        The total number of FABI staff members - @type {number} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numberOfSamples\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:53\n                            \n                        \n\n                \n                    \n                        The total number of FABI samples - @type {number} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numberOfUserLogs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:44\n                            \n                        \n\n                \n                    \n                        The total number of User Logs - @type {number} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            sanitizer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomSanitizer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:85\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            staff\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Member[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:60\n                            \n                        \n\n                \n                    \n                        Object array for holding the staff members -  @type {Member[]} \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllStaff\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllStaff()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:121\n                \n            \n\n\n            \n                \n                    This function will be used to get all the staff members of FABI and load them into an array\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDate\n                        \n                        \n                    \n                \n            \n            \n                \ngetDate(date: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:154\n                \n            \n\n\n            \n                \n                    This function will put the string date provided into a more readable format for the notifications\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    date\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The date of the log\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadLogs\n                        \n                        \n                    \n                \n            \n            \n                \nloadLogs()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:229\n                \n            \n\n\n            \n                \n                    This function will load all of the user's logs into a string array.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadNotifications\n                        \n                        \n                    \n                \n            \n            \n                \nloadNotifications()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:253\n                \n            \n\n\n            \n                \n                    This function will load the admin's notifications into the notification section on the HTML page\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadUserDetails\n                        \n                        \n                    \n                \n            \n            \n                \nloadUserDetails(userID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:432\n                \n            \n\n\n            \n                \n                    This function will be called so that the information of a specific user can be fetched\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:106\n                \n            \n\n\n            \n                \n                    This function is called when the page loads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeNotification\n                        \n                        \n                    \n                \n            \n            \n                \nremoveNotification(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/admin-notification/admin-notification.component.ts:453\n                \n            \n\n\n            \n                \n                    This function will remove a notification from the notification section on the HTML page.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        //The id of the notification to be removed\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { DiagnosticClinicAPIService } from '../../_services/diagnostic-clinic-api.service';\nimport { DatabaseManagementLogs, NotificationLoggingService, UserLogs } from '../../_services/notification-logging.service';\nimport { Member, UserManagementAPIService } from '../../_services/user-management-api.service';\n\n\n\n@core.Component({\n  selector: 'app-admin-notification',\n  templateUrl: './admin-notification.component.html',\n  styleUrls: ['./admin-notification.component.scss']\n})\nexport class AdminNotificationComponent implements core.OnInit {\n\n  /** Object array for holding all of the logs -  @type {any[]} */\n  allNotifications: any[] = [];\n  /** Object array for holding all of the logs that have not been read -  @type {string[]} */\n  newNotifications: string[] = [];\n  /** Object array for holding all of the logs that have not been read -  @type {string[]} */\n  allLogs: string[] = [];\n\n  /** The total number of User Logs - @type {number} */\n  numberOfUserLogs: number = 0;\n  /** The total number of Database Management Logs - @type {number} */\n  numberOfDatabaseLogs: number = 0;\n  /** The total number of Access Logs - @type {number} */\n  numberOfAccessLogs: number = 0;\n\n  /** The total number of FABI staff members - @type {number} */\n  numberOfFABIMembers: number;\n  /** The total number of FABI samples - @type {number} */\n  numberOfSamples: number;\n  /** Indicates if there are notifications to load - @type {boolean} */\n  notifications: boolean = true;\n  /** The number of the notifications - @type {number} */\n  localNotificationNumber: number = 1;\n\n  /** Object array for holding the staff members -  @type {Member[]} */\n  staff: Member[] = [];\n\n  /** The details of the user currently logged in -  @type {any} */\n  currentUser: any;\n\n  /** Specifies if the notifications have been retreived to disable the loading spinner - @type {boolean} */\n  notificationsLoading: boolean = true;\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of AdminNotificationComponent.\n   * \n   * @param {UserManagementAPIService} userManagementService For calling the User Management API service\n   * @param {DiagnosticClinicAPIService} diagnosticClinicService For calling the Diagnostic Clinic API service\n   * @param {NotificationLoggingService} notificationLoggingService For calling the Notification Logging API service\n   * @param {core.ComponentFactoryResolver} resolver For dynamically inserting elements into the HTML page\n   * @param {DomSanitizer} sanitizer\n   * @param {core.ComponentFactoryResolver} resolver Used to load dynamic elements in the HTML\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    public sanitizer: DomSanitizer,\n    private userManagementService: UserManagementAPIService,\n    private diagnosticClinicService: DiagnosticClinicAPIService,\n    private notificationLoggingService: NotificationLoggingService,\n    private resolver: core.ComponentFactoryResolver,\n    private authService: AuthenticationService,\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @description \n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n\n    this.getAllStaff();\n\n    this.currentUser = this.authService.getCurrentSessionValue.user;\n    this.loadNotifications();\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL STAFF\n  /**\n   *  This function will be used to get all the staff members of FABI and load them into an array\n   *  @memberof AdminNotificationComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaff() {\n    //Subscribing to the UserManagementAPIService to get a list containing all the FABI members\n    this.userManagementService.getAllFABIStaff().subscribe((response: any) => {\n      if (response.success == true) {\n        //Temporary array to hold the array of admins retuned from the API call\n        var data = response.data.qs.admins;\n        for (var i = 0; i  {\n      if (response.success == true) {\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        const data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success == true) {\n        //Temporarily holds the data returned from the API call\n        const data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success == true) {\n\n      }\n      else {\n        //Error handling\n      }\n    });\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AdminRoutingModule.html":{"url":"classes/AdminRoutingModule.html","title":"class - AdminRoutingModule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminRoutingModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Admin/admin-routing.module.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from '../login/login.component';\nimport { PageNotFoundComponent } from '../page-not-found/page-not-found.component';\nimport { AuthenticationGuard } from '../_guards/authentication.guard';\nimport { Role } from '../_interfaces/role';\nimport { AdminDashboardComponent } from './admin-dashboard/admin-dashboard.component';\nimport { AdminProfileComponent } from \"./admin-profile/admin-profile.component\";\nimport { ClinicHandlerComponent } from './clinic-handler/clinic-handler.component';\nimport { DatabaseHandlerComponent } from './database-handler/database-handler.component';\nimport { OrganizationHandlerComponent } from './organization-handler/organization-handler.component';\nimport { ReportingComponent } from './reporting/reporting.component';\nimport { StaffHandlerComponent } from './staff-handler/staff-handler.component';\nimport { ViewFormsComponent } from './view-forms/view-forms.component';\n\n\n\n\nconst routes: Routes = [\n  {\n    path: 'admin-dashboard',\n    component: AdminDashboardComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['ClinicAdmin', 'SuperUser'] }\n  },\n  {\n    path: 'staff-handler',\n    component: StaffHandlerComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['SuperUser'] }\n  },\n  {\n    path: 'organization-handler',\n    component: OrganizationHandlerComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['SuperUser'] }\n  },\n  {\n    path: 'clinic-handler',\n    component: ClinicHandlerComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['SuperUser', 'ClinicAdmin'] }\n  },\n  {\n    path: 'database-handler',\n    component: DatabaseHandlerComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['SuperUser'] }\n  },\n  {\n    path: 'admin-profile',\n    component: AdminProfileComponent,\n    data: { roles: ['SuperUser', 'ClinicAdmin'] }\n  },\n  {\n    path: 'reporting',\n    component: ReportingComponent,\n    data: { roles: ['SuperUser'] }\n  },\n  {\n    path: 'login',\n    component: LoginComponent\n  },\n  {\n    path: 'view-forms',\n    component: ViewFormsComponent\n  },\n  {\n    path: \"**\",\n    component: PageNotFoundComponent\n  }\n];\n\n@core.NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AdminRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(cookieService: CookieService)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cookieService\n                                                  \n                                                        \n                                                                    CookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FABI-Web'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { CookieService } from \"ngx-cookie-service\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit{\n  title = 'FABI-Web';\n\n  constructor(private cookieService: CookieService){\n  }\n\n  public ngOnInit(): void {\n    this.cookieService.set('SameSite', 'None');\n  }\n}\n\n\n\n    \n\n    \n        \n -->\n\n\n -->\n\n\n -->\n\n\n  -->\n -->\n -->\n -->\n -->\n -->\n -->\n -->\n -->\n\n\n\n -->\n  -->\n -->\n -->\n -->\n -->\n -->\n\n\n\n -->\n -->\n -->\n  -->\n\n\n\n -->\n -->\n -->\n\n\n\n -->\n\n\n\n -->\n\n\n\n -->\n\n\n\n -->\n\n\n\n -->\n\n\n    \n\n    \n                \n                    ./app.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ' --> --> -->  --> --> --> --> --> --> --> --> --> -->  --> --> --> --> --> --> --> --> -->  --> --> --> --> --> --> --> --> -->'\n    var COMPONENTS = [{'name': 'AdminDivComponent', 'selector': 'app-admin-div'},{'name': 'AdminHelpComponent', 'selector': 'app-admin-help'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DatabaseHandlerComponent', 'selector': 'app-database-handler'},{'name': 'ErrorComponent', 'selector': 'app-error'},{'name': 'MemberHelpComponent', 'selector': 'app-member-help'},{'name': 'MemberSubmitSampleComponent', 'selector': 'app-member-submit-sample'},{'name': 'NotificationDivComponent', 'selector': 'app-notification-div'},{'name': 'OrganizationHelpComponent', 'selector': 'app-organization-help'},{'name': 'OrganizationMenuComponent', 'selector': 'app-organization-menu'},{'name': 'OrganizationSubmitSampleComponent', 'selector': 'app-organization-submit-sample'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'SampleDivComponent', 'selector': 'app-sample-div'},{'name': 'SampleFormComponent', 'selector': 'app-sample-form'},{'name': 'StaffDivComponent', 'selector': 'app-staff-div'},{'name': 'StaffHelpComponent', 'selector': 'app-staff-help'},{'name': 'StaffMenuComponent', 'selector': 'app-staff-menu'},{'name': 'StaffSubmitSampleComponent', 'selector': 'app-staff-submit-sample'},{'name': 'StaffViewDatabasesComponent', 'selector': 'app-staff-view-databases'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAdminDivComponent\n\nAdminDivComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminDivComponent->AppModule\n\n\n\n\n\nAdminHelpComponent\n\nAdminHelpComponent\n\nAppModule -->\n\nAdminHelpComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nDatabaseHandlerComponent\n\nDatabaseHandlerComponent\n\nAppModule -->\n\nDatabaseHandlerComponent->AppModule\n\n\n\n\n\nFilterPipe\n\nFilterPipe\n\nAppModule -->\n\nFilterPipe->AppModule\n\n\n\nAppModule -->\n\nFilterPipe->AppModule\n\n\n\n\n\nMemberHelpComponent\n\nMemberHelpComponent\n\nAppModule -->\n\nMemberHelpComponent->AppModule\n\n\n\n\n\nMemberSubmitSampleComponent\n\nMemberSubmitSampleComponent\n\nAppModule -->\n\nMemberSubmitSampleComponent->AppModule\n\n\n\n\n\nNotificationDivComponent\n\nNotificationDivComponent\n\nAppModule -->\n\nNotificationDivComponent->AppModule\n\n\n\n\n\nOrganizationHelpComponent\n\nOrganizationHelpComponent\n\nAppModule -->\n\nOrganizationHelpComponent->AppModule\n\n\n\n\n\nOrganizationMenuComponent\n\nOrganizationMenuComponent\n\nAppModule -->\n\nOrganizationMenuComponent->AppModule\n\n\n\n\n\nOrganizationSubmitSampleComponent\n\nOrganizationSubmitSampleComponent\n\nAppModule -->\n\nOrganizationSubmitSampleComponent->AppModule\n\n\n\n\n\nPageNotFoundComponent\n\nPageNotFoundComponent\n\nAppModule -->\n\nPageNotFoundComponent->AppModule\n\n\n\n\n\nSampleDivComponent\n\nSampleDivComponent\n\nAppModule -->\n\nSampleDivComponent->AppModule\n\n\n\n\n\nSampleFormComponent\n\nSampleFormComponent\n\nAppModule -->\n\nSampleFormComponent->AppModule\n\n\n\n\n\nStaffDivComponent\n\nStaffDivComponent\n\nAppModule -->\n\nStaffDivComponent->AppModule\n\n\n\n\n\nStaffHelpComponent\n\nStaffHelpComponent\n\nAppModule -->\n\nStaffHelpComponent->AppModule\n\n\n\n\n\nStaffMenuComponent\n\nStaffMenuComponent\n\nAppModule -->\n\nStaffMenuComponent->AppModule\n\n\n\n\n\nStaffSubmitSampleComponent\n\nStaffSubmitSampleComponent\n\nAppModule -->\n\nStaffSubmitSampleComponent->AppModule\n\n\n\n\n\nStaffViewDatabasesComponent\n\nStaffViewDatabasesComponent\n\nAppModule -->\n\nStaffViewDatabasesComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAdminModule\n\nAdminModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nErrorsModule\n\nErrorsModule\n\nAppModule -->\n\nErrorsModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\nOrganizationMemberModule\n\nOrganizationMemberModule\n\nAppModule -->\n\nOrganizationMemberModule->AppModule\n\n\n\n\n\nOrganizationModule\n\nOrganizationModule\n\nAppModule -->\n\nOrganizationModule->AppModule\n\n\n\n\n\nStaffModule\n\nStaffModule\n\nAppModule -->\n\nStaffModule->AppModule\n\n\n\n\n\ncore\n\ncore\n\nAppModule -->\n\ncore->AppModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nAppModule -->\n\nNotificationService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AdminDivComponent\n                        \n                        \n                            AdminHelpComponent\n                        \n                        \n                            AppComponent\n                        \n                        \n                            DatabaseHandlerComponent\n                        \n                        \n                            FilterPipe\n                        \n                        \n                            MemberHelpComponent\n                        \n                        \n                            MemberSubmitSampleComponent\n                        \n                        \n                            NotificationDivComponent\n                        \n                        \n                            OrganizationHelpComponent\n                        \n                        \n                            OrganizationMenuComponent\n                        \n                        \n                            OrganizationSubmitSampleComponent\n                        \n                        \n                            PageNotFoundComponent\n                        \n                        \n                            SampleDivComponent\n                        \n                        \n                            SampleFormComponent\n                        \n                        \n                            StaffDivComponent\n                        \n                        \n                            StaffHelpComponent\n                        \n                        \n                            StaffMenuComponent\n                        \n                        \n                            StaffSubmitSampleComponent\n                        \n                        \n                            StaffViewDatabasesComponent\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            AdminDivComponent\n                        \n                        \n                            ErrorComponent\n                        \n                        \n                            LoadingComponent\n                        \n                        \n                            MapsWindowComponent\n                        \n                        \n                            NotificationDivComponent\n                        \n                        \n                            SampleDivComponent\n                        \n                        \n                            StaffDivComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            FilterPipe\n                        \n                        \n                            NotificationService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AppRoutingModule\n                        \n                        \n                            ErrorsModule\n                        \n                        \n                            MaterialModule\n                        \n                        \n                            OrganizationMemberModule\n                        \n                        \n                            OrganizationModule\n                        \n                        \n                            StaffModule\n                        \n                        \n                            core\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as core from \"@agm/core\";\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule, NoopAnimationsModule } from '@angular/platform-browser/animations';\nimport { ToastrModule } from 'ngx-toastr';\nimport { config } from \"../environments/environment.prod\";\nimport { AdminDashboardComponent } from './Admin/admin-dashboard/admin-dashboard.component';\nimport { AdminHelpComponent } from './Admin/admin-help/admin-help.component';\nimport { AdminMenuComponent } from './Admin/admin-menu/admin-menu.component';\nimport { AdminNotificationComponent } from './Admin/admin-notification/admin-notification.component';\nimport { AdminProfileComponent } from './Admin/admin-profile/admin-profile.component';\nimport { AdminModule } from './Admin/admin.module';\nimport { ClinicAdminViewSamplesComponent } from './Admin/clinic-admin-view-samples/clinic-admin-view-samples.component';\nimport { ClinicHandlerComponent } from './Admin/clinic-handler/clinic-handler.component';\nimport { DatabaseHandlerComponent } from './Admin/database-handler/database-handler.component';\nimport { OrganizationHandlerComponent } from './Admin/organization-handler/organization-handler.component';\nimport { ReportingComponent } from './Admin/reporting/reporting.component';\nimport { StaffHandlerComponent } from './Admin/staff-handler/staff-handler.component';\nimport { ViewFormsComponent } from './Admin/view-forms/view-forms.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { AdminDivComponent } from './Dynamic-Components/admin-div/admin-div.component';\nimport { NotificationDivComponent } from './Dynamic-Components/notification-div/notification-div.component';\nimport { SampleDivComponent } from './Dynamic-Components/sample-div/sample-div.component';\nimport { StaffDivComponent } from './Dynamic-Components/staff-div/staff-div.component';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { MapsWindowComponent } from './maps-window/maps-window.component';\nimport { MaterialModule } from './materials';\nimport { MemberDashboardComponent } from './Organization-Member/member-dashboard/member-dashboard.component';\nimport { MemberHelpComponent } from './Organization-Member/member-help/member-help.component';\nimport { MemberMenuComponent } from './Organization-Member/member-menu/member-menu.component';\nimport { MemberNotificationComponent } from './Organization-Member/member-notification/member-notification.component';\nimport { MemberProfileComponent } from './Organization-Member/member-profile/member-profile.component';\nimport { MemberSubmitSampleComponent } from './Organization-Member/member-submit-sample/member-submit-sample.component';\nimport { MemberViewSamplesComponent } from './Organization-Member/member-view-samples/member-view-samples.component';\nimport { OrganizationMemberModule } from './Organization-Member/organization-member.module';\nimport { MemberHandlerComponent } from './Organization/member-handler/member-handler.component';\nimport { OrganizationDashboardComponent } from './Organization/organization-dashboard/organization-dashboard.component';\nimport { OrganizationHelpComponent } from './Organization/organization-help/organization-help.component';\nimport { OrganizationMenuComponent } from './Organization/organization-menu/organization-menu.component';\nimport { OrganizationNotificationComponent } from './Organization/organization-notification/organization-notification.component';\nimport { OrganizationProfileComponent } from './Organization/organization-profile/organization-profile.component';\nimport { OrganizationSubmitSampleComponent } from './Organization/organization-submit-sample/organization-submit-sample.component';\nimport { OrganizationViewSamplesComponent } from './Organization/organization-view-samples/organization-view-samples.component';\nimport { OrganizationModule } from './Organization/organization.module';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { PreDiagnosisComponent } from './pre-diagnosis/pre-diagnosis.component';\nimport { SampleFormComponent } from './sample-form/sample-form.component';\nimport { CmwMenuComponent } from './Staff/cmw-menu/cmw-menu.component';\nimport { StaffDashboardComponent } from './Staff/staff-dashboard/staff-dashboard.component';\nimport { StaffHelpComponent } from './Staff/staff-help/staff-help.component';\nimport { StaffMenuComponent } from './Staff/staff-menu/staff-menu.component';\nimport { StaffNotificationComponent } from './Staff/staff-notification/staff-notification.component';\nimport { StaffProfileComponent } from './Staff/staff-profile/staff-profile.component';\nimport { StaffSubmitSampleComponent } from './Staff/staff-submit-sample/staff-submit-sample.component';\nimport { StaffViewDatabasesComponent } from './Staff/staff-view-databases/staff-view-databases.component';\nimport { StaffViewSamplesComponent } from './Staff/staff-view-samples/staff-view-samples.component';\nimport { StaffModule } from './Staff/staff.module';\nimport { SubmitCmwDepositComponent } from './Staff/submit-cmw-deposit/submit-cmw-deposit.component';\nimport { SubmitCmwRequestComponent } from './Staff/submit-cmw-request/submit-cmw-request.component';\nimport { SubmitCmwRevitalizationComponent } from './Staff/submit-cmw-revitalization/submit-cmw-revitalization.component';\nimport { ErrorComponent } from './_errors/error-component/error.component';\nimport { ErrorsModule } from \"./_errors/errors.module\";\nimport { LoadingComponent } from './_loading/loading.component';\nimport { FilterPipe } from './_pipes/filter.pipe';\nimport { NotificationService } from './_services/notification.service';\nimport { CookieService } from \"ngx-cookie-service\";\n\n\n// import { DataTablesModule } from 'angular-datatables';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    HomeComponent,\n    SampleFormComponent,\n    DatabaseHandlerComponent,\n    ClinicHandlerComponent,\n    AdminDashboardComponent,\n    StaffHandlerComponent,\n    OrganizationHandlerComponent,\n    MemberHandlerComponent,\n    OrganizationDashboardComponent,\n    OrganizationProfileComponent,\n    OrganizationSubmitSampleComponent,\n    OrganizationViewSamplesComponent,\n    MemberDashboardComponent,\n    MemberProfileComponent,\n    MemberSubmitSampleComponent,\n    MemberViewSamplesComponent,\n    StaffDashboardComponent,\n    StaffSubmitSampleComponent,\n    SubmitCmwRequestComponent,\n    SubmitCmwDepositComponent,\n    SubmitCmwRevitalizationComponent,\n    LoadingComponent,\n    AdminDivComponent,\n    StaffDivComponent,\n    NotificationDivComponent,\n    SampleDivComponent,\n    AdminProfileComponent,\n    StaffProfileComponent,\n    ViewFormsComponent,\n    ReportingComponent,\n    MapsWindowComponent,\n    CmwMenuComponent,\n    AdminNotificationComponent,\n    StaffNotificationComponent,\n    OrganizationNotificationComponent,\n    MemberNotificationComponent,\n    AdminHelpComponent,\n    StaffHelpComponent,\n    OrganizationHelpComponent,\n    MemberHelpComponent,\n    AdminMenuComponent,\n    StaffMenuComponent,\n    OrganizationMenuComponent,\n    MemberMenuComponent,\n    FilterPipe,\n    ClinicAdminViewSamplesComponent,\n    PreDiagnosisComponent,\n    StaffViewDatabasesComponent,\n    StaffViewSamplesComponent,\n    PageNotFoundComponent\n  ],\n  entryComponents: [\n    LoadingComponent,\n    AdminDivComponent,\n    StaffDivComponent,\n    NotificationDivComponent,\n    SampleDivComponent,\n    ErrorComponent,\n    MapsWindowComponent\n  ],\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule,\n    FormsModule,\n    HttpClientModule,\n    AppRoutingModule,\n    MaterialModule,\n    NoopAnimationsModule,\n    AdminModule,\n    StaffModule,\n    OrganizationModule,\n    OrganizationMemberModule,\n    BrowserAnimationsModule,\n    ToastrModule.forRoot(),\n    // DataTablesModule,\n    ErrorsModule,\n    LayoutModule,\n    MatAutocompleteModule,\n    core.AgmCoreModule.forRoot({\n      apiKey: config.APIKEy,\n      libraries: [\"places\"]\n    })\n  ],\n  providers: [\n    NotificationService,\n    FilterPipe,\n    CookieService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginComponent } from \"./login/login.component\";\nimport { HomeComponent } from \"./home/home.component\";\nimport { AdminDashboardComponent } from \"./Admin/admin-dashboard/admin-dashboard.component\";\nimport { OrganizationDashboardComponent } from \"./Organization/organization-dashboard/organization-dashboard.component\";\nimport { StaffDashboardComponent } from \"./Staff/staff-dashboard/staff-dashboard.component\";\nimport { MemberDashboardComponent } from \"./Organization-Member/member-dashboard/member-dashboard.component\";\n\nimport { Role } from \"./_interfaces/role\";\nimport { AuthenticationGuard } from './_guards/authentication.guard';\nimport { SampleFormComponent } from './sample-form/sample-form.component';\nimport { ReportingComponent } from './Admin/reporting/reporting.component';\nimport { SubmitCmwRequestComponent } from './Staff/submit-cmw-request/submit-cmw-request.component';\nimport { SubmitCmwDepositComponent } from './Staff/submit-cmw-deposit/submit-cmw-deposit.component';\nimport { SubmitCmwRevitalizationComponent } from './Staff/submit-cmw-revitalization/submit-cmw-revitalization.component';\nimport { ClinicHandlerComponent } from './Admin/clinic-handler/clinic-handler.component';\nimport { PreDiagnosisComponent } from './pre-diagnosis/pre-diagnosis.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { AdminProfileComponent } from './Admin/admin-profile/admin-profile.component';\nimport { DatabaseHandlerComponent } from './Admin/database-handler/database-handler.component';\nimport { StaffHandlerComponent } from './Admin/staff-handler/staff-handler.component';\nimport { OrganizationHandlerComponent } from './Admin/organization-handler/organization-handler.component';\nimport { ViewFormsComponent } from './Admin/view-forms/view-forms.component';\nimport { MemberHandlerComponent } from './Organization/member-handler/member-handler.component';\nimport { OrganizationProfileComponent } from './Organization/organization-profile/organization-profile.component';\nimport { OrganizationViewSamplesComponent } from './Organization/organization-view-samples/organization-view-samples.component';\nimport { MemberProfileComponent } from './Organization-Member/member-profile/member-profile.component';\nimport { MemberViewSamplesComponent } from './Organization-Member/member-view-samples/member-view-samples.component';\nimport { StaffViewDatabasesComponent } from './Staff/staff-view-databases/staff-view-databases.component';\nimport { StaffViewSamplesComponent } from './Staff/staff-view-samples/staff-view-samples.component';\nimport { StaffHelpComponent } from './Staff/staff-help/staff-help.component';\nimport { CmwMenuComponent } from './Staff/cmw-menu/cmw-menu.component';\nimport { StaffSubmitSampleComponent } from './Staff/staff-submit-sample/staff-submit-sample.component';\nimport { StaffProfileComponent } from './Staff/staff-profile/staff-profile.component';\n\nconst routes: Routes = [\n\n  // HOME ROUTES\n  {\n    path: 'home', \n    component: HomeComponent\n  },\n  { \n    path: '',   \n    redirectTo: '/home', \n    pathMatch: 'full' \n  },\n  {\n    path: 'login', \n    component: LoginComponent\n  },\n  {\n    path: 'submit-sample', \n    component: SampleFormComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['Member', 'Staff', 'OrganizationAdmin'] }\n  },\n  {\n    path: 'pre-diagnosis',\n    component: PreDiagnosisComponent\n  },\n  // { \n  //   path: \"**\",\n  //   component: PageNotFoundComponent\n  // },\n\n  // ADMIN ROUTES\n  {\n    path: 'admin-dashboard',\n    component: AdminDashboardComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['ClinicAdmin', 'SuperUser'] }\n  },\n  {\n    path: 'staff-handler', \n    component: StaffHandlerComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['SuperUser']}\n  },\n  {\n    path: 'organization-handler',\n    component: OrganizationHandlerComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['SuperUser']}\n  },\n  {\n    path: 'clinic-handler', \n    component: ClinicHandlerComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['SuperUser', 'ClinicAdmin'] }\n  },\n  {\n    path: 'database-handler', \n    component: DatabaseHandlerComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['SuperUser']}\n  },\n  {\n    path: 'admin-profile', \n    component: AdminProfileComponent,\n    data: {roles: ['SuperUser', 'ClinicAdmin']}\n  },\n  {\n    path: 'reporting', \n    component: ReportingComponent,\n    data: {roles: ['SuperUser']}\n  },\n  {\n    path: 'view-forms',\n    component: ViewFormsComponent\n  },\n\n  // ORGANIZATION ADMIN ROUTES\n  {\n    path: 'organization-dashboard', \n    component: OrganizationDashboardComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['OrganizationAdmin'] }\n  },\n  {\n    path: 'member-handler', \n    component: MemberHandlerComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['OrganizationAdmin'] }\n  },\n  {\n    path: 'organization-profile', \n    component: OrganizationProfileComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['OrganizationAdmin'] }\n  },\n  {\n    path: 'organization-view-samples', \n    component: OrganizationViewSamplesComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['OrganizationAdmin'] }\n  },\n\n  // ORGANIZATION MEMBER ROUTES\n  {\n    path: 'member-dashboard', \n    component: MemberDashboardComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['Member'] }\n  },\n  {\n    path: 'member-profile', \n    component: MemberProfileComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['Member'] }\n  },\n  {\n    path: 'member-view-samples', \n    component: MemberViewSamplesComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['Member'] }\n  },\n\n  // STAFF ROUTES\n  {\n    path: 'staff-dashboard', \n    component: StaffDashboardComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['Staff'] }\n  },\n  {\n    path: 'staff-profile', \n    component: StaffProfileComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['Staff'] }\n  },\n  {\n    path: 'staff-submit-sample', \n    component: StaffSubmitSampleComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['Staff'] }\n  },\n  {\n    path: 'cmw-menu', \n    component: CmwMenuComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['Staff'] }\n  },\n  {\n    path: 'submit-cmw-request', \n    component: SubmitCmwRequestComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['Staff'] }\n  },\n  {\n    path: 'submit-cmw-deposit', \n    component: SubmitCmwDepositComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['Staff'] }\n  },\n  {\n    path: 'submit-cmw-revitalization', \n    component: SubmitCmwRevitalizationComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['Staff'] }\n  },\n  {\n    path: 'staff-view-databases', \n    component: StaffViewDatabasesComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['Staff'] }\n  },\n  {\n    path: 'staff-view-samples', \n    component: StaffViewSamplesComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['Staff'] }\n  },\n  {\n    path: 'staff-help', \n    component: StaffHelpComponent,\n    canActivate: [AuthenticationGuard],\n    data: {roles: ['Staff'] }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {\n    scrollPositionRestoration: 'enabled',\n    anchorScrolling: 'enabled'\n  })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/_guards/authentication.guard.ts\n            \n\n                \n                Description\n                \n                \n                    FOR ACTIVATING COMPONENTS\n\n                \n\n\n                \n                Implements\n                \n                \n                                CanActivate\n                                CanActivateChild\n                                CanLoad\n                \n\n                \n                Example\n                \n                \n                \n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                canActivateChild\n                            \n                            \n                                canLoad\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, authService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/_guards/authentication.guard.ts:33\n                            \n                        \n\n                \n                    \n                            Creates an instance of AuthenticationGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for routing/navigating to other components\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_guards/authentication.guard.ts:60\n                \n            \n\n\n            \n                \n                    This function is used to test if a user has the permissions/privileges to activate (navigate to) a specific component \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    next\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        route to be activated\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        represents the state of the router at a moment in time.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise | boolean | UrlTree\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivateChild\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivateChild(next: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_guards/authentication.guard.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    next\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise | boolean | UrlTree\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canLoad\n                        \n                        \n                    \n                \n            \n            \n                \ncanLoad(route: Route, segments: UrlSegment[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/_guards/authentication.guard.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    segments\n                                    \n                                            UrlSegment[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise | boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import * as core from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, CanLoad, Route, Router, RouterStateSnapshot, UrlSegment, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthenticationService } from '../_services/authentication.service';\n\n/**\n * FOR ACTIVATING COMPONENTS\n *\n * @export\n * @class AuthenticationGuard\n * @implements {CanActivate}\n * @implements {CanActivateChild}\n * @implements {CanLoad}\n */\n@core.Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationGuard implements CanActivate, CanActivateChild, CanLoad {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n   * Creates an instance of AuthenticationGuard.\n   * @param {Router} router for routing/navigating to other components\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @memberof AuthenticationGuard\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private router: Router,\n    private authService: AuthenticationService\n  ) { }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CAN ACTIVATE \n  /**\n   * This function is used to test if a user has the permissions/privileges to activate (navigate to) a specific component \n   *\n   * @param {ActivatedRouteSnapshot} next route to be activated\n   * @param {RouterStateSnapshot} state represents the state of the router at a moment in time.\n   * @returns {(Observable | Promise | boolean | UrlTree)}\n   * @memberof AuthenticationGuard\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable | Promise | boolean | UrlTree {\n\n    const user = this.authService.getCurrentSessionValue;   // current user\n\n    // if current user exists (user logged into session)\n    if (user) {\n\n      // if user does not have permission - return false\n      if (next.data.roles && next.data.roles.indexOf(user.user.permission) === -1) {\n\n        this.router.navigate(['/']);\n        return false;\n\n      }\n\n      // else - return true\n      return true;\n    }\n\n    // else rerouted to login page\n    this.router.navigate(['/login']);\n    return false;\n  }\n\n  canActivateChild(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable | Promise | boolean | UrlTree {\n    return true;\n  }\n\n  canLoad(\n    route: Route,\n    segments: UrlSegment[]): Observable | Promise | boolean {\n    return true;\n  }\n\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/authentication.service.ts\n        \n\n            \n                Description\n            \n            \n                Used to handle all session and authentication related matters. Such as making requests to the API for authentication, \nor controlling sessions values. All current users' information is handled here.\n\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                currentSession\n                            \n                            \n                                    Private\n                                currentSessionSubject\n                            \n                            \n                                    Private\n                                currentUser\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getFABIUserPrivileges\n                            \n                            \n                                loadFABIUserPrivileges\n                            \n                            \n                                login\n                            \n                            \n                                logoutUser\n                            \n                            \n                                setSessionVariables\n                            \n                            \n                                updateSessionVariables\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getCurrentSessionValue\n                                \n                                \n                                    getCurrentUserValue\n                                \n                                \n                                    isLoggedIn\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: http.HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/_services/authentication.service.ts:47\n                            \n                        \n\n                \n                    \n                            Creates an instance of AuthenticationService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    http.HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for making http calls to the API\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getFABIUserPrivileges\n                        \n                        \n                    \n                \n            \n            \n                \ngetFABIUserPrivileges()\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/authentication.service.ts:289\n                \n            \n\n\n            \n                \n                    This function is used to get the privileges associated with the user currently logged in\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadFABIUserPrivileges\n                        \n                        \n                    \n                \n            \n            \n                \nloadFABIUserPrivileges()\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/authentication.service.ts:250\n                \n            \n\n\n            \n                \n                    This function is used to load the privileges associated with the user currently logged in\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(details: Interface.LoginInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/authentication.service.ts:208\n                \n            \n\n\n            \n                \n                    Method that sends a request to the API to login a user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    details\n                                    \n                                                Interface.LoginInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The details of the user to be logged in\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logoutUser\n                        \n                        \n                    \n                \n            \n            \n                \nlogoutUser()\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/authentication.service.ts:190\n                \n            \n\n\n            \n                \n                    This function will log the user out of the web application and clear the authentication data stored in the local storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setSessionVariables\n                        \n                        \n                    \n                \n            \n            \n                \nsetSessionVariables(tokenDetails: string, user: any, org: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/authentication.service.ts:81\n                \n            \n\n\n            \n                \n                    This function is used to set all the session information and other details pertaining to a user when that user\nlogs onto the system.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tokenDetails\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the token returned from the server\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the users information that has loggedin\n\n                                    \n                                \n                                \n                                    org\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the users organization \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateSessionVariables\n                        \n                        \n                    \n                \n            \n            \n                \nupdateSessionVariables(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/authentication.service.ts:113\n                \n            \n\n\n            \n                \n                    This function is used to update all the session information and other details pertaining to a user when that user\nlogs onto the system.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user that has logged in whose details need to be updated\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            currentSession\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/_services/authentication.service.ts:47\n                            \n                        \n\n                \n                    \n                        The current session details - @type {Observable} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentSessionSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BehaviorSubject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/_services/authentication.service.ts:45\n                            \n                        \n\n                \n                    \n                        The current session subject - @type {BehaviorSubject} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Interface.UserPrivileges\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/_services/authentication.service.ts:43\n                            \n                        \n\n                \n                    \n                        The user that is currently logged into the system - @type {Interface.UserPrivileges} \n\n                    \n                \n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        getCurrentSessionValue\n                    \n                \n\n                \n                    \n                        getgetCurrentSessionValue()\n                    \n                \n                            \n                                \n                                    Defined in src/app/_services/authentication.service.ts:143\n                                \n                            \n                    \n                        \n                                Get the current sessions values\n\n\n                                \n                                \n                                \n                                    Returns :         any\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        getCurrentUserValue\n                    \n                \n\n                \n                    \n                        getgetCurrentUserValue()\n                    \n                \n                            \n                                \n                                    Defined in src/app/_services/authentication.service.ts:158\n                                \n                            \n                    \n                        \n                                Get current users value\n\n\n                                \n                                \n                                \n                                    Returns :         any\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isLoggedIn\n                    \n                \n\n                \n                    \n                        getisLoggedIn()\n                    \n                \n                            \n                                \n                                    Defined in src/app/_services/authentication.service.ts:174\n                                \n                            \n                    \n                        \n                                Check if current user is logged in. \n\n\n                                \n                                \n                                \n                                    Returns :         any\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import * as http from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { config } from \"../../environments/environment.prod\";\nimport * as Interface from '../_interfaces/interfaces';\n\n/**\n *  Used to handle all `session and authentication` related matters. Such as making requests to the API for authentication, \n *  or controlling sessions values. All current users' information is handled here.\n *\n * @export\n * @class AuthenticationService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  //////////////////////////////////////////////// AUTHENTICATION SERVICE VARIABLES ///////////////////////////////////////////////////// \n\n  /** The user that is currently logged into the system - @type {Interface.UserPrivileges} */\n  private currentUser: Interface.UserPrivileges;\n  /** The current session subject - @type {BehaviorSubject} */\n  private currentSessionSubject: BehaviorSubject;\n  /** The current session details - @type {Observable} */\n  public currentSession: Observable;\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of AuthenticationService.\n   * \n   * @param {http.HttpClient} http for making http calls to the API\n   * @memberof AuthenticationService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: http.HttpClient) {\n    //Setting the current session subject based on the user logged in\n    this.currentSessionSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('sessionDetails')));\n    //Setting the current session based on the user logged in\n    this.currentSession = this.currentSessionSubject.asObservable();\n    //Setting the current user\n    this.currentUser = { databases: [] };\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       SET SESSION VARIABLES \n  /** \n   * This function is used to set all the session information and other details pertaining to a user when that user\n   * logs onto the system.\n   * \n   * @param {string} tokenDetails the token returned from the server\n   * @param {*} user the users information that has loggedin\n   * @param {string} org the users organization \n   * \n   * @memberof AuthenticationService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setSessionVariables(tokenDetails: string, user: any, org: string) {\n    let usersDetails = {\n      'ID': user.id,\n      'organisation': org,\n      'name': user.fname,\n      'surname': user.surname,\n      'email': user.email,\n      'permission': user.userType\n    }\n\n    let sess = {\n      'token': tokenDetails,\n      'user': usersDetails\n    }\n\n    localStorage.setItem('sessionDetails', JSON.stringify(sess));\n    localStorage.setItem('loggedIn', JSON.stringify(true));\n    this.currentSessionSubject.next(sess);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       UPDATE SESSION VARIABLES \n  /** \n   * This function is used to update all the session information and other details pertaining to a user when that user\n   * logs onto the system.\n   * \n   * @param {any} user The user that has logged in whose details need to be updated\n   * \n   * @memberof AuthenticationService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateSessionVariables(user: any) {\n    let usersDetails = {\n      'ID': user.id,\n      'organisation': this.getCurrentSessionValue.user.organisation,\n      'name': user.fname,\n      'surname': user.surname,\n      'email': user.email,\n      'permission': user.userType,\n    }\n\n    let sess = {\n      'token': this.getCurrentSessionValue.token,\n      'user': usersDetails\n    }\n\n    localStorage.setItem('sessionDetails', JSON.stringify(sess));\n    this.currentSessionSubject.next(sess);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         CURRENT SESSION VALUE\n  /**\n   * Get the current sessions values\n   *\n   * @readonly\n   * @type {*}\n   * @memberof AuthenticationService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  public get getCurrentSessionValue(): any {\n    return this.currentSessionSubject.value;\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         CURRENT USER VALUE\n  /**\n   * Get current users value\n   *\n   * @readonly\n   * @type {*}\n   * @memberof AuthenticationService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  public get getCurrentUserValue(): any {\n    return this.currentUser;\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         LOGGED IN ?\n  /**\n   * Check if current user is logged in. \n   * \n   * @returns `true` user IS logged in , `false` user NOT logged in\n   * @readonly\n   * @type {*}\n   * @memberof AuthenticationService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  public get isLoggedIn(): any {\n    if (localStorage.getItem('loggedIn')) {\n      return JSON.parse(localStorage.getItem('loggedIn'));\n    }\n    return false;\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof AuthenticationService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logoutUser() {\n    localStorage.removeItem('pre-diagnosis');\n    localStorage.removeItem('sessionDetails');\n    localStorage.setItem('loggedIn', JSON.stringify(false));\n    this.currentSessionSubject.next(null);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             LOGIN \n  /**\n   * Method that sends a request to the API to login a user\n   *\n   * @param {Interface.LoginInfo} details The details of the user to be logged in\n   * @returns API response @type any\n   * \n   * @memberof AuthenticationService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  login(details: Interface.LoginInfo) {\n\n    // Http Request URL\n    let url = `${config.loginURL}/login`;\n    // Http Request Method\n    let method = 'POST';\n\n    // Data to send as JSON\n    const postData = details;\n\n    const options = {\n      headers: new http.HttpHeaders({\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json'\n      }),\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, url, options).pipe(map(response => {\n      if (response && (response.token && response.token != '')) {\n        this.setSessionVariables(response.token, response.userDetails, details.orgName);\n        if (response.userDetails.databases) {\n          this.currentUser.databases = response.userDetails.databases;\n        }\n      }\n      return response;\n    }));\n\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     LOAD FABI USER PRIVILEGES \n  /**\n   * This function is used to load the privileges associated with the user currently logged in\n   * \n   * @memberof AuthenticationService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  loadFABIUserPrivileges() {\n    let getUserDetailsURL = `${config.userManagementURL}/getUserDetails`;\n    let method = 'POST';\n\n    const postData = {\n      \"orgName\": this.getCurrentSessionValue.user.organisation,\n      \"id\": this.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json'\n      },\n      body: postData,\n      json: true\n    };\n\n    this.http.request(method, getUserDetailsURL, options).subscribe((response: any) => {\n      if (response && (response.token && response.token != '')) {\n        if (response.data.databases) {\n          this.currentUser.databases = response.data.databases;\n        }\n      }\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     GET FABI USER PRIVILEGES \n  /**\n   * This function is used to get the privileges associated with the user currently logged in\n   *\n   * @returns API response @type any\n   * \n   * @memberof AuthenticationService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getFABIUserPrivileges() {\n    // if current users value is not set - call loadFABIUserPrivileges() to get the users details\n    if (this.getCurrentUserValue == '' || this.getCurrentUserValue == null) {\n      this.loadFABIUserPrivileges();\n      return this.getCurrentUserValue;\n    } // elss return users details\n    else {\n      return this.getCurrentUserValue;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CMWDeposit.html":{"url":"interfaces/CMWDeposit.html","title":"interface - CMWDeposit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CMWDeposit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/culture-collection-api.service.ts\n        \n\n            \n                Description\n            \n            \n                Object for defining the CMW deposit form values\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        additionalNotes\n                                \n                                \n                                        cmwCultureNumber\n                                \n                                \n                                        collectedBy\n                                \n                                \n                                        continent\n                                \n                                \n                                        country\n                                \n                                \n                                        dateCollected\n                                \n                                \n                                        dateSubmitted\n                                \n                                \n                                        donatedBy\n                                \n                                \n                                        epitheton\n                                \n                                \n                                        formID\n                                \n                                \n                                        genus\n                                \n                                \n                                        gps\n                                \n                                \n                                        herbariumNumber\n                                \n                                \n                                        host\n                                \n                                \n                                        identifiedBy\n                                \n                                \n                                        internationalCollectionNumber\n                                \n                                \n                                        isolatedBy\n                                \n                                \n                                        locality\n                                \n                                \n                                        name\n                                \n                                \n                                        otherFABICollections\n                                \n                                \n                                        personalCollectionNumber\n                                \n                                \n                                        region\n                                \n                                \n                                        substrate\n                                \n                                \n                                        typeStatus\n                                \n                                \n                                        userID\n                                \n                                \n                                        vector\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        additionalNotes\n                                    \n                                \n                                \n                                    \n                                        additionalNotes:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cmwCultureNumber\n                                    \n                                \n                                \n                                    \n                                        cmwCultureNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        collectedBy\n                                    \n                                \n                                \n                                    \n                                        collectedBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        continent\n                                    \n                                \n                                \n                                    \n                                        continent:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                    \n                                \n                                \n                                    \n                                        country:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateCollected\n                                    \n                                \n                                \n                                    \n                                        dateCollected:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateSubmitted\n                                    \n                                \n                                \n                                    \n                                        dateSubmitted:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        donatedBy\n                                    \n                                \n                                \n                                    \n                                        donatedBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        epitheton\n                                    \n                                \n                                \n                                    \n                                        epitheton:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        formID\n                                    \n                                \n                                \n                                    \n                                        formID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        genus\n                                    \n                                \n                                \n                                    \n                                        genus:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gps\n                                    \n                                \n                                \n                                    \n                                        gps:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        herbariumNumber\n                                    \n                                \n                                \n                                    \n                                        herbariumNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        identifiedBy\n                                    \n                                \n                                \n                                    \n                                        identifiedBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        internationalCollectionNumber\n                                    \n                                \n                                \n                                    \n                                        internationalCollectionNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isolatedBy\n                                    \n                                \n                                \n                                    \n                                        isolatedBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        locality\n                                    \n                                \n                                \n                                    \n                                        locality:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        otherFABICollections\n                                    \n                                \n                                \n                                    \n                                        otherFABICollections:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        personalCollectionNumber\n                                    \n                                \n                                \n                                    \n                                        personalCollectionNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        region\n                                    \n                                \n                                \n                                    \n                                        region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        substrate\n                                    \n                                \n                                \n                                    \n                                        substrate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        typeStatus\n                                    \n                                \n                                \n                                    \n                                        typeStatus:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userID\n                                    \n                                \n                                \n                                    \n                                        userID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vector\n                                    \n                                \n                                \n                                    \n                                        vector:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as http from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport { AuthenticationService } from './authentication.service';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getRequestLogsURL = `${config.cultureClinicURL}/getAllRequestForms`;\nconst getDepositLogsURL = `${config.cultureClinicURL}/getAllDepositForms`;\nconst getRevitalizationLogsURL = `${config.cultureClinicURL}/getAllRevitalizationForms`;\nconst getProcessedLogsURL = `${config.cultureClinicURL}/getAllProcessingForms`;\nconst submitCMWDepositFormURL = `${config.cultureClinicURL}/submitCMWDepositForm`;\nconst submitCMWRequestFormURL = `${config.cultureClinicURL}/submitCMWRequestForm`;\nconst submitCMWRevitalizationFormURL = `${config.cultureClinicURL}/submitCMWRevitalizationForm`;\nconst submitProcessedFormURL = `${config.cultureClinicURL}/submitCMWProcessingForm`;\nconst updateDepositFormStatusURL = `${config.cultureClinicURL}/updateDepositStatus`;\nconst deleteDepositFormURL = `${config.cultureClinicURL}/deleteCMWDepositForm`;\nconst deleteRequestFormURL = `${config.cultureClinicURL}/deleteCMWRequestForm`;\nconst deleteRevitalizationFormURL = `${config.cultureClinicURL}/deleteCMWRevitalizationForm`;\nconst deleteProcessedFormURL = `${config.cultureClinicURL}/deleteCMWProcessingForm`;\n\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW DEPOSIT\n/**\n *  Object for defining the CMW deposit form values\n *\n * @export\n * @interface CMWDeposit\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWDeposit {\n  userID: string;                         //The user id of the user submitting the form\n  cmwCultureNumber: string;               //The culture number\n  genus: string;                          //The genus of the culture\n  epitheton: string;                      //The epitheton of the culture\n  personalCollectionNumber: string;       //The personal collection number (if any)\n  internationalCollectionNumber: string;  //The international collection number (if any)\n  herbariumNumber: string;                //The herbarium number of the culture\n  otherFABICollections: string;           //Indicates if there are currently any other collections\n  name: string;                           //The name of the culture\n  typeStatus: string;                     //The type status of the culture\n  host: string;                           //The host of the culture\n  vector: string;                         //The vector of the culture\n  substrate: string;                      //The substrate of the culture\n  continent: string;                      //The continent where the culture originated from\n  country: string;                        //The country where the culture originated from\n  region: string;                         //The region where the culture originated from\n  locality: string;                       //The locality of the culture\n  gps: string;                            //The GPS coordinates of where the culture originated from\n  collectedBy: string;                    //The user who collected the culture\n  dateCollected: string;                  //The date that the culture was collected\n  isolatedBy: string;                     //The user who isolated the culture\n  identifiedBy: string;                   //The user who identified the culture\n  donatedBy: string;                      //The user who donated the culture (if any)\n  additionalNotes: string;                //Any additional notes (if any)\n  dateSubmitted: string;                  //The date that the form was submitted\n  formID: string;                         //The id number for the actual form\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW REQUEST\n/**\n *  Object for defining the CMW request form values\n *\n * @export\n * @interface CMWRequest\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWRequest {\n  userID: string;                         //The user id of the user submitting the form\n  requestor: string;                      //The user who is requesting the culture\n  taxonName: string;                      //The taxon name of the culture\n  cultureNumber: string;                  //The culture number\n  dateRequested: string;                  //The date that the culture is requested for\n  referenceNumber: string;                //The reference number\n  notes: string;                          //Any notes (if any)\n  dateSubmitted: string;                  //The date that the form was submitted\n}\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW REVILIZATION\n/**\n * Object for defining the CMW revitalization form values\n *\n * @export\n * @interface CMWRevitalization\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWRevitalization {\n  userID: string;                         //The user id of the user submitting the form\n  requestor: string;                      //The user who is requesting the culture\n  currentName: string;                    //The current name of the culture\n  nameBionumerics: string;                //The bionumeric name of the culture\n  cultureNumber: string;                  //The culture number\n  cultureCondition: string;               //The condition of the culture\n  sequenceDateSubmitted: string;          //The sequence date submitted (if any)\n  referenceNumber: string;                //The reference number\n  dateRequested: string;                  //The date that the culture is requested\n  dateReturned: string;                   //The date that the culture was returned\n  dateSubmitted: string;                  //The date that the form was submitted\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            PROCESSED FORM\n/**\n * Object for defining the processed deposit form values\n *\n * @export\n * @interface ProcessedForm\n */\n///////////////////////////////////////////////////////////////////////\nexport interface ProcessedForm {\n  userID: string;                         //The user id of the user submitting the form\n  statusOfCulture: string;               //The status of the culture for the processed form\n  agarSlants: string;                     //The agar slants for the processed form\n  water: string;                          //The water for the processed form\n  oil: string;                            //The oil for the processed form\n  roomTemperature: string;                //The room temperature for the processed form\n  c18: string;                            //The c18 for the processed form\n  freezeDried: string;                    //The freezed dried for the processed form\n  freeze: string;                         //The freeze for the processed form\n  dateOfCollectionValidation: string;     //The date of collection validation for the processed form\n  microscopeSlides: string;               //The microscope slides for the processed form\n  dateSubmittedProcessedForm: string;     //The date submitted for the processed form\n  cultureCollectionNumber: string;        //The culture collection number for the processed form\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                          UPDATED DEPOSIT FORM\n/**\n * Object for defining the object for updating the status of a deposit form\n *\n * @export\n * @interface UpdateDepositForm\n */\n///////////////////////////////////////////////////////////////////////\nexport interface UpdateDepositForm {\n  userID: string;                         //The user id off the user submitting the form\n  status: string;                         //The new status of the deposit form\n  formID: string;                         //The id of the form to be updated\n}\n\n\n/**\n * Used to handled all `culture collection` requests and functions\n *\n * @export\n * @class CultureCollectionAPIService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CultureCollectionAPIService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of CultureCollectionAPIService.\n  * \n  * @param {http.HttpClient} http for making http calls to the API\n  * @param {AuthenticationService} authService for calling the *authentication* service\n  * @memberof CultureCollectionAPIService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: http.HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL REQUEST LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'REQUEST'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllRequestLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getRequestLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL DEPOSIT LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'DEPOSIT'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllDepositLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getDepositLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL REVITALIZATION LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'REVITALIZATION'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllRevitalizationLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getRevitalizationLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL PROCESSED LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'PROCESSED'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllProcessedLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getProcessedLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      SUBMIT CMW DEPOSIT FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW deposit form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWDepositForm(data: CMWDeposit) {\n    const options = {\n      method: 'POST',\n      url: submitCMWDepositFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWDepositFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT CMW REQUEST FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW request form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWRequestForm(data: CMWRequest) {\n    const options = {\n      headers: new http.HttpHeaders({\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      }),\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWRequestFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT CMW REVITALIZATION FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW revitalization form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWRevitalizationForm(data: CMWRevitalization) {\n    const options = {\n      method: 'POST',\n      url: submitCMWRevitalizationFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWRevitalizationFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT PROCESSED FORM \n  /**\n   *    This function sends a POST request to the server to submit a process form for a deposit form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitProcessedForm(data: ProcessedForm) {\n    const options = {\n      method: 'POST',\n      url: submitProcessedFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitProcessedFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE DEPOSIT FORM STATUS \n  /**\n   *    This function is used to update the status of a deposit form to 'processed'.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateDepositFormStatus(data: UpdateDepositForm) {\n    const options = {\n      method: 'POST',\n      url: updateDepositFormStatusURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateDepositFormStatusURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE DEPOSIT FORM \n  /**\n   *    This function is used to delete a deposit form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteDepositForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteDepositFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteDepositFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE REQUEST FORM \n  /**\n   *    This function is used to delete a request form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteRequestForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteRequestFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteRequestFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE REVITALIZATION FORM \n  /**\n   *    This function is used to delete a revitalization form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteRevitalizationForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteRevitalizationFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteRevitalizationFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE PROCESSED FORM \n  /**\n   *    This function is used to delete a processed form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteProcessedForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteProcessedFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteProcessedFormURL, options);\n  }\n\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CMWRequest.html":{"url":"interfaces/CMWRequest.html","title":"interface - CMWRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CMWRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/culture-collection-api.service.ts\n        \n\n            \n                Description\n            \n            \n                Object for defining the CMW request form values\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cultureNumber\n                                \n                                \n                                        dateRequested\n                                \n                                \n                                        dateSubmitted\n                                \n                                \n                                        notes\n                                \n                                \n                                        referenceNumber\n                                \n                                \n                                        requestor\n                                \n                                \n                                        taxonName\n                                \n                                \n                                        userID\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cultureNumber\n                                    \n                                \n                                \n                                    \n                                        cultureNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateRequested\n                                    \n                                \n                                \n                                    \n                                        dateRequested:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateSubmitted\n                                    \n                                \n                                \n                                    \n                                        dateSubmitted:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notes\n                                    \n                                \n                                \n                                    \n                                        notes:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        referenceNumber\n                                    \n                                \n                                \n                                    \n                                        referenceNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestor\n                                    \n                                \n                                \n                                    \n                                        requestor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        taxonName\n                                    \n                                \n                                \n                                    \n                                        taxonName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userID\n                                    \n                                \n                                \n                                    \n                                        userID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as http from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport { AuthenticationService } from './authentication.service';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getRequestLogsURL = `${config.cultureClinicURL}/getAllRequestForms`;\nconst getDepositLogsURL = `${config.cultureClinicURL}/getAllDepositForms`;\nconst getRevitalizationLogsURL = `${config.cultureClinicURL}/getAllRevitalizationForms`;\nconst getProcessedLogsURL = `${config.cultureClinicURL}/getAllProcessingForms`;\nconst submitCMWDepositFormURL = `${config.cultureClinicURL}/submitCMWDepositForm`;\nconst submitCMWRequestFormURL = `${config.cultureClinicURL}/submitCMWRequestForm`;\nconst submitCMWRevitalizationFormURL = `${config.cultureClinicURL}/submitCMWRevitalizationForm`;\nconst submitProcessedFormURL = `${config.cultureClinicURL}/submitCMWProcessingForm`;\nconst updateDepositFormStatusURL = `${config.cultureClinicURL}/updateDepositStatus`;\nconst deleteDepositFormURL = `${config.cultureClinicURL}/deleteCMWDepositForm`;\nconst deleteRequestFormURL = `${config.cultureClinicURL}/deleteCMWRequestForm`;\nconst deleteRevitalizationFormURL = `${config.cultureClinicURL}/deleteCMWRevitalizationForm`;\nconst deleteProcessedFormURL = `${config.cultureClinicURL}/deleteCMWProcessingForm`;\n\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW DEPOSIT\n/**\n *  Object for defining the CMW deposit form values\n *\n * @export\n * @interface CMWDeposit\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWDeposit {\n  userID: string;                         //The user id of the user submitting the form\n  cmwCultureNumber: string;               //The culture number\n  genus: string;                          //The genus of the culture\n  epitheton: string;                      //The epitheton of the culture\n  personalCollectionNumber: string;       //The personal collection number (if any)\n  internationalCollectionNumber: string;  //The international collection number (if any)\n  herbariumNumber: string;                //The herbarium number of the culture\n  otherFABICollections: string;           //Indicates if there are currently any other collections\n  name: string;                           //The name of the culture\n  typeStatus: string;                     //The type status of the culture\n  host: string;                           //The host of the culture\n  vector: string;                         //The vector of the culture\n  substrate: string;                      //The substrate of the culture\n  continent: string;                      //The continent where the culture originated from\n  country: string;                        //The country where the culture originated from\n  region: string;                         //The region where the culture originated from\n  locality: string;                       //The locality of the culture\n  gps: string;                            //The GPS coordinates of where the culture originated from\n  collectedBy: string;                    //The user who collected the culture\n  dateCollected: string;                  //The date that the culture was collected\n  isolatedBy: string;                     //The user who isolated the culture\n  identifiedBy: string;                   //The user who identified the culture\n  donatedBy: string;                      //The user who donated the culture (if any)\n  additionalNotes: string;                //Any additional notes (if any)\n  dateSubmitted: string;                  //The date that the form was submitted\n  formID: string;                         //The id number for the actual form\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW REQUEST\n/**\n *  Object for defining the CMW request form values\n *\n * @export\n * @interface CMWRequest\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWRequest {\n  userID: string;                         //The user id of the user submitting the form\n  requestor: string;                      //The user who is requesting the culture\n  taxonName: string;                      //The taxon name of the culture\n  cultureNumber: string;                  //The culture number\n  dateRequested: string;                  //The date that the culture is requested for\n  referenceNumber: string;                //The reference number\n  notes: string;                          //Any notes (if any)\n  dateSubmitted: string;                  //The date that the form was submitted\n}\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW REVILIZATION\n/**\n * Object for defining the CMW revitalization form values\n *\n * @export\n * @interface CMWRevitalization\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWRevitalization {\n  userID: string;                         //The user id of the user submitting the form\n  requestor: string;                      //The user who is requesting the culture\n  currentName: string;                    //The current name of the culture\n  nameBionumerics: string;                //The bionumeric name of the culture\n  cultureNumber: string;                  //The culture number\n  cultureCondition: string;               //The condition of the culture\n  sequenceDateSubmitted: string;          //The sequence date submitted (if any)\n  referenceNumber: string;                //The reference number\n  dateRequested: string;                  //The date that the culture is requested\n  dateReturned: string;                   //The date that the culture was returned\n  dateSubmitted: string;                  //The date that the form was submitted\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            PROCESSED FORM\n/**\n * Object for defining the processed deposit form values\n *\n * @export\n * @interface ProcessedForm\n */\n///////////////////////////////////////////////////////////////////////\nexport interface ProcessedForm {\n  userID: string;                         //The user id of the user submitting the form\n  statusOfCulture: string;               //The status of the culture for the processed form\n  agarSlants: string;                     //The agar slants for the processed form\n  water: string;                          //The water for the processed form\n  oil: string;                            //The oil for the processed form\n  roomTemperature: string;                //The room temperature for the processed form\n  c18: string;                            //The c18 for the processed form\n  freezeDried: string;                    //The freezed dried for the processed form\n  freeze: string;                         //The freeze for the processed form\n  dateOfCollectionValidation: string;     //The date of collection validation for the processed form\n  microscopeSlides: string;               //The microscope slides for the processed form\n  dateSubmittedProcessedForm: string;     //The date submitted for the processed form\n  cultureCollectionNumber: string;        //The culture collection number for the processed form\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                          UPDATED DEPOSIT FORM\n/**\n * Object for defining the object for updating the status of a deposit form\n *\n * @export\n * @interface UpdateDepositForm\n */\n///////////////////////////////////////////////////////////////////////\nexport interface UpdateDepositForm {\n  userID: string;                         //The user id off the user submitting the form\n  status: string;                         //The new status of the deposit form\n  formID: string;                         //The id of the form to be updated\n}\n\n\n/**\n * Used to handled all `culture collection` requests and functions\n *\n * @export\n * @class CultureCollectionAPIService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CultureCollectionAPIService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of CultureCollectionAPIService.\n  * \n  * @param {http.HttpClient} http for making http calls to the API\n  * @param {AuthenticationService} authService for calling the *authentication* service\n  * @memberof CultureCollectionAPIService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: http.HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL REQUEST LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'REQUEST'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllRequestLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getRequestLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL DEPOSIT LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'DEPOSIT'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllDepositLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getDepositLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL REVITALIZATION LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'REVITALIZATION'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllRevitalizationLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getRevitalizationLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL PROCESSED LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'PROCESSED'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllProcessedLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getProcessedLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      SUBMIT CMW DEPOSIT FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW deposit form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWDepositForm(data: CMWDeposit) {\n    const options = {\n      method: 'POST',\n      url: submitCMWDepositFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWDepositFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT CMW REQUEST FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW request form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWRequestForm(data: CMWRequest) {\n    const options = {\n      headers: new http.HttpHeaders({\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      }),\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWRequestFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT CMW REVITALIZATION FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW revitalization form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWRevitalizationForm(data: CMWRevitalization) {\n    const options = {\n      method: 'POST',\n      url: submitCMWRevitalizationFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWRevitalizationFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT PROCESSED FORM \n  /**\n   *    This function sends a POST request to the server to submit a process form for a deposit form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitProcessedForm(data: ProcessedForm) {\n    const options = {\n      method: 'POST',\n      url: submitProcessedFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitProcessedFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE DEPOSIT FORM STATUS \n  /**\n   *    This function is used to update the status of a deposit form to 'processed'.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateDepositFormStatus(data: UpdateDepositForm) {\n    const options = {\n      method: 'POST',\n      url: updateDepositFormStatusURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateDepositFormStatusURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE DEPOSIT FORM \n  /**\n   *    This function is used to delete a deposit form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteDepositForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteDepositFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteDepositFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE REQUEST FORM \n  /**\n   *    This function is used to delete a request form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteRequestForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteRequestFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteRequestFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE REVITALIZATION FORM \n  /**\n   *    This function is used to delete a revitalization form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteRevitalizationForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteRevitalizationFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteRevitalizationFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE PROCESSED FORM \n  /**\n   *    This function is used to delete a processed form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteProcessedForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteProcessedFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteProcessedFormURL, options);\n  }\n\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CMWRevitalization.html":{"url":"interfaces/CMWRevitalization.html","title":"interface - CMWRevitalization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CMWRevitalization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/culture-collection-api.service.ts\n        \n\n            \n                Description\n            \n            \n                Object for defining the CMW revitalization form values\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cultureCondition\n                                \n                                \n                                        cultureNumber\n                                \n                                \n                                        currentName\n                                \n                                \n                                        dateRequested\n                                \n                                \n                                        dateReturned\n                                \n                                \n                                        dateSubmitted\n                                \n                                \n                                        nameBionumerics\n                                \n                                \n                                        referenceNumber\n                                \n                                \n                                        requestor\n                                \n                                \n                                        sequenceDateSubmitted\n                                \n                                \n                                        userID\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cultureCondition\n                                    \n                                \n                                \n                                    \n                                        cultureCondition:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cultureNumber\n                                    \n                                \n                                \n                                    \n                                        cultureNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        currentName\n                                    \n                                \n                                \n                                    \n                                        currentName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateRequested\n                                    \n                                \n                                \n                                    \n                                        dateRequested:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateReturned\n                                    \n                                \n                                \n                                    \n                                        dateReturned:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateSubmitted\n                                    \n                                \n                                \n                                    \n                                        dateSubmitted:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nameBionumerics\n                                    \n                                \n                                \n                                    \n                                        nameBionumerics:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        referenceNumber\n                                    \n                                \n                                \n                                    \n                                        referenceNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestor\n                                    \n                                \n                                \n                                    \n                                        requestor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sequenceDateSubmitted\n                                    \n                                \n                                \n                                    \n                                        sequenceDateSubmitted:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userID\n                                    \n                                \n                                \n                                    \n                                        userID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as http from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport { AuthenticationService } from './authentication.service';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getRequestLogsURL = `${config.cultureClinicURL}/getAllRequestForms`;\nconst getDepositLogsURL = `${config.cultureClinicURL}/getAllDepositForms`;\nconst getRevitalizationLogsURL = `${config.cultureClinicURL}/getAllRevitalizationForms`;\nconst getProcessedLogsURL = `${config.cultureClinicURL}/getAllProcessingForms`;\nconst submitCMWDepositFormURL = `${config.cultureClinicURL}/submitCMWDepositForm`;\nconst submitCMWRequestFormURL = `${config.cultureClinicURL}/submitCMWRequestForm`;\nconst submitCMWRevitalizationFormURL = `${config.cultureClinicURL}/submitCMWRevitalizationForm`;\nconst submitProcessedFormURL = `${config.cultureClinicURL}/submitCMWProcessingForm`;\nconst updateDepositFormStatusURL = `${config.cultureClinicURL}/updateDepositStatus`;\nconst deleteDepositFormURL = `${config.cultureClinicURL}/deleteCMWDepositForm`;\nconst deleteRequestFormURL = `${config.cultureClinicURL}/deleteCMWRequestForm`;\nconst deleteRevitalizationFormURL = `${config.cultureClinicURL}/deleteCMWRevitalizationForm`;\nconst deleteProcessedFormURL = `${config.cultureClinicURL}/deleteCMWProcessingForm`;\n\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW DEPOSIT\n/**\n *  Object for defining the CMW deposit form values\n *\n * @export\n * @interface CMWDeposit\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWDeposit {\n  userID: string;                         //The user id of the user submitting the form\n  cmwCultureNumber: string;               //The culture number\n  genus: string;                          //The genus of the culture\n  epitheton: string;                      //The epitheton of the culture\n  personalCollectionNumber: string;       //The personal collection number (if any)\n  internationalCollectionNumber: string;  //The international collection number (if any)\n  herbariumNumber: string;                //The herbarium number of the culture\n  otherFABICollections: string;           //Indicates if there are currently any other collections\n  name: string;                           //The name of the culture\n  typeStatus: string;                     //The type status of the culture\n  host: string;                           //The host of the culture\n  vector: string;                         //The vector of the culture\n  substrate: string;                      //The substrate of the culture\n  continent: string;                      //The continent where the culture originated from\n  country: string;                        //The country where the culture originated from\n  region: string;                         //The region where the culture originated from\n  locality: string;                       //The locality of the culture\n  gps: string;                            //The GPS coordinates of where the culture originated from\n  collectedBy: string;                    //The user who collected the culture\n  dateCollected: string;                  //The date that the culture was collected\n  isolatedBy: string;                     //The user who isolated the culture\n  identifiedBy: string;                   //The user who identified the culture\n  donatedBy: string;                      //The user who donated the culture (if any)\n  additionalNotes: string;                //Any additional notes (if any)\n  dateSubmitted: string;                  //The date that the form was submitted\n  formID: string;                         //The id number for the actual form\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW REQUEST\n/**\n *  Object for defining the CMW request form values\n *\n * @export\n * @interface CMWRequest\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWRequest {\n  userID: string;                         //The user id of the user submitting the form\n  requestor: string;                      //The user who is requesting the culture\n  taxonName: string;                      //The taxon name of the culture\n  cultureNumber: string;                  //The culture number\n  dateRequested: string;                  //The date that the culture is requested for\n  referenceNumber: string;                //The reference number\n  notes: string;                          //Any notes (if any)\n  dateSubmitted: string;                  //The date that the form was submitted\n}\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW REVILIZATION\n/**\n * Object for defining the CMW revitalization form values\n *\n * @export\n * @interface CMWRevitalization\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWRevitalization {\n  userID: string;                         //The user id of the user submitting the form\n  requestor: string;                      //The user who is requesting the culture\n  currentName: string;                    //The current name of the culture\n  nameBionumerics: string;                //The bionumeric name of the culture\n  cultureNumber: string;                  //The culture number\n  cultureCondition: string;               //The condition of the culture\n  sequenceDateSubmitted: string;          //The sequence date submitted (if any)\n  referenceNumber: string;                //The reference number\n  dateRequested: string;                  //The date that the culture is requested\n  dateReturned: string;                   //The date that the culture was returned\n  dateSubmitted: string;                  //The date that the form was submitted\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            PROCESSED FORM\n/**\n * Object for defining the processed deposit form values\n *\n * @export\n * @interface ProcessedForm\n */\n///////////////////////////////////////////////////////////////////////\nexport interface ProcessedForm {\n  userID: string;                         //The user id of the user submitting the form\n  statusOfCulture: string;               //The status of the culture for the processed form\n  agarSlants: string;                     //The agar slants for the processed form\n  water: string;                          //The water for the processed form\n  oil: string;                            //The oil for the processed form\n  roomTemperature: string;                //The room temperature for the processed form\n  c18: string;                            //The c18 for the processed form\n  freezeDried: string;                    //The freezed dried for the processed form\n  freeze: string;                         //The freeze for the processed form\n  dateOfCollectionValidation: string;     //The date of collection validation for the processed form\n  microscopeSlides: string;               //The microscope slides for the processed form\n  dateSubmittedProcessedForm: string;     //The date submitted for the processed form\n  cultureCollectionNumber: string;        //The culture collection number for the processed form\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                          UPDATED DEPOSIT FORM\n/**\n * Object for defining the object for updating the status of a deposit form\n *\n * @export\n * @interface UpdateDepositForm\n */\n///////////////////////////////////////////////////////////////////////\nexport interface UpdateDepositForm {\n  userID: string;                         //The user id off the user submitting the form\n  status: string;                         //The new status of the deposit form\n  formID: string;                         //The id of the form to be updated\n}\n\n\n/**\n * Used to handled all `culture collection` requests and functions\n *\n * @export\n * @class CultureCollectionAPIService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CultureCollectionAPIService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of CultureCollectionAPIService.\n  * \n  * @param {http.HttpClient} http for making http calls to the API\n  * @param {AuthenticationService} authService for calling the *authentication* service\n  * @memberof CultureCollectionAPIService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: http.HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL REQUEST LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'REQUEST'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllRequestLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getRequestLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL DEPOSIT LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'DEPOSIT'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllDepositLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getDepositLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL REVITALIZATION LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'REVITALIZATION'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllRevitalizationLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getRevitalizationLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL PROCESSED LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'PROCESSED'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllProcessedLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getProcessedLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      SUBMIT CMW DEPOSIT FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW deposit form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWDepositForm(data: CMWDeposit) {\n    const options = {\n      method: 'POST',\n      url: submitCMWDepositFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWDepositFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT CMW REQUEST FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW request form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWRequestForm(data: CMWRequest) {\n    const options = {\n      headers: new http.HttpHeaders({\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      }),\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWRequestFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT CMW REVITALIZATION FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW revitalization form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWRevitalizationForm(data: CMWRevitalization) {\n    const options = {\n      method: 'POST',\n      url: submitCMWRevitalizationFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWRevitalizationFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT PROCESSED FORM \n  /**\n   *    This function sends a POST request to the server to submit a process form for a deposit form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitProcessedForm(data: ProcessedForm) {\n    const options = {\n      method: 'POST',\n      url: submitProcessedFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitProcessedFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE DEPOSIT FORM STATUS \n  /**\n   *    This function is used to update the status of a deposit form to 'processed'.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateDepositFormStatus(data: UpdateDepositForm) {\n    const options = {\n      method: 'POST',\n      url: updateDepositFormStatusURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateDepositFormStatusURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE DEPOSIT FORM \n  /**\n   *    This function is used to delete a deposit form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteDepositForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteDepositFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteDepositFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE REQUEST FORM \n  /**\n   *    This function is used to delete a request form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteRequestForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteRequestFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteRequestFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE REVITALIZATION FORM \n  /**\n   *    This function is used to delete a revitalization form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteRevitalizationForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteRevitalizationFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteRevitalizationFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE PROCESSED FORM \n  /**\n   *    This function is used to delete a processed form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteProcessedForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteProcessedFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteProcessedFormURL, options);\n  }\n\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClinicAdminViewSamplesComponent.html":{"url":"classes/ClinicAdminViewSamplesComponent.html","title":"class - ClinicAdminViewSamplesComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClinicAdminViewSamplesComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                editingSample\n                            \n                            \n                                isEditingSample\n                            \n                            \n                                sampleFields\n                            \n                            \n                                samples\n                            \n                            \n                                sampleTableLoading\n                            \n                            \n                                    Public\n                                searchSample\n                            \n                            \n                                selectedSampleData\n                            \n                            \n                                statusTypes\n                            \n                            \n                                    Private\n                                toggle_status\n                            \n                            \n                                updateSampleStatusForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                resetSampleFields\n                            \n                            \n                                selectSample\n                            \n                            \n                                toggleNotificaitonsTab\n                            \n                            \n                                updateSampleStatus\n                            \n                            \n                                updatingSampleStatus\n                            \n                            \n                                viewSamples\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService, diagnosticClinicService: DiagnosticClinicAPIService, dialog: MatDialog, router: Router, formBuilder: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:49\n                            \n                        \n\n                \n                    \n                            Creates an instance of ClinicAdminViewSamplesComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service\n\n                                                        \n                                                \n                                                \n                                                        diagnosticClinicService\n                                                  \n                                                        \n                                                                        DiagnosticClinicAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Diagnostic Clinic API service\n\n                                                        \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For pop-up dialogs\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for routing/navigating to other components\n\n                                                        \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            editingSample\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isEditingSample\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sampleFields\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            samples\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sampleTableLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:49\n                            \n                        \n\n                \n                    \n                        Specifies if the list of samples have been retreived to disable the loading spinner - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            searchSample\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:40\n                            \n                        \n\n                \n                    \n                        The search item the user is looking for in the table -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedSampleData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statusTypes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\"complete\", \"submitted\", \"diagnosing\"]\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            toggle_status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:38\n                            \n                        \n\n                \n                    \n                        Indicates if the notifications tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateSampleStatusForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:42\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:114\n                \n            \n\n\n            \n                \n                    This function will log the user out of the web application and clear the authentication data stored in the local storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:84\n                \n            \n\n\n            \n                \n                    This function is called when the page loads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resetSampleFields\n                        \n                        \n                    \n                \n            \n            \n                \nresetSampleFields()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:174\n                \n            \n\n\n            \n                \n                    Resets the display fields for the sample\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            selectSample\n                        \n                        \n                    \n                \n            \n            \n                \nselectSample(sample: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:154\n                \n            \n\n\n            \n                \n                    Called when a user selects a sample and sets the selected sample as well as it's data fields\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sample\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleNotificaitonsTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleNotificaitonsTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:101\n                \n            \n\n\n            \n                \n                    This function is used to toggle the notifications tab.\nIf set to true, a class is added which ensures that the notifications tab is displayed. \nIf set to flase, a class is removed which hides the notifications tab.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateSampleStatus\n                        \n                        \n                    \n                \n            \n            \n                \nupdateSampleStatus(sample: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:201\n                \n            \n\n\n            \n                \n                    This function is used to update the sample status of a specific sample.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sample\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updatingSampleStatus\n                        \n                        \n                    \n                \n            \n            \n                \nupdatingSampleStatus(sample: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:188\n                \n            \n\n\n            \n                \n                    Checks whether the user is updating the sample status. Used to update interface.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sample\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            viewSamples\n                        \n                        \n                    \n                \n            \n            \n                \nviewSamples()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts:128\n                \n            \n\n\n            \n                \n                    This function will be used to load all of the samples belonging to all organization into the HTML page\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog } from '@angular/material';\nimport { Router } from '@angular/router';\nimport { LoadingComponent } from 'src/app/_loading/loading.component';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { DiagnosticClinicAPIService } from 'src/app/_services/diagnostic-clinic-api.service';\n\n@core.Component({\n  selector: 'app-clinic-admin-view-samples',\n  templateUrl: './clinic-admin-view-samples.component.html',\n  styleUrls: ['./clinic-admin-view-samples.component.scss']\n})\nexport class ClinicAdminViewSamplesComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  private toggle_status: boolean = false;\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchSample: string = \"\";\n  statusTypes = [\"complete\", \"submitted\", \"diagnosing\"];\n  updateSampleStatusForm: FormGroup;\n  editingSample: any;\n  isEditingSample: boolean = false;\n  sampleFields: any[] = [];\n  samples: any[];\n  selectedSampleData: any\n  /** Specifies if the list of samples have been retreived to disable the loading spinner - @type {boolean} */\n  sampleTableLoading: boolean = true;\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of ClinicAdminViewSamplesComponent.\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {DiagnosticClinicAPIService} diagnosticClinicService For calling the Diagnostic Clinic API service\n   * @param {MatDialog} dialog For pop-up dialogs\n   * @param {Router} router for routing/navigating to other components\n   * \n   * @memberof ClinicAdminViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private authService: AuthenticationService,\n    private diagnosticClinicService: DiagnosticClinicAPIService,\n    private dialog: MatDialog,\n    private router: Router,\n    private formBuilder: FormBuilder,\n  ) {\n    this.updateSampleStatusForm = this.formBuilder.group({\n      sample_status: ['', Validators.required]\n    })\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                           NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @description 1. Call viewSamples()\n   * @memberof ClinicAdminViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    //Calling the neccessary functions as the page loads\n    this.viewSamples();\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    TOGGLE NOTIFICATIONS TAB\n  /**\n   *  This function is used to toggle the notifications tab.\n   *  \n   *  If set to true, a class is added which ensures that the notifications tab is displayed. \n   *  If set to flase, a class is removed which hides the notifications tab.\n   * \n   * @memberof ClinicAdminViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificaitonsTab() {\n    this.toggle_status = !this.toggle_status;\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof ClinicAdminViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            VIEW SAMPLES \n  /**\n   * This function will be used to load all of the samples belonging to all organization into the HTML page\n   * \n   * @memberof ClinicAdminViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  viewSamples() {\n\n    this.diagnosticClinicService.getAllSamples().subscribe((response: any) => {\n\n      if (response.success == true && response.code == 200) {\n\n        this.samples = response.data.samples;\n\n        //Deactivate loading table spinners\n        this.sampleTableLoading = false;\n\n      } else if (response.success == false) {\n        //POPUP MESSAGE\n      }\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            SELECT SAMPLE \n  /**\n   * Called when a user selects a sample and sets the selected sample as well as it's data fields\n   *\n   * @param {*} sample\n   * @memberof ClinicAdminViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  selectSample(sample: any) {\n    this.selectedSampleData = sample.data;\n    Object.keys(this.selectedSampleData).forEach((column) => {\n\n      let obj = {\n        'name': column\n      }\n      this.sampleFields.push(obj);\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            RESET SAMPLE FIELDS \n  /**\n   * Resets the display fields for the sample\n   *\n   * @memberof ClinicAdminViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  resetSampleFields() {\n    this.sampleFields = [];\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          UPDATING SAMPLE STATUS ?\n  /**\n   *  Checks whether the user is updating the sample status. Used to update interface.\n   *\n   * @param {*} sample\n   * @memberof ClinicAdminViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updatingSampleStatus(sample: any) {\n    this.editingSample = sample;\n    this.isEditingSample = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          UPDATE SAMPLE STATUS\n  /**\n   * This function is used to update the sample status of a specific sample.\n   *\n   * @param {*} sample\n   * @memberof ClinicAdminViewSamplesComponent\n   */\n  updateSampleStatus(sample: any) {\n\n    let loadingRef = this.dialog.open(LoadingComponent, { data: { title: \"Updating Sample Status\" } });\n\n    this.diagnosticClinicService.updateSamplesStatus(sample, this.updateSampleStatusForm.controls.sample_status.value).subscribe((response: any) => {\n\n      if (response.success == true && response.code == 200) {\n\n        loadingRef.close();\n\n        this.viewSamples();\n\n      } else if (response.success == false) {\n        //POPUP MESSAGE\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClinicHandlerComponent.html":{"url":"classes/ClinicHandlerComponent.html","title":"class - ClinicHandlerComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClinicHandlerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Admin/clinic-handler/clinic-handler.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                add_staff_validators\n                            \n                            \n                                addStaffForm\n                            \n                            \n                                adminTypes\n                            \n                            \n                                adminUsers\n                            \n                            \n                                allDatabaseNames\n                            \n                            \n                                confirmPasswordInput\n                            \n                            \n                                currentUser\n                            \n                            \n                                helpTab\n                            \n                            \n                                notificationsTab\n                            \n                            \n                                profileTab\n                            \n                            \n                                    Public\n                                sanitizer\n                            \n                            \n                                saveBtn\n                            \n                            \n                                selectedUserType\n                            \n                            \n                                submitted\n                            \n                            \n                                userTypes\n                            \n                            \n                                valid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addStaff\n                            \n                            \n                                displayConfirmPasswordInput\n                            \n                            \n                                displayProfileSaveBtn\n                            \n                            \n                                getDBNames\n                            \n                            \n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                resetAddFields\n                            \n                            \n                                resetStaffFields\n                            \n                            \n                                toggleHelpTab\n                            \n                            \n                                toggleNotificationsTab\n                            \n                            \n                                toggleProfileTab\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sanitizer: DomSanitizer, userManagementService: UserManagementAPIService, diagnosticClinicService: DiagnosticClinicAPIService, notificationLoggingService: NotificationLoggingService, resolver: core.ComponentFactoryResolver, authService: AuthenticationService, router: Router, formBuilder: FormBuilder, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:73\n                            \n                        \n\n                \n                    \n                            Creates an instance of ClinicHandlerComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sanitizer\n                                                  \n                                                        \n                                                                        DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        userManagementService\n                                                  \n                                                        \n                                                                        UserManagementAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the User Management API service\n\n                                                        \n                                                \n                                                \n                                                        diagnosticClinicService\n                                                  \n                                                        \n                                                                        DiagnosticClinicAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Diagnostic Clinic API service\n\n                                                        \n                                                \n                                                \n                                                        notificationLoggingService\n                                                  \n                                                        \n                                                                        NotificationLoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Notification Logging API service\n\n                                                        \n                                                \n                                                \n                                                        resolver\n                                                  \n                                                        \n                                                                    core.ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For dynamically inserting elements into the HTML page\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            add_staff_validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    'user': [\n      { type: 'required', message: 'Please select a user' },\n    ]\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            addStaffForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:53\n                            \n                        \n\n                \n                    \n                        Object for defining the Add Staff form -  @type {FormGroup} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            adminTypes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            adminUsers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            allDatabaseNames\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            confirmPasswordInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:47\n                            \n                        \n\n                \n                    \n                        Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:51\n                            \n                        \n\n                \n                    \n                        The details of the user currently logged in -  @type {any} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            helpTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:49\n                            \n                        \n\n                \n                    \n                        Indicates if the help tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notificationsTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:41\n                            \n                        \n\n                \n                    \n                        Indicates if the notifications tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profileTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:43\n                            \n                        \n\n                \n                    \n                        Indicates if the profile tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            sanitizer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomSanitizer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:92\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saveBtn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:45\n                            \n                        \n\n                \n                    \n                        Indicates if the save button is hidden/shown on the profile tab- @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedUserType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:61\n                            \n                        \n\n                \n                    \n                        Selected user type on dropdown - @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:55\n                            \n                        \n\n                \n                    \n                        To check if form has been submitted - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userTypes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Interface.UserType[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:59\n                            \n                        \n\n                \n                    \n                        Array of User Type objects for form dropdown - @type {UserType[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:57\n                            \n                        \n\n                \n                    \n                        To check if form has been submitted correctly - @type {boolean} \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addStaff\n                        \n                        \n                    \n                \n            \n            \n                \naddStaff()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:237\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            displayConfirmPasswordInput\n                        \n                        \n                    \n                \n            \n            \n                \ndisplayConfirmPasswordInput()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:209\n                \n            \n\n\n            \n                \n                    This function will display the confirm password input field in the user's password was altered\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            displayProfileSaveBtn\n                        \n                        \n                    \n                \n            \n            \n                \ndisplayProfileSaveBtn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:197\n                \n            \n\n\n            \n                \n                    This function will display the save button option if any details in the profile have been altered\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDBNames\n                        \n                        \n                    \n                \n            \n            \n                \ngetDBNames()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:160\n                \n            \n\n\n            \n                \n                    This function will log the user out of the web application and clear the authentication data stored in the local storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:118\n                \n            \n\n\n            \n                \n                    This function is called when the page loads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resetAddFields\n                        \n                        \n                    \n                \n            \n            \n                \nresetAddFields()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:292\n                \n            \n\n\n            \n                \n                    This function will clear the inputs in the Add Staff Modal\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resetStaffFields\n                        \n                        \n                    \n                \n            \n            \n                \nresetStaffFields()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:233\n                \n            \n\n\n            \n                \n                    This function is used to clear the input fields in the modal\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleHelpTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleHelpTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:221\n                \n            \n\n\n            \n                \n                    This function will toggle the display of the help side panel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleNotificationsTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleNotificationsTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:173\n                \n            \n\n\n            \n                \n                    This function will toggle the display of the notifications side panel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleProfileTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleProfileTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Admin/clinic-handler/clinic-handler.component.ts:185\n                \n            \n\n\n            \n                \n                    This function will toggle the display of the profile side panel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormArray, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { DiagnosticClinicAPIService } from '../../_services/diagnostic-clinic-api.service';\nimport { NotificationLoggingService } from '../../_services/notification-logging.service';\nimport { UserManagementAPIService } from '../../_services/user-management-api.service';\nimport * as Interface from '../../_interfaces/interfaces';\n\n\n@core.Component({\n  selector: 'app-clinic-handler',\n  templateUrl: './clinic-handler.component.html',\n  styleUrls: ['./clinic-handler.component.scss']\n})\nexport class ClinicHandlerComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  \n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  notificationsTab: boolean = false;\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n  /** Indicates if the save button is hidden/shown on the profile tab- @type {boolean} */\n  saveBtn: boolean = false;\n  /** Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} */\n  confirmPasswordInput: boolean = false;\n  /** Indicates if the help tab is hidden/shown - @type {boolean} */\n  helpTab: boolean = false;\n  /** The details of the user currently logged in -  @type {any} */\n  currentUser: any;\n  /** Object for defining the Add Staff form -  @type {FormGroup} */\n  addStaffForm: FormGroup;\n  /** To check if form has been submitted - @type {boolean} */\n  submitted: boolean = false;\n  /** To check if form has been submitted correctly - @type {boolean} */\n  valid: boolean = false;\n  /** Array of User Type objects for form dropdown - @type {UserType[]} */\n  userTypes: Interface.UserType[];\n  /** Selected user type on dropdown - @type {string} */\n  selectedUserType: string;\n  adminTypes: any[];\n  allDatabaseNames: any[];\n  adminUsers: any[];\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        FORM VALIDATORS\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  add_staff_validators = {\n    'user': [\n      { type: 'required', message: 'Please select a user' },\n    ]\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of ClinicHandlerComponent.\n   * \n   * @param {UserManagementAPIService} userManagementService For calling the User Management API service\n   * @param {DiagnosticClinicAPIService} diagnosticClinicService For calling the Diagnostic Clinic API service\n   * @param {NotificationLoggingService} notificationLoggingService For calling the Notification Logging API service\n   * @param {core.ComponentFactoryResolver} resolver For dynamically inserting elements into the HTML page\n   * @param {DomSanitizer} sanitizer\n   * @param {core.ComponentFactoryResolver} resolver Used to load dynamic elements in the HTML\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * \n   * @memberof ClinicHandlerComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    public sanitizer: DomSanitizer,\n    private userManagementService: UserManagementAPIService,\n    private diagnosticClinicService: DiagnosticClinicAPIService,\n    private notificationLoggingService: NotificationLoggingService,\n    private resolver: core.ComponentFactoryResolver,\n    private authService: AuthenticationService,\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private snackBar: MatSnackBar,\n  ) { \n    this.addStaffForm = this.formBuilder.group({\n      user: ['', Validators.required],\n      database_privileges: new FormArray([])\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @description 1. Call loadNotifications() | 2. Call getNumberOfFABISamples() | 3. Call getNumberOfFABIMembers()\n   * \n   * @memberof ClinicHandlerComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    this.getDBNames();\n    this.userManagementService.getFABIAdmins().subscribe((response: any) => {\n\n      if (response.success == true && response.code == 200) {\n\n        this.adminUsers = response.data.qs.admins;\n        \n        //POPUP MESSAGE\n      }\n      else if (response.success == false) {\n        //POPUP MESSAGE\n      }\n    });\n    this.currentUser = this.authService.getCurrentSessionValue.user;\n  }\n\n  getDBNames() {\n    this.userManagementService.getDatabaseNames().subscribe((response: any) => {\n      if (response.success == true && response.code == 200) {\n        this.allDatabaseNames = response.data.docs;\n\n        this.allDatabaseNames.map(() => {\n          const control = new FormControl(false);\n          (this.addStaffForm.controls.database_privileges as FormArray).push(control)\n        });\n\n      }\n      else if (response.success == false) {\n        //POPUP MESSAGE\n      }\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof OrganizationDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE NOTIFICATIONS \n  /**\n   * This function will toggle the display of the notifications side panel\n   * \n   * @memberof ClinicHandlerComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificationsTab() {\n    this.notificationsTab = !this.notificationsTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE PROFILE \n  /**\n   * This function will toggle the display of the profile side panel\n   * \n   * @memberof ClinicHandlerComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleProfileTab() {\n    this.profileTab = !this.profileTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        DISPLAY PROFILE SAVE BUTTON \n  /**\n   * This function will display the save button option if any details in the profile have been altered\n   * \n   * @memberof ClinicHandlerComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayProfileSaveBtn() {\n    this.saveBtn = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       DISPLAY PASSWORD CONFIRM INPUT \n  /**\n   * This function will display the confirm password input field in the user's password was altered\n   * \n   * @memberof ClinicHandlerComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayConfirmPasswordInput() {\n    this.confirmPasswordInput = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE HELP \n  /**\n   * This function will toggle the display of the help side panel\n   * \n   * @memberof ClinicHandlerComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleHelpTab() {\n    this.helpTab = !this.helpTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            RESET STAFF FIELDS \n  /**\n   * This function is used to clear the input fields in the modal\n   * \n   * @memberof ClinicHandlerComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  resetStaffFields() {\n    this.helpTab = !this.helpTab;\n  }\n\n  addStaff() {\n    this.submitted = true;\n\n    if (this.addStaffForm.invalid) {\n      return;\n    }\n\n    this.valid = true;\n\n    \n\n    const LstaffName = this.addStaffForm.controls.user.value.fname;\n    const LstaffSurname = this.addStaffForm.controls.user.value.surname;\n    const LstaffEmail = this.addStaffForm.controls.user.value.email;\n    const LstaffPhone = 1234567890;\n    const LstaffPosition = \"ClinicAdmin\";\n\n    const staff_details: Interface.StaffInfo = { fname: LstaffName, surname: LstaffSurname, email: LstaffEmail, position: LstaffPosition, phone: LstaffPhone };\n\n    var databasePrivileges: Interface.DatabasePrivilege[] = [];\n\n    this.addStaffForm.controls.database_privileges.value.forEach((value, i) => {\n\n      if (value == true) {\n        let dbPrivilege: Interface.DatabasePrivilege = {\n          name: this.allDatabaseNames[i],\n          privileges: ['retrieve']\n        };\n        databasePrivileges.push(dbPrivilege);\n      }\n\n    });\n\n    this.userManagementService.addStaffMember(staff_details, databasePrivileges).subscribe((response: any) => {\n\n      if (response.success == true && response.code == 200) {\n        //POPUP MESSAGE\n        let snackBarRef = this.snackBar.open(\"Clinic Admin Added\", \"Dismiss\", {\n          duration: 6000\n        });\n      }\n      else if (response.success == false) {\n        //POPUP MESSAGE\n      }\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            RESET ADD FIELDS \n  /**\n   * This function will clear the inputs in the Add Staff Modal\n   * \n   * @memberof StaffHandlerComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  resetAddFields() {\n    this.addStaffForm.reset();\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CmwMenuComponent.html":{"url":"classes/CmwMenuComponent.html","title":"class - CmwMenuComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CmwMenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Staff/cmw-menu/cmw-menu.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPasswordInput\n                            \n                            \n                                currentUser\n                            \n                            \n                                helpTab\n                            \n                            \n                                notificationsTab\n                            \n                            \n                                profileTab\n                            \n                            \n                                saveBtn\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                displayConfirmPasswordInput\n                            \n                            \n                                displayProfileSaveBtn\n                            \n                            \n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                toggleHelpTab\n                            \n                            \n                                toggleNotificationsTab\n                            \n                            \n                                toggleProfileTab\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService, router: Router, resolver: core.ComponentFactoryResolver)\n                    \n                \n                        \n                            \n                                Defined in src/app/Staff/cmw-menu/cmw-menu.component.ts:43\n                            \n                        \n\n                \n                    \n                            Creates an instance of CmwMenuComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        resolver\n                                                  \n                                                        \n                                                                    core.ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            confirmPasswordInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/cmw-menu/cmw-menu.component.ts:39\n                            \n                        \n\n                \n                    \n                        Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/cmw-menu/cmw-menu.component.ts:43\n                            \n                        \n\n                \n                    \n                        The user that is currently logged in -  @type {any} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            helpTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/cmw-menu/cmw-menu.component.ts:41\n                            \n                        \n\n                \n                    \n                        Indicates if the help tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notificationsTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/cmw-menu/cmw-menu.component.ts:33\n                            \n                        \n\n                \n                    \n                        Indicates if the notifications tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profileTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/cmw-menu/cmw-menu.component.ts:35\n                            \n                        \n\n                \n                    \n                        Indicates if the profile tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saveBtn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/cmw-menu/cmw-menu.component.ts:37\n                            \n                        \n\n                \n                    \n                        Indicates if the save button is hidden/shown on the profile tab- @type {boolean} \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            displayConfirmPasswordInput\n                        \n                        \n                    \n                \n            \n            \n                \ndisplayConfirmPasswordInput()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/cmw-menu/cmw-menu.component.ts:122\n                \n            \n\n\n            \n                \n                    This function will display the confirm password input field in the user's password was altered\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            displayProfileSaveBtn\n                        \n                        \n                    \n                \n            \n            \n                \ndisplayProfileSaveBtn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/cmw-menu/cmw-menu.component.ts:110\n                \n            \n\n\n            \n                \n                    This function will display the save button option if any details in the profile have been altered\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/cmw-menu/cmw-menu.component.ts:146\n                \n            \n\n\n            \n                \n                    This function will log the user out of the web application and clear the authentication data stored in the local storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/cmw-menu/cmw-menu.component.ts:73\n                \n            \n\n\n            \n                \n                    This function is called when the page loads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleHelpTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleHelpTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/cmw-menu/cmw-menu.component.ts:134\n                \n            \n\n\n            \n                \n                    This function will toggle the display of the help side panel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleNotificationsTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleNotificationsTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/cmw-menu/cmw-menu.component.ts:85\n                \n            \n\n\n            \n                \n                    This function will toggle the display of the notifications side panel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleProfileTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleProfileTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/cmw-menu/cmw-menu.component.ts:97\n                \n            \n\n\n            \n                \n                    This function will toggle the display of the profile side panel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\n\n\n@core.Component({\n  selector: 'app-cmw-menu',\n  templateUrl: './cmw-menu.component.html',\n  styleUrls: ['./cmw-menu.component.scss']\n})\nexport class CmwMenuComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  notificationsTab: boolean = false;\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n  /** Indicates if the save button is hidden/shown on the profile tab- @type {boolean} */\n  saveBtn: boolean = false;\n  /** Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} */\n  confirmPasswordInput: boolean = false;\n  /** Indicates if the help tab is hidden/shown - @type {boolean} */\n  helpTab: boolean = false;\n  /** The user that is currently logged in -  @type {any} */\n  currentUser: any;\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of CmwMenuComponent.\n   * \n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {Router} router\n   * @param {Renderer2} renderer Used for creating the PDF documents to download\n   * \n   * @memberof CmwMenuComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private authService: AuthenticationService,\n    private router: Router,\n    private resolver: core.ComponentFactoryResolver\n  ) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @memberof CmwMenuComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    this.currentUser = this.authService.getCurrentSessionValue.user;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE NOTIFICATIONS \n  /**\n   * This function will toggle the display of the notifications side panel\n   * \n   * @memberof CmwMenuComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificationsTab() {\n    this.notificationsTab = !this.notificationsTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE PROFILE \n  /**\n   * This function will toggle the display of the profile side panel\n   * \n   * @memberof CmwMenuComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleProfileTab() {\n    this.profileTab = !this.profileTab;\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        DISPLAY PROFILE SAVE BUTTON \n  /**\n   * This function will display the save button option if any details in the profile have been altered\n   * \n   * @memberof CmwMenuComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayProfileSaveBtn() {\n    this.saveBtn = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      DISPLAY PASSWORD CONFIRM INPUT \n  /**\n   * This function will display the confirm password input field in the user's password was altered\n   * \n   * @memberof CmwMenuComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayConfirmPasswordInput() {\n    this.confirmPasswordInput = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE HELP \n  /**\n   * This function will toggle the display of the help side panel\n   * \n   * @memberof CmwMenuComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleHelpTab() {\n    this.helpTab = !this.helpTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof CmwMenuComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Confirm.html":{"url":"interfaces/Confirm.html","title":"interface - Confirm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Confirm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_interfaces/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Defines a Confirm object\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cancel\n                                \n                                \n                                        confirm\n                                \n                                \n                                        info\n                                \n                                \n                                        message\n                                \n                                \n                                        title\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cancel\n                                    \n                                \n                                \n                                    \n                                        cancel:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        confirm\n                                    \n                                \n                                \n                                    \n                                        confirm:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        info\n                                    \n                                \n                                \n                                    \n                                        info:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Organisation {\n  ID?: string;                                //The id of Organisation \n  orgName: string;                            //The name of Organisation\n  admin?: OrganisationAdmin;                  //The admin of Organisation\n}\n\n\n/////////////////////////////////////////////////////\n//              ORGANIZATION ADMIN\n/**\n * Defines an Admin of an Organisation\n *\n * @export\n * @interface OrganisationAdmin\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationAdmin {\n  fname: string;                              //The first name of Admin\n  surname: string;                            //The surname of Admin\n  email: string;                              //The email of Admin\n  phone?: number;                             //The phone number of Admin\n  password?: string;                          //The passsword of Admin\n}\n\n\n/////////////////////////////////////////////////////\n//            ORGANIZATION MEMBER\n/**\n * Defines a Organisation's Member object\n *\n * @export\n * @interface MemberInfo\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationMember {\n  id?: string,                                  //The id of the Member\n  fname: string,                                //The first name of Member\n  surname: string,                              //The surname of Member\n  email: string,                                //The email of Member\n  phone?: number;                               //The phone number of Member\n  password?: string                             //The password of Member\n}\n\n\n/////////////////////////////////////////////////////\n//                  USER TYPE\n/**\n * Defines a User Type object\n *\n * @export\n * @interface UserType\n */\n/////////////////////////////////////////////////////\nexport interface UserType {\n  ID: number;                                 //The id of the User Type\n  Name: string;                               //The name of the User Type\n}\n\n\n/////////////////////////////////////////////////////\n//                LOGIN INFO\n/**\n * Defines the User's Login Information\n *\n * @export\n * @interface LoginInfo\n */\n/////////////////////////////////////////////////////\nexport interface LoginInfo {\n  orgName: string;                            //The organization fo teh user currently logged in\n  email: string;                              //The email of the suer currently logged in\n  password: string;                           //The password of the user currently logged in\n}\n\n\n/////////////////////////////////////////////////////\n//                 STAFF INFO\n/**\n * Defines a FABI Staff Member object\n *\n * @export\n * @interface StaffInfo\n */\n/////////////////////////////////////////////////////\nexport interface StaffInfo {\n  ID?: number,                                  //The id number of the staff member\n  fname: string                                 //The first name of the staff member\n  surname: string,                              //The surname of the staff member\n  email: string,                                //The email address fo the staff member\n  phone?: number,                               //The phone number of the staff member\n  position?: string,                            //The positions of the staff member\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            DATABASE PRIVILEGE\n/**\n * Defines a DatabasePrivilege object\n *\n * @export\n * @interface DatabasePrivilege\n */\n/////////////////////////////////////////////////////\nexport interface DatabasePrivilege {\n  name: string,                                 //The database's name\n  privileges: string[]                          //The privileges for the database                          \n}\n\n\n/////////////////////////////////////////////////////\n//                PRIVILEGE TYPES\n/**\n * Defines a PrivilegeTypes object\n *\n * @export\n * @interface PrivilegeTypes\n */\n/////////////////////////////////////////////////////\nexport interface PrivilegeTypes {\n  create: boolean,                              //The create privilege\n  retrieve: boolean,                            //The retrieve privilege\n  update: boolean,                              //The update privilege\n  delete: boolean                               //The delete privilege\n}\n\n\n/////////////////////////////////////////////////////\n//              USER'S PRIVILEGES\n/**\n * Defines a UserPrivileges object\n *\n * @export\n * @interface UserPrivileges\n */\n/////////////////////////////////////////////////////\nexport interface UserPrivileges {\n  databases?: DatabasePrivilege[]               //The database privileges for a database\n}\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            CONFIRM (for confirm pop-up)\n/**\n * Defines a Confirm object\n *\n * @export\n * @interface Confirm\n */\n/////////////////////////////////////////////////////\nexport interface Confirm {\n  title: string,                                //The confirm title\n  message: string,                              //The confirm message\n  info: string,                                 //The confirm information\n  cancel: string,                               //If it has been canceled or not\n  confirm: string                               //If it has been confirmed or not\n}\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  SAMPLE FORM\n/**\n * Defines a SampleFormData object\n *\n * @export\n * @interface SampleFormData\n */\n/////////////////////////////////////////////////////\nexport interface SampleFormData {\n  // Sample Details\n  sample_details: {\n    plant_species: string,                 //The species of the sample\n    plant_genus: string                    //The genus of the sample\n    num_samples: number,                   //The number of samples\n    date_collected: Date,                  //The date that the sample was collected\n    date_sent: Date,                       //The date that the sample was sent\n  }\n\n  // Plantation Details\n  plantation_details: {\n    street: string,                        //The street name\n    area: string,                          //The area\n    city: string,                          //The city \n    farm: string,                          //The farm name\n    province: string,                      //The province\n    gps: string,                           //Sample GPS coordinates\n  }\n\n  // Type of Sample\n  types: string[],\n  // types: {\n  //   soil: boolean,                     //Soil sample type\n  //   stems: boolean,                    //Stems sample type\n  //   roots: boolean,                    //Roots sample type\n  //   twigs: boolean,                    //Twigs sample type\n  //   leaves: boolean,                   //Leaves sample type\n  //   seedlings: boolean,                //Seedlings sample type\n  //   media: boolean,                    //Media sample type\n  //   water: boolean,                    //Water sample type\n  //   insect: boolean,                   //Insect sample type\n  //   nuts: boolean,                     //Nuts sample type\n  //   other: boolean,                    //Other type of sample (if any)\n  // }\n\n  // Symptoms\n  symptoms: {\n    wilt: boolean,                         //Wilt symptom\n    stunting: boolean,                     //Stunting symptom\n    leafspot: boolean,                     //Leafspot symptom\n    rootrot: boolean,                      //Rootrot symptom\n    dieback: boolean,                      //Dieback symptom\n    cankers: boolean,                      //Cankers symptom \n    death: boolean,                        //Death symptom \n    wood: boolean,                         //Wood symptom\n    other: boolean,                        //Other symptoms (if any)\n  }\n\n  // Distribution of Symptoms\n  distribution: {\n    localized: boolean,               //The localized distribution\n    scattered: boolean,                //The scattered distribution\n    general: boolean,                  //The general distribution\n    clumps: boolean,                   //The clumps distribution\n    na: boolean,                       //The na distribution\n    other: boolean,                    //Other distributions (if any)\n    percentage_plants_affected: number,           //The percentage of plants affected\n  }\n\n  // Conditons\n  conditions: {\n    date_problem_noticed: Date,        //The date the problem was noticed\n    date_planted: Date,                //The date the plants were planted\n    weather_disturbances: string,      //The weather disturbances\n    weather_prior: string,             //The weather conditions prior\n    others: string,                    //Other weather conditions (if any)\n    additional?: string                 //Additional weather conditions (if any)\n  }\n\n  // Permissions\n  permissions: {\n    landowner_name: string,                       //The landowner's name\n    permission_granted: boolean                   //Whether or not the landowner has granted permission\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  LOCATION\n/**\n * Defines a Location object\n *\n * @export\n * @interface Location\n */\n/////////////////////////////////////////////////////\nexport interface Location {\n  latitude: number,                             //The latitude of the location\n  longitude: number                             //The longitude of the location\n}\n\n\n/////////////////////////////////////////////////////\n//                     ADDRESS\n/**\n * Defines a Address object\n *\n * @export\n * @interface Address\n */\n/////////////////////////////////////////////////////\nexport interface Address {\n  street_number?: number,                       //The street number of the address (if any)\n  street: string,                               //The street name of the address\n  estate?: string,                              //The estate of the address (if any)\n  area?: string,                                //The area of the address (if any)\n  city: string,                                 //The city of the address\n  province: string,                             //The province of the address\n  country: string,                              //The country of the address\n  postal_code?: string,                         //The postal code of the address (if any)\n  formatted_address: string                     //The formatted address\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CultureCollectionAPIService.html":{"url":"injectables/CultureCollectionAPIService.html","title":"injectable - CultureCollectionAPIService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CultureCollectionAPIService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/culture-collection-api.service.ts\n        \n\n            \n                Description\n            \n            \n                Used to handled all culture collection requests and functions\n\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteDepositForm\n                            \n                            \n                                deleteProcessedForm\n                            \n                            \n                                deleteRequestForm\n                            \n                            \n                                deleteRevitalizationForm\n                            \n                            \n                                getAllDepositLogs\n                            \n                            \n                                getAllProcessedLogs\n                            \n                            \n                                getAllRequestLogs\n                            \n                            \n                                getAllRevitalizationLogs\n                            \n                            \n                                submitCMWDepositForm\n                            \n                            \n                                submitCMWRequestForm\n                            \n                            \n                                submitCMWRevitalizationForm\n                            \n                            \n                                submitProcessedForm\n                            \n                            \n                                updateDepositFormStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: http.HttpClient, authService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/_services/culture-collection-api.service.ts:175\n                            \n                        \n\n                \n                    \n                            Creates an instance of CultureCollectionAPIService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    http.HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for making http calls to the API\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteDepositForm\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteDepositForm(id: string, form: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/culture-collection-api.service.ts:450\n                \n            \n\n\n            \n                \n                    This function is used to delete a deposit form on request.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    form\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteProcessedForm\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteProcessedForm(id: string, form: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/culture-collection-api.service.ts:540\n                \n            \n\n\n            \n                \n                    This function is used to delete a processed form on request.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    form\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteRequestForm\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteRequestForm(id: string, form: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/culture-collection-api.service.ts:480\n                \n            \n\n\n            \n                \n                    This function is used to delete a request form on request.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    form\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteRevitalizationForm\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteRevitalizationForm(id: string, form: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/culture-collection-api.service.ts:510\n                \n            \n\n\n            \n                \n                    This function is used to delete a revitalization form on request.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    form\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllDepositLogs\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllDepositLogs()\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/culture-collection-api.service.ts:227\n                \n            \n\n\n            \n                \n                    This function sends a POST request to the API to retrieve a list containing\nall the logs with type 'DEPOSIT'\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllProcessedLogs\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllProcessedLogs()\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/culture-collection-api.service.ts:279\n                \n            \n\n\n            \n                \n                    This function sends a POST request to the API to retrieve a list containing\nall the logs with type 'PROCESSED'\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllRequestLogs\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllRequestLogs()\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/culture-collection-api.service.ts:201\n                \n            \n\n\n            \n                \n                    This function sends a POST request to the API to retrieve a list containing\nall the logs with type 'REQUEST'\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllRevitalizationLogs\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllRevitalizationLogs()\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/culture-collection-api.service.ts:254\n                \n            \n\n\n            \n                \n                    This function sends a POST request to the API to retrieve a list containing\nall the logs with type 'REVITALIZATION'\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            submitCMWDepositForm\n                        \n                        \n                    \n                \n            \n            \n                \nsubmitCMWDepositForm(data: CMWDeposit)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/culture-collection-api.service.ts:305\n                \n            \n\n\n            \n                \n                    This function sends a POST request to the server to submit a CMW deposit form and save it to the\ndatabase.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CMWDeposit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            submitCMWRequestForm\n                        \n                        \n                    \n                \n            \n            \n                \nsubmitCMWRequestForm(data: CMWRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/culture-collection-api.service.ts:335\n                \n            \n\n\n            \n                \n                    This function sends a POST request to the server to submit a CMW request form and save it to the\ndatabase.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CMWRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            submitCMWRevitalizationForm\n                        \n                        \n                    \n                \n            \n            \n                \nsubmitCMWRevitalizationForm(data: CMWRevitalization)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/culture-collection-api.service.ts:363\n                \n            \n\n\n            \n                \n                    This function sends a POST request to the server to submit a CMW revitalization form and save it to the\ndatabase.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CMWRevitalization\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            submitProcessedForm\n                        \n                        \n                    \n                \n            \n            \n                \nsubmitProcessedForm(data: ProcessedForm)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/culture-collection-api.service.ts:393\n                \n            \n\n\n            \n                \n                    This function sends a POST request to the server to submit a process form for a deposit form and save it to the\ndatabase.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ProcessedForm\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateDepositFormStatus\n                        \n                        \n                    \n                \n            \n            \n                \nupdateDepositFormStatus(data: UpdateDepositForm)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/culture-collection-api.service.ts:422\n                \n            \n\n\n            \n                \n                    This function is used to update the status of a deposit form to 'processed'.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateDepositForm\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as http from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport { AuthenticationService } from './authentication.service';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getRequestLogsURL = `${config.cultureClinicURL}/getAllRequestForms`;\nconst getDepositLogsURL = `${config.cultureClinicURL}/getAllDepositForms`;\nconst getRevitalizationLogsURL = `${config.cultureClinicURL}/getAllRevitalizationForms`;\nconst getProcessedLogsURL = `${config.cultureClinicURL}/getAllProcessingForms`;\nconst submitCMWDepositFormURL = `${config.cultureClinicURL}/submitCMWDepositForm`;\nconst submitCMWRequestFormURL = `${config.cultureClinicURL}/submitCMWRequestForm`;\nconst submitCMWRevitalizationFormURL = `${config.cultureClinicURL}/submitCMWRevitalizationForm`;\nconst submitProcessedFormURL = `${config.cultureClinicURL}/submitCMWProcessingForm`;\nconst updateDepositFormStatusURL = `${config.cultureClinicURL}/updateDepositStatus`;\nconst deleteDepositFormURL = `${config.cultureClinicURL}/deleteCMWDepositForm`;\nconst deleteRequestFormURL = `${config.cultureClinicURL}/deleteCMWRequestForm`;\nconst deleteRevitalizationFormURL = `${config.cultureClinicURL}/deleteCMWRevitalizationForm`;\nconst deleteProcessedFormURL = `${config.cultureClinicURL}/deleteCMWProcessingForm`;\n\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW DEPOSIT\n/**\n *  Object for defining the CMW deposit form values\n *\n * @export\n * @interface CMWDeposit\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWDeposit {\n  userID: string;                         //The user id of the user submitting the form\n  cmwCultureNumber: string;               //The culture number\n  genus: string;                          //The genus of the culture\n  epitheton: string;                      //The epitheton of the culture\n  personalCollectionNumber: string;       //The personal collection number (if any)\n  internationalCollectionNumber: string;  //The international collection number (if any)\n  herbariumNumber: string;                //The herbarium number of the culture\n  otherFABICollections: string;           //Indicates if there are currently any other collections\n  name: string;                           //The name of the culture\n  typeStatus: string;                     //The type status of the culture\n  host: string;                           //The host of the culture\n  vector: string;                         //The vector of the culture\n  substrate: string;                      //The substrate of the culture\n  continent: string;                      //The continent where the culture originated from\n  country: string;                        //The country where the culture originated from\n  region: string;                         //The region where the culture originated from\n  locality: string;                       //The locality of the culture\n  gps: string;                            //The GPS coordinates of where the culture originated from\n  collectedBy: string;                    //The user who collected the culture\n  dateCollected: string;                  //The date that the culture was collected\n  isolatedBy: string;                     //The user who isolated the culture\n  identifiedBy: string;                   //The user who identified the culture\n  donatedBy: string;                      //The user who donated the culture (if any)\n  additionalNotes: string;                //Any additional notes (if any)\n  dateSubmitted: string;                  //The date that the form was submitted\n  formID: string;                         //The id number for the actual form\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW REQUEST\n/**\n *  Object for defining the CMW request form values\n *\n * @export\n * @interface CMWRequest\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWRequest {\n  userID: string;                         //The user id of the user submitting the form\n  requestor: string;                      //The user who is requesting the culture\n  taxonName: string;                      //The taxon name of the culture\n  cultureNumber: string;                  //The culture number\n  dateRequested: string;                  //The date that the culture is requested for\n  referenceNumber: string;                //The reference number\n  notes: string;                          //Any notes (if any)\n  dateSubmitted: string;                  //The date that the form was submitted\n}\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW REVILIZATION\n/**\n * Object for defining the CMW revitalization form values\n *\n * @export\n * @interface CMWRevitalization\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWRevitalization {\n  userID: string;                         //The user id of the user submitting the form\n  requestor: string;                      //The user who is requesting the culture\n  currentName: string;                    //The current name of the culture\n  nameBionumerics: string;                //The bionumeric name of the culture\n  cultureNumber: string;                  //The culture number\n  cultureCondition: string;               //The condition of the culture\n  sequenceDateSubmitted: string;          //The sequence date submitted (if any)\n  referenceNumber: string;                //The reference number\n  dateRequested: string;                  //The date that the culture is requested\n  dateReturned: string;                   //The date that the culture was returned\n  dateSubmitted: string;                  //The date that the form was submitted\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            PROCESSED FORM\n/**\n * Object for defining the processed deposit form values\n *\n * @export\n * @interface ProcessedForm\n */\n///////////////////////////////////////////////////////////////////////\nexport interface ProcessedForm {\n  userID: string;                         //The user id of the user submitting the form\n  statusOfCulture: string;               //The status of the culture for the processed form\n  agarSlants: string;                     //The agar slants for the processed form\n  water: string;                          //The water for the processed form\n  oil: string;                            //The oil for the processed form\n  roomTemperature: string;                //The room temperature for the processed form\n  c18: string;                            //The c18 for the processed form\n  freezeDried: string;                    //The freezed dried for the processed form\n  freeze: string;                         //The freeze for the processed form\n  dateOfCollectionValidation: string;     //The date of collection validation for the processed form\n  microscopeSlides: string;               //The microscope slides for the processed form\n  dateSubmittedProcessedForm: string;     //The date submitted for the processed form\n  cultureCollectionNumber: string;        //The culture collection number for the processed form\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                          UPDATED DEPOSIT FORM\n/**\n * Object for defining the object for updating the status of a deposit form\n *\n * @export\n * @interface UpdateDepositForm\n */\n///////////////////////////////////////////////////////////////////////\nexport interface UpdateDepositForm {\n  userID: string;                         //The user id off the user submitting the form\n  status: string;                         //The new status of the deposit form\n  formID: string;                         //The id of the form to be updated\n}\n\n\n/**\n * Used to handled all `culture collection` requests and functions\n *\n * @export\n * @class CultureCollectionAPIService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CultureCollectionAPIService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of CultureCollectionAPIService.\n  * \n  * @param {http.HttpClient} http for making http calls to the API\n  * @param {AuthenticationService} authService for calling the *authentication* service\n  * @memberof CultureCollectionAPIService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: http.HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL REQUEST LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'REQUEST'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllRequestLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getRequestLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL DEPOSIT LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'DEPOSIT'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllDepositLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getDepositLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL REVITALIZATION LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'REVITALIZATION'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllRevitalizationLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getRevitalizationLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL PROCESSED LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'PROCESSED'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllProcessedLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getProcessedLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      SUBMIT CMW DEPOSIT FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW deposit form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWDepositForm(data: CMWDeposit) {\n    const options = {\n      method: 'POST',\n      url: submitCMWDepositFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWDepositFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT CMW REQUEST FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW request form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWRequestForm(data: CMWRequest) {\n    const options = {\n      headers: new http.HttpHeaders({\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      }),\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWRequestFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT CMW REVITALIZATION FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW revitalization form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWRevitalizationForm(data: CMWRevitalization) {\n    const options = {\n      method: 'POST',\n      url: submitCMWRevitalizationFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWRevitalizationFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT PROCESSED FORM \n  /**\n   *    This function sends a POST request to the server to submit a process form for a deposit form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitProcessedForm(data: ProcessedForm) {\n    const options = {\n      method: 'POST',\n      url: submitProcessedFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitProcessedFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE DEPOSIT FORM STATUS \n  /**\n   *    This function is used to update the status of a deposit form to 'processed'.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateDepositFormStatus(data: UpdateDepositForm) {\n    const options = {\n      method: 'POST',\n      url: updateDepositFormStatusURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateDepositFormStatusURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE DEPOSIT FORM \n  /**\n   *    This function is used to delete a deposit form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteDepositForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteDepositFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteDepositFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE REQUEST FORM \n  /**\n   *    This function is used to delete a request form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteRequestForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteRequestFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteRequestFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE REVITALIZATION FORM \n  /**\n   *    This function is used to delete a revitalization form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteRevitalizationForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteRevitalizationFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteRevitalizationFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE PROCESSED FORM \n  /**\n   *    This function is used to delete a processed form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteProcessedForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteProcessedFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteProcessedFormURL, options);\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatabaseManagementLogs.html":{"url":"interfaces/DatabaseManagementLogs.html","title":"interface - DatabaseManagementLogs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatabaseManagementLogs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/notification-logging.service.ts\n        \n\n            \n                Description\n            \n            \n                //Object for defining the JSON object containing the database \nmanagement logs\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Action\n                                \n                                \n                                        Date\n                                \n                                \n                                        Details\n                                \n                                \n                                        ID\n                                \n                                \n                                        LogID\n                                \n                                \n                                        MoreInfo\n                                \n                                \n                                        Organization1\n                                \n                                \n                                        Organization2\n                                \n                                \n                                        Type\n                                \n                                \n                                        User\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Action\n                                    \n                                \n                                \n                                    \n                                        Action:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Date\n                                    \n                                \n                                \n                                    \n                                        Date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Details\n                                    \n                                \n                                \n                                    \n                                        Details:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ID\n                                    \n                                \n                                \n                                    \n                                        ID:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        LogID\n                                    \n                                \n                                \n                                    \n                                        LogID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        MoreInfo\n                                    \n                                \n                                \n                                    \n                                        MoreInfo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Organization1\n                                    \n                                \n                                \n                                    \n                                        Organization1:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Organization2\n                                    \n                                \n                                \n                                    \n                                        Organization2:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Type\n                                    \n                                \n                                \n                                    \n                                        Type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        User\n                                    \n                                \n                                \n                                    \n                                        User:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport { AuthenticationService } from './authentication.service';\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllLogsURL = `${config.logsURL}/getLogs`;\nconst getUserLogsURL = `${config.logsURL}/getUserLogs`;\nconst updateUserLogsURL = `${config.logsURL}/deleteUserLogs`;\n\n///////////////////////////////////////////////////////////////////////\n//                           USER LOGS\n/**\n *  //Object for defining the JSON object containing the user logs\n *\n * @export\n * @interface UserLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface UserLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: USER\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The user on which the action was performed (their ID)\n  User: string;           //The user who performed the action (their ID)\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DATABSE MANAGEMENT LOGS\n/**\n *  //Object for defining the JSON object containing the database \n *  management logs\n *\n * @export\n * @interface DatabaseManagementLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DatabaseManagementLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: DBML (Database Management Log)\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The name of the database that the action was performed on\n  User: string;           //The user who performed the action\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;            //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ACCESS LOGS\n/**\n *  //Object for defining the JSON object containing the access logs\n *\n * @export\n * @interface AccessLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface AccessLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ACCL\n  Action: string;         //The action performed: ACCESS\n  Date: string;           //The date that the action was performed\n  Details: string;        //Description of what was accessed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ERROR LOGS\n/**\n *  //Object for defining the JSON object containing the error logs\n *\n * @export\n * @interface ErrorLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface ErrorLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ERRL\n  Date: string;           //The date that the action was performed\n  StatusCode: string;     //The status code of the error that occured\n  Details: string;        //Description of the error\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DIAGNOSTIC CLINIC LOGS\n/**\n *  //Object for defining the JSON object containing the diagnostic \n *  clinic logs\n *\n * @export\n * @interface DiagnosticClinicLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DiagnosticClinicLogs {\n  Type: string;           //The type of the log: DGCL\n  Date: string;           //The date that the action was performed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                              POST LOG\n/**\n *  //Object for defining the JSON object for posting log requests\n *\n * @export\n * @interface POSTLog\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTLog {\n  Log: Logs;              //The array of logs to post to the API service\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               LOGS\n/**\n *  //Object for defining the JSON object for the logs\n *\n * @export\n * @interface Logs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface Logs {\n  type: string;           //The type of the log\n  before: string;         //The before date\n  after: string;          //The after date\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST USER\n/**\n *  //Object for defining the JSON object to be sent when requesting \n *  the logs belonging to a member\n *\n * @export\n * @interface POSTUser\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUser {\n  userID: string;         //The ID of the user\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST UPDATE\n/**\n *  //Object for defining the JSON object to be sent when updating \n *  to logs belonging to a user\n *\n * @export\n * @interface POSTUpdate\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUpdate {\n  userID: string;         //The ID of the user\n  logIDs: string[];       //The logs to be removed from the user's profile\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class NotificationLoggingService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of NotificationLoggingService.\n  * \n  * @param {HttpClient} http For making calls to the API\n  * \n  * @memberof NotificationLoggingService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       GET ALL USER LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'USER'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllUserLogs() {\n    var tempLog: Logs = { type: 'USER', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                 GET ALL DATABASE MANAGEMENT LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'DBML'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllDatabaseManagementLogs() {\n    var tempLog: Logs = { type: 'DBML', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL ACCESS LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ACCL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllAccessLogs() {\n    var tempLog: Logs = { type: 'ACCL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GET ALL ERROR LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ERRL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllErrorLogs() {\n    var tempLog: Logs = { type: 'ERRL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET USER LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs for a specific user.\n   *\n   * @param {string} userID The id number of the user whose logs need to be feteched for the notifications.\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserLogs(id: string) {\n    var data: POSTUser = { userID: id };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getUserLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE FABI MEMBER NOTIFICATIONS\n  /**\n   * Method that sends a request to the API to update the notifications associated with a specific user.\n   * \n   * @param {string} id The ID of the user whose notifications need to be updated\n   * @param {string[]} notifications The notifications to be removed from the user's profile\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateFABIMemberNotifications(id: string, notifications: string[]) {\n    var postData: POSTUpdate = { userID: id, logIDs: notifications };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', updateUserLogsURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseManagementService.html":{"url":"injectables/DatabaseManagementService.html","title":"injectable - DatabaseManagementService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseManagementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/database-management.service.ts\n        \n\n            \n                Description\n            \n            \n                For handling all database requests and functions.\n\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                porting\n                            \n                            \n                                removeDatabase\n                            \n                            \n                                retrieveDatabase\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: http.HttpClient, authService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/_services/database-management.service.ts:31\n                            \n                        \n\n                \n                    \n                            Creates an instance of DatabaseManagementService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    http.HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for making http calls to the API\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            porting\n                        \n                        \n                    \n                \n            \n            \n                \nporting(dbname: String, jsonObject: Object)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/database-management.service.ts:88\n                \n            \n\n\n            \n                \n                    Method thats sends a request to the API to port a CSV file to a Database \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dbname\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    jsonObject\n                                    \n                                                Object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The database to be ported in the form of a JSON object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeDatabase\n                        \n                        \n                    \n                \n            \n            \n                \nremoveDatabase(dbname: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/database-management.service.ts:122\n                \n            \n\n\n            \n                \n                    Method thats sends a request to the API to drop a Database \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dbname\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the database to bedropped\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            retrieveDatabase\n                        \n                        \n                    \n                \n            \n            \n                \nretrieveDatabase(database: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/database-management.service.ts:55\n                \n            \n\n\n            \n                \n                    Method that sends a request to the API to get the database's data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    database\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the database to be retrieved\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as http from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport { AuthenticationService } from './authentication.service';\n\n/**\n * For handling all `database` requests and functions.\n *\n * @export\n * @class DatabaseManagementService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatabaseManagementService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of DatabaseManagementService.\n  * \n  * @param {http.HttpClient} http for making http calls to the API\n  * @param {AuthenticationService} authService for calling the *authentication* service\n  * @memberof DatabaseManagementService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: http.HttpClient, private authService: AuthenticationService) { }\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          RETRIEVE DATABASE \n  /**\n   * Method that sends a request to the API to get the database's data.\n   *\n   * @param {string} database The name of the database to be retrieved\n   * @returns API response @type any\n   * @memberof databaseManagementURL\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  retrieveDatabase(database: string) {\n    let retrieveDatabaseURL = `${config.databaseManagementURL}/retrieveDatabase`;\n    let method = 'POST';\n\n    const postData = {\n      \"databaseName\": database\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, retrieveDatabaseURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          PORTING\n  /**\n   * Method thats sends a request to the API to port a CSV file to a Database \n   *\n   * @param {Object} jsonObject The database to be ported in the form of a JSON object\n   * @returns API response @type any\n   * @memberof DatabaseManagementService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  porting(dbname: String, jsonObject: Object) {\n    const portingURL = `${config.databaseManagementURL}/porting`;\n    const method = 'POST';\n\n    const postData = {\n      \"databaseName\": dbname,\n      \"data\": jsonObject\n    };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, portingURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          DROP DATABASE\n  /**\n   * Method thats sends a request to the API to drop a Database \n   *\n   * @param {string} dbname The name of the database to bedropped\n   * @returns API response @type any\n   * @memberof DatabaseManagementService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeDatabase(dbname: string) {\n    const dropDBURL = `${config.databaseManagementURL}/dropDatabase`;\n    const method = 'POST';\n\n    const postData = {\n      \"databaseName\": dbname\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, dropDBURL, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatabasePrivilege.html":{"url":"interfaces/DatabasePrivilege.html","title":"interface - DatabasePrivilege","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatabasePrivilege\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_interfaces/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Defines a DatabasePrivilege object\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                                \n                                        privileges\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privileges\n                                    \n                                \n                                \n                                    \n                                        privileges:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Organisation {\n  ID?: string;                                //The id of Organisation \n  orgName: string;                            //The name of Organisation\n  admin?: OrganisationAdmin;                  //The admin of Organisation\n}\n\n\n/////////////////////////////////////////////////////\n//              ORGANIZATION ADMIN\n/**\n * Defines an Admin of an Organisation\n *\n * @export\n * @interface OrganisationAdmin\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationAdmin {\n  fname: string;                              //The first name of Admin\n  surname: string;                            //The surname of Admin\n  email: string;                              //The email of Admin\n  phone?: number;                             //The phone number of Admin\n  password?: string;                          //The passsword of Admin\n}\n\n\n/////////////////////////////////////////////////////\n//            ORGANIZATION MEMBER\n/**\n * Defines a Organisation's Member object\n *\n * @export\n * @interface MemberInfo\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationMember {\n  id?: string,                                  //The id of the Member\n  fname: string,                                //The first name of Member\n  surname: string,                              //The surname of Member\n  email: string,                                //The email of Member\n  phone?: number;                               //The phone number of Member\n  password?: string                             //The password of Member\n}\n\n\n/////////////////////////////////////////////////////\n//                  USER TYPE\n/**\n * Defines a User Type object\n *\n * @export\n * @interface UserType\n */\n/////////////////////////////////////////////////////\nexport interface UserType {\n  ID: number;                                 //The id of the User Type\n  Name: string;                               //The name of the User Type\n}\n\n\n/////////////////////////////////////////////////////\n//                LOGIN INFO\n/**\n * Defines the User's Login Information\n *\n * @export\n * @interface LoginInfo\n */\n/////////////////////////////////////////////////////\nexport interface LoginInfo {\n  orgName: string;                            //The organization fo teh user currently logged in\n  email: string;                              //The email of the suer currently logged in\n  password: string;                           //The password of the user currently logged in\n}\n\n\n/////////////////////////////////////////////////////\n//                 STAFF INFO\n/**\n * Defines a FABI Staff Member object\n *\n * @export\n * @interface StaffInfo\n */\n/////////////////////////////////////////////////////\nexport interface StaffInfo {\n  ID?: number,                                  //The id number of the staff member\n  fname: string                                 //The first name of the staff member\n  surname: string,                              //The surname of the staff member\n  email: string,                                //The email address fo the staff member\n  phone?: number,                               //The phone number of the staff member\n  position?: string,                            //The positions of the staff member\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            DATABASE PRIVILEGE\n/**\n * Defines a DatabasePrivilege object\n *\n * @export\n * @interface DatabasePrivilege\n */\n/////////////////////////////////////////////////////\nexport interface DatabasePrivilege {\n  name: string,                                 //The database's name\n  privileges: string[]                          //The privileges for the database                          \n}\n\n\n/////////////////////////////////////////////////////\n//                PRIVILEGE TYPES\n/**\n * Defines a PrivilegeTypes object\n *\n * @export\n * @interface PrivilegeTypes\n */\n/////////////////////////////////////////////////////\nexport interface PrivilegeTypes {\n  create: boolean,                              //The create privilege\n  retrieve: boolean,                            //The retrieve privilege\n  update: boolean,                              //The update privilege\n  delete: boolean                               //The delete privilege\n}\n\n\n/////////////////////////////////////////////////////\n//              USER'S PRIVILEGES\n/**\n * Defines a UserPrivileges object\n *\n * @export\n * @interface UserPrivileges\n */\n/////////////////////////////////////////////////////\nexport interface UserPrivileges {\n  databases?: DatabasePrivilege[]               //The database privileges for a database\n}\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            CONFIRM (for confirm pop-up)\n/**\n * Defines a Confirm object\n *\n * @export\n * @interface Confirm\n */\n/////////////////////////////////////////////////////\nexport interface Confirm {\n  title: string,                                //The confirm title\n  message: string,                              //The confirm message\n  info: string,                                 //The confirm information\n  cancel: string,                               //If it has been canceled or not\n  confirm: string                               //If it has been confirmed or not\n}\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  SAMPLE FORM\n/**\n * Defines a SampleFormData object\n *\n * @export\n * @interface SampleFormData\n */\n/////////////////////////////////////////////////////\nexport interface SampleFormData {\n  // Sample Details\n  sample_details: {\n    plant_species: string,                 //The species of the sample\n    plant_genus: string                    //The genus of the sample\n    num_samples: number,                   //The number of samples\n    date_collected: Date,                  //The date that the sample was collected\n    date_sent: Date,                       //The date that the sample was sent\n  }\n\n  // Plantation Details\n  plantation_details: {\n    street: string,                        //The street name\n    area: string,                          //The area\n    city: string,                          //The city \n    farm: string,                          //The farm name\n    province: string,                      //The province\n    gps: string,                           //Sample GPS coordinates\n  }\n\n  // Type of Sample\n  types: string[],\n  // types: {\n  //   soil: boolean,                     //Soil sample type\n  //   stems: boolean,                    //Stems sample type\n  //   roots: boolean,                    //Roots sample type\n  //   twigs: boolean,                    //Twigs sample type\n  //   leaves: boolean,                   //Leaves sample type\n  //   seedlings: boolean,                //Seedlings sample type\n  //   media: boolean,                    //Media sample type\n  //   water: boolean,                    //Water sample type\n  //   insect: boolean,                   //Insect sample type\n  //   nuts: boolean,                     //Nuts sample type\n  //   other: boolean,                    //Other type of sample (if any)\n  // }\n\n  // Symptoms\n  symptoms: {\n    wilt: boolean,                         //Wilt symptom\n    stunting: boolean,                     //Stunting symptom\n    leafspot: boolean,                     //Leafspot symptom\n    rootrot: boolean,                      //Rootrot symptom\n    dieback: boolean,                      //Dieback symptom\n    cankers: boolean,                      //Cankers symptom \n    death: boolean,                        //Death symptom \n    wood: boolean,                         //Wood symptom\n    other: boolean,                        //Other symptoms (if any)\n  }\n\n  // Distribution of Symptoms\n  distribution: {\n    localized: boolean,               //The localized distribution\n    scattered: boolean,                //The scattered distribution\n    general: boolean,                  //The general distribution\n    clumps: boolean,                   //The clumps distribution\n    na: boolean,                       //The na distribution\n    other: boolean,                    //Other distributions (if any)\n    percentage_plants_affected: number,           //The percentage of plants affected\n  }\n\n  // Conditons\n  conditions: {\n    date_problem_noticed: Date,        //The date the problem was noticed\n    date_planted: Date,                //The date the plants were planted\n    weather_disturbances: string,      //The weather disturbances\n    weather_prior: string,             //The weather conditions prior\n    others: string,                    //Other weather conditions (if any)\n    additional?: string                 //Additional weather conditions (if any)\n  }\n\n  // Permissions\n  permissions: {\n    landowner_name: string,                       //The landowner's name\n    permission_granted: boolean                   //Whether or not the landowner has granted permission\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  LOCATION\n/**\n * Defines a Location object\n *\n * @export\n * @interface Location\n */\n/////////////////////////////////////////////////////\nexport interface Location {\n  latitude: number,                             //The latitude of the location\n  longitude: number                             //The longitude of the location\n}\n\n\n/////////////////////////////////////////////////////\n//                     ADDRESS\n/**\n * Defines a Address object\n *\n * @export\n * @interface Address\n */\n/////////////////////////////////////////////////////\nexport interface Address {\n  street_number?: number,                       //The street number of the address (if any)\n  street: string,                               //The street name of the address\n  estate?: string,                              //The estate of the address (if any)\n  area?: string,                                //The area of the address (if any)\n  city: string,                                 //The city of the address\n  province: string,                             //The province of the address\n  country: string,                              //The country of the address\n  postal_code?: string,                         //The postal code of the address (if any)\n  formatted_address: string                     //The formatted address\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DiagnosticClinicAPIService.html":{"url":"injectables/DiagnosticClinicAPIService.html","title":"injectable - DiagnosticClinicAPIService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DiagnosticClinicAPIService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/diagnostic-clinic-api.service.ts\n        \n\n            \n                Description\n            \n            \n                Used for handling all diagnostic clinic requests and functions\n\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllSamples\n                            \n                            \n                                getSamplesForFABIStaff\n                            \n                            \n                                retrieveAllOrganizationSamples\n                            \n                            \n                                retrieveMemberSamples\n                            \n                            \n                                retrieveSampleDetails\n                            \n                            \n                                submitSampleForm\n                            \n                            \n                                updateSamplesStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: http.HttpClient, authService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/_services/diagnostic-clinic-api.service.ts:58\n                            \n                        \n\n                \n                    \n                            Creates an instance of DiagnosticClinicAPIService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    http.HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For making calls to the API\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllSamples\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllSamples()\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/diagnostic-clinic-api.service.ts:82\n                \n            \n\n\n            \n                \n                    This function sends a POST request to the API to retrieve a list containing all the samples that FABI is currently processing\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSamplesForFABIStaff\n                        \n                        \n                    \n                \n            \n            \n                \ngetSamplesForFABIStaff(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/diagnostic-clinic-api.service.ts:111\n                \n            \n\n\n            \n                \n                    This function sends a POST request to the API to retrieve a list containing\nall the samples corresponding to a specific user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id number of the user whose samples need to be fetched.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            retrieveAllOrganizationSamples\n                        \n                        \n                    \n                \n            \n            \n                \nretrieveAllOrganizationSamples()\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/diagnostic-clinic-api.service.ts:138\n                \n            \n\n\n            \n                \n                    Method that sends a request to the API to retreive all Samples\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            retrieveMemberSamples\n                        \n                        \n                    \n                \n            \n            \n                \nretrieveMemberSamples()\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/diagnostic-clinic-api.service.ts:170\n                \n            \n\n\n            \n                \n                    Method that sends a request to the API to retreive all Samples for a member\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            retrieveSampleDetails\n                        \n                        \n                    \n                \n            \n            \n                \nretrieveSampleDetails(sampleRefNum: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/diagnostic-clinic-api.service.ts:256\n                \n            \n\n\n            \n                \n                    This function is used to fetch a specific sample form\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sampleRefNum\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The reference number of the sample to be retrieved\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            submitSampleForm\n                        \n                        \n                    \n                \n            \n            \n                \nsubmitSampleForm(formDetails: Interface.SampleFormData)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/diagnostic-clinic-api.service.ts:204\n                \n            \n\n\n            \n                \n                    Method that send a request to the API to submit a specifc Sample Form\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    formDetails\n                                    \n                                            Interface.SampleFormData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The details of the sample to be submitted\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateSamplesStatus\n                        \n                        \n                    \n                \n            \n            \n                \nupdateSamplesStatus(sample: any, status: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/diagnostic-clinic-api.service.ts:290\n                \n            \n\n\n            \n                \n                    Method used to update the status of the sample\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sample\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as http from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport * as Interface from \"../_interfaces/interfaces\";\nimport { AuthenticationService } from \"./authentication.service\";\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllSamplesForMemberURL = `${config.diagnosticClinicURL}/retrieveSamplesForMember`;\n\n//Object for defining the JSON object to be sent when requesting the samples of a specific member\nexport interface POSTMember{\n  userID: string;                         //The user id of the user to be submitted\n}\n\n//Object for defining the samples received from the API call\nexport interface Sample{\n  userID: string;                         //The id of the user who submitted the sample\n  orgName: string;                        //The organization that the user belongs to\n  status: string;                         //The status of the sample\n  referenceNumber: string;                //The reference number that was generated for the sample\n  data: Species;                          //The data within the sample which is the species\n}\n\nexport interface Species{\n  species: string;                        //The species of a sample\n}\n\n\n/**\n * Used for handling all `diagnostic clinic` requests and functions\n *\n * @export\n * @class DiagnosticClinicAPIService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DiagnosticClinicAPIService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of DiagnosticClinicAPIService.\n   * \n   * @param {http.HttpClient} http For making calls to the API\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: http.HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET ALL SAMPLES \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the samples that FABI is currently processing\n   *\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllSamples() {\n    const getAllSamplesURL = `${config.diagnosticClinicURL}/retrieveAllSamples`;\n    const method = \"POST\";\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request(method, getAllSamplesURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     GET SAMPLES FOR FABI STAFF \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the samples corresponding to a specific user.\n   *\n   * @param {string} id The id number of the user whose samples need to be fetched.\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getSamplesForFABIStaff(id: string) {\n    const data: POSTMember = { userID: id };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllSamplesForMemberURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    RETREIVE ALL SAMPLES\n  /**\n   * Method that sends a request to the API to retreive all Samples\n   *\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  retrieveAllOrganizationSamples() {\n    let retrieveAllOrgSamples = `${config.diagnosticClinicURL}/retrieveAllOrgSamples`;\n    let method = 'POST';\n\n    const postData = {\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, retrieveAllOrgSamples, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    RETREIVE ALL SAMPLES FOR MEMBER\n  /**\n   * Method that sends a request to the API to retreive all Samples for a member\n   *\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  retrieveMemberSamples() {\n    let retrieveAllMemberSamples = `${config.diagnosticClinicURL}/retrieveSamplesForMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"userID\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, retrieveAllMemberSamples, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        SUBMIT SAMPLE FORM\n  /**\n   * Method that send a request to the API to submit a specifc Sample Form\n   *\n   * @param {Interface.SampleFormData} formDetails The details of the sample to be submitted\n   * @returns API response @type any\n   * \n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitSampleForm(formDetails: Interface.SampleFormData) {\n\n    let tempDetails = {\n      \"Location\": \"harding\",\n      \"Province\": \"Gauteng\",\n      \"Genus\": \"eucalyptus\",\n      \"Species\": \"radiata\",\n      \"SampleType\": \"root\",\n      \"Asym_Dis\": \"D\",\n      \"NurseryField\": \"F\",\n      \"Roots\": \"dry\",\n      \"Root-Collar\": \"Wilted, abitDry\",\n      \"Stem\": \"Girdled\",\n      \"GrowthTip\": \"Swelling\",\n      \"Needles-Leaves\": \"healthy\"\n    }\n\n    let submitSampleURL = `${config.diagnosticClinicURL}/submitSample`;\n    let method = 'POST';\n\n    const postData = {\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation,\n      \"userID\": this.authService.getCurrentSessionValue.user.ID,\n      \"data\": tempDetails\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, submitSampleURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        RETRIEVE SAMPLE DETAILS\n  /**\n   * This function is used to fetch a specific sample form\n   *\n   * @param {string} sampleRefNum The reference number of the sample to be retrieved\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  retrieveSampleDetails(sampleRefNum: string) {\n    let retreiveSampleDetailsURL = `${config.diagnosticClinicURL}/retrieveSample`;\n    let method = 'POST';\n\n    const postData = {\n      \"refNum\": sampleRefNum\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, retreiveSampleDetailsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        UPDATE SAMPLE STATUS\n  /**\n   * Method used to update the status of the sample\n   *\n   * @param {*} sample\n   * @param {string} status\n   * @returns\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateSamplesStatus(sample: any, status: string) {\n\n    let updateSampleStatusURL = `${config.diagnosticClinicURL}/updateSampleStatus`;\n    let method = 'POST';\n\n    const postData = {\n      \"refNum\": sample.referenceNumber,\n      \"status\": status\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateSampleStatusURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DiagnosticClinicLogs.html":{"url":"interfaces/DiagnosticClinicLogs.html","title":"interface - DiagnosticClinicLogs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DiagnosticClinicLogs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/notification-logging.service.ts\n        \n\n            \n                Description\n            \n            \n                //Object for defining the JSON object containing the diagnostic \nclinic logs\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Date\n                                \n                                \n                                        ID\n                                \n                                \n                                        Type\n                                \n                                \n                                        User\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Date\n                                    \n                                \n                                \n                                    \n                                        Date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ID\n                                    \n                                \n                                \n                                    \n                                        ID:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Type\n                                    \n                                \n                                \n                                    \n                                        Type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        User\n                                    \n                                \n                                \n                                    \n                                        User:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport { AuthenticationService } from './authentication.service';\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllLogsURL = `${config.logsURL}/getLogs`;\nconst getUserLogsURL = `${config.logsURL}/getUserLogs`;\nconst updateUserLogsURL = `${config.logsURL}/deleteUserLogs`;\n\n///////////////////////////////////////////////////////////////////////\n//                           USER LOGS\n/**\n *  //Object for defining the JSON object containing the user logs\n *\n * @export\n * @interface UserLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface UserLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: USER\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The user on which the action was performed (their ID)\n  User: string;           //The user who performed the action (their ID)\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DATABSE MANAGEMENT LOGS\n/**\n *  //Object for defining the JSON object containing the database \n *  management logs\n *\n * @export\n * @interface DatabaseManagementLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DatabaseManagementLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: DBML (Database Management Log)\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The name of the database that the action was performed on\n  User: string;           //The user who performed the action\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;            //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ACCESS LOGS\n/**\n *  //Object for defining the JSON object containing the access logs\n *\n * @export\n * @interface AccessLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface AccessLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ACCL\n  Action: string;         //The action performed: ACCESS\n  Date: string;           //The date that the action was performed\n  Details: string;        //Description of what was accessed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ERROR LOGS\n/**\n *  //Object for defining the JSON object containing the error logs\n *\n * @export\n * @interface ErrorLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface ErrorLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ERRL\n  Date: string;           //The date that the action was performed\n  StatusCode: string;     //The status code of the error that occured\n  Details: string;        //Description of the error\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DIAGNOSTIC CLINIC LOGS\n/**\n *  //Object for defining the JSON object containing the diagnostic \n *  clinic logs\n *\n * @export\n * @interface DiagnosticClinicLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DiagnosticClinicLogs {\n  Type: string;           //The type of the log: DGCL\n  Date: string;           //The date that the action was performed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                              POST LOG\n/**\n *  //Object for defining the JSON object for posting log requests\n *\n * @export\n * @interface POSTLog\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTLog {\n  Log: Logs;              //The array of logs to post to the API service\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               LOGS\n/**\n *  //Object for defining the JSON object for the logs\n *\n * @export\n * @interface Logs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface Logs {\n  type: string;           //The type of the log\n  before: string;         //The before date\n  after: string;          //The after date\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST USER\n/**\n *  //Object for defining the JSON object to be sent when requesting \n *  the logs belonging to a member\n *\n * @export\n * @interface POSTUser\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUser {\n  userID: string;         //The ID of the user\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST UPDATE\n/**\n *  //Object for defining the JSON object to be sent when updating \n *  to logs belonging to a user\n *\n * @export\n * @interface POSTUpdate\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUpdate {\n  userID: string;         //The ID of the user\n  logIDs: string[];       //The logs to be removed from the user's profile\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class NotificationLoggingService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of NotificationLoggingService.\n  * \n  * @param {HttpClient} http For making calls to the API\n  * \n  * @memberof NotificationLoggingService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       GET ALL USER LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'USER'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllUserLogs() {\n    var tempLog: Logs = { type: 'USER', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                 GET ALL DATABASE MANAGEMENT LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'DBML'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllDatabaseManagementLogs() {\n    var tempLog: Logs = { type: 'DBML', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL ACCESS LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ACCL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllAccessLogs() {\n    var tempLog: Logs = { type: 'ACCL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GET ALL ERROR LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ERRL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllErrorLogs() {\n    var tempLog: Logs = { type: 'ERRL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET USER LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs for a specific user.\n   *\n   * @param {string} userID The id number of the user whose logs need to be feteched for the notifications.\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserLogs(id: string) {\n    var data: POSTUser = { userID: id };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getUserLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE FABI MEMBER NOTIFICATIONS\n  /**\n   * Method that sends a request to the API to update the notifications associated with a specific user.\n   * \n   * @param {string} id The ID of the user whose notifications need to be updated\n   * @param {string[]} notifications The notifications to be removed from the user's profile\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateFABIMemberNotifications(id: string, notifications: string[]) {\n    var postData: POSTUpdate = { userID: id, logIDs: notifications };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', updateUserLogsURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ErrorComponent.html":{"url":"components/ErrorComponent.html","title":"component - ErrorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ErrorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/_errors/error-component/error.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-error\n            \n\n            \n                styleUrls\n                ./error.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./error.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(data: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/_errors/error-component/error.component.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/_errors/error-component/error.component.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Inject(MAT_DIALOG_DATA)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/_errors/error-component/error.component.ts:28\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, Inject} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\n\n@Component({\n  selector: 'app-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.scss']\n})\n\nexport class ErrorComponent implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: any) { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        {{data.error_title}}\n{{data.message}}\n\n\n  \n\n    \n      Details\n    \n  \n\n  {{data.status}}\n  {{data.type}}\n  {{data.error}}\n\n\n\n  Retry\n  Dismiss\n\n    \n\n    \n                \n                    ./error.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{data.error_title}}{{data.message}}            Details        {{data.status}}  {{data.type}}  {{data.error}}  Retry  Dismiss'\n    var COMPONENTS = [{'name': 'AdminDivComponent', 'selector': 'app-admin-div'},{'name': 'AdminHelpComponent', 'selector': 'app-admin-help'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DatabaseHandlerComponent', 'selector': 'app-database-handler'},{'name': 'ErrorComponent', 'selector': 'app-error'},{'name': 'MemberHelpComponent', 'selector': 'app-member-help'},{'name': 'MemberSubmitSampleComponent', 'selector': 'app-member-submit-sample'},{'name': 'NotificationDivComponent', 'selector': 'app-notification-div'},{'name': 'OrganizationHelpComponent', 'selector': 'app-organization-help'},{'name': 'OrganizationMenuComponent', 'selector': 'app-organization-menu'},{'name': 'OrganizationSubmitSampleComponent', 'selector': 'app-organization-submit-sample'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'SampleDivComponent', 'selector': 'app-sample-div'},{'name': 'SampleFormComponent', 'selector': 'app-sample-form'},{'name': 'StaffDivComponent', 'selector': 'app-staff-div'},{'name': 'StaffHelpComponent', 'selector': 'app-staff-help'},{'name': 'StaffMenuComponent', 'selector': 'app-staff-menu'},{'name': 'StaffSubmitSampleComponent', 'selector': 'app-staff-submit-sample'},{'name': 'StaffViewDatabasesComponent', 'selector': 'app-staff-view-databases'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ErrorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorLogs.html":{"url":"interfaces/ErrorLogs.html","title":"interface - ErrorLogs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ErrorLogs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/notification-logging.service.ts\n        \n\n            \n                Description\n            \n            \n                //Object for defining the JSON object containing the error logs\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Date\n                                \n                                \n                                        Details\n                                \n                                \n                                        ID\n                                \n                                \n                                        LogID\n                                \n                                \n                                        StatusCode\n                                \n                                \n                                        Type\n                                \n                                \n                                        User\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Date\n                                    \n                                \n                                \n                                    \n                                        Date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Details\n                                    \n                                \n                                \n                                    \n                                        Details:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ID\n                                    \n                                \n                                \n                                    \n                                        ID:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        LogID\n                                    \n                                \n                                \n                                    \n                                        LogID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        StatusCode\n                                    \n                                \n                                \n                                    \n                                        StatusCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Type\n                                    \n                                \n                                \n                                    \n                                        Type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        User\n                                    \n                                \n                                \n                                    \n                                        User:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport { AuthenticationService } from './authentication.service';\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllLogsURL = `${config.logsURL}/getLogs`;\nconst getUserLogsURL = `${config.logsURL}/getUserLogs`;\nconst updateUserLogsURL = `${config.logsURL}/deleteUserLogs`;\n\n///////////////////////////////////////////////////////////////////////\n//                           USER LOGS\n/**\n *  //Object for defining the JSON object containing the user logs\n *\n * @export\n * @interface UserLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface UserLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: USER\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The user on which the action was performed (their ID)\n  User: string;           //The user who performed the action (their ID)\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DATABSE MANAGEMENT LOGS\n/**\n *  //Object for defining the JSON object containing the database \n *  management logs\n *\n * @export\n * @interface DatabaseManagementLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DatabaseManagementLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: DBML (Database Management Log)\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The name of the database that the action was performed on\n  User: string;           //The user who performed the action\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;            //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ACCESS LOGS\n/**\n *  //Object for defining the JSON object containing the access logs\n *\n * @export\n * @interface AccessLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface AccessLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ACCL\n  Action: string;         //The action performed: ACCESS\n  Date: string;           //The date that the action was performed\n  Details: string;        //Description of what was accessed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ERROR LOGS\n/**\n *  //Object for defining the JSON object containing the error logs\n *\n * @export\n * @interface ErrorLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface ErrorLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ERRL\n  Date: string;           //The date that the action was performed\n  StatusCode: string;     //The status code of the error that occured\n  Details: string;        //Description of the error\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DIAGNOSTIC CLINIC LOGS\n/**\n *  //Object for defining the JSON object containing the diagnostic \n *  clinic logs\n *\n * @export\n * @interface DiagnosticClinicLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DiagnosticClinicLogs {\n  Type: string;           //The type of the log: DGCL\n  Date: string;           //The date that the action was performed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                              POST LOG\n/**\n *  //Object for defining the JSON object for posting log requests\n *\n * @export\n * @interface POSTLog\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTLog {\n  Log: Logs;              //The array of logs to post to the API service\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               LOGS\n/**\n *  //Object for defining the JSON object for the logs\n *\n * @export\n * @interface Logs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface Logs {\n  type: string;           //The type of the log\n  before: string;         //The before date\n  after: string;          //The after date\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST USER\n/**\n *  //Object for defining the JSON object to be sent when requesting \n *  the logs belonging to a member\n *\n * @export\n * @interface POSTUser\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUser {\n  userID: string;         //The ID of the user\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST UPDATE\n/**\n *  //Object for defining the JSON object to be sent when updating \n *  to logs belonging to a user\n *\n * @export\n * @interface POSTUpdate\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUpdate {\n  userID: string;         //The ID of the user\n  logIDs: string[];       //The logs to be removed from the user's profile\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class NotificationLoggingService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of NotificationLoggingService.\n  * \n  * @param {HttpClient} http For making calls to the API\n  * \n  * @memberof NotificationLoggingService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       GET ALL USER LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'USER'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllUserLogs() {\n    var tempLog: Logs = { type: 'USER', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                 GET ALL DATABASE MANAGEMENT LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'DBML'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllDatabaseManagementLogs() {\n    var tempLog: Logs = { type: 'DBML', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL ACCESS LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ACCL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllAccessLogs() {\n    var tempLog: Logs = { type: 'ACCL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GET ALL ERROR LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ERRL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllErrorLogs() {\n    var tempLog: Logs = { type: 'ERRL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET USER LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs for a specific user.\n   *\n   * @param {string} userID The id number of the user whose logs need to be feteched for the notifications.\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserLogs(id: string) {\n    var data: POSTUser = { userID: id };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getUserLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE FABI MEMBER NOTIFICATIONS\n  /**\n   * Method that sends a request to the API to update the notifications associated with a specific user.\n   * \n   * @param {string} id The ID of the user whose notifications need to be updated\n   * @param {string[]} notifications The notifications to be removed from the user's profile\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateFABIMemberNotifications(id: string, notifications: string[]) {\n    var postData: POSTUpdate = { userID: id, logIDs: notifications };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', updateUserLogsURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorsHandler.html":{"url":"classes/ErrorsHandler.html","title":"class - ErrorsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_errors/error-handler/error-handler.ts\n        \n\n            \n                Description\n            \n            \n                This class is responsible for handling all client-side and server-side Errors in the system\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(injector: core.Injector, authService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/_errors/error-handler/error-handler.ts:30\n                            \n                        \n\n                \n                    \n                            Creates an instance of ErrorsHandler.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        injector\n                                                  \n                                                        \n                                                                    core.Injector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleError\n                        \n                        \n                    \n                \n            \n            \n                \nhandleError(error: Error | HttpErrorResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_errors/error-handler/error-handler.ts:59\n                \n            \n\n\n            \n                \n                    This function handles all system errors\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error | HttpErrorResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { NotificationService } from '../../_services/notification.service';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\n\n/**\n *  This class is responsible for `handling all client-side and server-side Errors` in the system\n *\n * @export\n * @class ErrorsHandler\n * @implements {core.ErrorHandler}\n */\n@core.Injectable()\nexport class ErrorsHandler implements core.ErrorHandler {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR \n  /**\n   * Creates an instance of ErrorsHandler.\n   * @param {core.Injector} injector \n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @memberof ErrorsHandler\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private injector: core.Injector,\n    private authService: AuthenticationService,\n  ) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        HANDLE ERROR FUNCTION\n  /**\n   * This function handles all system errors\n   * \n   * @description The function identifies whether it is a `client-side` or `server-side` error and handles it accordingly. \n   *  The function calls the notify service to notify the client. \n   *\n   * @param {(Error | HttpErrorResponse)} error\n   * @memberof ErrorsHandler\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  handleError(error: Error | HttpErrorResponse) {\n\n    const notificationService = this.injector.get(NotificationService);\n    const router = this.injector.get(Router);\n\n    if (error instanceof HttpErrorResponse) {\n      // Server error happened      \n      if (!navigator.onLine) {\n        // No Internet connection;\n        if(this.authService.isLoggedIn == true) {\n          router.navigate(['/login']);this.authService.logoutUser();\n          router.navigate(['/login']);\n        }   \n        notificationService.showWarningNotification('Offline', 'Please check your internet connection');\n      }\n      // Http Error\n      // notificationService.showErrorNotification(`${error.error.code} ${error.error.title}`, `${error.error.message} - ${error.message}`);\n\n    } else {\n      // Client Error Happend     \n      notificationService.showErrorNotification(error.name, error.message);\n    }\n    // Log the error anyway\n    // console.error(error);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ErrorsModule.html":{"url":"modules/ErrorsModule.html","title":"module - ErrorsModule","body":"\n                   \n\n\n\n\n    Modules\n    ErrorsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ErrorsModule\n\n\n\ncluster_ErrorsModule_declarations\n\n\n\ncluster_ErrorsModule_imports\n\n\n\n\nErrorComponent\n\nErrorComponent\n\n\n\nErrorsModule\n\nErrorsModule\n\nErrorsModule -->\n\nErrorComponent->ErrorsModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nErrorsModule -->\n\nMaterialModule->ErrorsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/_errors/errors.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ErrorComponent\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            ErrorComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MaterialModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /**\n * File Name: errors.module.ts\n * File Path: c:\\Users\\Kendra\\Documents\\Varsity\\Third Year\\COS301\\CAPSTONE\\Git Repo\\FABI-Mobile\\FABI-Web\\src\\app\\errors\\errors.module.ts\n * Project Name: fabi-web\n * Created Date: Friday, June 21st 2019\n * Author: Team Nova - novacapstone@gmail.com\n * -----\n * Last Modified: Wednesday, July 24th 2019\n * Modified By: Team Nova\n * -----\n * Copyright (c) 2019 University of Pretoria\n * \n * >\n */\n\n\nimport { NgModule, ErrorHandler } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\nimport { MaterialModule } from '../materials';\n\nimport { ErrorsHandler } from './error-handler/error-handler';\nimport { ServerErrorInterceptor } from './server-error-interceptor/server-error-interceptor'; \n\n\n// import { ErrorRoutingModule } from './error-routing/error-routing.module';\n\nimport { ErrorComponent } from './error-component/error.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MaterialModule\n    // ErrorRoutingModule,\n  ],\n  entryComponents: [ErrorComponent],\n  declarations: [\n    ErrorComponent\n  ],\n  providers: [\n    {\n      provide: ErrorHandler,\n      useClass: ErrorsHandler,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ServerErrorInterceptor,\n      multi: true\n    }\n  ]\n})\nexport class ErrorsModule { }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ErrorsRoutingModule.html":{"url":"modules/ErrorsRoutingModule.html","title":"module - ErrorsRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    ErrorsRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/_errors/errors-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        /**\n * File Name: errors-routing.ts\n * File Path: c:\\Users\\Kendra\\Documents\\Varsity\\Third Year\\COS301\\CAPSTONE\\Git Repo\\FABI-Mobile\\FABI-Web\\src\\app\\_errors\\errors-routing.ts\n * Project Name: fabi-web\n * Created Date: Wednesday, July 24th 2019\n * Author: Team Nova - novacapstone@gmail.com\n * -----\n * Last Modified: Wednesday, July 24th 2019\n * Modified By: Team Nova\n * -----\n * Copyright (c) 2019 University of Pretoria\n * \n * >\n */\n\n\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nimport { AuthenticationGuard } from '../_guards/authentication.guard';\nimport { LoginComponent } from '../login/login.component';\n\n\n\nconst routes: Routes = [\n  {\n    path: 'login',\n    component: LoginComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class ErrorsRoutingModule { }\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilterPipe.html":{"url":"injectables/FilterPipe.html","title":"injectable - FilterPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FilterPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_pipes/filter.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nObject()\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(items: any[], type: string, value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_pipes/filter.pipe.ts:37\n                \n            \n\n\n            \n                \n                    This function will be used to dynamically search all tables throughout the applications.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    items\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        This is the array of items from the table to be searched\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The type of search based on the component that calls the filter function\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to be searched for \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform, Injectable } from '@angular/core';\n\n@Pipe({\n  name: 'filter',\n  pure: false\n})\n@Injectable()\nexport class FilterPipe implements PipeTransform {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TRANSFORM \n  /**\n   * This function will be used to dynamically search all tables throughout the applications.\n   * \n   * @param {any[]} items This is the array of items from the table to be searched\n   * @param {string} type The type of search based on the component that calls the filter function\n   * @param {string} value The value to be searched for \n   * \n   * @memberof FilterPipe\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  transform(items: any[], type: string, value: string): any[] {\n    //Return the array of items if either there are no items, or there is no search value\n    if (!items || !value) {\n      return items;\n    }\n\n    if(type == \"request-report\"){\n      //If the search is being requested from the Reporting component\n      return items.filter((val) => {\n        let temp = (val.user.toLocaleLowerCase().includes(value)) || \n        (val.requestor.toLocaleLowerCase().includes(value)) ||\n        (val.cultureNumber.toLocaleLowerCase().includes(value)) ||\n        (val.taxonName.toLocaleLowerCase().includes(value)) ||\n        (val.referenceNumber.toLocaleLowerCase().includes(value)) ||\n        (val.dateRequested.toLocaleLowerCase().includes(value)) ||\n        (val.dateSubmitted.toLocaleLowerCase().includes(value));\n        return temp;\n      });\n    }\n    else if(type == \"deposit-report\"){\n      //If the search is being requested from the Reporting component\n      return items.filter((val) => {\n        let temp = (val.user.toLocaleLowerCase().includes(value)) || \n        (val.cultureNumber.toLocaleLowerCase().includes(value)) ||\n        (val.name.toLocaleLowerCase().includes(value)) ||\n        (val.collectedBy.toLocaleLowerCase().includes(value)) ||\n        (val.dateCollected.toLocaleLowerCase().includes(value)) ||\n        (val.isolatedBy.toLocaleLowerCase().includes(value)) ||\n        (val.identifiedBy.toLocaleLowerCase().includes(value)) ||\n        (val.dateSubmitted.toLocaleLowerCase().includes(value));\n        return temp;\n      });\n    }\n    else if(type == \"user-log\"){\n      //If the search is being requested from the Reporting page\n      return items.filter((val) => {\n        let temp = (val.action.toLocaleLowerCase().includes(value)) || \n        (val.date.toLocaleLowerCase().includes(value)) ||\n        (val.user1.toLocaleLowerCase().includes(value)) ||\n        (val.user2.toLocaleLowerCase().includes(value));\n        return temp;\n      });\n    }\n    else if(type == \"database-log\"){\n      //If the search is being requested from the Reporting page\n      return items.filter((val) => {\n        let temp = (val.action.toLocaleLowerCase().includes(value)) || \n        (val.date.toLocaleLowerCase().includes(value)) ||\n        (val.user.toLocaleLowerCase().includes(value)) ||\n        (val.details.toLocaleLowerCase().includes(value));\n        return temp;\n      });\n    }\n    else if(type == \"access-log\"){\n      //If the search is being requested from the Reporting page\n      return items.filter((val) => {\n        let temp = (val.details.toLocaleLowerCase().includes(value)) || \n        (val.date.toLocaleLowerCase().includes(value)) ||\n        (val.user.toLocaleLowerCase().includes(value));\n        return temp;\n      });\n    }\n    else if(type == \"error-log\"){\n      //If the search is being requested from the Reporting page\n      return items.filter((val) => {\n        let temp = (val.code.toLocaleLowerCase().includes(value)) || \n        (val.date.toLocaleLowerCase().includes(value)) ||\n        (val.details.toLocaleLowerCase().includes(value)) ||\n        (val.user.toLocaleLowerCase().includes(value));\n        return temp;\n      });\n    }\n    else if(type == \"admin-dashboard\"){\n      //If the search is being requested from the Admin dashboard (or any other dashboard)\n      return items.filter((val) => {\n        let temp = (val.fname.toLocaleLowerCase().includes(value)) || \n        (val.surname.toLocaleLowerCase().includes(value)) ||\n        (val.email.toLocaleLowerCase().includes(value));\n        return temp;\n      });\n    }\n    else if(type == \"database\"){\n      //If the search is requested from the Database Handler component\n      return items.filter((val) => {\n        let temp = (val.toLocaleLowerCase().includes(value));\n        return temp;\n      });\n    }\n    else if(type == \"staff-database\"){\n      //If the search is requested form the Staff View Databases component\n      return items.filter((val) => {\n        let temp = (val.name.toLocaleLowerCase().includes(value));\n        return temp;\n      });\n    }\n    else if(type == \"clinic-admin\"){\n      //If the search is requested from the Clinic Admin View Samples component\n      return items.filter((val) => {\n        let temp = (val.referenceNumber.toLocaleLowerCase().includes(value)) || \n        (val.orgName.toLocaleLowerCase().includes(value)) ||\n        (val.userID.toLocaleLowerCase().includes(value)) ||\n        (val.status.toLocaleLowerCase().includes(value));\n        return temp;\n      });\n    }\n    else if(type == \"organizations\"){\n      //If the search is requested from the Organization Handler component\n      return items.filter((val) => {\n        let temp = (val.orgName.toLocaleLowerCase().includes(value));\n        return temp;\n      });\n    }\n    else if(type == \"samples\"){\n      //If the search is requested from any component that displayes samples\n      return items.filter((val) => {\n        let temp = (val.referenceNumber.toLocaleLowerCase().includes(value)) ||\n        (val.userID.toLocaleLowerCase().includes(value)) ||\n        (val.status.toLocaleLowerCase().includes(value));\n        return temp;\n      });\n    }\n    else if(type == \"member-samples\"){\n      //If the search is requested from the Member View Samples component\n      return items.filter((val) => {\n        let temp = (val.referenceNumber.toLocaleLowerCase().includes(value)) ||\n        (val.status.toLocaleLowerCase().includes(value));\n        return temp;\n      });\n    }\n    else if(type == \"staff-samples\"){\n      //If the search is requested from the Staff Dashboard component\n      return items.filter((val) => {\n        let temp = (val.referenceNumber.toLocaleLowerCase().includes(value)) ||\n        (val.status.toLocaleLowerCase().includes(value)) ||\n        (val.dateSubmitted.toLocaleLowerCase().includes(value));\n        return temp;\n      });\n    }\n    else if(type == \"deposits\"){\n      //If the search is requested from the Staff Dashboard component\n      return items.filter((val) => {\n        let temp = (val.cultureNumber.toLocaleLowerCase().includes(value)) ||\n        (val.name.toLocaleLowerCase().includes(value)) ||\n        (val.dateSubmitted.toLocaleLowerCase().includes(value));\n        return temp;\n      });\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HomeComponent.html":{"url":"classes/HomeComponent.html","title":"class - HomeComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HomeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/home/home.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contact_form\n                            \n                            \n                                forms\n                            \n                            \n                                register_organization_validators\n                            \n                            \n                                request_register_org\n                            \n                            \n                                submitted\n                            \n                            \n                                valid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                contact\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                requestToRegister\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userManagementService: UserManagementAPIService, formBuilder: FormBuilder, snackBar: MatSnackBar, dialog: MatDialog, router: Router, cookieService: CookieService)\n                    \n                \n                        \n                            \n                                Defined in src/app/home/home.component.ts:68\n                            \n                        \n\n                \n                    \n                            Creates an instance of OrganizationHandlerComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userManagementService\n                                                  \n                                                        \n                                                                        UserManagementAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For creating the login form\n\n                                                        \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For snack-bar pop-up messages\n\n                                                        \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For dialog pop-up messages\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for routing/navigating to other components\n\n                                                        \n                                                \n                                                \n                                                        cookieService\n                                                  \n                                                        \n                                                                    CookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contact_form\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/home.component.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            forms\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLCollectionOf\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/home.component.ts:41\n                            \n                        \n\n                \n                    \n                        Object for storing all forms that require validation-  @type {HTMLCollectionOf} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            register_organization_validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    'organization_name': [\n      { type: 'required', message: 'Organization name is required' },\n    ],\n    'admin_email': [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Invalid email' }\n    ],\n    'admin_name': [\n      { type: 'required', message: 'First name is required' }\n    ],\n    'admin_surname': [\n      { type: 'required', message: 'Surname is required' }\n    ],\n    'admin_phone': [\n      { type: 'required', message: 'Phone No. is required' },\n      // { type: 'pattern', message: 'Please enter a valid number' }\n    ],\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/home.component.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            request_register_org\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/home.component.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/home.component.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/home.component.ts:44\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            contact\n                        \n                        \n                    \n                \n            \n            \n                \ncontact()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/home.component.ts:152\n                \n            \n\n\n            \n                \n                    This function sends an email to the admin\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/home.component.ts:120\n                \n            \n\n\n            \n                \n                    This function is called when the page loads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestToRegister\n                        \n                        \n                    \n                \n            \n            \n                \nrequestToRegister()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/home.component.ts:167\n                \n            \n\n\n            \n                \n                    This function allwos an organizaion to request to register for the system\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog, MatSnackBar } from '@angular/material';\nimport { Router } from '@angular/router';\nimport * as Interface from '../_interfaces/interfaces';\nimport { LoadingComponent } from \"../_loading/loading.component\";\nimport { UserManagementAPIService } from \"../_services/user-management-api.service\";\nimport { CookieService } from 'ngx-cookie-service';\n\n\n\n@core.Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n  encapsulation: core.ViewEncapsulation.None\n})\nexport class HomeComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  contact_form: FormGroup;\n  /** Object for storing all forms that require validation-  @type {HTMLCollectionOf} */\n  forms: HTMLCollectionOf = null;\n  request_register_org: FormGroup;\n  submitted: boolean = false;\n  valid: boolean = false;\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          FORM VAIDATORS\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  register_organization_validators = {\n    'organization_name': [\n      { type: 'required', message: 'Organization name is required' },\n    ],\n    'admin_email': [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Invalid email' }\n    ],\n    'admin_name': [\n      { type: 'required', message: 'First name is required' }\n    ],\n    'admin_surname': [\n      { type: 'required', message: 'Surname is required' }\n    ],\n    'admin_phone': [\n      { type: 'required', message: 'Phone No. is required' },\n      // { type: 'pattern', message: 'Please enter a valid number' }\n    ],\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n   * Creates an instance of OrganizationHandlerComponent.\n   * @param {AdminAPIService} service For calling the API service\n   * @param {FormBuilder} formBuilder For creating the login form\n   * @param {MatSnackBar} snackBar For snack-bar pop-up messages\n   * @param {MatDialog} dialog For dialog pop-up messages\n   * @param {Router} router for routing/navigating to other components\n   * @memberof HomeComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private userManagementService: UserManagementAPIService,\n    private formBuilder: FormBuilder,\n    private snackBar: MatSnackBar,\n    private dialog: MatDialog,\n    private router: Router,\n    private cookieService: CookieService\n  ) {\n    this.contact_form = this.formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', Validators.required],\n      mesage: ['', Validators.required]\n    })\n\n    this.request_register_org = this.formBuilder.group({\n      organization_name: ['', Validators.required],\n      admin_name: ['', Validators.required],\n      admin_surname: ['', Validators.required],\n      admin_email: ['', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])],\n      admin_phone: ['', Validators.compose([\n        Validators.required,\n        // Validators.pattern('')\n      ])]\n\n    })\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @memberof HomeComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n\n    this.cookieService.set('SameSite', 'None');\n\n    //-------- Form Validation --------\n    // Fetch all the forms we want to apply custom Bootstrap validation styles to\n    this.forms = document.getElementsByClassName(\"needs-validation\");\n    // Loop over them and prevent submission\n    var validation = Array.prototype.filter.call(this.forms, function (form) {\n      form.addEventListener(\n        \"submit\",\n        function (event) {\n          if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n          }\n          form.classList.add(\"was-validated\");\n        },\n        false\n      );\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       CONTACT\n  /**\n   * This function sends an email to the admin\n   *\n   * @returns\n   * @memberof HomeComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  contact() {\n\n\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       REQUEST TO REGISTER\n  /**\n   * This function allwos an organizaion to request to register for the system\n   *\n   * @returns\n   * @memberof HomeComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  requestToRegister() {\n\n    this.submitted = true;\n\n    if (this.request_register_org.invalid) {\n      return;\n    }\n\n    this.valid = true;\n\n    let loadingRef = this.dialog.open(LoadingComponent, { data: { title: \"Sending Request\" } });\n\n    const LorgName = this.request_register_org.controls.organization_name.value;\n    const LadminName = this.request_register_org.controls.admin_name.value;\n    const LadminSurname = this.request_register_org.controls.admin_surname.value;\n    const LadminEmail = this.request_register_org.controls.admin_email.value;\n    const LadminPhone = this.request_register_org.controls.admin_phone.value;\n\n    const admin_details: Interface.OrganisationAdmin = { fname: LadminName, surname: LadminSurname, email: LadminEmail };\n    const org_details: Interface.Organisation = { orgName: LorgName, admin: admin_details };\n\n    this.userManagementService.sendRequestToRegisterOrganization(org_details).subscribe((response: any) => {\n\n      loadingRef.close();\n\n      if (response.success == true && response.code == 200) {\n        //POPUP MESSAGE\n\n        let snackBarRef = this.snackBar.open(\"Successfully Sent Request\", \"Dismiss\", {\n          duration: 6000\n        });\n\n      } else if (response.success == false) {\n        //POPUP MESSAGE\n      }\n    });\n\n  }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadingComponent.html":{"url":"classes/LoadingComponent.html","title":"class - LoadingComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadingComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_loading/loading.component.ts\n        \n\n            \n                Description\n            \n            \n                used to display a loading bar pop-up\n\n            \n\n\n            \n                Implements\n            \n            \n                        \n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/_loading/loading.component.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @(MAT_DIALOG_DATA)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/_loading/loading.component.ts:35\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/_loading/loading.component.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { MAT_DIALOG_DATA } from \"@angular/material\";\n\n\n/**\n *  used to display a loading bar pop-up\n *\n * @export\n * @class LoadingComponent\n * @implements {core.OnInit}\n */\n@core.Component({\n  selector: 'app-loading',\n  templateUrl: './loading.component.html',\n  styleUrls: ['./loading.component.scss']\n})\nexport class LoadingComponent implements core.OnInit {\n\n  constructor(@core.Inject(MAT_DIALOG_DATA) public data: any) { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Location.html":{"url":"interfaces/Location.html","title":"interface - Location","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Location\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_interfaces/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Defines a Location object\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        latitude\n                                \n                                \n                                        longitude\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        latitude\n                                    \n                                \n                                \n                                    \n                                        latitude:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        longitude\n                                    \n                                \n                                \n                                    \n                                        longitude:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Organisation {\n  ID?: string;                                //The id of Organisation \n  orgName: string;                            //The name of Organisation\n  admin?: OrganisationAdmin;                  //The admin of Organisation\n}\n\n\n/////////////////////////////////////////////////////\n//              ORGANIZATION ADMIN\n/**\n * Defines an Admin of an Organisation\n *\n * @export\n * @interface OrganisationAdmin\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationAdmin {\n  fname: string;                              //The first name of Admin\n  surname: string;                            //The surname of Admin\n  email: string;                              //The email of Admin\n  phone?: number;                             //The phone number of Admin\n  password?: string;                          //The passsword of Admin\n}\n\n\n/////////////////////////////////////////////////////\n//            ORGANIZATION MEMBER\n/**\n * Defines a Organisation's Member object\n *\n * @export\n * @interface MemberInfo\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationMember {\n  id?: string,                                  //The id of the Member\n  fname: string,                                //The first name of Member\n  surname: string,                              //The surname of Member\n  email: string,                                //The email of Member\n  phone?: number;                               //The phone number of Member\n  password?: string                             //The password of Member\n}\n\n\n/////////////////////////////////////////////////////\n//                  USER TYPE\n/**\n * Defines a User Type object\n *\n * @export\n * @interface UserType\n */\n/////////////////////////////////////////////////////\nexport interface UserType {\n  ID: number;                                 //The id of the User Type\n  Name: string;                               //The name of the User Type\n}\n\n\n/////////////////////////////////////////////////////\n//                LOGIN INFO\n/**\n * Defines the User's Login Information\n *\n * @export\n * @interface LoginInfo\n */\n/////////////////////////////////////////////////////\nexport interface LoginInfo {\n  orgName: string;                            //The organization fo teh user currently logged in\n  email: string;                              //The email of the suer currently logged in\n  password: string;                           //The password of the user currently logged in\n}\n\n\n/////////////////////////////////////////////////////\n//                 STAFF INFO\n/**\n * Defines a FABI Staff Member object\n *\n * @export\n * @interface StaffInfo\n */\n/////////////////////////////////////////////////////\nexport interface StaffInfo {\n  ID?: number,                                  //The id number of the staff member\n  fname: string                                 //The first name of the staff member\n  surname: string,                              //The surname of the staff member\n  email: string,                                //The email address fo the staff member\n  phone?: number,                               //The phone number of the staff member\n  position?: string,                            //The positions of the staff member\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            DATABASE PRIVILEGE\n/**\n * Defines a DatabasePrivilege object\n *\n * @export\n * @interface DatabasePrivilege\n */\n/////////////////////////////////////////////////////\nexport interface DatabasePrivilege {\n  name: string,                                 //The database's name\n  privileges: string[]                          //The privileges for the database                          \n}\n\n\n/////////////////////////////////////////////////////\n//                PRIVILEGE TYPES\n/**\n * Defines a PrivilegeTypes object\n *\n * @export\n * @interface PrivilegeTypes\n */\n/////////////////////////////////////////////////////\nexport interface PrivilegeTypes {\n  create: boolean,                              //The create privilege\n  retrieve: boolean,                            //The retrieve privilege\n  update: boolean,                              //The update privilege\n  delete: boolean                               //The delete privilege\n}\n\n\n/////////////////////////////////////////////////////\n//              USER'S PRIVILEGES\n/**\n * Defines a UserPrivileges object\n *\n * @export\n * @interface UserPrivileges\n */\n/////////////////////////////////////////////////////\nexport interface UserPrivileges {\n  databases?: DatabasePrivilege[]               //The database privileges for a database\n}\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            CONFIRM (for confirm pop-up)\n/**\n * Defines a Confirm object\n *\n * @export\n * @interface Confirm\n */\n/////////////////////////////////////////////////////\nexport interface Confirm {\n  title: string,                                //The confirm title\n  message: string,                              //The confirm message\n  info: string,                                 //The confirm information\n  cancel: string,                               //If it has been canceled or not\n  confirm: string                               //If it has been confirmed or not\n}\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  SAMPLE FORM\n/**\n * Defines a SampleFormData object\n *\n * @export\n * @interface SampleFormData\n */\n/////////////////////////////////////////////////////\nexport interface SampleFormData {\n  // Sample Details\n  sample_details: {\n    plant_species: string,                 //The species of the sample\n    plant_genus: string                    //The genus of the sample\n    num_samples: number,                   //The number of samples\n    date_collected: Date,                  //The date that the sample was collected\n    date_sent: Date,                       //The date that the sample was sent\n  }\n\n  // Plantation Details\n  plantation_details: {\n    street: string,                        //The street name\n    area: string,                          //The area\n    city: string,                          //The city \n    farm: string,                          //The farm name\n    province: string,                      //The province\n    gps: string,                           //Sample GPS coordinates\n  }\n\n  // Type of Sample\n  types: string[],\n  // types: {\n  //   soil: boolean,                     //Soil sample type\n  //   stems: boolean,                    //Stems sample type\n  //   roots: boolean,                    //Roots sample type\n  //   twigs: boolean,                    //Twigs sample type\n  //   leaves: boolean,                   //Leaves sample type\n  //   seedlings: boolean,                //Seedlings sample type\n  //   media: boolean,                    //Media sample type\n  //   water: boolean,                    //Water sample type\n  //   insect: boolean,                   //Insect sample type\n  //   nuts: boolean,                     //Nuts sample type\n  //   other: boolean,                    //Other type of sample (if any)\n  // }\n\n  // Symptoms\n  symptoms: {\n    wilt: boolean,                         //Wilt symptom\n    stunting: boolean,                     //Stunting symptom\n    leafspot: boolean,                     //Leafspot symptom\n    rootrot: boolean,                      //Rootrot symptom\n    dieback: boolean,                      //Dieback symptom\n    cankers: boolean,                      //Cankers symptom \n    death: boolean,                        //Death symptom \n    wood: boolean,                         //Wood symptom\n    other: boolean,                        //Other symptoms (if any)\n  }\n\n  // Distribution of Symptoms\n  distribution: {\n    localized: boolean,               //The localized distribution\n    scattered: boolean,                //The scattered distribution\n    general: boolean,                  //The general distribution\n    clumps: boolean,                   //The clumps distribution\n    na: boolean,                       //The na distribution\n    other: boolean,                    //Other distributions (if any)\n    percentage_plants_affected: number,           //The percentage of plants affected\n  }\n\n  // Conditons\n  conditions: {\n    date_problem_noticed: Date,        //The date the problem was noticed\n    date_planted: Date,                //The date the plants were planted\n    weather_disturbances: string,      //The weather disturbances\n    weather_prior: string,             //The weather conditions prior\n    others: string,                    //Other weather conditions (if any)\n    additional?: string                 //Additional weather conditions (if any)\n  }\n\n  // Permissions\n  permissions: {\n    landowner_name: string,                       //The landowner's name\n    permission_granted: boolean                   //Whether or not the landowner has granted permission\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  LOCATION\n/**\n * Defines a Location object\n *\n * @export\n * @interface Location\n */\n/////////////////////////////////////////////////////\nexport interface Location {\n  latitude: number,                             //The latitude of the location\n  longitude: number                             //The longitude of the location\n}\n\n\n/////////////////////////////////////////////////////\n//                     ADDRESS\n/**\n * Defines a Address object\n *\n * @export\n * @interface Address\n */\n/////////////////////////////////////////////////////\nexport interface Address {\n  street_number?: number,                       //The street number of the address (if any)\n  street: string,                               //The street name of the address\n  estate?: string,                              //The estate of the address (if any)\n  area?: string,                                //The area of the address (if any)\n  city: string,                                 //The city of the address\n  province: string,                             //The province of the address\n  country: string,                              //The country of the address\n  postal_code?: string,                         //The postal code of the address (if any)\n  formatted_address: string                     //The formatted address\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocationService.html":{"url":"injectables/LocationService.html","title":"injectable - LocationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/location.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                geocoder\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/_services/location.service.ts:10\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            geocoder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/_services/location.service.ts:10\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport * as Interface from '../_interfaces/interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class LocationService {\n\n  private geocoder: any;\n\n  constructor() { }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginComponent.html":{"url":"classes/LoginComponent.html","title":"class - LoginComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/login/login.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                forms\n                            \n                            \n                                loading\n                            \n                            \n                                loggedIn\n                            \n                            \n                                login_validation_messages\n                            \n                            \n                                loginForm\n                            \n                            \n                                organizations\n                            \n                            \n                                selectedOrg\n                            \n                            \n                                submitted\n                            \n                            \n                                userTypes\n                            \n                            \n                                valid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService, formBuilder: FormBuilder, snackBar: MatSnackBar, dialog: MatDialog, router: Router, toaster: ToastrService, userManagementServicee: UserManagementAPIService)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/login.component.ts:76\n                            \n                        \n\n                \n                    \n                            Creates an instance of LoginComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the authentication API service\n\n                                                        \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For creating the login form\n\n                                                        \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For snack-bar pop-up messages\n\n                                                        \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For dialog pop-up messages\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for routing/navigating to other components\n\n                                                        \n                                                \n                                                \n                                                        toaster\n                                                  \n                                                        \n                                                                    ToastrService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        userManagementServicee\n                                                  \n                                                        \n                                                                        UserManagementAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            forms\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLCollectionOf\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/login/login.component.ts:43\n                            \n                        \n\n                \n                    \n                        Object for storing all forms that require validation-  @type {HTMLCollectionOf} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loading\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/login/login.component.ts:55\n                            \n                        \n\n                \n                    \n                        If page is busy loading something - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loggedIn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/login/login.component.ts:49\n                            \n                        \n\n                \n                    \n                        To check if user is logged in - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login_validation_messages\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    'organization': [\n      { type: 'required', message: 'Organization is required' }\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Invalid email' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required' },\n      { type: 'minlength', message: 'Password must be at least 8 characters long' },\n      // { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number' }\n    ],\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/login/login.component.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loginForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/login/login.component.ts:41\n                            \n                        \n\n                \n                    \n                        Object for defining the login form -  @type {FormGroup} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            organizations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Interface.Organisation[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/login/login.component.ts:51\n                            \n                        \n\n                \n                    \n                        Array of Organization objects for form dropdown - @type {Organisation[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedOrg\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/login/login.component.ts:57\n                            \n                        \n\n                \n                    \n                        Selected organisation on dropdown. Used to adjust login form according to organisation selected - @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/login/login.component.ts:45\n                            \n                        \n\n                \n                    \n                        To check if form has been submitted - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userTypes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Interface.UserType[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/login/login.component.ts:53\n                            \n                        \n\n                \n                    \n                        Array of User Type objects for form dropdown - @type {UserType[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/login/login.component.ts:47\n                            \n                        \n\n                \n                    \n                        To check if form has been submitted correctly - @type {boolean} \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin()\n                \n            \n\n\n            \n                \n                    Defined in src/app/login/login.component.ts:175\n                \n            \n\n\n            \n                \n                    This function calls the authentication service to authenticate the user's login details. If the user is authenticated, they're directed \nto their respective dashboard. If they're NOT authenticated, an appropriate error message is shown.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        If form input is invalid (eg. not filled out correctly etc.) \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/login/login.component.ts:132\n                \n            \n\n\n            \n                \n                    This function is called when the page loads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog, MatSnackBar } from '@angular/material';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport * as Interface from '../_interfaces/interfaces';\nimport { LoadingComponent } from \"../_loading/loading.component\";\nimport { AuthenticationService } from '../_services/authentication.service';\nimport { UserManagementAPIService } from \"../_services/user-management-api.service\";\n\n\n@core.Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  encapsulation: core.ViewEncapsulation.None\n})\n\nexport class LoginComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  /** Object for defining the login form -  @type {FormGroup} */\n  loginForm: FormGroup;\n  /** Object for storing all forms that require validation-  @type {HTMLCollectionOf} */\n  forms: HTMLCollectionOf = null;\n  /** To check if form has been submitted - @type {boolean} */\n  submitted: boolean = false;\n  /** To check if form has been submitted correctly - @type {boolean} */\n  valid: boolean = false;\n  /** To check if user is logged in - @type {boolean} */\n  loggedIn: boolean = false;\n  /** Array of Organization objects for form dropdown - @type {Organisation[]} */\n  organizations: Interface.Organisation[];\n  /** Array of User Type objects for form dropdown - @type {UserType[]} */\n  userTypes: Interface.UserType[];\n  /** If page is busy loading something - @type {boolean} */\n  loading: boolean = false;\n  /** Selected organisation on dropdown. Used to adjust login form according to organisation selected - @type {string} */\n  selectedOrg: string;\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          FORM VALIDATION\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  login_validation_messages = {\n    'organization': [\n      { type: 'required', message: 'Organization is required' }\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Invalid email' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required' },\n      { type: 'minlength', message: 'Password must be at least 8 characters long' },\n      // { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number' }\n    ],\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of LoginComponent.\n   * \n   * @param {AdminAPIService} authService For calling the *authentication* API service\n   * @param {FormBuilder} formBuilder For creating the login form\n   * @param {MatSnackBar} snackBar For snack-bar pop-up messages\n   * @param {MatDialog} dialog For dialog pop-up messages\n   * @param {Router} router for routing/navigating to other components\n   * @memberof LoginComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private authService: AuthenticationService,\n    private formBuilder: FormBuilder,\n    private snackBar: MatSnackBar,\n    private dialog: MatDialog,\n    private router: Router,\n    private toaster: ToastrService,\n    private userManagementServicee: UserManagementAPIService,\n  ) {\n\n    // if(!this.previousUserData.email && this.previousUserData.email == null) {\n    //   var email = '';\n    // }\n\n    // if(!this.previousUserData.organization && this.previousUserData.organization == null) {\n    //   var organization = '';\n    // }\n\n    this.loginForm = this.formBuilder.group({\n      organization: ['', Validators.required],\n      email: ['', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])],\n      password: ['', Validators.compose([\n        Validators.required,\n        Validators.minLength(8)\n      ])]\n    })\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    NG_ON_INIT()  \n  /**\n   * This function is called when the page loads\n   * \n   * @description 1. Check if user is already logged in | 2. Check if their session ID (Token) is valid | 3. Populate form drop downs \n   *\n   * @memberof LoginComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    //-------- Load Organisation names for Drop Down --------\n    this.userManagementServicee.getAllOrganizations().subscribe((response: any) => {\n\n      if (response.success == true && response.code == 200) {\n        this.organizations = response.data.Organizations;\n      }\n      else if (response.success == false) {\n        //POPUP MESSAGE\n      }\n    });\n\n    //-------- Form Validation --------\n    // Fetch all the forms we want to apply custom Bootstrap validation styles to\n    this.forms = document.getElementsByClassName(\"needs-validation\");\n    // Loop over them and prevent submission\n    var validation = Array.prototype.filter.call(this.forms, function (form) {\n      form.addEventListener(\n        \"submit\",\n        function (event) {\n          if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n          }\n          form.classList.add(\"was-validated\");\n        },\n        false\n      );\n    });\n\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                              LOGIN\n  /**\n   * This function calls the *authentication* service to authenticate the user's login details. If the user is authenticated, they're directed \n   * to their respective dashboard. If they're NOT authenticated, an appropriate error message is shown.\n   * \n   * @returns If form input is invalid (eg. not filled out correctly etc.) \n   * @memberof LoginComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  login() {\n    this.submitted = true;\n\n    // Check if form input is valid \n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    this.valid = true;            \n\n    let loadingRef = this.dialog.open(LoadingComponent, { data: { title: \"Logging in...\" } });\n\n    // Get form details\n    const Lemail = this.loginForm.controls.email.value;\n    const Lpassw = this.loginForm.controls.password.value;\n    const Lorg = this.loginForm.controls.organization.value;\n\n    // User details to be passed to API\n    const details: Interface.LoginInfo = { email: Lemail, password: Lpassw, orgName: Lorg };\n\n    this.authService.login(details).subscribe((response: any) => {\n\n      loadingRef.close();\n\n      // API Request successful\n      if (response.success == true && response.code == 200) {\n\n        //POPUP MESSAGE\n        let snackBarRef = this.snackBar.open(`Welcome ${response.userDetails.fname}`, \"Dismiss\", {\n          duration: 3000\n        });\n\n        // Navigate to specific dashboard, based on user's type\n        if (response.userDetails.userType == 'SuperUser') {\n          this.router.navigate(['/admin-dashboard']);\n        } else if (response.userDetails.userType == 'ClinicAdmin') {\n          this.router.navigate(['/clinic-handler']);\n        } else if (response.userDetails.userType == 'OrganizationAdmin') {\n          this.router.navigate(['/organization-dashboard']);\n        } else if (response.userDetails.userType == 'Member') {\n          this.router.navigate(['/member-dashboard']);\n        } else if (response.userDetails.userType == 'Staff') {\n          this.router.navigate(['/staff-dashboard']);\n        } else {\n          let snackBarRef = this.snackBar.open(\"User not supported\", \"Dismiss\", {\n            duration: 3000\n          });\n        }\n\n\n      } else if (response.success == false) {\n        //POPUP MESSAGE\n      }\n    });\n\n    this.loading = false;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginInfo.html":{"url":"interfaces/LoginInfo.html","title":"interface - LoginInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LoginInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_interfaces/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Defines the User's Login Information\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        orgName\n                                \n                                \n                                        password\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        orgName\n                                    \n                                \n                                \n                                    \n                                        orgName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Organisation {\n  ID?: string;                                //The id of Organisation \n  orgName: string;                            //The name of Organisation\n  admin?: OrganisationAdmin;                  //The admin of Organisation\n}\n\n\n/////////////////////////////////////////////////////\n//              ORGANIZATION ADMIN\n/**\n * Defines an Admin of an Organisation\n *\n * @export\n * @interface OrganisationAdmin\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationAdmin {\n  fname: string;                              //The first name of Admin\n  surname: string;                            //The surname of Admin\n  email: string;                              //The email of Admin\n  phone?: number;                             //The phone number of Admin\n  password?: string;                          //The passsword of Admin\n}\n\n\n/////////////////////////////////////////////////////\n//            ORGANIZATION MEMBER\n/**\n * Defines a Organisation's Member object\n *\n * @export\n * @interface MemberInfo\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationMember {\n  id?: string,                                  //The id of the Member\n  fname: string,                                //The first name of Member\n  surname: string,                              //The surname of Member\n  email: string,                                //The email of Member\n  phone?: number;                               //The phone number of Member\n  password?: string                             //The password of Member\n}\n\n\n/////////////////////////////////////////////////////\n//                  USER TYPE\n/**\n * Defines a User Type object\n *\n * @export\n * @interface UserType\n */\n/////////////////////////////////////////////////////\nexport interface UserType {\n  ID: number;                                 //The id of the User Type\n  Name: string;                               //The name of the User Type\n}\n\n\n/////////////////////////////////////////////////////\n//                LOGIN INFO\n/**\n * Defines the User's Login Information\n *\n * @export\n * @interface LoginInfo\n */\n/////////////////////////////////////////////////////\nexport interface LoginInfo {\n  orgName: string;                            //The organization fo teh user currently logged in\n  email: string;                              //The email of the suer currently logged in\n  password: string;                           //The password of the user currently logged in\n}\n\n\n/////////////////////////////////////////////////////\n//                 STAFF INFO\n/**\n * Defines a FABI Staff Member object\n *\n * @export\n * @interface StaffInfo\n */\n/////////////////////////////////////////////////////\nexport interface StaffInfo {\n  ID?: number,                                  //The id number of the staff member\n  fname: string                                 //The first name of the staff member\n  surname: string,                              //The surname of the staff member\n  email: string,                                //The email address fo the staff member\n  phone?: number,                               //The phone number of the staff member\n  position?: string,                            //The positions of the staff member\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            DATABASE PRIVILEGE\n/**\n * Defines a DatabasePrivilege object\n *\n * @export\n * @interface DatabasePrivilege\n */\n/////////////////////////////////////////////////////\nexport interface DatabasePrivilege {\n  name: string,                                 //The database's name\n  privileges: string[]                          //The privileges for the database                          \n}\n\n\n/////////////////////////////////////////////////////\n//                PRIVILEGE TYPES\n/**\n * Defines a PrivilegeTypes object\n *\n * @export\n * @interface PrivilegeTypes\n */\n/////////////////////////////////////////////////////\nexport interface PrivilegeTypes {\n  create: boolean,                              //The create privilege\n  retrieve: boolean,                            //The retrieve privilege\n  update: boolean,                              //The update privilege\n  delete: boolean                               //The delete privilege\n}\n\n\n/////////////////////////////////////////////////////\n//              USER'S PRIVILEGES\n/**\n * Defines a UserPrivileges object\n *\n * @export\n * @interface UserPrivileges\n */\n/////////////////////////////////////////////////////\nexport interface UserPrivileges {\n  databases?: DatabasePrivilege[]               //The database privileges for a database\n}\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            CONFIRM (for confirm pop-up)\n/**\n * Defines a Confirm object\n *\n * @export\n * @interface Confirm\n */\n/////////////////////////////////////////////////////\nexport interface Confirm {\n  title: string,                                //The confirm title\n  message: string,                              //The confirm message\n  info: string,                                 //The confirm information\n  cancel: string,                               //If it has been canceled or not\n  confirm: string                               //If it has been confirmed or not\n}\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  SAMPLE FORM\n/**\n * Defines a SampleFormData object\n *\n * @export\n * @interface SampleFormData\n */\n/////////////////////////////////////////////////////\nexport interface SampleFormData {\n  // Sample Details\n  sample_details: {\n    plant_species: string,                 //The species of the sample\n    plant_genus: string                    //The genus of the sample\n    num_samples: number,                   //The number of samples\n    date_collected: Date,                  //The date that the sample was collected\n    date_sent: Date,                       //The date that the sample was sent\n  }\n\n  // Plantation Details\n  plantation_details: {\n    street: string,                        //The street name\n    area: string,                          //The area\n    city: string,                          //The city \n    farm: string,                          //The farm name\n    province: string,                      //The province\n    gps: string,                           //Sample GPS coordinates\n  }\n\n  // Type of Sample\n  types: string[],\n  // types: {\n  //   soil: boolean,                     //Soil sample type\n  //   stems: boolean,                    //Stems sample type\n  //   roots: boolean,                    //Roots sample type\n  //   twigs: boolean,                    //Twigs sample type\n  //   leaves: boolean,                   //Leaves sample type\n  //   seedlings: boolean,                //Seedlings sample type\n  //   media: boolean,                    //Media sample type\n  //   water: boolean,                    //Water sample type\n  //   insect: boolean,                   //Insect sample type\n  //   nuts: boolean,                     //Nuts sample type\n  //   other: boolean,                    //Other type of sample (if any)\n  // }\n\n  // Symptoms\n  symptoms: {\n    wilt: boolean,                         //Wilt symptom\n    stunting: boolean,                     //Stunting symptom\n    leafspot: boolean,                     //Leafspot symptom\n    rootrot: boolean,                      //Rootrot symptom\n    dieback: boolean,                      //Dieback symptom\n    cankers: boolean,                      //Cankers symptom \n    death: boolean,                        //Death symptom \n    wood: boolean,                         //Wood symptom\n    other: boolean,                        //Other symptoms (if any)\n  }\n\n  // Distribution of Symptoms\n  distribution: {\n    localized: boolean,               //The localized distribution\n    scattered: boolean,                //The scattered distribution\n    general: boolean,                  //The general distribution\n    clumps: boolean,                   //The clumps distribution\n    na: boolean,                       //The na distribution\n    other: boolean,                    //Other distributions (if any)\n    percentage_plants_affected: number,           //The percentage of plants affected\n  }\n\n  // Conditons\n  conditions: {\n    date_problem_noticed: Date,        //The date the problem was noticed\n    date_planted: Date,                //The date the plants were planted\n    weather_disturbances: string,      //The weather disturbances\n    weather_prior: string,             //The weather conditions prior\n    others: string,                    //Other weather conditions (if any)\n    additional?: string                 //Additional weather conditions (if any)\n  }\n\n  // Permissions\n  permissions: {\n    landowner_name: string,                       //The landowner's name\n    permission_granted: boolean                   //Whether or not the landowner has granted permission\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  LOCATION\n/**\n * Defines a Location object\n *\n * @export\n * @interface Location\n */\n/////////////////////////////////////////////////////\nexport interface Location {\n  latitude: number,                             //The latitude of the location\n  longitude: number                             //The longitude of the location\n}\n\n\n/////////////////////////////////////////////////////\n//                     ADDRESS\n/**\n * Defines a Address object\n *\n * @export\n * @interface Address\n */\n/////////////////////////////////////////////////////\nexport interface Address {\n  street_number?: number,                       //The street number of the address (if any)\n  street: string,                               //The street name of the address\n  estate?: string,                              //The estate of the address (if any)\n  area?: string,                                //The area of the address (if any)\n  city: string,                                 //The city of the address\n  province: string,                             //The province of the address\n  country: string,                              //The country of the address\n  postal_code?: string,                         //The postal code of the address (if any)\n  formatted_address: string                     //The formatted address\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Logs.html":{"url":"interfaces/Logs.html","title":"interface - Logs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Logs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/notification-logging.service.ts\n        \n\n            \n                Description\n            \n            \n                //Object for defining the JSON object for the logs\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        after\n                                \n                                \n                                        before\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        after\n                                    \n                                \n                                \n                                    \n                                        after:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        before\n                                    \n                                \n                                \n                                    \n                                        before:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport { AuthenticationService } from './authentication.service';\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllLogsURL = `${config.logsURL}/getLogs`;\nconst getUserLogsURL = `${config.logsURL}/getUserLogs`;\nconst updateUserLogsURL = `${config.logsURL}/deleteUserLogs`;\n\n///////////////////////////////////////////////////////////////////////\n//                           USER LOGS\n/**\n *  //Object for defining the JSON object containing the user logs\n *\n * @export\n * @interface UserLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface UserLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: USER\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The user on which the action was performed (their ID)\n  User: string;           //The user who performed the action (their ID)\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DATABSE MANAGEMENT LOGS\n/**\n *  //Object for defining the JSON object containing the database \n *  management logs\n *\n * @export\n * @interface DatabaseManagementLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DatabaseManagementLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: DBML (Database Management Log)\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The name of the database that the action was performed on\n  User: string;           //The user who performed the action\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;            //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ACCESS LOGS\n/**\n *  //Object for defining the JSON object containing the access logs\n *\n * @export\n * @interface AccessLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface AccessLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ACCL\n  Action: string;         //The action performed: ACCESS\n  Date: string;           //The date that the action was performed\n  Details: string;        //Description of what was accessed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ERROR LOGS\n/**\n *  //Object for defining the JSON object containing the error logs\n *\n * @export\n * @interface ErrorLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface ErrorLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ERRL\n  Date: string;           //The date that the action was performed\n  StatusCode: string;     //The status code of the error that occured\n  Details: string;        //Description of the error\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DIAGNOSTIC CLINIC LOGS\n/**\n *  //Object for defining the JSON object containing the diagnostic \n *  clinic logs\n *\n * @export\n * @interface DiagnosticClinicLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DiagnosticClinicLogs {\n  Type: string;           //The type of the log: DGCL\n  Date: string;           //The date that the action was performed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                              POST LOG\n/**\n *  //Object for defining the JSON object for posting log requests\n *\n * @export\n * @interface POSTLog\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTLog {\n  Log: Logs;              //The array of logs to post to the API service\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               LOGS\n/**\n *  //Object for defining the JSON object for the logs\n *\n * @export\n * @interface Logs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface Logs {\n  type: string;           //The type of the log\n  before: string;         //The before date\n  after: string;          //The after date\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST USER\n/**\n *  //Object for defining the JSON object to be sent when requesting \n *  the logs belonging to a member\n *\n * @export\n * @interface POSTUser\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUser {\n  userID: string;         //The ID of the user\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST UPDATE\n/**\n *  //Object for defining the JSON object to be sent when updating \n *  to logs belonging to a user\n *\n * @export\n * @interface POSTUpdate\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUpdate {\n  userID: string;         //The ID of the user\n  logIDs: string[];       //The logs to be removed from the user's profile\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class NotificationLoggingService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of NotificationLoggingService.\n  * \n  * @param {HttpClient} http For making calls to the API\n  * \n  * @memberof NotificationLoggingService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       GET ALL USER LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'USER'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllUserLogs() {\n    var tempLog: Logs = { type: 'USER', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                 GET ALL DATABASE MANAGEMENT LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'DBML'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllDatabaseManagementLogs() {\n    var tempLog: Logs = { type: 'DBML', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL ACCESS LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ACCL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllAccessLogs() {\n    var tempLog: Logs = { type: 'ACCL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GET ALL ERROR LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ERRL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllErrorLogs() {\n    var tempLog: Logs = { type: 'ERRL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET USER LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs for a specific user.\n   *\n   * @param {string} userID The id number of the user whose logs need to be feteched for the notifications.\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserLogs(id: string) {\n    var data: POSTUser = { userID: id };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getUserLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE FABI MEMBER NOTIFICATIONS\n  /**\n   * Method that sends a request to the API to update the notifications associated with a specific user.\n   * \n   * @param {string} id The ID of the user whose notifications need to be updated\n   * @param {string[]} notifications The notifications to be removed from the user's profile\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateFABIMemberNotifications(id: string, notifications: string[]) {\n    var postData: POSTUpdate = { userID: id, logIDs: notifications };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', updateUserLogsURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MapsWindowComponent.html":{"url":"classes/MapsWindowComponent.html","title":"class - MapsWindowComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MapsWindowComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/maps-window/maps-window.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                address\n                            \n                            \n                                    Private\n                                geocoder\n                            \n                            \n                                    Public\n                                infoTitle\n                            \n                            \n                                    Public\n                                isSatellite\n                            \n                            \n                                    Public\n                                location\n                            \n                            \n                                    Public\n                                map_type\n                            \n                            \n                                    Public\n                                searchElementRef\n                            \n                            \n                                    Public\n                                zoom\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancel\n                            \n                            \n                                changeMapType\n                            \n                            \n                                getAddress\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                select\n                            \n                            \n                                selectLocation\n                            \n                            \n                                setCurrentLocation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dialogRef: MatDialogRef, mapLoader: MapsAPILoader, ngZone: core.NgZone)\n                    \n                \n                        \n                            \n                                Defined in src/app/maps-window/maps-window.component.ts:48\n                            \n                        \n\n                \n                    \n                            Creates an instance of MapsWindowComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mapLoader\n                                                  \n                                                        \n                                                                    MapsAPILoader\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ngZone\n                                                  \n                                                        \n                                                                    core.NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            address\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Interface.Address\n\n                        \n                    \n                    \n                        \n                            Default value : { street: '', city: '', province: '', country: '', formatted_address: '' }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/maps-window/maps-window.component.ts:38\n                            \n                        \n\n                \n                    \n                        The address that contains the street name, city, province, and country - @type {Interface.Address} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            geocoder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/maps-window/maps-window.component.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            infoTitle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/maps-window/maps-window.component.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isSatellite\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"0px\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/maps-window/maps-window.component.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            location\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Interface.Location\n\n                        \n                    \n                    \n                        \n                            Default value : { latitude: 0, longitude: 0 }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/maps-window/maps-window.component.ts:36\n                            \n                        \n\n                \n                    \n                        The location in longitude and latitude - @type {Interface.Location} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            map_type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'roadmap'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/maps-window/maps-window.component.ts:43\n                            \n                        \n\n                \n                    \n                        The type of the map - @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            searchElementRef\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     core.ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @('search')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/maps-window/maps-window.component.ts:48\n                            \n                        \n\n                \n                    \n                        A reference to the 'search' element in the HTML page - @type {ElementRef} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            zoom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/maps-window/maps-window.component.ts:40\n                            \n                        \n\n                \n                    \n                        The zoom of the displayed map - @type {number} \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \ncancel()\n                \n            \n\n\n            \n                \n                    Defined in src/app/maps-window/maps-window.component.ts:251\n                \n            \n\n\n            \n                \n                    This function cancels the proccess and closes the dialog\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            changeMapType\n                        \n                        \n                    \n                \n            \n            \n                \nchangeMapType()\n                \n            \n\n\n            \n                \n                    Defined in src/app/maps-window/maps-window.component.ts:212\n                \n            \n\n\n            \n                \n                    This function is used to change the map type of the map being displayed.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAddress\n                        \n                        \n                    \n                \n            \n            \n                \ngetAddress(latitude, longitude)\n                \n            \n\n\n            \n                \n                    Defined in src/app/maps-window/maps-window.component.ts:158\n                \n            \n\n\n            \n                \n                    This function is used to get the address based on the longitude and latitude provided.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    latitude\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    longitude\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/maps-window/maps-window.component.ts:77\n                \n            \n\n\n            \n                \n                    This function is called when the page loads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            select\n                        \n                        \n                    \n                \n            \n            \n                \nselect()\n                \n            \n\n\n            \n                \n                    Defined in src/app/maps-window/maps-window.component.ts:234\n                \n            \n\n\n            \n                \n                    This function saves the changes when the user selects to confirm location. It sends the location details back to the component\n  that called it.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            selectLocation\n                        \n                        \n                    \n                \n            \n            \n                \nselectLocation(event)\n                \n            \n\n\n            \n                \n                    Defined in src/app/maps-window/maps-window.component.ts:142\n                \n            \n\n\n            \n                \n                    This function is used to change to location based on the user pinning the map\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setCurrentLocation\n                        \n                        \n                    \n                \n            \n            \n                \nsetCurrentLocation()\n                \n            \n\n\n            \n                \n                    Defined in src/app/maps-window/maps-window.component.ts:117\n                \n            \n\n\n            \n                \n                    This function is used to set the current location in the map. (When map loads)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MapsAPILoader } from '@agm/core';\nimport * as core from '@angular/core';\nimport { MatDialogRef } from '@angular/material';\nimport * as Interface from '../_interfaces/interfaces';\n\n/** Global declaration of 'google' so that it can be used throught this page - @type {any} */\ndeclare var google: any;\n\n@core.Component({\n  selector: 'app-maps-window',\n  templateUrl: './maps-window.component.html',\n  styleUrls: ['./maps-window.component.scss']\n})\nexport class MapsWindowComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** The location in longitude and latitude - @type {Interface.Location} */\n  public location: Interface.Location = { latitude: 0, longitude: 0 };\n  /** The address that contains the street name, city, province, and country - @type {Interface.Address} */\n  public address: Interface.Address = { street: '', city: '', province: '', country: '', formatted_address: '' };\n  /** The zoom of the displayed map - @type {number} */\n  public zoom: number = 0;\n  public infoTitle: string = '';\n  /** The type of the map - @type {string} */\n  public map_type: string = 'roadmap';\n  private geocoder: any;\n  public isSatellite: string = \"0px\";\n\n  /** A reference to the 'search' element in the HTML page - @type {ElementRef} */\n  @core.ViewChild('search') public searchElementRef: core.ElementRef;\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of MapsWindowComponent.\n   * \n   * @param {MatDialogRef} dialogRef\n   * @param {MapsAPILoader} mapLoader\n   * @param {core.NgZone} ngZone\n   * \n   * @memberof MapsWindowComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private dialogRef: MatDialogRef,\n    private mapLoader: MapsAPILoader,\n    private ngZone: core.NgZone) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @memberof MapsWindowComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    this.mapLoader.load().then(() => {\n\n      this.setCurrentLocation();\n\n      this.geocoder = new google.maps.Geocoder;\n\n      let autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, {\n        types: [\"address\"]\n      });\n      autocomplete.addListener(\"place_changed\", () => {\n        this.ngZone.run(() => {\n          //get the place result\n          let place = autocomplete.getPlace();\n\n          //verify result\n          if (place.geometry === undefined || place.geometry === null) {\n            return;\n          }\n\n          //set latitude, longitude and zoom\n          this.location.latitude = place.geometry.location.lat();\n          this.location.longitude = place.geometry.location.lng();\n          this.zoom = 15;\n          this.infoTitle = \"\";\n          this.getAddress(this.location.latitude, this.location.longitude);\n        });\n      });\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      GET CURRENT LOCATION  \n  /**\n   * This function is used to set the current location in the map. (When map loads)\n   * \n   * @memberof MapsWindowComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setCurrentLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position: Position) => {\n        if (position) {\n          this.location.latitude = position.coords.latitude;\n          this.location.longitude = position.coords.longitude;\n          this.zoom = 15;\n          this.infoTitle = \"Current Location\";\n          this.getAddress(this.location.latitude, this.location.longitude);\n        }\n      }, (error: PositionError) => console.log(error));\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET LOCATION\n  /**\n   * This function is used to change to location based on the user pinning the map\n   * \n   * @memberof MapsWindowComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  selectLocation(event) {\n    this.location.latitude = event.coords.lat;\n    this.location.longitude = event.coords.lng;\n    this.infoTitle = \"\";\n    this.getAddress(this.location.latitude, this.location.longitude);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ADDRESS  \n  /**\n   * This function is used to get the address based on the longitude and latitude provided.\n   * \n   * @memberof MapsWindowComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAddress(latitude, longitude) {\n    this.geocoder.geocode({ 'location': { lat: latitude, lng: longitude } }, (results, status) => {\n      if (status === 'OK') {\n        if (results[0]) {\n          let address_details = results[0];\n\n          this.address.formatted_address = address_details.formatted_address;\n\n          address_details.address_components.forEach(component => {\n            if (component.types[0] == \"street_number\") {\n              this.address.street_number = component.long_name;\n\n            } else if (component.types[0] == \"route\") {\n              this.address.street = component.long_name;\n\n            } else if (component.types[0] == \"sublocality\" || component.types[0] == \"political\") {\n\n              if (component.types[1] == \"sublocality\") {\n                this.address.area = component.long_name;\n              }\n\n            } else if (component.types[0] == \"locality\") {\n              this.address.city = component.long_name;\n\n            } else if (component.types[0] == \"administrative_area_level_1\") {\n              this.address.province = component.long_name;\n\n            } else if (component.types[0] == \"country\") {\n              this.address.country = component.long_name;\n\n            } else if (component.types[0] == \"postal_code\") {\n              this.address.postal_code = component.long_name;\n            }\n          });\n          this.zoom = 15;\n        } else {\n          window.alert('No results found for location address');\n        }\n      } else {\n        window.alert('Geocoder failed due to: ' + status);\n      }\n\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         CHANGE MAP TYPE\n  /**\n   * This function is used to change the map type of the map being displayed.\n   * \n   * @memberof MapsWindowComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  changeMapType() {\n\n    if (this.map_type == 'roadmap') {\n      this.map_type = 'hybrid';\n      this.isSatellite = \"2px\";\n\n    } else {\n      this.map_type = 'roadmap';\n      this.isSatellite = \"0px\";\n    }\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SELECT \n  /**\n   * This function saves the changes when the user *selects* to confirm location. It sends the location details back to the component\n   *  that called it.\n   * \n   * @memberof MapsWindowComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  select() {\n    this.dialogRef.close(\n      {\n        'address': this.address,\n        'location': this.location\n      }\n    );\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         CANCEL \n  /**\n   * This function *cancels* the proccess and closes the dialog\n   * \n   * @memberof MapsWindowComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  cancel() {\n    this.dialogRef.close();\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MaterialModule.html":{"url":"modules/MaterialModule.html","title":"module - MaterialModule","body":"\n                   \n\n\n\n\n    Modules\n    MaterialModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/materials.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        // This file provides all the components which are required to use material components which are part of Angular\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule, MatInputModule } from '@angular/material';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatSelectModule, MatSnackBarModule, MatDialogModule, MatNativeDateModule, MatDatepickerModule, MatCheckboxModule} from '@angular/material';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    imports: [MatMenuModule,\n        MatIconModule,\n        MatToolbarModule,\n        MatButtonModule,\n        MatCardModule,\n        MatExpansionModule,\n        MatFormFieldModule,\n        MatTabsModule,\n        MatInputModule,\n        MatTableModule,\n        MatSidenavModule,\n        MatGridListModule,\n        MatSelectModule,\n        MatSnackBarModule,\n        MatDialogModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatNativeDateModule,\n        MatDatepickerModule,\n        MatCheckboxModule\n    ],\n\n    exports: [MatMenuModule,\n        MatIconModule,\n        MatToolbarModule,\n        MatButtonModule,\n        MatCardModule,\n        MatExpansionModule,\n        MatFormFieldModule,\n        MatTabsModule,\n        MatInputModule,\n        MatTableModule,\n        MatSidenavModule,\n        MatGridListModule,\n        MatSelectModule,\n        MatSnackBarModule,\n        MatDialogModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatNativeDateModule,\n        MatDatepickerModule,\n        MatCheckboxModule\n    ]\n})\n\nexport class MaterialModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Member.html":{"url":"interfaces/Member.html","title":"interface - Member","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Member\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/user-management-api.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Email\n                                \n                                \n                                        ID\n                                \n                                \n                                        Name\n                                \n                                \n                                        Surname\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Email\n                                    \n                                \n                                \n                                    \n                                        Email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ID\n                                    \n                                \n                                \n                                    \n                                        ID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Name\n                                    \n                                \n                                \n                                    \n                                        Name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Surname\n                                    \n                                \n                                \n                                    \n                                        Surname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as Interface from \"../_interfaces/interfaces\";\nimport { AuthenticationService } from \"./authentication.service\";\n\nimport { config } from \"../../environments/environment.prod\";\nimport { map } from 'rxjs/operators';\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllFABIStaffURL = `${config.userManagementURL}/getAllStaff`;\nconst getAllOrganizationMembers = `${config.userManagementURL}/getAllOrgMembers`;\nconst getUserDetailsURL = `${config.userManagementURL}/getUserDetails`;\nconst updateStaffMemberDetailsURL = `${config.userManagementURL}/updateStaffMember`;\nconst updateOrganizationMemberDetailsURL = `${config.userManagementURL}/updateOrgMember`;\n\n//Object for defining how a member of FABI is structured\nexport interface Member {\n  Email: string;          //This will contain the email retreived from the DB (is the unique identifier for the member) \n  Name: string;           //This will be the name of the member\n  Surname: string;        //This will be the surname of the member\n  ID: string;             //The id number of the member;\n}\n\n//Object for defining the JSON object to be sent when requesting the members of an organization\nexport interface POSTOrganization {\n  orgName: string;        //The name of the organization to be fetched\n}\n\n//Object for defining the JSON object to be sent when requesting the details of a member\nexport interface POSTMember {\n  orgName: string;        //The name of the organization to be fetched\n  id: string;             //THe ID of the user\n}\n\n//Object for defning the JSOn object to be sent when the details of a FABI member are updated\nexport interface UpdateMember {\n  fname: string;          //The name of the FABI member\n  surname: string;        //The surname of the FABI member\n  email: string;          //The email of the FABI member\n}\n\n//Object for defning the JSOn object to be sent when the details of a FABI member are updated\nexport interface POSTUpdateMember {\n  orgName: string,\n  id: string;                 //The ID number of the FABI member to be updated\n  fields: UpdateMember;       //The fields to the updated\n}\n\n//Object for defning the JSOn object to be sent when the details of an organization member are updated\nexport interface UpdateOrganization {\n  fname: string;          //The name of the organization member\n  surname: string;        //The surname of the organization member\n  email: string;          //The email of the organization member\n}\n\n//Object for defning the JSOn object to be sent when the details of an organization member are updated\nexport interface POSTUpdateOrganization {\n  orgName: string;            //The name of the organization\n  id: string;                 //The ID of the organization member to be updated\n  fields: UpdateMember;       //The fields to be updated\n}\n\n@core.Injectable({\n  providedIn: 'root'\n})\n\nexport class UserManagementAPIService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of UserManagementAPIService.\n  * \n  * @param {HttpClient} http For making calls to the API\n  * @param {AuthenticationService} authService for calling the *authentication* service\n  * \n  * @memberof UserManagementAPIService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     GET ALL FABI STAFF \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the FABI staff\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllFABIStaff() {\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      method: 'POST',\n      url: getAllFABIStaffURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', getAllFABIStaffURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            GET USER DETAILS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the Members of an Organization\n   *\n   * @param {string} organization Name of the organization that the user belongs to\n   * @param {string} idNo The id number of the user\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserDetails(organization: string, idNo: string) {    \n    var data: POSTMember = { orgName: organization, id: idNo };\n\n    const options = {\n      method: 'POST',\n      url: getUserDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getUserDetailsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         UPDATE FABI MEMBER DETAILS \n  /**\n   * This function is used to send updated FABI staff details to the database\n   *\n   * @param {string} mail Email of the staff member\n   * @param {string} name Name of the staff member\n   * @param {string} lname Surname of the staff member\n   * @param {string} idNo ID number of the staff member\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateFABIMemberDetails(mail: string, name: string, lname: string) {\n    var member: UpdateMember = { \n      fname: name, \n      surname: lname, \n      email: mail\n    };\n\n    var data: POSTUpdateMember = { \n      orgName: this.authService.getCurrentSessionValue.user.organisation,\n      id: this.authService.getCurrentSessionValue.user.ID, \n      fields: member \n    };\n\n    const options = {\n      method: 'POST',\n      url: updateStaffMemberDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateStaffMemberDetailsURL, options).pipe(map((response : any) => {\n      if (response && (response.token && response.token != '' && response.code == 200)) {\n        this.authService.updateSessionVariables(response.data);\n      }\n      return response;\n    }));\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      UPDATE ORGANIZATION MEMBER DETAILS \n  /**\n   * This function is used to send updated organization member details to the database\n   *\n   * @param {string} mail Email of the staff member\n   * @param {string} name Name of the staff member\n   * @param {string} lname Surname of the staff member\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateOrganizationMemberDetails(mail: string, name: string, lname: string) {\n    var member: UpdateOrganization = { \n      fname: name, \n      surname: lname, \n      email: mail\n    };\n\n    var data: POSTUpdateOrganization = { \n      orgName: this.authService.getCurrentSessionValue.user.organisation,\n      id: this.authService.getCurrentSessionValue.user.ID, \n      fields: member \n    };\n\n    const options = {\n      method: 'POST',\n      url: updateOrganizationMemberDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateOrganizationMemberDetailsURL, options).pipe(map((response : any) => {\n      if (response && (response.token && response.token != '' && response.code == 200)) {\n        this.authService.updateSessionVariables(response.data);\n      }\n      return response;\n    }));\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GET ORGANIZATION\n  /**\n   * Function that send a request to retrieve an Organisations' details using their ID\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getOrganizationDetails() {\n    let getOrganizationDetails = `${config.userManagementURL}/getOrgDetails`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getOrganizationDetails, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ORGANIZATION MEMBER\n  /**\n   * Function that send a request to retrieve an Organisations Member's details using their ID\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getOrganizationMemberDetails() {\n    let getOrganizationMemberDetails = `${config.userManagementURL}/getOrgMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getOrganizationMemberDetails, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL ORGANISATION MEMBERS\n  /**\n   * Method that sends a request to the API to get the details of all the organisations' members.\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllOrganizationMembers() {\n    let getAllOrganizationsMembersURL = `${config.userManagementURL}/getAllOrgMembers`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getAllOrganizationsMembersURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL ORGANISATIONS \n  /**\n   * Method that sends a request to the API to get the details of all the organisations.\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllOrganizations() {\n    const getAllOrganizationsURL = `${config.userManagementURL}/getAllOrganizations`;\n    const method = 'POST';\n    \n    const options = {\n      headers: new HttpHeaders({\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        // 'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      }),\n      json: true\n    };\n\n    return this.http.request(method, getAllOrganizationsURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL USER TYPES \n  /**\n   * Method that sends a request to the API to get the user types associated with a specific organisation.\n   * \n   * @param {string} orgName\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserTypes(orgName: string) {\n    const getUserTypesURL = '';\n    const method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', '***REMOVED***/getUserTypes', options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                   CREATE NEW ORGANISATION\n  /**\n   * Method that sends a request to the API to create a new Organisation \n   *\n   * @param {Interface.Organisation} orgInfo The new organization to create\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  createOrganization(orgInfo: Interface.Organisation) {\n    let createOrganizationURL = `${config.userManagementURL}/createOrganization`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, createOrganizationURL, options);\n  }\n\n\n  sendRequestToRegisterOrganization(orgInfo: Interface.Organisation) {\n    let requestToRegisterOrganizationURL = `${config.loginURL}/registerNewOrganization`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, requestToRegisterOrganizationURL, options);\n  }\n\n  getPendingOrganizations() {\n    let getPendingOrganizationURL = `${config.userManagementURL}/getAllPendingOrganizations`;\n    let method = 'POST';\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request(method, getPendingOrganizationURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     REMOVE AN ORGANISATION\n  /**\n   * Method that sends a request to the API to remove (deregister) an Organisation\n   *\n   * @param {Interface.Organisation} orgInfo The organization to be removed from the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeOrganization(orgInfo: Interface.Organisation) {\n    let removeOrganizationURL = `${config.userManagementURL}/removeOrg`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeOrganizationURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    ADD NEW FABI STAFF MEMBER\n  /**\n   * Method that sends a request to the API to add a new FABI Staff Member to the database\n   *\n   * @param {Interface.StaffInfo} staffInfo The new staff member to be added to FABI\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addStaffMember(staffInfo: Interface.StaffInfo, databasePrivileges: Interface.DatabasePrivilege[]) {\n    let staffDetails = {\"fname\": staffInfo.fname, \"surname\": staffInfo.surname, \"email\": staffInfo.email, \"phone\": staffInfo.phone};\n\n    let addStaffMemberURL = `${config.userManagementURL}/addStaff`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"staff\": staffDetails,\n      \"databases\": databasePrivileges,\n      \"userType\": staffInfo.position\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addStaffMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    REMOVE FABI STAFF MEMBER \n  /**\n   * Method that sends a request to the API to remove a FABI Staff Member\n   * \n   * @param {Interface.StaffInfo} staffInfo The staff member to be removed from the system\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeFABIStaffMember(staffInfo: Interface.StaffInfo) {\n    let removeStaffMemberURL = `${config.userManagementURL}/removeStaff`;\n    let method = 'POST';\n\n    const postData = staffInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeStaffMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET ALL FABI STAFF \n  /**\n   * Method that sends a request to the API to get all FABI Staff Members\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaffMembers() {\n    let getStaffMembersURL = `${config.userManagementURL}/getAllStaff`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getStaffMembersURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      ADD NEW FABI ADMIN\n  /**\n   * Method that send a request to the API to add a new FABI Admin to the database\n   *\n   * @param {Interface.StaffInfo} staffInfo The admin member to be added to the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addFABIAdmin(staffInfo: Interface.StaffInfo) {\n    let addFABIAdminURL = `${config.userManagementURL}/addFabiAdmin`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"admin\": staffInfo\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addFABIAdminURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  ADD A NEW ORGANISATION MEMBER\n  /**\n   * Method that sends a request to the API to add a new Member to a specific Organisation\n   *\n   * @param {Interface.Organisation} orgInfo The organization that the member needs to be added to\n   * @param {Interface.OrganisationMember} memberInfo The member to be added to the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addOrgMember(orgInfo: Interface.Organisation, memberInfo: Interface.OrganisationMember) {\n    let addMemberURL = `${config.userManagementURL}/addMemberToOrg`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": orgInfo.orgName,\n      \"member\": memberInfo,\n      \"userType\": \"Member\"\n    }\n    \n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    REMOVE ORGANIZATION MEMBER\n  /**\n   * Method that sends a request to the API to remove an Organizations Member\n   * \n   * @param {Interface.OrganisationMember} memberInfo The organization member to be removed from the system\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeOrganizationMember(memberInfo: Interface.OrganisationMember) {    \n    let removeMemberURL = `${config.userManagementURL}/removeMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation,\n      \"id\": memberInfo.id\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET FABI ADMIN TYPES\n  /**\n   * This method is used to get all FABI admin types\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getFABIAdminTypes() {\n    let getAdminTypesURL = `${config.userManagementURL}/getAdminTypes`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getAdminTypesURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET DATABASE NAMES\n  /**\n   * This method is used to get all the database names from the database\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getDatabaseNames() {\n    let getDBNamesURL = `${config.databaseManagementURL}/getDBNames`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getDBNamesURL, options);\n  }\n\n  \n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE STAFF PASSWORD\n  /**\n   * This function is used to update the password of a user\n   * \n   * @param {string} oldPassword The old password of the user\n   * @param {string} newPassword The new password for the user\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateStaffPassword(oldPassword: string, newPassword: string) {\n    let updateStaffPasswordURL = `${config.userManagementURL}/updateStaffPassword`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"oldPass\": oldPassword,\n      \"newPass\": newPassword\n    }\n    \n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateStaffPasswordURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE ORGANIZATION MEMBER PASSWORD\n  /**\n   * This function is used to update the password of an organization member\n   * \n   * @param {string} oldPassword The old password of the user\n   * @param {string} newPassword The new password for the user\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateOrganizationMemberPassword(oldPassword: string, newPassword: string) {\n    let updateOrganizationMemberPasswordURL = `${config.userManagementURL}/updateOrgMemberPassword`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"oldPass\": oldPassword,\n      \"newPass\": newPassword,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateOrganizationMemberPasswordURL, options);\n  }\n\n  getFABIAdmins() {\n    let getFABIAdminURL = `${config.userManagementURL}/getAllFabiMembers`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getFABIAdminURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MemberDashboardComponent.html":{"url":"classes/MemberDashboardComponent.html","title":"class - MemberDashboardComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MemberDashboardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Organization-Member/member-dashboard/member-dashboard.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPasswordInput\n                            \n                            \n                                currentUser\n                            \n                            \n                                helpTab\n                            \n                            \n                                memberID\n                            \n                            \n                                memberSamples\n                            \n                            \n                                notificationContainer\n                            \n                            \n                                notifications\n                            \n                            \n                                notificationsTab\n                            \n                            \n                                numberOfMemberSamples\n                            \n                            \n                                profileTab\n                            \n                            \n                                sampleContainer\n                            \n                            \n                                sampleTableLoading\n                            \n                            \n                                saveBtn\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                displayConfirmPasswordInput\n                            \n                            \n                                displayProfileSaveBtn\n                            \n                            \n                                getNumberOfCompletedMemberSamples\n                            \n                            \n                                loadNotifications\n                            \n                            \n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                toggleHelpTab\n                            \n                            \n                                toggleNotificationsTab\n                            \n                            \n                                toggleProfileTab\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService, router: Router, resolver: core.ComponentFactoryResolver, diagnosticClinicService: DiagnosticClinicAPIService)\n                    \n                \n                        \n                            \n                                Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:60\n                            \n                        \n\n                \n                    \n                            Creates an instance of MemberDashboardComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service Used for all authentication and session control\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        resolver\n                                                  \n                                                        \n                                                                    core.ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For dynamically inserting elements into the HTML page\n\n                                                        \n                                                \n                                                \n                                                        diagnosticClinicService\n                                                  \n                                                        \n                                                                        DiagnosticClinicAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Diagnostic Clinic API service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            confirmPasswordInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:55\n                            \n                        \n\n                \n                    \n                        Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            helpTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:57\n                            \n                        \n\n                \n                    \n                        Indicates if the help tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            memberID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '1234'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:41\n                            \n                        \n\n                \n                    \n                        The ID of the logged in member - @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            memberSamples\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sample[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:47\n                            \n                        \n\n                \n                    \n                        Object array for holding the samples for the member -  @type {Sample[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notificationContainer\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @('notificationContainer', {read: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:38\n                            \n                        \n\n                \n                    \n                        Holds the div element (notificationContainer) from the HTML page - @type {ElementRef} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notifications\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:45\n                            \n                        \n\n                \n                    \n                        Indicates if there are notifications to load - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notificationsTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:49\n                            \n                        \n\n                \n                    \n                        Indicates if the notifications tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numberOfMemberSamples\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:43\n                            \n                        \n\n                \n                    \n                        The number of samples belonging to the member - @type {number} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profileTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:51\n                            \n                        \n\n                \n                    \n                        Indicates if the profile tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sampleContainer\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @('sampleContainer', {read: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:36\n                            \n                        \n\n                \n                    \n                        Holds the div element (sampleContainer) from the HTML page - @type {ElementRef} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sampleTableLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:60\n                            \n                        \n\n                \n                    \n                        Specifies if the list of samples have been retreived to disable the loading spinner - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saveBtn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:53\n                            \n                        \n\n                \n                    \n                        Indicates if the save button is hidden/shown on the profile tab- @type {boolean} \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            displayConfirmPasswordInput\n                        \n                        \n                    \n                \n            \n            \n                \ndisplayConfirmPasswordInput()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:178\n                \n            \n\n\n            \n                \n                    This function will display the confirm password input field in the user's password was altered\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            displayProfileSaveBtn\n                        \n                        \n                    \n                \n            \n            \n                \ndisplayProfileSaveBtn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:166\n                \n            \n\n\n            \n                \n                    This function will display the save button option if any details in the profile have been altered\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNumberOfCompletedMemberSamples\n                        \n                        \n                    \n                \n            \n            \n                \ngetNumberOfCompletedMemberSamples()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:117\n                \n            \n\n\n            \n                \n                    This function will use an API service to get all the completed (processed) samples of a member. These \nsamples will be read into the 'completedSamples' Object. The function does not receive any parameters but it will \npopulate a 'heading' element on the HTML page with the percentage of completed samples belonging to the member.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadNotifications\n                        \n                        \n                    \n                \n            \n            \n                \nloadNotifications()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:130\n                \n            \n\n\n            \n                \n                    This function will load the organization member's notifications into the notification section on the HTML page\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:92\n                \n            \n\n\n            \n                \n                    This function is called when the page loads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleHelpTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleHelpTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:190\n                \n            \n\n\n            \n                \n                    This function will toggle the display of the help side panel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleNotificationsTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleNotificationsTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:142\n                \n            \n\n\n            \n                \n                    This function will toggle the display of the notifications side panel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleProfileTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleProfileTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-dashboard/member-dashboard.component.ts:154\n                \n            \n\n\n            \n                \n                    This function will toggle the display of the profile side panel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { DiagnosticClinicAPIService, Sample } from '../../_services/diagnostic-clinic-api.service';\n\n\n@core.Component({\n  selector: 'app-member-dashboard',\n  templateUrl: './member-dashboard.component.html',\n  styleUrls: ['./member-dashboard.component.scss']\n})\n\nexport class MemberDashboardComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Holds the div element (sampleContainer) from the HTML page - @type {ElementRef} */\n  @core.ViewChild('sampleContainer', { read: core.ViewContainerRef }) sampleContainer;\n  /** Holds the div element (notificationContainer) from the HTML page - @type {ElementRef} */\n  @core.ViewChild('notificationContainer', { read: core.ViewContainerRef }) notificationContainer;\n\n  /** The ID of the logged in member - @type {string} */\n  memberID: string = '1234';\n  /** The number of samples belonging to the member - @type {number} */\n  numberOfMemberSamples: number;\n  /** Indicates if there are notifications to load - @type {boolean} */\n  notifications: boolean = false;\n  /** Object array for holding the samples for the member -  @type {Sample[]} */\n  memberSamples: Sample[] = [];\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  notificationsTab: boolean = false;\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n  /** Indicates if the save button is hidden/shown on the profile tab- @type {boolean} */\n  saveBtn: boolean = false;\n  /** Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} */\n  confirmPasswordInput: boolean = false;\n  /** Indicates if the help tab is hidden/shown - @type {boolean} */\n  helpTab: boolean = false;\n  currentUser: any;\n  /** Specifies if the list of samples have been retreived to disable the loading spinner - @type {boolean} */\n  sampleTableLoading: boolean = true;\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of MemberDashboardComponent.\n   * @param {core.ComponentFactoryResolver} resolver For dynamically inserting elements into the HTML page\n   * @param {DiagnosticClinicAPIService} diagnosticClinicService For calling the Diagnostic Clinic API service\n   * @param {AuthenticationService} authService for calling the *authentication* service Used for all authentication and session control\n   * @param {Router} router\n   * @memberof MemberDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private authService: AuthenticationService,\n    private router: Router,\n    private resolver: core.ComponentFactoryResolver,\n    private diagnosticClinicService: DiagnosticClinicAPIService\n  ) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          NG ON INIT()  \n  /**\n   * This function is called when the page loads\n   * \n   * @description 1. Call getNumberOfMemberSamples() | 2. Call getNumberOfCompletedMemberSamples() | \n   *              3. Call loadNotifications()\n   * @memberof MemberDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    // Set current user logged in\n    this.currentUser = this.authService.getCurrentSessionValue.user;\n    // Calling the neccessary functions as the page loads\n    this.getNumberOfCompletedMemberSamples();\n    this.loadNotifications();\n  }\n\n\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                GET NUMBER OF COMPLETED MEMBER SAMPLES\n  /**\n   *  This function will use an API service to get all the completed (processed) samples of a member. These \n   *  samples will be read into the 'completedSamples' Object. The function does not receive any parameters but it will \n   *  populate a 'heading' element on the HTML page with the percentage of completed samples belonging to the member.\n   * \n   * @memberof MemberDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getNumberOfCompletedMemberSamples() {\n\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        LOAD NOTIFICATIONS\n  /**\n   *  This function will load the organization member's notifications into the notification section on the HTML page\n   * \n   * @memberof MemberDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  loadNotifications() { }\n\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         TOGGLE NOTIFICATIONS \n  /**\n   * This function will toggle the display of the notifications side panel\n   * \n   * @memberof MemberDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificationsTab() {\n    this.notificationsTab = !this.notificationsTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                           TOGGLE PROFILE \n  /**\n   * This function will toggle the display of the profile side panel\n   * \n   * @memberof MemberDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleProfileTab() {\n    this.profileTab = !this.profileTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       DISPLAY PROFILE SAVE BUTTON \n  /**\n   * This function will display the save button option if any details in the profile have been altered\n   * \n   * @memberof MemberDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayProfileSaveBtn() {\n    this.saveBtn = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      DISPLAY PASSWORD CONFIRM INPUT \n  /**\n   * This function will display the confirm password input field in the user's password was altered\n   * \n   * @memberof MemberDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayConfirmPasswordInput() {\n    this.confirmPasswordInput = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE HELP \n  /**\n   * This function will toggle the display of the help side panel\n   * \n   * @memberof MemberDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleHelpTab() {\n    this.helpTab = !this.helpTab;\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MemberHelpComponent.html":{"url":"components/MemberHelpComponent.html","title":"component - MemberHelpComponent","body":"\n                   \n\n\n\n\n\n  Components\n  MemberHelpComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/Organization-Member/member-help/member-help.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-member-help\n            \n\n            \n                styleUrls\n                ./member-help.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./member-help.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/Organization-Member/member-help/member-help.component.ts:23\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-help/member-help.component.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-member-help',\n  templateUrl: './member-help.component.html',\n  styleUrls: ['./member-help.component.scss']\n})\nexport class MemberHelpComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        HELP\n\n\n\n  \n  \n    \n      \n    \n    \n      Samples\n    \n    \n      You can submit samples to the Diagnostic Clinic on behalf of your organization by navigating to the Submit\n        Sample tab. All submitted\n        samples linked to your account can be viewed on your dashboard\n        \n        \n        Click here to learn more\n      \n    \n  \n  \n\n  \n  \n    \n      \n    \n    \n      Profile\n    \n    \n      You can update your personal details by navigating to the Profile tab\n        \n        \n        Click here to learn more\n      \n    \n  \n  \n\n\n\n    \n\n    \n                \n                    ./member-help.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'HELP                            Samples              You can submit samples to the Diagnostic Clinic on behalf of your organization by navigating to the Submit        Sample tab. All submitted        samples linked to your account can be viewed on your dashboard                        Click here to learn more                                          Profile              You can update your personal details by navigating to the Profile tab                        Click here to learn more              '\n    var COMPONENTS = [{'name': 'AdminDivComponent', 'selector': 'app-admin-div'},{'name': 'AdminHelpComponent', 'selector': 'app-admin-help'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DatabaseHandlerComponent', 'selector': 'app-database-handler'},{'name': 'ErrorComponent', 'selector': 'app-error'},{'name': 'MemberHelpComponent', 'selector': 'app-member-help'},{'name': 'MemberSubmitSampleComponent', 'selector': 'app-member-submit-sample'},{'name': 'NotificationDivComponent', 'selector': 'app-notification-div'},{'name': 'OrganizationHelpComponent', 'selector': 'app-organization-help'},{'name': 'OrganizationMenuComponent', 'selector': 'app-organization-menu'},{'name': 'OrganizationSubmitSampleComponent', 'selector': 'app-organization-submit-sample'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'SampleDivComponent', 'selector': 'app-sample-div'},{'name': 'SampleFormComponent', 'selector': 'app-sample-form'},{'name': 'StaffDivComponent', 'selector': 'app-staff-div'},{'name': 'StaffHelpComponent', 'selector': 'app-staff-help'},{'name': 'StaffMenuComponent', 'selector': 'app-staff-menu'},{'name': 'StaffSubmitSampleComponent', 'selector': 'app-staff-submit-sample'},{'name': 'StaffViewDatabasesComponent', 'selector': 'app-staff-view-databases'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MemberHelpComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MemberMenuComponent.html":{"url":"classes/MemberMenuComponent.html","title":"class - MemberMenuComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MemberMenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Organization-Member/member-menu/member-menu.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                profileTab\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                toggleProfileTab\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/Organization-Member/member-menu/member-menu.component.ts:30\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profileTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-menu/member-menu.component.ts:30\n                            \n                        \n\n                \n                    \n                        Indicates if the profile tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-menu/member-menu.component.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleProfileTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleProfileTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-menu/member-menu.component.ts:45\n                \n            \n\n\n            \n                \n                    This function will toggle the display of the profile side panel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\n\n@core.Component({\n  selector: 'app-member-menu',\n  templateUrl: './member-menu.component.html',\n  styleUrls: ['./member-menu.component.scss']\n})\nexport class MemberMenuComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE PROFILE \n  /**\n   * This function will toggle the display of the profile side panel\n   * \n   * @memberof MemberMenuComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleProfileTab() {\n    this.profileTab = !this.profileTab;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MemberNotificationComponent.html":{"url":"classes/MemberNotificationComponent.html","title":"class - MemberNotificationComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MemberNotificationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Organization-Member/member-notification/member-notification.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                allLogs\n                            \n                            \n                                allNotifications\n                            \n                            \n                                confirmPasswordInput\n                            \n                            \n                                currentUser\n                            \n                            \n                                helpTab\n                            \n                            \n                                memberID\n                            \n                            \n                                memberSamples\n                            \n                            \n                                newNotifications\n                            \n                            \n                                notificationContainer\n                            \n                            \n                                notifications\n                            \n                            \n                                notificationsLoading\n                            \n                            \n                                notificationsTab\n                            \n                            \n                                numberOfMemberSamples\n                            \n                            \n                                profileTab\n                            \n                            \n                                sampleContainer\n                            \n                            \n                                saveBtn\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadNotifications\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                removeNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationLoggingService: NotificationLoggingService)\n                    \n                \n                        \n                            \n                                Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:66\n                            \n                        \n\n                \n                    \n                            Creates an instance of MemberNotificationComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        notificationLoggingService\n                                                  \n                                                        \n                                                                        NotificationLoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Notification Logging API service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            allLogs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:38\n                            \n                        \n\n                \n                    \n                        Object array for holding all of the logs that have not been read -  @type {string[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            allNotifications\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:34\n                            \n                        \n\n                \n                    \n                        Object array for holding all of the logs -  @type {any[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            confirmPasswordInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:60\n                            \n                        \n\n                \n                    \n                        Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:66\n                            \n                        \n\n                \n                    \n                        The details of the user currently logged in -  @type {any} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            helpTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:62\n                            \n                        \n\n                \n                    \n                        Indicates if the help tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            memberID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '1234'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:46\n                            \n                        \n\n                \n                    \n                        The ID of the logged in member - @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            memberSamples\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sample[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:52\n                            \n                        \n\n                \n                    \n                        Object array for holding the samples for the member -  @type {Sample[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            newNotifications\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:36\n                            \n                        \n\n                \n                    \n                        Object array for holding all of the logs that have not been read -  @type {string[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notificationContainer\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @('notificationContainer', {read: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:43\n                            \n                        \n\n                \n                    \n                        Holds the div element (notificationContainer) from the HTML page - @type {ElementRef} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notifications\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:50\n                            \n                        \n\n                \n                    \n                        Indicates if there are notifications to load - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notificationsLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:64\n                            \n                        \n\n                \n                    \n                        Specifies if the notifications have been retreived to disable the loading spinner - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notificationsTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:54\n                            \n                        \n\n                \n                    \n                        Indicates if the notifications tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numberOfMemberSamples\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:48\n                            \n                        \n\n                \n                    \n                        The number of samples belonging to the member - @type {number} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profileTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:56\n                            \n                        \n\n                \n                    \n                        Indicates if the profile tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sampleContainer\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @('sampleContainer', {read: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:41\n                            \n                        \n\n                \n                    \n                        Holds the div element (sampleContainer) from the HTML page - @type {ElementRef} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saveBtn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:58\n                            \n                        \n\n                \n                    \n                        Indicates if the save button is hidden/shown on the profile tab- @type {boolean} \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadNotifications\n                        \n                        \n                    \n                \n            \n            \n                \nloadNotifications()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:95\n                \n            \n\n\n            \n                \n                    This function will load the organization member's notifications into the notification section on the HTML page\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeNotification\n                        \n                        \n                    \n                \n            \n            \n                \nremoveNotification(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-notification/member-notification.component.ts:107\n                \n            \n\n\n            \n                \n                    This function will remove a notification from the notification section on the HTML page.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        //The id of the notification to be removed\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { Sample } from '../../_services/diagnostic-clinic-api.service';\nimport { NotificationLoggingService } from '../../_services/notification-logging.service';\n\n\n@core.Component({\n  selector: 'app-member-notification',\n  templateUrl: './member-notification.component.html',\n  styleUrls: ['./member-notification.component.scss']\n})\nexport class MemberNotificationComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Object array for holding all of the logs -  @type {any[]} */\n  allNotifications: any[] = [];\n  /** Object array for holding all of the logs that have not been read -  @type {string[]} */\n  newNotifications: string[] = [];\n  /** Object array for holding all of the logs that have not been read -  @type {string[]} */\n  allLogs: string[] = [];\n\n  /** Holds the div element (sampleContainer) from the HTML page - @type {ElementRef} */\n  @core.ViewChild('sampleContainer', { read: core.ViewContainerRef }) sampleContainer;\n  /** Holds the div element (notificationContainer) from the HTML page - @type {ElementRef} */\n  @core.ViewChild('notificationContainer', { read: core.ViewContainerRef }) notificationContainer;\n\n  /** The ID of the logged in member - @type {string} */\n  memberID: string = '1234';\n  /** The number of samples belonging to the member - @type {number} */\n  numberOfMemberSamples: number;\n  /** Indicates if there are notifications to load - @type {boolean} */\n  notifications: boolean = false;\n  /** Object array for holding the samples for the member -  @type {Sample[]} */\n  memberSamples: Sample[] = [];\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  notificationsTab: boolean = false;\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n  /** Indicates if the save button is hidden/shown on the profile tab- @type {boolean} */\n  saveBtn: boolean = false;\n  /** Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} */\n  confirmPasswordInput: boolean = false;\n  /** Indicates if the help tab is hidden/shown - @type {boolean} */\n  helpTab: boolean = false;\n  /** Specifies if the notifications have been retreived to disable the loading spinner - @type {boolean} */\n  notificationsLoading: boolean = true;\n  /** The details of the user currently logged in -  @type {any} */\n  currentUser: any;\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       CONSTRUCTOR\n  /**\n   * Creates an instance of MemberNotificationComponent.\n   * \n   * @param {NotificationLoggingService} notificationLoggingService For calling the Notification Logging API service\n   * \n   * @memberof MemberNotificationComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private notificationLoggingService: NotificationLoggingService\n  ) { }\n\n  \n  ngOnInit() {\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        LOAD NOTIFICATIONS\n  /**\n   *  This function will load the organization member's notifications into the notification section on the HTML page\n   * \n   * @memberof MemberNotificationComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  loadNotifications() { }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       REMOVE NOTIFICATIONS\n  /**\n   *  This function will remove a notification from the notification section on the HTML page.\n   * \n   * @param {string} id                   //The id of the notification to be removed\n   * \n   * @memberof OrganizationNotificationComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeNotification(id: string) {\n    this.newNotifications.push(id);\n\n    this.notificationLoggingService.updateFABIMemberNotifications(this.currentUser.ID, this.newNotifications).subscribe((response: any) => {\n      if (response.success == true) {\n\n      }\n      else {\n        //Error handling\n      }\n    });\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MemberSubmitSampleComponent.html":{"url":"components/MemberSubmitSampleComponent.html","title":"component - MemberSubmitSampleComponent","body":"\n                   \n\n\n\n\n\n  Components\n  MemberSubmitSampleComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/Organization-Member/member-submit-sample/member-submit-sample.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-member-submit-sample\n            \n\n            \n                styleUrls\n                ./member-submit-sample.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./member-submit-sample.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/Organization-Member/member-submit-sample/member-submit-sample.component.ts:24\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-submit-sample/member-submit-sample.component.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-member-submit-sample',\n  templateUrl: './member-submit-sample.component.html',\n  styleUrls: ['./member-submit-sample.component.scss']\n})\nexport class MemberSubmitSampleComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n    \n\n    \n                \n                    ./member-submit-sample.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AdminDivComponent', 'selector': 'app-admin-div'},{'name': 'AdminHelpComponent', 'selector': 'app-admin-help'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DatabaseHandlerComponent', 'selector': 'app-database-handler'},{'name': 'ErrorComponent', 'selector': 'app-error'},{'name': 'MemberHelpComponent', 'selector': 'app-member-help'},{'name': 'MemberSubmitSampleComponent', 'selector': 'app-member-submit-sample'},{'name': 'NotificationDivComponent', 'selector': 'app-notification-div'},{'name': 'OrganizationHelpComponent', 'selector': 'app-organization-help'},{'name': 'OrganizationMenuComponent', 'selector': 'app-organization-menu'},{'name': 'OrganizationSubmitSampleComponent', 'selector': 'app-organization-submit-sample'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'SampleDivComponent', 'selector': 'app-sample-div'},{'name': 'SampleFormComponent', 'selector': 'app-sample-form'},{'name': 'StaffDivComponent', 'selector': 'app-staff-div'},{'name': 'StaffHelpComponent', 'selector': 'app-staff-help'},{'name': 'StaffMenuComponent', 'selector': 'app-staff-menu'},{'name': 'StaffSubmitSampleComponent', 'selector': 'app-staff-submit-sample'},{'name': 'StaffViewDatabasesComponent', 'selector': 'app-staff-view-databases'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MemberSubmitSampleComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MemberViewSamplesComponent.html":{"url":"classes/MemberViewSamplesComponent.html","title":"class - MemberViewSamplesComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MemberViewSamplesComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Organization-Member/member-view-samples/member-view-samples.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                sampleFields\n                            \n                            \n                                samples\n                            \n                            \n                                sampleTableLoading\n                            \n                            \n                                    Public\n                                searchSample\n                            \n                            \n                                selectedSampleData\n                            \n                            \n                                    Private\n                                toggle_status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                resetSampleFields\n                            \n                            \n                                selectSample\n                            \n                            \n                                toggleNotificaitonsTab\n                            \n                            \n                                viewSamples\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService, diagnosticClinicService: DiagnosticClinicAPIService, dialog: MatDialog, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/Organization-Member/member-view-samples/member-view-samples.component.ts:45\n                            \n                        \n\n                \n                    \n                            Creates an instance of MemberViewSamplesComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service\n\n                                                        \n                                                \n                                                \n                                                        diagnosticClinicService\n                                                  \n                                                        \n                                                                        DiagnosticClinicAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Diagnostic Clinic API service\n\n                                                        \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sampleFields\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-view-samples/member-view-samples.component.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            samples\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-view-samples/member-view-samples.component.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sampleTableLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-view-samples/member-view-samples.component.ts:45\n                            \n                        \n\n                \n                    \n                        Specifies if the list of samples have been retreived to disable the loading spinner - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            searchSample\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-view-samples/member-view-samples.component.ts:43\n                            \n                        \n\n                \n                    \n                        The search item the user is looking for in the table -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedSampleData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-view-samples/member-view-samples.component.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            toggle_status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization-Member/member-view-samples/member-view-samples.component.ts:41\n                            \n                        \n\n                \n                    \n                        Indicates if the notifications tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-view-samples/member-view-samples.component.ts:107\n                \n            \n\n\n            \n                \n                    This function will log the user out of the web application and clear the authentication data stored in the local storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-view-samples/member-view-samples.component.ts:77\n                \n            \n\n\n            \n                \n                    This function is called when the page loads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resetSampleFields\n                        \n                        \n                    \n                \n            \n            \n                \nresetSampleFields()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-view-samples/member-view-samples.component.ts:170\n                \n            \n\n\n            \n                \n                    This function will clear the modal contains the selected sample's details\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            selectSample\n                        \n                        \n                    \n                \n            \n            \n                \nselectSample(sample: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-view-samples/member-view-samples.component.ts:148\n                \n            \n\n\n            \n                \n                    Called when a user selects a sample and sets the selected sample as well as it's data fields\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sample\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleNotificaitonsTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleNotificaitonsTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-view-samples/member-view-samples.component.ts:94\n                \n            \n\n\n            \n                \n                    This function is used to toggle the notifications tab.\nIf set to true, a class is added which ensures that the notifications tab is displayed. \nIf set to flase, a class is removed which hides the notifications tab.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            viewSamples\n                        \n                        \n                    \n                \n            \n            \n                \nviewSamples()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization-Member/member-view-samples/member-view-samples.component.ts:121\n                \n            \n\n\n            \n                \n                    This function will be used to display all the samples associated with the user in the HTML page\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\n//Include Material Components\nimport { MatDialog } from '@angular/material';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { DiagnosticClinicAPIService } from 'src/app/_services/diagnostic-clinic-api.service';\n\n\n@core.Component({\n  selector: 'app-member-view-samples',\n  templateUrl: './member-view-samples.component.html',\n  styleUrls: ['./member-view-samples.component.scss'],\n  encapsulation: core.ViewEncapsulation.None\n})\nexport class MemberViewSamplesComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  sampleFields: any[] = [];\n  samples: any[];\n  selectedSampleData: any\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  private toggle_status: boolean = false;\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchSample: string = \"\";\n  /** Specifies if the list of samples have been retreived to disable the loading spinner - @type {boolean} */\n  sampleTableLoading: boolean = true;\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of MemberViewSamplesComponent.\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {DiagnosticClinicAPIService} diagnosticClinicService For calling the Diagnostic Clinic API service\n   * @param {MatDialog} dialog\n   * @param {Router} router\n   * \n   * @memberof MemberViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private authService: AuthenticationService,\n    private diagnosticClinicService: DiagnosticClinicAPIService,\n    private dialog: MatDialog,\n    private router: Router\n  ) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @description 1. Call viewSamples()\n   * \n   * @memberof MemberViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    //Calling the neccessary functions as the page loads\n    this.viewSamples();\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  TOGGLE NOTIFICATIONS TAB\n  /**\n   *  This function is used to toggle the notifications tab.\n   *  \n   *  If set to true, a class is added which ensures that the notifications tab is displayed. \n   *  If set to flase, a class is removed which hides the notifications tab.\n   * \n   * @memberof MemberViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificaitonsTab() {\n    this.toggle_status = !this.toggle_status;\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof MemberViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            VIEW SAMPLES \n  /**\n   * This function will be used to display all the samples associated with the user in the HTML page\n   * \n   * @memberof MemberViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  viewSamples() {\n    this.diagnosticClinicService.retrieveMemberSamples().subscribe((response: any) => {\n\n      if (response.success == true && response.code == 200) {\n\n        this.samples = response.data.samples;\n\n        //Deactivate loading table spinners\n        this.sampleTableLoading = false;\n\n      } else if (response.success == false) {\n        this.sampleTableLoading = false;\n        //POPUP MESSAGE\n      }\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            SELECT SAMPLE \n  /**\n   * Called when a user selects a sample and sets the selected sample as well as it's data fields\n   *\n   * @param {*} sample\n   * @memberof MemberViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  selectSample(sample: any) {\n    this.selectedSampleData = sample.data;\n\n    Object.keys(this.selectedSampleData).forEach((column) => {\n\n      let obj = {\n        'name': column\n      }\n      this.sampleFields.push(obj);\n\n    });\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            RESET SAMPLE FIELDS \n  /**\n   * This function will clear the modal contains the selected sample's details\n   * \n   * @memberof MemberViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  resetSampleFields() {\n    this.sampleFields = [];\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NotificationDivComponent.html":{"url":"components/NotificationDivComponent.html","title":"component - NotificationDivComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NotificationDivComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/Dynamic-Components/notification-div/notification-div.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-notification-div\n            \n\n            \n                styleUrls\n                ./notification-div.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./notification-div.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                Action\n                            \n                            \n                                Date\n                            \n                            \n                                Details\n                            \n                            \n                                Number\n                            \n                            \n                                Type\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/Dynamic-Components/notification-div/notification-div.component.ts:14\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        Action\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/Dynamic-Components/notification-div/notification-div.component.ts:12\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Date\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/Dynamic-Components/notification-div/notification-div.component.ts:13\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Details\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/Dynamic-Components/notification-div/notification-div.component.ts:14\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Number\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/Dynamic-Components/notification-div/notification-div.component.ts:10\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Type\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/Dynamic-Components/notification-div/notification-div.component.ts:11\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Dynamic-Components/notification-div/notification-div.component.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-notification-div',\n  templateUrl: './notification-div.component.html',\n  styleUrls: ['./notification-div.component.scss']\n})\nexport class NotificationDivComponent implements OnInit {\n\n  @Input() Number: number;      //The number of the notification\n  @Input() Type: string;        //The type of the notification\n  @Input() Action: string;      //The action performed\n  @Input() Date: string;        //The date of the action\n  @Input() Details: string;     //The details of the notification\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n  \n    Notification {{Number}}\n    Type: {{Type}} notification\n    Action: {{Action}}\n    Date: {{Date}}\n    Details: {{Details}}\n  \n  \n    \n  \n  \n    \n   -->\n\n    \n\n    \n                \n                    ./notification-div.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Notification {{Number}}    Type: {{Type}} notification    Action: {{Action}}    Date: {{Date}}    Details: {{Details}}                   -->'\n    var COMPONENTS = [{'name': 'AdminDivComponent', 'selector': 'app-admin-div'},{'name': 'AdminHelpComponent', 'selector': 'app-admin-help'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DatabaseHandlerComponent', 'selector': 'app-database-handler'},{'name': 'ErrorComponent', 'selector': 'app-error'},{'name': 'MemberHelpComponent', 'selector': 'app-member-help'},{'name': 'MemberSubmitSampleComponent', 'selector': 'app-member-submit-sample'},{'name': 'NotificationDivComponent', 'selector': 'app-notification-div'},{'name': 'OrganizationHelpComponent', 'selector': 'app-organization-help'},{'name': 'OrganizationMenuComponent', 'selector': 'app-organization-menu'},{'name': 'OrganizationSubmitSampleComponent', 'selector': 'app-organization-submit-sample'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'SampleDivComponent', 'selector': 'app-sample-div'},{'name': 'SampleFormComponent', 'selector': 'app-sample-form'},{'name': 'StaffDivComponent', 'selector': 'app-staff-div'},{'name': 'StaffHelpComponent', 'selector': 'app-staff-help'},{'name': 'StaffMenuComponent', 'selector': 'app-staff-menu'},{'name': 'StaffSubmitSampleComponent', 'selector': 'app-staff-submit-sample'},{'name': 'StaffViewDatabasesComponent', 'selector': 'app-staff-view-databases'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NotificationDivComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationLoggingService.html":{"url":"injectables/NotificationLoggingService.html","title":"injectable - NotificationLoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  NotificationLoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/notification-logging.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllAccessLogs\n                            \n                            \n                                getAllDatabaseManagementLogs\n                            \n                            \n                                getAllErrorLogs\n                            \n                            \n                                getAllUserLogs\n                            \n                            \n                                getUserLogs\n                            \n                            \n                                updateFABIMemberNotifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, authService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/_services/notification-logging.service.ts:200\n                            \n                        \n\n                \n                    \n                            Creates an instance of NotificationLoggingService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For making calls to the API\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllAccessLogs\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllAccessLogs()\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/notification-logging.service.ts:287\n                \n            \n\n\n            \n                \n                    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ACCL'\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllDatabaseManagementLogs\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllDatabaseManagementLogs()\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/notification-logging.service.ts:256\n                \n            \n\n\n            \n                \n                    This function sends a POST request to the API to retrieve a list containing all the logs with type 'DBML'\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllErrorLogs\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllErrorLogs()\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/notification-logging.service.ts:318\n                \n            \n\n\n            \n                \n                    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ERRL'\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllUserLogs\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllUserLogs()\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/notification-logging.service.ts:225\n                \n            \n\n\n            \n                \n                    This function sends a POST request to the API to retrieve a list containing all the logs with type 'USER'\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUserLogs\n                        \n                        \n                    \n                \n            \n            \n                \ngetUserLogs(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/notification-logging.service.ts:351\n                \n            \n\n\n            \n                \n                    This function sends a POST request to the API to retrieve a list containing all the logs for a specific user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateFABIMemberNotifications\n                        \n                        \n                    \n                \n            \n            \n                \nupdateFABIMemberNotifications(id: string, notifications: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/notification-logging.service.ts:381\n                \n            \n\n\n            \n                \n                    Method that sends a request to the API to update the notifications associated with a specific user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the user whose notifications need to be updated\n\n                                    \n                                \n                                \n                                    notifications\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The notifications to be removed from the user's profile\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport { AuthenticationService } from './authentication.service';\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllLogsURL = `${config.logsURL}/getLogs`;\nconst getUserLogsURL = `${config.logsURL}/getUserLogs`;\nconst updateUserLogsURL = `${config.logsURL}/deleteUserLogs`;\n\n///////////////////////////////////////////////////////////////////////\n//                           USER LOGS\n/**\n *  //Object for defining the JSON object containing the user logs\n *\n * @export\n * @interface UserLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface UserLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: USER\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The user on which the action was performed (their ID)\n  User: string;           //The user who performed the action (their ID)\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DATABSE MANAGEMENT LOGS\n/**\n *  //Object for defining the JSON object containing the database \n *  management logs\n *\n * @export\n * @interface DatabaseManagementLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DatabaseManagementLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: DBML (Database Management Log)\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The name of the database that the action was performed on\n  User: string;           //The user who performed the action\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;            //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ACCESS LOGS\n/**\n *  //Object for defining the JSON object containing the access logs\n *\n * @export\n * @interface AccessLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface AccessLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ACCL\n  Action: string;         //The action performed: ACCESS\n  Date: string;           //The date that the action was performed\n  Details: string;        //Description of what was accessed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ERROR LOGS\n/**\n *  //Object for defining the JSON object containing the error logs\n *\n * @export\n * @interface ErrorLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface ErrorLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ERRL\n  Date: string;           //The date that the action was performed\n  StatusCode: string;     //The status code of the error that occured\n  Details: string;        //Description of the error\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DIAGNOSTIC CLINIC LOGS\n/**\n *  //Object for defining the JSON object containing the diagnostic \n *  clinic logs\n *\n * @export\n * @interface DiagnosticClinicLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DiagnosticClinicLogs {\n  Type: string;           //The type of the log: DGCL\n  Date: string;           //The date that the action was performed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                              POST LOG\n/**\n *  //Object for defining the JSON object for posting log requests\n *\n * @export\n * @interface POSTLog\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTLog {\n  Log: Logs;              //The array of logs to post to the API service\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               LOGS\n/**\n *  //Object for defining the JSON object for the logs\n *\n * @export\n * @interface Logs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface Logs {\n  type: string;           //The type of the log\n  before: string;         //The before date\n  after: string;          //The after date\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST USER\n/**\n *  //Object for defining the JSON object to be sent when requesting \n *  the logs belonging to a member\n *\n * @export\n * @interface POSTUser\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUser {\n  userID: string;         //The ID of the user\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST UPDATE\n/**\n *  //Object for defining the JSON object to be sent when updating \n *  to logs belonging to a user\n *\n * @export\n * @interface POSTUpdate\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUpdate {\n  userID: string;         //The ID of the user\n  logIDs: string[];       //The logs to be removed from the user's profile\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class NotificationLoggingService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of NotificationLoggingService.\n  * \n  * @param {HttpClient} http For making calls to the API\n  * \n  * @memberof NotificationLoggingService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       GET ALL USER LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'USER'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllUserLogs() {\n    var tempLog: Logs = { type: 'USER', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                 GET ALL DATABASE MANAGEMENT LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'DBML'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllDatabaseManagementLogs() {\n    var tempLog: Logs = { type: 'DBML', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL ACCESS LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ACCL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllAccessLogs() {\n    var tempLog: Logs = { type: 'ACCL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GET ALL ERROR LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ERRL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllErrorLogs() {\n    var tempLog: Logs = { type: 'ERRL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET USER LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs for a specific user.\n   *\n   * @param {string} userID The id number of the user whose logs need to be feteched for the notifications.\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserLogs(id: string) {\n    var data: POSTUser = { userID: id };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getUserLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE FABI MEMBER NOTIFICATIONS\n  /**\n   * Method that sends a request to the API to update the notifications associated with a specific user.\n   * \n   * @param {string} id The ID of the user whose notifications need to be updated\n   * @param {string[]} notifications The notifications to be removed from the user's profile\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateFABIMemberNotifications(id: string, notifications: string[]) {\n    var postData: POSTUpdate = { userID: id, logIDs: notifications };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', updateUserLogsURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/notification.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                showDialogNotification\n                            \n                            \n                                showErrorNotification\n                            \n                            \n                                showSuccessNotification\n                            \n                            \n                                showWarningNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(snackBar: MatSnackBar, dialog: MatDialog, toastr: ToastrService)\n                    \n                \n                        \n                            \n                                Defined in src/app/_services/notification.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        toastr\n                                                  \n                                                        \n                                                                    ToastrService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            showDialogNotification\n                        \n                        \n                    \n                \n            \n            \n                \nshowDialogNotification(message)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/notification.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            showErrorNotification\n                        \n                        \n                    \n                \n            \n            \n                \nshowErrorNotification(title: string, message?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/notification.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            showSuccessNotification\n                        \n                        \n                    \n                \n            \n            \n                \nshowSuccessNotification(title: string, message?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/notification.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            showWarningNotification\n                        \n                        \n                    \n                \n            \n            \n                \nshowWarningNotification(title: string, message?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/notification.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { MatDialog, MatSnackBar } from '@angular/material';\nimport { ErrorComponent } from '../_errors/error-component/error.component';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable()\n\nexport class NotificationService {\n\n  constructor(private snackBar: MatSnackBar, private dialog: MatDialog, private toastr: ToastrService) {}\n\n  showErrorNotification(title: string, message?: string) {\n    this.toastr.error(message, title);\n  }\n\n  showWarningNotification(title: string, message?: string) {\n    this.toastr.warning(message, title);\n  }\n\n  showSuccessNotification(title: string, message?: string) {\n    this.toastr.success(message, title);\n  }\n\n  showDialogNotification(message) {\n    // let dialogRef = this.dialog.open(ErrorComponent, { data: { error_title: error.error.title, status: error.status, type: error.name, error: error.message } });\n    //   dialogRef.afterClosed().subscribe((result) => {\n    //     if (result == \"Retry\") {\n    //     }\n    //   })\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Organisation.html":{"url":"interfaces/Organisation.html","title":"interface - Organisation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Organisation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_interfaces/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                File Name: interfaces.ts\nProject Name: fabi-web\nCreated Date: Thursday, June 20th 2019\nAuthor: Team Nova - novacapstone@gmail.com\nLast Modified: Sunday, October 6th 2019\nModified By: Team Nova\nCopyright (c) 2019 University of Pretoria\n>\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        admin\n                                \n                                \n                                            Optional\n                                        ID\n                                \n                                \n                                        orgName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        admin\n                                    \n                                \n                                \n                                    \n                                        admin:         OrganisationAdmin\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OrganisationAdmin\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ID\n                                    \n                                \n                                \n                                    \n                                        ID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        orgName\n                                    \n                                \n                                \n                                    \n                                        orgName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Organisation {\n  ID?: string;                                //The id of Organisation \n  orgName: string;                            //The name of Organisation\n  admin?: OrganisationAdmin;                  //The admin of Organisation\n}\n\n\n/////////////////////////////////////////////////////\n//              ORGANIZATION ADMIN\n/**\n * Defines an Admin of an Organisation\n *\n * @export\n * @interface OrganisationAdmin\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationAdmin {\n  fname: string;                              //The first name of Admin\n  surname: string;                            //The surname of Admin\n  email: string;                              //The email of Admin\n  phone?: number;                             //The phone number of Admin\n  password?: string;                          //The passsword of Admin\n}\n\n\n/////////////////////////////////////////////////////\n//            ORGANIZATION MEMBER\n/**\n * Defines a Organisation's Member object\n *\n * @export\n * @interface MemberInfo\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationMember {\n  id?: string,                                  //The id of the Member\n  fname: string,                                //The first name of Member\n  surname: string,                              //The surname of Member\n  email: string,                                //The email of Member\n  phone?: number;                               //The phone number of Member\n  password?: string                             //The password of Member\n}\n\n\n/////////////////////////////////////////////////////\n//                  USER TYPE\n/**\n * Defines a User Type object\n *\n * @export\n * @interface UserType\n */\n/////////////////////////////////////////////////////\nexport interface UserType {\n  ID: number;                                 //The id of the User Type\n  Name: string;                               //The name of the User Type\n}\n\n\n/////////////////////////////////////////////////////\n//                LOGIN INFO\n/**\n * Defines the User's Login Information\n *\n * @export\n * @interface LoginInfo\n */\n/////////////////////////////////////////////////////\nexport interface LoginInfo {\n  orgName: string;                            //The organization fo teh user currently logged in\n  email: string;                              //The email of the suer currently logged in\n  password: string;                           //The password of the user currently logged in\n}\n\n\n/////////////////////////////////////////////////////\n//                 STAFF INFO\n/**\n * Defines a FABI Staff Member object\n *\n * @export\n * @interface StaffInfo\n */\n/////////////////////////////////////////////////////\nexport interface StaffInfo {\n  ID?: number,                                  //The id number of the staff member\n  fname: string                                 //The first name of the staff member\n  surname: string,                              //The surname of the staff member\n  email: string,                                //The email address fo the staff member\n  phone?: number,                               //The phone number of the staff member\n  position?: string,                            //The positions of the staff member\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            DATABASE PRIVILEGE\n/**\n * Defines a DatabasePrivilege object\n *\n * @export\n * @interface DatabasePrivilege\n */\n/////////////////////////////////////////////////////\nexport interface DatabasePrivilege {\n  name: string,                                 //The database's name\n  privileges: string[]                          //The privileges for the database                          \n}\n\n\n/////////////////////////////////////////////////////\n//                PRIVILEGE TYPES\n/**\n * Defines a PrivilegeTypes object\n *\n * @export\n * @interface PrivilegeTypes\n */\n/////////////////////////////////////////////////////\nexport interface PrivilegeTypes {\n  create: boolean,                              //The create privilege\n  retrieve: boolean,                            //The retrieve privilege\n  update: boolean,                              //The update privilege\n  delete: boolean                               //The delete privilege\n}\n\n\n/////////////////////////////////////////////////////\n//              USER'S PRIVILEGES\n/**\n * Defines a UserPrivileges object\n *\n * @export\n * @interface UserPrivileges\n */\n/////////////////////////////////////////////////////\nexport interface UserPrivileges {\n  databases?: DatabasePrivilege[]               //The database privileges for a database\n}\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            CONFIRM (for confirm pop-up)\n/**\n * Defines a Confirm object\n *\n * @export\n * @interface Confirm\n */\n/////////////////////////////////////////////////////\nexport interface Confirm {\n  title: string,                                //The confirm title\n  message: string,                              //The confirm message\n  info: string,                                 //The confirm information\n  cancel: string,                               //If it has been canceled or not\n  confirm: string                               //If it has been confirmed or not\n}\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  SAMPLE FORM\n/**\n * Defines a SampleFormData object\n *\n * @export\n * @interface SampleFormData\n */\n/////////////////////////////////////////////////////\nexport interface SampleFormData {\n  // Sample Details\n  sample_details: {\n    plant_species: string,                 //The species of the sample\n    plant_genus: string                    //The genus of the sample\n    num_samples: number,                   //The number of samples\n    date_collected: Date,                  //The date that the sample was collected\n    date_sent: Date,                       //The date that the sample was sent\n  }\n\n  // Plantation Details\n  plantation_details: {\n    street: string,                        //The street name\n    area: string,                          //The area\n    city: string,                          //The city \n    farm: string,                          //The farm name\n    province: string,                      //The province\n    gps: string,                           //Sample GPS coordinates\n  }\n\n  // Type of Sample\n  types: string[],\n  // types: {\n  //   soil: boolean,                     //Soil sample type\n  //   stems: boolean,                    //Stems sample type\n  //   roots: boolean,                    //Roots sample type\n  //   twigs: boolean,                    //Twigs sample type\n  //   leaves: boolean,                   //Leaves sample type\n  //   seedlings: boolean,                //Seedlings sample type\n  //   media: boolean,                    //Media sample type\n  //   water: boolean,                    //Water sample type\n  //   insect: boolean,                   //Insect sample type\n  //   nuts: boolean,                     //Nuts sample type\n  //   other: boolean,                    //Other type of sample (if any)\n  // }\n\n  // Symptoms\n  symptoms: {\n    wilt: boolean,                         //Wilt symptom\n    stunting: boolean,                     //Stunting symptom\n    leafspot: boolean,                     //Leafspot symptom\n    rootrot: boolean,                      //Rootrot symptom\n    dieback: boolean,                      //Dieback symptom\n    cankers: boolean,                      //Cankers symptom \n    death: boolean,                        //Death symptom \n    wood: boolean,                         //Wood symptom\n    other: boolean,                        //Other symptoms (if any)\n  }\n\n  // Distribution of Symptoms\n  distribution: {\n    localized: boolean,               //The localized distribution\n    scattered: boolean,                //The scattered distribution\n    general: boolean,                  //The general distribution\n    clumps: boolean,                   //The clumps distribution\n    na: boolean,                       //The na distribution\n    other: boolean,                    //Other distributions (if any)\n    percentage_plants_affected: number,           //The percentage of plants affected\n  }\n\n  // Conditons\n  conditions: {\n    date_problem_noticed: Date,        //The date the problem was noticed\n    date_planted: Date,                //The date the plants were planted\n    weather_disturbances: string,      //The weather disturbances\n    weather_prior: string,             //The weather conditions prior\n    others: string,                    //Other weather conditions (if any)\n    additional?: string                 //Additional weather conditions (if any)\n  }\n\n  // Permissions\n  permissions: {\n    landowner_name: string,                       //The landowner's name\n    permission_granted: boolean                   //Whether or not the landowner has granted permission\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  LOCATION\n/**\n * Defines a Location object\n *\n * @export\n * @interface Location\n */\n/////////////////////////////////////////////////////\nexport interface Location {\n  latitude: number,                             //The latitude of the location\n  longitude: number                             //The longitude of the location\n}\n\n\n/////////////////////////////////////////////////////\n//                     ADDRESS\n/**\n * Defines a Address object\n *\n * @export\n * @interface Address\n */\n/////////////////////////////////////////////////////\nexport interface Address {\n  street_number?: number,                       //The street number of the address (if any)\n  street: string,                               //The street name of the address\n  estate?: string,                              //The estate of the address (if any)\n  area?: string,                                //The area of the address (if any)\n  city: string,                                 //The city of the address\n  province: string,                             //The province of the address\n  country: string,                              //The country of the address\n  postal_code?: string,                         //The postal code of the address (if any)\n  formatted_address: string                     //The formatted address\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OrganisationAdmin.html":{"url":"interfaces/OrganisationAdmin.html","title":"interface - OrganisationAdmin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OrganisationAdmin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_interfaces/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Defines an Admin of an Organisation\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        fname\n                                \n                                \n                                            Optional\n                                        password\n                                \n                                \n                                            Optional\n                                        phone\n                                \n                                \n                                        surname\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fname\n                                    \n                                \n                                \n                                    \n                                        fname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                    \n                                \n                                \n                                    \n                                        phone:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surname\n                                    \n                                \n                                \n                                    \n                                        surname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Organisation {\n  ID?: string;                                //The id of Organisation \n  orgName: string;                            //The name of Organisation\n  admin?: OrganisationAdmin;                  //The admin of Organisation\n}\n\n\n/////////////////////////////////////////////////////\n//              ORGANIZATION ADMIN\n/**\n * Defines an Admin of an Organisation\n *\n * @export\n * @interface OrganisationAdmin\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationAdmin {\n  fname: string;                              //The first name of Admin\n  surname: string;                            //The surname of Admin\n  email: string;                              //The email of Admin\n  phone?: number;                             //The phone number of Admin\n  password?: string;                          //The passsword of Admin\n}\n\n\n/////////////////////////////////////////////////////\n//            ORGANIZATION MEMBER\n/**\n * Defines a Organisation's Member object\n *\n * @export\n * @interface MemberInfo\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationMember {\n  id?: string,                                  //The id of the Member\n  fname: string,                                //The first name of Member\n  surname: string,                              //The surname of Member\n  email: string,                                //The email of Member\n  phone?: number;                               //The phone number of Member\n  password?: string                             //The password of Member\n}\n\n\n/////////////////////////////////////////////////////\n//                  USER TYPE\n/**\n * Defines a User Type object\n *\n * @export\n * @interface UserType\n */\n/////////////////////////////////////////////////////\nexport interface UserType {\n  ID: number;                                 //The id of the User Type\n  Name: string;                               //The name of the User Type\n}\n\n\n/////////////////////////////////////////////////////\n//                LOGIN INFO\n/**\n * Defines the User's Login Information\n *\n * @export\n * @interface LoginInfo\n */\n/////////////////////////////////////////////////////\nexport interface LoginInfo {\n  orgName: string;                            //The organization fo teh user currently logged in\n  email: string;                              //The email of the suer currently logged in\n  password: string;                           //The password of the user currently logged in\n}\n\n\n/////////////////////////////////////////////////////\n//                 STAFF INFO\n/**\n * Defines a FABI Staff Member object\n *\n * @export\n * @interface StaffInfo\n */\n/////////////////////////////////////////////////////\nexport interface StaffInfo {\n  ID?: number,                                  //The id number of the staff member\n  fname: string                                 //The first name of the staff member\n  surname: string,                              //The surname of the staff member\n  email: string,                                //The email address fo the staff member\n  phone?: number,                               //The phone number of the staff member\n  position?: string,                            //The positions of the staff member\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            DATABASE PRIVILEGE\n/**\n * Defines a DatabasePrivilege object\n *\n * @export\n * @interface DatabasePrivilege\n */\n/////////////////////////////////////////////////////\nexport interface DatabasePrivilege {\n  name: string,                                 //The database's name\n  privileges: string[]                          //The privileges for the database                          \n}\n\n\n/////////////////////////////////////////////////////\n//                PRIVILEGE TYPES\n/**\n * Defines a PrivilegeTypes object\n *\n * @export\n * @interface PrivilegeTypes\n */\n/////////////////////////////////////////////////////\nexport interface PrivilegeTypes {\n  create: boolean,                              //The create privilege\n  retrieve: boolean,                            //The retrieve privilege\n  update: boolean,                              //The update privilege\n  delete: boolean                               //The delete privilege\n}\n\n\n/////////////////////////////////////////////////////\n//              USER'S PRIVILEGES\n/**\n * Defines a UserPrivileges object\n *\n * @export\n * @interface UserPrivileges\n */\n/////////////////////////////////////////////////////\nexport interface UserPrivileges {\n  databases?: DatabasePrivilege[]               //The database privileges for a database\n}\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            CONFIRM (for confirm pop-up)\n/**\n * Defines a Confirm object\n *\n * @export\n * @interface Confirm\n */\n/////////////////////////////////////////////////////\nexport interface Confirm {\n  title: string,                                //The confirm title\n  message: string,                              //The confirm message\n  info: string,                                 //The confirm information\n  cancel: string,                               //If it has been canceled or not\n  confirm: string                               //If it has been confirmed or not\n}\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  SAMPLE FORM\n/**\n * Defines a SampleFormData object\n *\n * @export\n * @interface SampleFormData\n */\n/////////////////////////////////////////////////////\nexport interface SampleFormData {\n  // Sample Details\n  sample_details: {\n    plant_species: string,                 //The species of the sample\n    plant_genus: string                    //The genus of the sample\n    num_samples: number,                   //The number of samples\n    date_collected: Date,                  //The date that the sample was collected\n    date_sent: Date,                       //The date that the sample was sent\n  }\n\n  // Plantation Details\n  plantation_details: {\n    street: string,                        //The street name\n    area: string,                          //The area\n    city: string,                          //The city \n    farm: string,                          //The farm name\n    province: string,                      //The province\n    gps: string,                           //Sample GPS coordinates\n  }\n\n  // Type of Sample\n  types: string[],\n  // types: {\n  //   soil: boolean,                     //Soil sample type\n  //   stems: boolean,                    //Stems sample type\n  //   roots: boolean,                    //Roots sample type\n  //   twigs: boolean,                    //Twigs sample type\n  //   leaves: boolean,                   //Leaves sample type\n  //   seedlings: boolean,                //Seedlings sample type\n  //   media: boolean,                    //Media sample type\n  //   water: boolean,                    //Water sample type\n  //   insect: boolean,                   //Insect sample type\n  //   nuts: boolean,                     //Nuts sample type\n  //   other: boolean,                    //Other type of sample (if any)\n  // }\n\n  // Symptoms\n  symptoms: {\n    wilt: boolean,                         //Wilt symptom\n    stunting: boolean,                     //Stunting symptom\n    leafspot: boolean,                     //Leafspot symptom\n    rootrot: boolean,                      //Rootrot symptom\n    dieback: boolean,                      //Dieback symptom\n    cankers: boolean,                      //Cankers symptom \n    death: boolean,                        //Death symptom \n    wood: boolean,                         //Wood symptom\n    other: boolean,                        //Other symptoms (if any)\n  }\n\n  // Distribution of Symptoms\n  distribution: {\n    localized: boolean,               //The localized distribution\n    scattered: boolean,                //The scattered distribution\n    general: boolean,                  //The general distribution\n    clumps: boolean,                   //The clumps distribution\n    na: boolean,                       //The na distribution\n    other: boolean,                    //Other distributions (if any)\n    percentage_plants_affected: number,           //The percentage of plants affected\n  }\n\n  // Conditons\n  conditions: {\n    date_problem_noticed: Date,        //The date the problem was noticed\n    date_planted: Date,                //The date the plants were planted\n    weather_disturbances: string,      //The weather disturbances\n    weather_prior: string,             //The weather conditions prior\n    others: string,                    //Other weather conditions (if any)\n    additional?: string                 //Additional weather conditions (if any)\n  }\n\n  // Permissions\n  permissions: {\n    landowner_name: string,                       //The landowner's name\n    permission_granted: boolean                   //Whether or not the landowner has granted permission\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  LOCATION\n/**\n * Defines a Location object\n *\n * @export\n * @interface Location\n */\n/////////////////////////////////////////////////////\nexport interface Location {\n  latitude: number,                             //The latitude of the location\n  longitude: number                             //The longitude of the location\n}\n\n\n/////////////////////////////////////////////////////\n//                     ADDRESS\n/**\n * Defines a Address object\n *\n * @export\n * @interface Address\n */\n/////////////////////////////////////////////////////\nexport interface Address {\n  street_number?: number,                       //The street number of the address (if any)\n  street: string,                               //The street name of the address\n  estate?: string,                              //The estate of the address (if any)\n  area?: string,                                //The area of the address (if any)\n  city: string,                                 //The city of the address\n  province: string,                             //The province of the address\n  country: string,                              //The country of the address\n  postal_code?: string,                         //The postal code of the address (if any)\n  formatted_address: string                     //The formatted address\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OrganisationMember.html":{"url":"interfaces/OrganisationMember.html","title":"interface - OrganisationMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OrganisationMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_interfaces/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Defines a Organisation's Member object\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        fname\n                                \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                            Optional\n                                        password\n                                \n                                \n                                            Optional\n                                        phone\n                                \n                                \n                                        surname\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fname\n                                    \n                                \n                                \n                                    \n                                        fname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                    \n                                \n                                \n                                    \n                                        phone:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surname\n                                    \n                                \n                                \n                                    \n                                        surname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Organisation {\n  ID?: string;                                //The id of Organisation \n  orgName: string;                            //The name of Organisation\n  admin?: OrganisationAdmin;                  //The admin of Organisation\n}\n\n\n/////////////////////////////////////////////////////\n//              ORGANIZATION ADMIN\n/**\n * Defines an Admin of an Organisation\n *\n * @export\n * @interface OrganisationAdmin\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationAdmin {\n  fname: string;                              //The first name of Admin\n  surname: string;                            //The surname of Admin\n  email: string;                              //The email of Admin\n  phone?: number;                             //The phone number of Admin\n  password?: string;                          //The passsword of Admin\n}\n\n\n/////////////////////////////////////////////////////\n//            ORGANIZATION MEMBER\n/**\n * Defines a Organisation's Member object\n *\n * @export\n * @interface MemberInfo\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationMember {\n  id?: string,                                  //The id of the Member\n  fname: string,                                //The first name of Member\n  surname: string,                              //The surname of Member\n  email: string,                                //The email of Member\n  phone?: number;                               //The phone number of Member\n  password?: string                             //The password of Member\n}\n\n\n/////////////////////////////////////////////////////\n//                  USER TYPE\n/**\n * Defines a User Type object\n *\n * @export\n * @interface UserType\n */\n/////////////////////////////////////////////////////\nexport interface UserType {\n  ID: number;                                 //The id of the User Type\n  Name: string;                               //The name of the User Type\n}\n\n\n/////////////////////////////////////////////////////\n//                LOGIN INFO\n/**\n * Defines the User's Login Information\n *\n * @export\n * @interface LoginInfo\n */\n/////////////////////////////////////////////////////\nexport interface LoginInfo {\n  orgName: string;                            //The organization fo teh user currently logged in\n  email: string;                              //The email of the suer currently logged in\n  password: string;                           //The password of the user currently logged in\n}\n\n\n/////////////////////////////////////////////////////\n//                 STAFF INFO\n/**\n * Defines a FABI Staff Member object\n *\n * @export\n * @interface StaffInfo\n */\n/////////////////////////////////////////////////////\nexport interface StaffInfo {\n  ID?: number,                                  //The id number of the staff member\n  fname: string                                 //The first name of the staff member\n  surname: string,                              //The surname of the staff member\n  email: string,                                //The email address fo the staff member\n  phone?: number,                               //The phone number of the staff member\n  position?: string,                            //The positions of the staff member\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            DATABASE PRIVILEGE\n/**\n * Defines a DatabasePrivilege object\n *\n * @export\n * @interface DatabasePrivilege\n */\n/////////////////////////////////////////////////////\nexport interface DatabasePrivilege {\n  name: string,                                 //The database's name\n  privileges: string[]                          //The privileges for the database                          \n}\n\n\n/////////////////////////////////////////////////////\n//                PRIVILEGE TYPES\n/**\n * Defines a PrivilegeTypes object\n *\n * @export\n * @interface PrivilegeTypes\n */\n/////////////////////////////////////////////////////\nexport interface PrivilegeTypes {\n  create: boolean,                              //The create privilege\n  retrieve: boolean,                            //The retrieve privilege\n  update: boolean,                              //The update privilege\n  delete: boolean                               //The delete privilege\n}\n\n\n/////////////////////////////////////////////////////\n//              USER'S PRIVILEGES\n/**\n * Defines a UserPrivileges object\n *\n * @export\n * @interface UserPrivileges\n */\n/////////////////////////////////////////////////////\nexport interface UserPrivileges {\n  databases?: DatabasePrivilege[]               //The database privileges for a database\n}\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            CONFIRM (for confirm pop-up)\n/**\n * Defines a Confirm object\n *\n * @export\n * @interface Confirm\n */\n/////////////////////////////////////////////////////\nexport interface Confirm {\n  title: string,                                //The confirm title\n  message: string,                              //The confirm message\n  info: string,                                 //The confirm information\n  cancel: string,                               //If it has been canceled or not\n  confirm: string                               //If it has been confirmed or not\n}\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  SAMPLE FORM\n/**\n * Defines a SampleFormData object\n *\n * @export\n * @interface SampleFormData\n */\n/////////////////////////////////////////////////////\nexport interface SampleFormData {\n  // Sample Details\n  sample_details: {\n    plant_species: string,                 //The species of the sample\n    plant_genus: string                    //The genus of the sample\n    num_samples: number,                   //The number of samples\n    date_collected: Date,                  //The date that the sample was collected\n    date_sent: Date,                       //The date that the sample was sent\n  }\n\n  // Plantation Details\n  plantation_details: {\n    street: string,                        //The street name\n    area: string,                          //The area\n    city: string,                          //The city \n    farm: string,                          //The farm name\n    province: string,                      //The province\n    gps: string,                           //Sample GPS coordinates\n  }\n\n  // Type of Sample\n  types: string[],\n  // types: {\n  //   soil: boolean,                     //Soil sample type\n  //   stems: boolean,                    //Stems sample type\n  //   roots: boolean,                    //Roots sample type\n  //   twigs: boolean,                    //Twigs sample type\n  //   leaves: boolean,                   //Leaves sample type\n  //   seedlings: boolean,                //Seedlings sample type\n  //   media: boolean,                    //Media sample type\n  //   water: boolean,                    //Water sample type\n  //   insect: boolean,                   //Insect sample type\n  //   nuts: boolean,                     //Nuts sample type\n  //   other: boolean,                    //Other type of sample (if any)\n  // }\n\n  // Symptoms\n  symptoms: {\n    wilt: boolean,                         //Wilt symptom\n    stunting: boolean,                     //Stunting symptom\n    leafspot: boolean,                     //Leafspot symptom\n    rootrot: boolean,                      //Rootrot symptom\n    dieback: boolean,                      //Dieback symptom\n    cankers: boolean,                      //Cankers symptom \n    death: boolean,                        //Death symptom \n    wood: boolean,                         //Wood symptom\n    other: boolean,                        //Other symptoms (if any)\n  }\n\n  // Distribution of Symptoms\n  distribution: {\n    localized: boolean,               //The localized distribution\n    scattered: boolean,                //The scattered distribution\n    general: boolean,                  //The general distribution\n    clumps: boolean,                   //The clumps distribution\n    na: boolean,                       //The na distribution\n    other: boolean,                    //Other distributions (if any)\n    percentage_plants_affected: number,           //The percentage of plants affected\n  }\n\n  // Conditons\n  conditions: {\n    date_problem_noticed: Date,        //The date the problem was noticed\n    date_planted: Date,                //The date the plants were planted\n    weather_disturbances: string,      //The weather disturbances\n    weather_prior: string,             //The weather conditions prior\n    others: string,                    //Other weather conditions (if any)\n    additional?: string                 //Additional weather conditions (if any)\n  }\n\n  // Permissions\n  permissions: {\n    landowner_name: string,                       //The landowner's name\n    permission_granted: boolean                   //Whether or not the landowner has granted permission\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  LOCATION\n/**\n * Defines a Location object\n *\n * @export\n * @interface Location\n */\n/////////////////////////////////////////////////////\nexport interface Location {\n  latitude: number,                             //The latitude of the location\n  longitude: number                             //The longitude of the location\n}\n\n\n/////////////////////////////////////////////////////\n//                     ADDRESS\n/**\n * Defines a Address object\n *\n * @export\n * @interface Address\n */\n/////////////////////////////////////////////////////\nexport interface Address {\n  street_number?: number,                       //The street number of the address (if any)\n  street: string,                               //The street name of the address\n  estate?: string,                              //The estate of the address (if any)\n  area?: string,                                //The area of the address (if any)\n  city: string,                                 //The city of the address\n  province: string,                             //The province of the address\n  country: string,                              //The country of the address\n  postal_code?: string,                         //The postal code of the address (if any)\n  formatted_address: string                     //The formatted address\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OrganizationHelpComponent.html":{"url":"components/OrganizationHelpComponent.html","title":"component - OrganizationHelpComponent","body":"\n                   \n\n\n\n\n\n  Components\n  OrganizationHelpComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/Organization/organization-help/organization-help.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-organization-help\n            \n\n            \n                styleUrls\n                ./organization-help.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./organization-help.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/Organization/organization-help/organization-help.component.ts:23\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization/organization-help/organization-help.component.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-organization-help',\n  templateUrl: './organization-help.component.html',\n  styleUrls: ['./organization-help.component.scss']\n})\nexport class OrganizationHelpComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        HELP\n\n\n\n  \n  \n    \n      \n    \n    \n      Members\n    \n    \n      You can add, view, and manage organization members by navigating to the Manage Members tab\n        \n        \n        Click here to learn more\n      \n    \n  \n  \n\n  \n  \n    \n      \n    \n    \n      Samples\n    \n    \n      You can submit samples to the Diagnostic Clinic by navigating to the Submit Sample tab. All submitted\n        samples linked to the organization can be viewed on your dashboard\n        \n        \n        Click here to learn more\n      \n    \n  \n  \n\n\n\n    \n\n    \n                \n                    ./organization-help.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'HELP                            Members              You can add, view, and manage organization members by navigating to the Manage Members tab                        Click here to learn more                                          Samples              You can submit samples to the Diagnostic Clinic by navigating to the Submit Sample tab. All submitted        samples linked to the organization can be viewed on your dashboard                        Click here to learn more              '\n    var COMPONENTS = [{'name': 'AdminDivComponent', 'selector': 'app-admin-div'},{'name': 'AdminHelpComponent', 'selector': 'app-admin-help'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DatabaseHandlerComponent', 'selector': 'app-database-handler'},{'name': 'ErrorComponent', 'selector': 'app-error'},{'name': 'MemberHelpComponent', 'selector': 'app-member-help'},{'name': 'MemberSubmitSampleComponent', 'selector': 'app-member-submit-sample'},{'name': 'NotificationDivComponent', 'selector': 'app-notification-div'},{'name': 'OrganizationHelpComponent', 'selector': 'app-organization-help'},{'name': 'OrganizationMenuComponent', 'selector': 'app-organization-menu'},{'name': 'OrganizationSubmitSampleComponent', 'selector': 'app-organization-submit-sample'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'SampleDivComponent', 'selector': 'app-sample-div'},{'name': 'SampleFormComponent', 'selector': 'app-sample-form'},{'name': 'StaffDivComponent', 'selector': 'app-staff-div'},{'name': 'StaffHelpComponent', 'selector': 'app-staff-help'},{'name': 'StaffMenuComponent', 'selector': 'app-staff-menu'},{'name': 'StaffSubmitSampleComponent', 'selector': 'app-staff-submit-sample'},{'name': 'StaffViewDatabasesComponent', 'selector': 'app-staff-view-databases'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'OrganizationHelpComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrganizationMemberModule.html":{"url":"modules/OrganizationMemberModule.html","title":"module - OrganizationMemberModule","body":"\n                   \n\n\n\n\n    Modules\n    OrganizationMemberModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OrganizationMemberModule\n\n\n\ncluster_OrganizationMemberModule_imports\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\n\n\nOrganizationMemberModule\n\nOrganizationMemberModule\n\nOrganizationMemberModule -->\n\nAppRoutingModule->OrganizationMemberModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nOrganizationMemberModule -->\n\nMaterialModule->OrganizationMemberModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/Organization-Member/organization-member.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            MaterialModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /**\n * File Name: organization-member.module.ts\n * File Path: c:\\Users\\Kendra\\Documents\\Varsity\\Third Year\\COS301\\CAPSTONE\\Git Repo\\FABI-Mobile\\FABI-Web\\src\\app\\Organization-Member\\organization-member.module.ts\n * Project Name: fabi-web\n * Created Date: Friday, May 24th 2019\n * Author: Team Nova - novacapstone@gmail.com\n * -----\n * Last Modified: Wednesday, June 26th 2019\n * Modified By: Team Nova\n * -----\n * Copyright (c) 2019 University of Pretoria\n * \n * >\n */\n\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OrganizationMemberRoutingModule } from './organization-member-routing.module';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from '../materials';\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { FormsModule, ReactiveFormsModule  } from '@angular/forms';\n\nimport { AppRoutingModule } from '../app-routing.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OrganizationMemberRoutingModule,\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    NoopAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule\n    \n  ]\n})\nexport class OrganizationMemberModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrganizationMemberRoutingModule.html":{"url":"classes/OrganizationMemberRoutingModule.html","title":"class - OrganizationMemberRoutingModule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrganizationMemberRoutingModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Organization-Member/organization-member-routing.module.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PageNotFoundComponent } from '../page-not-found/page-not-found.component';\nimport { SampleFormComponent } from '../sample-form/sample-form.component';\nimport { AuthenticationGuard } from '../_guards/authentication.guard';\nimport { Role } from '../_interfaces/role';\nimport { MemberDashboardComponent } from './member-dashboard/member-dashboard.component';\nimport { MemberProfileComponent } from './member-profile/member-profile.component';\nimport { MemberViewSamplesComponent } from './member-view-samples/member-view-samples.component';\n\n\nconst routes: Routes = [\n  {\n    path: 'member-dashboard',\n    component: MemberDashboardComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['Member'] }\n  },\n  {\n    path: 'member-profile',\n    component: MemberProfileComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['Member'] }\n  },\n  {\n    path: 'member-view-samples',\n    component: MemberViewSamplesComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['Member'] }\n  },\n  {\n    path: 'submit-sample',\n    component: SampleFormComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['Member'] }\n  },\n  {\n    path: \"**\",\n    component: PageNotFoundComponent\n  }\n];\n\n@core.NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class OrganizationMemberRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OrganizationMenuComponent.html":{"url":"components/OrganizationMenuComponent.html","title":"component - OrganizationMenuComponent","body":"\n                   \n\n\n\n\n\n  Components\n  OrganizationMenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/Organization/organization-menu/organization-menu.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-organization-menu\n            \n\n            \n                styleUrls\n                ./organization-menu.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./organization-menu.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/Organization/organization-menu/organization-menu.component.ts:23\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization/organization-menu/organization-menu.component.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-organization-menu',\n  templateUrl: './organization-menu.component.html',\n  styleUrls: ['./organization-menu.component.scss']\n})\nexport class OrganizationMenuComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n\n  \n  \n    \n      \n    \n    \n      Manage Members\n    \n  \n  \n\n  \n  \n    \n      \n    \n    \n      Submit Samples\n    \n  \n  \n\n\n\n\n\n\n\n  \n  \n    \n      \n    \n    \n      View Samples\n    \n  \n  \n\n\n\n    \n\n    \n                \n                    ./organization-menu.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                            Manage Members                                    Submit Samples                                    View Samples        '\n    var COMPONENTS = [{'name': 'AdminDivComponent', 'selector': 'app-admin-div'},{'name': 'AdminHelpComponent', 'selector': 'app-admin-help'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DatabaseHandlerComponent', 'selector': 'app-database-handler'},{'name': 'ErrorComponent', 'selector': 'app-error'},{'name': 'MemberHelpComponent', 'selector': 'app-member-help'},{'name': 'MemberSubmitSampleComponent', 'selector': 'app-member-submit-sample'},{'name': 'NotificationDivComponent', 'selector': 'app-notification-div'},{'name': 'OrganizationHelpComponent', 'selector': 'app-organization-help'},{'name': 'OrganizationMenuComponent', 'selector': 'app-organization-menu'},{'name': 'OrganizationSubmitSampleComponent', 'selector': 'app-organization-submit-sample'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'SampleDivComponent', 'selector': 'app-sample-div'},{'name': 'SampleFormComponent', 'selector': 'app-sample-form'},{'name': 'StaffDivComponent', 'selector': 'app-staff-div'},{'name': 'StaffHelpComponent', 'selector': 'app-staff-help'},{'name': 'StaffMenuComponent', 'selector': 'app-staff-menu'},{'name': 'StaffSubmitSampleComponent', 'selector': 'app-staff-submit-sample'},{'name': 'StaffViewDatabasesComponent', 'selector': 'app-staff-view-databases'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'OrganizationMenuComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrganizationModule.html":{"url":"modules/OrganizationModule.html","title":"module - OrganizationModule","body":"\n                   \n\n\n\n\n    Modules\n    OrganizationModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/Organization/organization.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        /**\n * File Name: organization.module.ts\n * File Path: c:\\Users\\Kendra\\Documents\\Varsity\\Third Year\\COS301\\CAPSTONE\\Git Repo\\FABI-Mobile\\FABI-Web\\src\\app\\Organization\\organization.module.ts\n * Project Name: fabi-web\n * Created Date: Friday, May 24th 2019\n * Author: Team Nova - novacapstone@gmail.com\n * -----\n * Last Modified: Tuesday, June 25th 2019\n * Modified By: Team Nova\n * -----\n * Copyright (c) 2019 University of Pretoria\n * \n * >\n */\n\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OrganizationRoutingModule } from './organization-routing.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    OrganizationRoutingModule\n  ]\n})\nexport class OrganizationModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrganizationRoutingModule.html":{"url":"classes/OrganizationRoutingModule.html","title":"class - OrganizationRoutingModule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrganizationRoutingModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Organization/organization-routing.module.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PageNotFoundComponent } from '../page-not-found/page-not-found.component';\nimport { SampleFormComponent } from '../sample-form/sample-form.component';\nimport { AuthenticationGuard } from '../_guards/authentication.guard';\nimport { Role } from '../_interfaces/role';\nimport { MemberHandlerComponent } from \"./member-handler/member-handler.component\";\nimport { OrganizationDashboardComponent } from './organization-dashboard/organization-dashboard.component';\n// import { MemberHandlerComponent } from './member-handler/member-handler.component';\nimport { OrganizationProfileComponent } from './organization-profile/organization-profile.component';\nimport { OrganizationViewSamplesComponent } from './organization-view-samples/organization-view-samples.component';\n\nconst routes: Routes = [\n  {\n    path: 'organization-dashboard',\n    component: OrganizationDashboardComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['OrganizationAdmin'] }\n  },\n  {\n    path: 'member-handler',\n    component: MemberHandlerComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['OrganizationAdmin'] }\n  },\n  {\n    path: 'organization-profile',\n    component: OrganizationProfileComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['OrganizationAdmin'] }\n  },\n  {\n    path: 'organization-view-samples',\n    component: OrganizationViewSamplesComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['OrganizationAdmin'] }\n  },\n  {\n    path: 'submit-sample',\n    component: SampleFormComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['OrganizationAdmin'] }\n  },\n  {\n    path: \"**\",\n    component: PageNotFoundComponent\n  }\n];\n\n@core.NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class OrganizationRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OrganizationSubmitSampleComponent.html":{"url":"components/OrganizationSubmitSampleComponent.html","title":"component - OrganizationSubmitSampleComponent","body":"\n                   \n\n\n\n\n\n  Components\n  OrganizationSubmitSampleComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/Organization/organization-submit-sample/organization-submit-sample.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-organization-submit-sample\n            \n\n            \n                styleUrls\n                ./organization-submit-sample.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./organization-submit-sample.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/Organization/organization-submit-sample/organization-submit-sample.component.ts:24\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization/organization-submit-sample/organization-submit-sample.component.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-organization-submit-sample',\n  templateUrl: './organization-submit-sample.component.html',\n  styleUrls: ['./organization-submit-sample.component.scss']\n})\nexport class OrganizationSubmitSampleComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n    \n\n    \n                \n                    ./organization-submit-sample.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AdminDivComponent', 'selector': 'app-admin-div'},{'name': 'AdminHelpComponent', 'selector': 'app-admin-help'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DatabaseHandlerComponent', 'selector': 'app-database-handler'},{'name': 'ErrorComponent', 'selector': 'app-error'},{'name': 'MemberHelpComponent', 'selector': 'app-member-help'},{'name': 'MemberSubmitSampleComponent', 'selector': 'app-member-submit-sample'},{'name': 'NotificationDivComponent', 'selector': 'app-notification-div'},{'name': 'OrganizationHelpComponent', 'selector': 'app-organization-help'},{'name': 'OrganizationMenuComponent', 'selector': 'app-organization-menu'},{'name': 'OrganizationSubmitSampleComponent', 'selector': 'app-organization-submit-sample'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'SampleDivComponent', 'selector': 'app-sample-div'},{'name': 'SampleFormComponent', 'selector': 'app-sample-form'},{'name': 'StaffDivComponent', 'selector': 'app-staff-div'},{'name': 'StaffHelpComponent', 'selector': 'app-staff-help'},{'name': 'StaffMenuComponent', 'selector': 'app-staff-menu'},{'name': 'StaffSubmitSampleComponent', 'selector': 'app-staff-submit-sample'},{'name': 'StaffViewDatabasesComponent', 'selector': 'app-staff-view-databases'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'OrganizationSubmitSampleComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrganizationViewSamplesComponent.html":{"url":"classes/OrganizationViewSamplesComponent.html","title":"class - OrganizationViewSamplesComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrganizationViewSamplesComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Organization/organization-view-samples/organization-view-samples.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                sampleFields\n                            \n                            \n                                samples\n                            \n                            \n                                sampleTableLoading\n                            \n                            \n                                    Public\n                                searchSample\n                            \n                            \n                                selectedSampleData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                resetSampleFields\n                            \n                            \n                                selectSample\n                            \n                            \n                                viewSamples\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService, diagnosticClinicService: DiagnosticClinicAPIService, dialog: MatDialog, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/Organization/organization-view-samples/organization-view-samples.component.ts:45\n                            \n                        \n\n                \n                    \n                            Creates an instance of OrganizationViewSamplesComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service\n\n                                                        \n                                                \n                                                \n                                                        diagnosticClinicService\n                                                  \n                                                        \n                                                                        DiagnosticClinicAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Diagnostic Clinic API service\n\n                                                        \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sampleFields\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization/organization-view-samples/organization-view-samples.component.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            samples\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization/organization-view-samples/organization-view-samples.component.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sampleTableLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization/organization-view-samples/organization-view-samples.component.ts:43\n                            \n                        \n\n                \n                    \n                        Specifies if the list of samples have been retreived to disable the loading spinner - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            searchSample\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization/organization-view-samples/organization-view-samples.component.ts:45\n                            \n                        \n\n                \n                    \n                        The search item the user is looking for in the table -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedSampleData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Organization/organization-view-samples/organization-view-samples.component.ts:41\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization/organization-view-samples/organization-view-samples.component.ts:91\n                \n            \n\n\n            \n                \n                    This function will log the user out of the web application and clear the authentication data stored in the local storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization/organization-view-samples/organization-view-samples.component.ts:77\n                \n            \n\n\n            \n                \n                    This function is called when the page loads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resetSampleFields\n                        \n                        \n                    \n                \n            \n            \n                \nresetSampleFields()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization/organization-view-samples/organization-view-samples.component.ts:155\n                \n            \n\n\n            \n                \n                    Resets the display fields for the sample\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            selectSample\n                        \n                        \n                    \n                \n            \n            \n                \nselectSample(sample: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization/organization-view-samples/organization-view-samples.component.ts:132\n                \n            \n\n\n            \n                \n                    Called when a user selects a sample and sets the selected sample as well as it's data fields\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sample\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            viewSamples\n                        \n                        \n                    \n                \n            \n            \n                \nviewSamples()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Organization/organization-view-samples/organization-view-samples.component.ts:105\n                \n            \n\n\n            \n                \n                    This function will be used to load all of the samples belonging to the organization into the HTML page\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\n//Include Material Components\nimport { MatDialog } from '@angular/material';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { DiagnosticClinicAPIService } from 'src/app/_services/diagnostic-clinic-api.service';\n\n\n@core.Component({\n  selector: 'app-organization-view-samples',\n  templateUrl: './organization-view-samples.component.html',\n  styleUrls: ['./organization-view-samples.component.scss'],\n  encapsulation: core.ViewEncapsulation.None\n})\n\n\nexport class OrganizationViewSamplesComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  sampleFields: any[] = [];\n  samples: any[];\n  selectedSampleData: any;\n  /** Specifies if the list of samples have been retreived to disable the loading spinner - @type {boolean} */\n  sampleTableLoading: boolean = true;\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchSample: string = \"\";\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of OrganizationViewSamplesComponent.\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {DiagnosticClinicAPIService} diagnosticClinicService For calling the Diagnostic Clinic API service\n   * @param {MatDialog} dialog\n   * @param {Router} router\n   * \n   * @memberof OrganizationViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private authService: AuthenticationService,\n    private diagnosticClinicService: DiagnosticClinicAPIService,\n    private dialog: MatDialog,\n    private router: Router\n  ) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                           NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @description 1. Call viewSamples()\n   * \n   * @memberof OrganizationViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    //Calling the neccessary functions as the page loads\n    this.viewSamples();\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof OrganizationViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            VIEW SAMPLES \n  /**\n   * This function will be used to load all of the samples belonging to the organization into the HTML page\n   * \n   * @memberof OrganizationViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  viewSamples() {\n\n    this.diagnosticClinicService.retrieveAllOrganizationSamples().subscribe((response: any) => {\n\n      if (response.success == true && response.code == 200) {\n\n        this.samples = response.data.samples;\n\n\n        //Deactivate loading table spinners\n        this.sampleTableLoading = false;\n\n      } else if (response.success == false) {\n        //POPUP MESSAGE\n      }\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            SELECT SAMPLE \n  /**\n   * Called when a user selects a sample and sets the selected sample as well as it's data fields\n   *\n   * @param {*} sample\n   * @memberof OrganizationViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  selectSample(sample: any) {\n\n    this.selectedSampleData = sample.data;\n\n    Object.keys(this.selectedSampleData).forEach((column) => {\n\n      let obj = {\n        'name': column\n      }\n      this.sampleFields.push(obj);\n\n    });\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            RESET SAMPLE FIELDS \n  /**\n   * Resets the display fields for the sample\n   *\n   * @memberof OrganizationViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  resetSampleFields() {\n    this.sampleFields = [];\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/POSTLog.html":{"url":"interfaces/POSTLog.html","title":"interface - POSTLog","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  POSTLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/notification-logging.service.ts\n        \n\n            \n                Description\n            \n            \n                //Object for defining the JSON object for posting log requests\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Log\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Log\n                                    \n                                \n                                \n                                    \n                                        Log:         Logs\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Logs\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport { AuthenticationService } from './authentication.service';\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllLogsURL = `${config.logsURL}/getLogs`;\nconst getUserLogsURL = `${config.logsURL}/getUserLogs`;\nconst updateUserLogsURL = `${config.logsURL}/deleteUserLogs`;\n\n///////////////////////////////////////////////////////////////////////\n//                           USER LOGS\n/**\n *  //Object for defining the JSON object containing the user logs\n *\n * @export\n * @interface UserLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface UserLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: USER\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The user on which the action was performed (their ID)\n  User: string;           //The user who performed the action (their ID)\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DATABSE MANAGEMENT LOGS\n/**\n *  //Object for defining the JSON object containing the database \n *  management logs\n *\n * @export\n * @interface DatabaseManagementLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DatabaseManagementLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: DBML (Database Management Log)\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The name of the database that the action was performed on\n  User: string;           //The user who performed the action\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;            //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ACCESS LOGS\n/**\n *  //Object for defining the JSON object containing the access logs\n *\n * @export\n * @interface AccessLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface AccessLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ACCL\n  Action: string;         //The action performed: ACCESS\n  Date: string;           //The date that the action was performed\n  Details: string;        //Description of what was accessed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ERROR LOGS\n/**\n *  //Object for defining the JSON object containing the error logs\n *\n * @export\n * @interface ErrorLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface ErrorLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ERRL\n  Date: string;           //The date that the action was performed\n  StatusCode: string;     //The status code of the error that occured\n  Details: string;        //Description of the error\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DIAGNOSTIC CLINIC LOGS\n/**\n *  //Object for defining the JSON object containing the diagnostic \n *  clinic logs\n *\n * @export\n * @interface DiagnosticClinicLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DiagnosticClinicLogs {\n  Type: string;           //The type of the log: DGCL\n  Date: string;           //The date that the action was performed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                              POST LOG\n/**\n *  //Object for defining the JSON object for posting log requests\n *\n * @export\n * @interface POSTLog\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTLog {\n  Log: Logs;              //The array of logs to post to the API service\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               LOGS\n/**\n *  //Object for defining the JSON object for the logs\n *\n * @export\n * @interface Logs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface Logs {\n  type: string;           //The type of the log\n  before: string;         //The before date\n  after: string;          //The after date\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST USER\n/**\n *  //Object for defining the JSON object to be sent when requesting \n *  the logs belonging to a member\n *\n * @export\n * @interface POSTUser\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUser {\n  userID: string;         //The ID of the user\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST UPDATE\n/**\n *  //Object for defining the JSON object to be sent when updating \n *  to logs belonging to a user\n *\n * @export\n * @interface POSTUpdate\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUpdate {\n  userID: string;         //The ID of the user\n  logIDs: string[];       //The logs to be removed from the user's profile\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class NotificationLoggingService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of NotificationLoggingService.\n  * \n  * @param {HttpClient} http For making calls to the API\n  * \n  * @memberof NotificationLoggingService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       GET ALL USER LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'USER'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllUserLogs() {\n    var tempLog: Logs = { type: 'USER', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                 GET ALL DATABASE MANAGEMENT LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'DBML'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllDatabaseManagementLogs() {\n    var tempLog: Logs = { type: 'DBML', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL ACCESS LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ACCL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllAccessLogs() {\n    var tempLog: Logs = { type: 'ACCL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GET ALL ERROR LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ERRL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllErrorLogs() {\n    var tempLog: Logs = { type: 'ERRL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET USER LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs for a specific user.\n   *\n   * @param {string} userID The id number of the user whose logs need to be feteched for the notifications.\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserLogs(id: string) {\n    var data: POSTUser = { userID: id };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getUserLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE FABI MEMBER NOTIFICATIONS\n  /**\n   * Method that sends a request to the API to update the notifications associated with a specific user.\n   * \n   * @param {string} id The ID of the user whose notifications need to be updated\n   * @param {string[]} notifications The notifications to be removed from the user's profile\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateFABIMemberNotifications(id: string, notifications: string[]) {\n    var postData: POSTUpdate = { userID: id, logIDs: notifications };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', updateUserLogsURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/POSTMember.html":{"url":"interfaces/POSTMember.html","title":"interface - POSTMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  POSTMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/diagnostic-clinic-api.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        userID\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userID\n                                    \n                                \n                                \n                                    \n                                        userID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as http from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport * as Interface from \"../_interfaces/interfaces\";\nimport { AuthenticationService } from \"./authentication.service\";\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllSamplesForMemberURL = `${config.diagnosticClinicURL}/retrieveSamplesForMember`;\n\n//Object for defining the JSON object to be sent when requesting the samples of a specific member\nexport interface POSTMember{\n  userID: string;                         //The user id of the user to be submitted\n}\n\n//Object for defining the samples received from the API call\nexport interface Sample{\n  userID: string;                         //The id of the user who submitted the sample\n  orgName: string;                        //The organization that the user belongs to\n  status: string;                         //The status of the sample\n  referenceNumber: string;                //The reference number that was generated for the sample\n  data: Species;                          //The data within the sample which is the species\n}\n\nexport interface Species{\n  species: string;                        //The species of a sample\n}\n\n\n/**\n * Used for handling all `diagnostic clinic` requests and functions\n *\n * @export\n * @class DiagnosticClinicAPIService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DiagnosticClinicAPIService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of DiagnosticClinicAPIService.\n   * \n   * @param {http.HttpClient} http For making calls to the API\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: http.HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET ALL SAMPLES \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the samples that FABI is currently processing\n   *\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllSamples() {\n    const getAllSamplesURL = `${config.diagnosticClinicURL}/retrieveAllSamples`;\n    const method = \"POST\";\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request(method, getAllSamplesURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     GET SAMPLES FOR FABI STAFF \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the samples corresponding to a specific user.\n   *\n   * @param {string} id The id number of the user whose samples need to be fetched.\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getSamplesForFABIStaff(id: string) {\n    const data: POSTMember = { userID: id };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllSamplesForMemberURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    RETREIVE ALL SAMPLES\n  /**\n   * Method that sends a request to the API to retreive all Samples\n   *\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  retrieveAllOrganizationSamples() {\n    let retrieveAllOrgSamples = `${config.diagnosticClinicURL}/retrieveAllOrgSamples`;\n    let method = 'POST';\n\n    const postData = {\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, retrieveAllOrgSamples, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    RETREIVE ALL SAMPLES FOR MEMBER\n  /**\n   * Method that sends a request to the API to retreive all Samples for a member\n   *\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  retrieveMemberSamples() {\n    let retrieveAllMemberSamples = `${config.diagnosticClinicURL}/retrieveSamplesForMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"userID\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, retrieveAllMemberSamples, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        SUBMIT SAMPLE FORM\n  /**\n   * Method that send a request to the API to submit a specifc Sample Form\n   *\n   * @param {Interface.SampleFormData} formDetails The details of the sample to be submitted\n   * @returns API response @type any\n   * \n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitSampleForm(formDetails: Interface.SampleFormData) {\n\n    let tempDetails = {\n      \"Location\": \"harding\",\n      \"Province\": \"Gauteng\",\n      \"Genus\": \"eucalyptus\",\n      \"Species\": \"radiata\",\n      \"SampleType\": \"root\",\n      \"Asym_Dis\": \"D\",\n      \"NurseryField\": \"F\",\n      \"Roots\": \"dry\",\n      \"Root-Collar\": \"Wilted, abitDry\",\n      \"Stem\": \"Girdled\",\n      \"GrowthTip\": \"Swelling\",\n      \"Needles-Leaves\": \"healthy\"\n    }\n\n    let submitSampleURL = `${config.diagnosticClinicURL}/submitSample`;\n    let method = 'POST';\n\n    const postData = {\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation,\n      \"userID\": this.authService.getCurrentSessionValue.user.ID,\n      \"data\": tempDetails\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, submitSampleURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        RETRIEVE SAMPLE DETAILS\n  /**\n   * This function is used to fetch a specific sample form\n   *\n   * @param {string} sampleRefNum The reference number of the sample to be retrieved\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  retrieveSampleDetails(sampleRefNum: string) {\n    let retreiveSampleDetailsURL = `${config.diagnosticClinicURL}/retrieveSample`;\n    let method = 'POST';\n\n    const postData = {\n      \"refNum\": sampleRefNum\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, retreiveSampleDetailsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        UPDATE SAMPLE STATUS\n  /**\n   * Method used to update the status of the sample\n   *\n   * @param {*} sample\n   * @param {string} status\n   * @returns\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateSamplesStatus(sample: any, status: string) {\n\n    let updateSampleStatusURL = `${config.diagnosticClinicURL}/updateSampleStatus`;\n    let method = 'POST';\n\n    const postData = {\n      \"refNum\": sample.referenceNumber,\n      \"status\": status\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateSampleStatusURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/POSTMember-1.html":{"url":"interfaces/POSTMember-1.html","title":"interface - POSTMember-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  POSTMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/user-management-api.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        orgName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        orgName\n                                    \n                                \n                                \n                                    \n                                        orgName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as Interface from \"../_interfaces/interfaces\";\nimport { AuthenticationService } from \"./authentication.service\";\n\nimport { config } from \"../../environments/environment.prod\";\nimport { map } from 'rxjs/operators';\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllFABIStaffURL = `${config.userManagementURL}/getAllStaff`;\nconst getAllOrganizationMembers = `${config.userManagementURL}/getAllOrgMembers`;\nconst getUserDetailsURL = `${config.userManagementURL}/getUserDetails`;\nconst updateStaffMemberDetailsURL = `${config.userManagementURL}/updateStaffMember`;\nconst updateOrganizationMemberDetailsURL = `${config.userManagementURL}/updateOrgMember`;\n\n//Object for defining how a member of FABI is structured\nexport interface Member {\n  Email: string;          //This will contain the email retreived from the DB (is the unique identifier for the member) \n  Name: string;           //This will be the name of the member\n  Surname: string;        //This will be the surname of the member\n  ID: string;             //The id number of the member;\n}\n\n//Object for defining the JSON object to be sent when requesting the members of an organization\nexport interface POSTOrganization {\n  orgName: string;        //The name of the organization to be fetched\n}\n\n//Object for defining the JSON object to be sent when requesting the details of a member\nexport interface POSTMember {\n  orgName: string;        //The name of the organization to be fetched\n  id: string;             //THe ID of the user\n}\n\n//Object for defning the JSOn object to be sent when the details of a FABI member are updated\nexport interface UpdateMember {\n  fname: string;          //The name of the FABI member\n  surname: string;        //The surname of the FABI member\n  email: string;          //The email of the FABI member\n}\n\n//Object for defning the JSOn object to be sent when the details of a FABI member are updated\nexport interface POSTUpdateMember {\n  orgName: string,\n  id: string;                 //The ID number of the FABI member to be updated\n  fields: UpdateMember;       //The fields to the updated\n}\n\n//Object for defning the JSOn object to be sent when the details of an organization member are updated\nexport interface UpdateOrganization {\n  fname: string;          //The name of the organization member\n  surname: string;        //The surname of the organization member\n  email: string;          //The email of the organization member\n}\n\n//Object for defning the JSOn object to be sent when the details of an organization member are updated\nexport interface POSTUpdateOrganization {\n  orgName: string;            //The name of the organization\n  id: string;                 //The ID of the organization member to be updated\n  fields: UpdateMember;       //The fields to be updated\n}\n\n@core.Injectable({\n  providedIn: 'root'\n})\n\nexport class UserManagementAPIService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of UserManagementAPIService.\n  * \n  * @param {HttpClient} http For making calls to the API\n  * @param {AuthenticationService} authService for calling the *authentication* service\n  * \n  * @memberof UserManagementAPIService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     GET ALL FABI STAFF \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the FABI staff\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllFABIStaff() {\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      method: 'POST',\n      url: getAllFABIStaffURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', getAllFABIStaffURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            GET USER DETAILS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the Members of an Organization\n   *\n   * @param {string} organization Name of the organization that the user belongs to\n   * @param {string} idNo The id number of the user\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserDetails(organization: string, idNo: string) {    \n    var data: POSTMember = { orgName: organization, id: idNo };\n\n    const options = {\n      method: 'POST',\n      url: getUserDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getUserDetailsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         UPDATE FABI MEMBER DETAILS \n  /**\n   * This function is used to send updated FABI staff details to the database\n   *\n   * @param {string} mail Email of the staff member\n   * @param {string} name Name of the staff member\n   * @param {string} lname Surname of the staff member\n   * @param {string} idNo ID number of the staff member\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateFABIMemberDetails(mail: string, name: string, lname: string) {\n    var member: UpdateMember = { \n      fname: name, \n      surname: lname, \n      email: mail\n    };\n\n    var data: POSTUpdateMember = { \n      orgName: this.authService.getCurrentSessionValue.user.organisation,\n      id: this.authService.getCurrentSessionValue.user.ID, \n      fields: member \n    };\n\n    const options = {\n      method: 'POST',\n      url: updateStaffMemberDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateStaffMemberDetailsURL, options).pipe(map((response : any) => {\n      if (response && (response.token && response.token != '' && response.code == 200)) {\n        this.authService.updateSessionVariables(response.data);\n      }\n      return response;\n    }));\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      UPDATE ORGANIZATION MEMBER DETAILS \n  /**\n   * This function is used to send updated organization member details to the database\n   *\n   * @param {string} mail Email of the staff member\n   * @param {string} name Name of the staff member\n   * @param {string} lname Surname of the staff member\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateOrganizationMemberDetails(mail: string, name: string, lname: string) {\n    var member: UpdateOrganization = { \n      fname: name, \n      surname: lname, \n      email: mail\n    };\n\n    var data: POSTUpdateOrganization = { \n      orgName: this.authService.getCurrentSessionValue.user.organisation,\n      id: this.authService.getCurrentSessionValue.user.ID, \n      fields: member \n    };\n\n    const options = {\n      method: 'POST',\n      url: updateOrganizationMemberDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateOrganizationMemberDetailsURL, options).pipe(map((response : any) => {\n      if (response && (response.token && response.token != '' && response.code == 200)) {\n        this.authService.updateSessionVariables(response.data);\n      }\n      return response;\n    }));\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GET ORGANIZATION\n  /**\n   * Function that send a request to retrieve an Organisations' details using their ID\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getOrganizationDetails() {\n    let getOrganizationDetails = `${config.userManagementURL}/getOrgDetails`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getOrganizationDetails, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ORGANIZATION MEMBER\n  /**\n   * Function that send a request to retrieve an Organisations Member's details using their ID\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getOrganizationMemberDetails() {\n    let getOrganizationMemberDetails = `${config.userManagementURL}/getOrgMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getOrganizationMemberDetails, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL ORGANISATION MEMBERS\n  /**\n   * Method that sends a request to the API to get the details of all the organisations' members.\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllOrganizationMembers() {\n    let getAllOrganizationsMembersURL = `${config.userManagementURL}/getAllOrgMembers`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getAllOrganizationsMembersURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL ORGANISATIONS \n  /**\n   * Method that sends a request to the API to get the details of all the organisations.\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllOrganizations() {\n    const getAllOrganizationsURL = `${config.userManagementURL}/getAllOrganizations`;\n    const method = 'POST';\n    \n    const options = {\n      headers: new HttpHeaders({\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        // 'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      }),\n      json: true\n    };\n\n    return this.http.request(method, getAllOrganizationsURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL USER TYPES \n  /**\n   * Method that sends a request to the API to get the user types associated with a specific organisation.\n   * \n   * @param {string} orgName\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserTypes(orgName: string) {\n    const getUserTypesURL = '';\n    const method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', '***REMOVED***/getUserTypes', options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                   CREATE NEW ORGANISATION\n  /**\n   * Method that sends a request to the API to create a new Organisation \n   *\n   * @param {Interface.Organisation} orgInfo The new organization to create\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  createOrganization(orgInfo: Interface.Organisation) {\n    let createOrganizationURL = `${config.userManagementURL}/createOrganization`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, createOrganizationURL, options);\n  }\n\n\n  sendRequestToRegisterOrganization(orgInfo: Interface.Organisation) {\n    let requestToRegisterOrganizationURL = `${config.loginURL}/registerNewOrganization`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, requestToRegisterOrganizationURL, options);\n  }\n\n  getPendingOrganizations() {\n    let getPendingOrganizationURL = `${config.userManagementURL}/getAllPendingOrganizations`;\n    let method = 'POST';\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request(method, getPendingOrganizationURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     REMOVE AN ORGANISATION\n  /**\n   * Method that sends a request to the API to remove (deregister) an Organisation\n   *\n   * @param {Interface.Organisation} orgInfo The organization to be removed from the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeOrganization(orgInfo: Interface.Organisation) {\n    let removeOrganizationURL = `${config.userManagementURL}/removeOrg`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeOrganizationURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    ADD NEW FABI STAFF MEMBER\n  /**\n   * Method that sends a request to the API to add a new FABI Staff Member to the database\n   *\n   * @param {Interface.StaffInfo} staffInfo The new staff member to be added to FABI\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addStaffMember(staffInfo: Interface.StaffInfo, databasePrivileges: Interface.DatabasePrivilege[]) {\n    let staffDetails = {\"fname\": staffInfo.fname, \"surname\": staffInfo.surname, \"email\": staffInfo.email, \"phone\": staffInfo.phone};\n\n    let addStaffMemberURL = `${config.userManagementURL}/addStaff`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"staff\": staffDetails,\n      \"databases\": databasePrivileges,\n      \"userType\": staffInfo.position\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addStaffMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    REMOVE FABI STAFF MEMBER \n  /**\n   * Method that sends a request to the API to remove a FABI Staff Member\n   * \n   * @param {Interface.StaffInfo} staffInfo The staff member to be removed from the system\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeFABIStaffMember(staffInfo: Interface.StaffInfo) {\n    let removeStaffMemberURL = `${config.userManagementURL}/removeStaff`;\n    let method = 'POST';\n\n    const postData = staffInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeStaffMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET ALL FABI STAFF \n  /**\n   * Method that sends a request to the API to get all FABI Staff Members\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaffMembers() {\n    let getStaffMembersURL = `${config.userManagementURL}/getAllStaff`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getStaffMembersURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      ADD NEW FABI ADMIN\n  /**\n   * Method that send a request to the API to add a new FABI Admin to the database\n   *\n   * @param {Interface.StaffInfo} staffInfo The admin member to be added to the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addFABIAdmin(staffInfo: Interface.StaffInfo) {\n    let addFABIAdminURL = `${config.userManagementURL}/addFabiAdmin`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"admin\": staffInfo\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addFABIAdminURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  ADD A NEW ORGANISATION MEMBER\n  /**\n   * Method that sends a request to the API to add a new Member to a specific Organisation\n   *\n   * @param {Interface.Organisation} orgInfo The organization that the member needs to be added to\n   * @param {Interface.OrganisationMember} memberInfo The member to be added to the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addOrgMember(orgInfo: Interface.Organisation, memberInfo: Interface.OrganisationMember) {\n    let addMemberURL = `${config.userManagementURL}/addMemberToOrg`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": orgInfo.orgName,\n      \"member\": memberInfo,\n      \"userType\": \"Member\"\n    }\n    \n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    REMOVE ORGANIZATION MEMBER\n  /**\n   * Method that sends a request to the API to remove an Organizations Member\n   * \n   * @param {Interface.OrganisationMember} memberInfo The organization member to be removed from the system\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeOrganizationMember(memberInfo: Interface.OrganisationMember) {    \n    let removeMemberURL = `${config.userManagementURL}/removeMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation,\n      \"id\": memberInfo.id\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET FABI ADMIN TYPES\n  /**\n   * This method is used to get all FABI admin types\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getFABIAdminTypes() {\n    let getAdminTypesURL = `${config.userManagementURL}/getAdminTypes`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getAdminTypesURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET DATABASE NAMES\n  /**\n   * This method is used to get all the database names from the database\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getDatabaseNames() {\n    let getDBNamesURL = `${config.databaseManagementURL}/getDBNames`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getDBNamesURL, options);\n  }\n\n  \n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE STAFF PASSWORD\n  /**\n   * This function is used to update the password of a user\n   * \n   * @param {string} oldPassword The old password of the user\n   * @param {string} newPassword The new password for the user\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateStaffPassword(oldPassword: string, newPassword: string) {\n    let updateStaffPasswordURL = `${config.userManagementURL}/updateStaffPassword`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"oldPass\": oldPassword,\n      \"newPass\": newPassword\n    }\n    \n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateStaffPasswordURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE ORGANIZATION MEMBER PASSWORD\n  /**\n   * This function is used to update the password of an organization member\n   * \n   * @param {string} oldPassword The old password of the user\n   * @param {string} newPassword The new password for the user\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateOrganizationMemberPassword(oldPassword: string, newPassword: string) {\n    let updateOrganizationMemberPasswordURL = `${config.userManagementURL}/updateOrgMemberPassword`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"oldPass\": oldPassword,\n      \"newPass\": newPassword,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateOrganizationMemberPasswordURL, options);\n  }\n\n  getFABIAdmins() {\n    let getFABIAdminURL = `${config.userManagementURL}/getAllFabiMembers`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getFABIAdminURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/POSTOrganization.html":{"url":"interfaces/POSTOrganization.html","title":"interface - POSTOrganization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  POSTOrganization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/user-management-api.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        orgName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        orgName\n                                    \n                                \n                                \n                                    \n                                        orgName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as Interface from \"../_interfaces/interfaces\";\nimport { AuthenticationService } from \"./authentication.service\";\n\nimport { config } from \"../../environments/environment.prod\";\nimport { map } from 'rxjs/operators';\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllFABIStaffURL = `${config.userManagementURL}/getAllStaff`;\nconst getAllOrganizationMembers = `${config.userManagementURL}/getAllOrgMembers`;\nconst getUserDetailsURL = `${config.userManagementURL}/getUserDetails`;\nconst updateStaffMemberDetailsURL = `${config.userManagementURL}/updateStaffMember`;\nconst updateOrganizationMemberDetailsURL = `${config.userManagementURL}/updateOrgMember`;\n\n//Object for defining how a member of FABI is structured\nexport interface Member {\n  Email: string;          //This will contain the email retreived from the DB (is the unique identifier for the member) \n  Name: string;           //This will be the name of the member\n  Surname: string;        //This will be the surname of the member\n  ID: string;             //The id number of the member;\n}\n\n//Object for defining the JSON object to be sent when requesting the members of an organization\nexport interface POSTOrganization {\n  orgName: string;        //The name of the organization to be fetched\n}\n\n//Object for defining the JSON object to be sent when requesting the details of a member\nexport interface POSTMember {\n  orgName: string;        //The name of the organization to be fetched\n  id: string;             //THe ID of the user\n}\n\n//Object for defning the JSOn object to be sent when the details of a FABI member are updated\nexport interface UpdateMember {\n  fname: string;          //The name of the FABI member\n  surname: string;        //The surname of the FABI member\n  email: string;          //The email of the FABI member\n}\n\n//Object for defning the JSOn object to be sent when the details of a FABI member are updated\nexport interface POSTUpdateMember {\n  orgName: string,\n  id: string;                 //The ID number of the FABI member to be updated\n  fields: UpdateMember;       //The fields to the updated\n}\n\n//Object for defning the JSOn object to be sent when the details of an organization member are updated\nexport interface UpdateOrganization {\n  fname: string;          //The name of the organization member\n  surname: string;        //The surname of the organization member\n  email: string;          //The email of the organization member\n}\n\n//Object for defning the JSOn object to be sent when the details of an organization member are updated\nexport interface POSTUpdateOrganization {\n  orgName: string;            //The name of the organization\n  id: string;                 //The ID of the organization member to be updated\n  fields: UpdateMember;       //The fields to be updated\n}\n\n@core.Injectable({\n  providedIn: 'root'\n})\n\nexport class UserManagementAPIService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of UserManagementAPIService.\n  * \n  * @param {HttpClient} http For making calls to the API\n  * @param {AuthenticationService} authService for calling the *authentication* service\n  * \n  * @memberof UserManagementAPIService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     GET ALL FABI STAFF \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the FABI staff\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllFABIStaff() {\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      method: 'POST',\n      url: getAllFABIStaffURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', getAllFABIStaffURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            GET USER DETAILS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the Members of an Organization\n   *\n   * @param {string} organization Name of the organization that the user belongs to\n   * @param {string} idNo The id number of the user\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserDetails(organization: string, idNo: string) {    \n    var data: POSTMember = { orgName: organization, id: idNo };\n\n    const options = {\n      method: 'POST',\n      url: getUserDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getUserDetailsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         UPDATE FABI MEMBER DETAILS \n  /**\n   * This function is used to send updated FABI staff details to the database\n   *\n   * @param {string} mail Email of the staff member\n   * @param {string} name Name of the staff member\n   * @param {string} lname Surname of the staff member\n   * @param {string} idNo ID number of the staff member\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateFABIMemberDetails(mail: string, name: string, lname: string) {\n    var member: UpdateMember = { \n      fname: name, \n      surname: lname, \n      email: mail\n    };\n\n    var data: POSTUpdateMember = { \n      orgName: this.authService.getCurrentSessionValue.user.organisation,\n      id: this.authService.getCurrentSessionValue.user.ID, \n      fields: member \n    };\n\n    const options = {\n      method: 'POST',\n      url: updateStaffMemberDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateStaffMemberDetailsURL, options).pipe(map((response : any) => {\n      if (response && (response.token && response.token != '' && response.code == 200)) {\n        this.authService.updateSessionVariables(response.data);\n      }\n      return response;\n    }));\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      UPDATE ORGANIZATION MEMBER DETAILS \n  /**\n   * This function is used to send updated organization member details to the database\n   *\n   * @param {string} mail Email of the staff member\n   * @param {string} name Name of the staff member\n   * @param {string} lname Surname of the staff member\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateOrganizationMemberDetails(mail: string, name: string, lname: string) {\n    var member: UpdateOrganization = { \n      fname: name, \n      surname: lname, \n      email: mail\n    };\n\n    var data: POSTUpdateOrganization = { \n      orgName: this.authService.getCurrentSessionValue.user.organisation,\n      id: this.authService.getCurrentSessionValue.user.ID, \n      fields: member \n    };\n\n    const options = {\n      method: 'POST',\n      url: updateOrganizationMemberDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateOrganizationMemberDetailsURL, options).pipe(map((response : any) => {\n      if (response && (response.token && response.token != '' && response.code == 200)) {\n        this.authService.updateSessionVariables(response.data);\n      }\n      return response;\n    }));\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GET ORGANIZATION\n  /**\n   * Function that send a request to retrieve an Organisations' details using their ID\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getOrganizationDetails() {\n    let getOrganizationDetails = `${config.userManagementURL}/getOrgDetails`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getOrganizationDetails, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ORGANIZATION MEMBER\n  /**\n   * Function that send a request to retrieve an Organisations Member's details using their ID\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getOrganizationMemberDetails() {\n    let getOrganizationMemberDetails = `${config.userManagementURL}/getOrgMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getOrganizationMemberDetails, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL ORGANISATION MEMBERS\n  /**\n   * Method that sends a request to the API to get the details of all the organisations' members.\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllOrganizationMembers() {\n    let getAllOrganizationsMembersURL = `${config.userManagementURL}/getAllOrgMembers`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getAllOrganizationsMembersURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL ORGANISATIONS \n  /**\n   * Method that sends a request to the API to get the details of all the organisations.\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllOrganizations() {\n    const getAllOrganizationsURL = `${config.userManagementURL}/getAllOrganizations`;\n    const method = 'POST';\n    \n    const options = {\n      headers: new HttpHeaders({\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        // 'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      }),\n      json: true\n    };\n\n    return this.http.request(method, getAllOrganizationsURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL USER TYPES \n  /**\n   * Method that sends a request to the API to get the user types associated with a specific organisation.\n   * \n   * @param {string} orgName\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserTypes(orgName: string) {\n    const getUserTypesURL = '';\n    const method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', '***REMOVED***/getUserTypes', options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                   CREATE NEW ORGANISATION\n  /**\n   * Method that sends a request to the API to create a new Organisation \n   *\n   * @param {Interface.Organisation} orgInfo The new organization to create\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  createOrganization(orgInfo: Interface.Organisation) {\n    let createOrganizationURL = `${config.userManagementURL}/createOrganization`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, createOrganizationURL, options);\n  }\n\n\n  sendRequestToRegisterOrganization(orgInfo: Interface.Organisation) {\n    let requestToRegisterOrganizationURL = `${config.loginURL}/registerNewOrganization`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, requestToRegisterOrganizationURL, options);\n  }\n\n  getPendingOrganizations() {\n    let getPendingOrganizationURL = `${config.userManagementURL}/getAllPendingOrganizations`;\n    let method = 'POST';\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request(method, getPendingOrganizationURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     REMOVE AN ORGANISATION\n  /**\n   * Method that sends a request to the API to remove (deregister) an Organisation\n   *\n   * @param {Interface.Organisation} orgInfo The organization to be removed from the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeOrganization(orgInfo: Interface.Organisation) {\n    let removeOrganizationURL = `${config.userManagementURL}/removeOrg`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeOrganizationURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    ADD NEW FABI STAFF MEMBER\n  /**\n   * Method that sends a request to the API to add a new FABI Staff Member to the database\n   *\n   * @param {Interface.StaffInfo} staffInfo The new staff member to be added to FABI\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addStaffMember(staffInfo: Interface.StaffInfo, databasePrivileges: Interface.DatabasePrivilege[]) {\n    let staffDetails = {\"fname\": staffInfo.fname, \"surname\": staffInfo.surname, \"email\": staffInfo.email, \"phone\": staffInfo.phone};\n\n    let addStaffMemberURL = `${config.userManagementURL}/addStaff`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"staff\": staffDetails,\n      \"databases\": databasePrivileges,\n      \"userType\": staffInfo.position\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addStaffMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    REMOVE FABI STAFF MEMBER \n  /**\n   * Method that sends a request to the API to remove a FABI Staff Member\n   * \n   * @param {Interface.StaffInfo} staffInfo The staff member to be removed from the system\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeFABIStaffMember(staffInfo: Interface.StaffInfo) {\n    let removeStaffMemberURL = `${config.userManagementURL}/removeStaff`;\n    let method = 'POST';\n\n    const postData = staffInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeStaffMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET ALL FABI STAFF \n  /**\n   * Method that sends a request to the API to get all FABI Staff Members\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaffMembers() {\n    let getStaffMembersURL = `${config.userManagementURL}/getAllStaff`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getStaffMembersURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      ADD NEW FABI ADMIN\n  /**\n   * Method that send a request to the API to add a new FABI Admin to the database\n   *\n   * @param {Interface.StaffInfo} staffInfo The admin member to be added to the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addFABIAdmin(staffInfo: Interface.StaffInfo) {\n    let addFABIAdminURL = `${config.userManagementURL}/addFabiAdmin`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"admin\": staffInfo\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addFABIAdminURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  ADD A NEW ORGANISATION MEMBER\n  /**\n   * Method that sends a request to the API to add a new Member to a specific Organisation\n   *\n   * @param {Interface.Organisation} orgInfo The organization that the member needs to be added to\n   * @param {Interface.OrganisationMember} memberInfo The member to be added to the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addOrgMember(orgInfo: Interface.Organisation, memberInfo: Interface.OrganisationMember) {\n    let addMemberURL = `${config.userManagementURL}/addMemberToOrg`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": orgInfo.orgName,\n      \"member\": memberInfo,\n      \"userType\": \"Member\"\n    }\n    \n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    REMOVE ORGANIZATION MEMBER\n  /**\n   * Method that sends a request to the API to remove an Organizations Member\n   * \n   * @param {Interface.OrganisationMember} memberInfo The organization member to be removed from the system\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeOrganizationMember(memberInfo: Interface.OrganisationMember) {    \n    let removeMemberURL = `${config.userManagementURL}/removeMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation,\n      \"id\": memberInfo.id\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET FABI ADMIN TYPES\n  /**\n   * This method is used to get all FABI admin types\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getFABIAdminTypes() {\n    let getAdminTypesURL = `${config.userManagementURL}/getAdminTypes`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getAdminTypesURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET DATABASE NAMES\n  /**\n   * This method is used to get all the database names from the database\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getDatabaseNames() {\n    let getDBNamesURL = `${config.databaseManagementURL}/getDBNames`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getDBNamesURL, options);\n  }\n\n  \n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE STAFF PASSWORD\n  /**\n   * This function is used to update the password of a user\n   * \n   * @param {string} oldPassword The old password of the user\n   * @param {string} newPassword The new password for the user\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateStaffPassword(oldPassword: string, newPassword: string) {\n    let updateStaffPasswordURL = `${config.userManagementURL}/updateStaffPassword`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"oldPass\": oldPassword,\n      \"newPass\": newPassword\n    }\n    \n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateStaffPasswordURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE ORGANIZATION MEMBER PASSWORD\n  /**\n   * This function is used to update the password of an organization member\n   * \n   * @param {string} oldPassword The old password of the user\n   * @param {string} newPassword The new password for the user\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateOrganizationMemberPassword(oldPassword: string, newPassword: string) {\n    let updateOrganizationMemberPasswordURL = `${config.userManagementURL}/updateOrgMemberPassword`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"oldPass\": oldPassword,\n      \"newPass\": newPassword,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateOrganizationMemberPasswordURL, options);\n  }\n\n  getFABIAdmins() {\n    let getFABIAdminURL = `${config.userManagementURL}/getAllFabiMembers`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getFABIAdminURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/POSTUpdate.html":{"url":"interfaces/POSTUpdate.html","title":"interface - POSTUpdate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  POSTUpdate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/notification-logging.service.ts\n        \n\n            \n                Description\n            \n            \n                //Object for defining the JSON object to be sent when updating \nto logs belonging to a user\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        logIDs\n                                \n                                \n                                        userID\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        logIDs\n                                    \n                                \n                                \n                                    \n                                        logIDs:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userID\n                                    \n                                \n                                \n                                    \n                                        userID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport { AuthenticationService } from './authentication.service';\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllLogsURL = `${config.logsURL}/getLogs`;\nconst getUserLogsURL = `${config.logsURL}/getUserLogs`;\nconst updateUserLogsURL = `${config.logsURL}/deleteUserLogs`;\n\n///////////////////////////////////////////////////////////////////////\n//                           USER LOGS\n/**\n *  //Object for defining the JSON object containing the user logs\n *\n * @export\n * @interface UserLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface UserLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: USER\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The user on which the action was performed (their ID)\n  User: string;           //The user who performed the action (their ID)\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DATABSE MANAGEMENT LOGS\n/**\n *  //Object for defining the JSON object containing the database \n *  management logs\n *\n * @export\n * @interface DatabaseManagementLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DatabaseManagementLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: DBML (Database Management Log)\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The name of the database that the action was performed on\n  User: string;           //The user who performed the action\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;            //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ACCESS LOGS\n/**\n *  //Object for defining the JSON object containing the access logs\n *\n * @export\n * @interface AccessLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface AccessLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ACCL\n  Action: string;         //The action performed: ACCESS\n  Date: string;           //The date that the action was performed\n  Details: string;        //Description of what was accessed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ERROR LOGS\n/**\n *  //Object for defining the JSON object containing the error logs\n *\n * @export\n * @interface ErrorLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface ErrorLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ERRL\n  Date: string;           //The date that the action was performed\n  StatusCode: string;     //The status code of the error that occured\n  Details: string;        //Description of the error\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DIAGNOSTIC CLINIC LOGS\n/**\n *  //Object for defining the JSON object containing the diagnostic \n *  clinic logs\n *\n * @export\n * @interface DiagnosticClinicLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DiagnosticClinicLogs {\n  Type: string;           //The type of the log: DGCL\n  Date: string;           //The date that the action was performed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                              POST LOG\n/**\n *  //Object for defining the JSON object for posting log requests\n *\n * @export\n * @interface POSTLog\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTLog {\n  Log: Logs;              //The array of logs to post to the API service\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               LOGS\n/**\n *  //Object for defining the JSON object for the logs\n *\n * @export\n * @interface Logs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface Logs {\n  type: string;           //The type of the log\n  before: string;         //The before date\n  after: string;          //The after date\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST USER\n/**\n *  //Object for defining the JSON object to be sent when requesting \n *  the logs belonging to a member\n *\n * @export\n * @interface POSTUser\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUser {\n  userID: string;         //The ID of the user\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST UPDATE\n/**\n *  //Object for defining the JSON object to be sent when updating \n *  to logs belonging to a user\n *\n * @export\n * @interface POSTUpdate\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUpdate {\n  userID: string;         //The ID of the user\n  logIDs: string[];       //The logs to be removed from the user's profile\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class NotificationLoggingService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of NotificationLoggingService.\n  * \n  * @param {HttpClient} http For making calls to the API\n  * \n  * @memberof NotificationLoggingService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       GET ALL USER LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'USER'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllUserLogs() {\n    var tempLog: Logs = { type: 'USER', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                 GET ALL DATABASE MANAGEMENT LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'DBML'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllDatabaseManagementLogs() {\n    var tempLog: Logs = { type: 'DBML', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL ACCESS LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ACCL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllAccessLogs() {\n    var tempLog: Logs = { type: 'ACCL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GET ALL ERROR LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ERRL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllErrorLogs() {\n    var tempLog: Logs = { type: 'ERRL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET USER LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs for a specific user.\n   *\n   * @param {string} userID The id number of the user whose logs need to be feteched for the notifications.\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserLogs(id: string) {\n    var data: POSTUser = { userID: id };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getUserLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE FABI MEMBER NOTIFICATIONS\n  /**\n   * Method that sends a request to the API to update the notifications associated with a specific user.\n   * \n   * @param {string} id The ID of the user whose notifications need to be updated\n   * @param {string[]} notifications The notifications to be removed from the user's profile\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateFABIMemberNotifications(id: string, notifications: string[]) {\n    var postData: POSTUpdate = { userID: id, logIDs: notifications };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', updateUserLogsURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/POSTUpdateMember.html":{"url":"interfaces/POSTUpdateMember.html","title":"interface - POSTUpdateMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  POSTUpdateMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/user-management-api.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        fields\n                                \n                                \n                                        id\n                                \n                                \n                                        orgName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fields\n                                    \n                                \n                                \n                                    \n                                        fields:         UpdateMember\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UpdateMember\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        orgName\n                                    \n                                \n                                \n                                    \n                                        orgName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as Interface from \"../_interfaces/interfaces\";\nimport { AuthenticationService } from \"./authentication.service\";\n\nimport { config } from \"../../environments/environment.prod\";\nimport { map } from 'rxjs/operators';\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllFABIStaffURL = `${config.userManagementURL}/getAllStaff`;\nconst getAllOrganizationMembers = `${config.userManagementURL}/getAllOrgMembers`;\nconst getUserDetailsURL = `${config.userManagementURL}/getUserDetails`;\nconst updateStaffMemberDetailsURL = `${config.userManagementURL}/updateStaffMember`;\nconst updateOrganizationMemberDetailsURL = `${config.userManagementURL}/updateOrgMember`;\n\n//Object for defining how a member of FABI is structured\nexport interface Member {\n  Email: string;          //This will contain the email retreived from the DB (is the unique identifier for the member) \n  Name: string;           //This will be the name of the member\n  Surname: string;        //This will be the surname of the member\n  ID: string;             //The id number of the member;\n}\n\n//Object for defining the JSON object to be sent when requesting the members of an organization\nexport interface POSTOrganization {\n  orgName: string;        //The name of the organization to be fetched\n}\n\n//Object for defining the JSON object to be sent when requesting the details of a member\nexport interface POSTMember {\n  orgName: string;        //The name of the organization to be fetched\n  id: string;             //THe ID of the user\n}\n\n//Object for defning the JSOn object to be sent when the details of a FABI member are updated\nexport interface UpdateMember {\n  fname: string;          //The name of the FABI member\n  surname: string;        //The surname of the FABI member\n  email: string;          //The email of the FABI member\n}\n\n//Object for defning the JSOn object to be sent when the details of a FABI member are updated\nexport interface POSTUpdateMember {\n  orgName: string,\n  id: string;                 //The ID number of the FABI member to be updated\n  fields: UpdateMember;       //The fields to the updated\n}\n\n//Object for defning the JSOn object to be sent when the details of an organization member are updated\nexport interface UpdateOrganization {\n  fname: string;          //The name of the organization member\n  surname: string;        //The surname of the organization member\n  email: string;          //The email of the organization member\n}\n\n//Object for defning the JSOn object to be sent when the details of an organization member are updated\nexport interface POSTUpdateOrganization {\n  orgName: string;            //The name of the organization\n  id: string;                 //The ID of the organization member to be updated\n  fields: UpdateMember;       //The fields to be updated\n}\n\n@core.Injectable({\n  providedIn: 'root'\n})\n\nexport class UserManagementAPIService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of UserManagementAPIService.\n  * \n  * @param {HttpClient} http For making calls to the API\n  * @param {AuthenticationService} authService for calling the *authentication* service\n  * \n  * @memberof UserManagementAPIService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     GET ALL FABI STAFF \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the FABI staff\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllFABIStaff() {\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      method: 'POST',\n      url: getAllFABIStaffURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', getAllFABIStaffURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            GET USER DETAILS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the Members of an Organization\n   *\n   * @param {string} organization Name of the organization that the user belongs to\n   * @param {string} idNo The id number of the user\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserDetails(organization: string, idNo: string) {    \n    var data: POSTMember = { orgName: organization, id: idNo };\n\n    const options = {\n      method: 'POST',\n      url: getUserDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getUserDetailsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         UPDATE FABI MEMBER DETAILS \n  /**\n   * This function is used to send updated FABI staff details to the database\n   *\n   * @param {string} mail Email of the staff member\n   * @param {string} name Name of the staff member\n   * @param {string} lname Surname of the staff member\n   * @param {string} idNo ID number of the staff member\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateFABIMemberDetails(mail: string, name: string, lname: string) {\n    var member: UpdateMember = { \n      fname: name, \n      surname: lname, \n      email: mail\n    };\n\n    var data: POSTUpdateMember = { \n      orgName: this.authService.getCurrentSessionValue.user.organisation,\n      id: this.authService.getCurrentSessionValue.user.ID, \n      fields: member \n    };\n\n    const options = {\n      method: 'POST',\n      url: updateStaffMemberDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateStaffMemberDetailsURL, options).pipe(map((response : any) => {\n      if (response && (response.token && response.token != '' && response.code == 200)) {\n        this.authService.updateSessionVariables(response.data);\n      }\n      return response;\n    }));\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      UPDATE ORGANIZATION MEMBER DETAILS \n  /**\n   * This function is used to send updated organization member details to the database\n   *\n   * @param {string} mail Email of the staff member\n   * @param {string} name Name of the staff member\n   * @param {string} lname Surname of the staff member\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateOrganizationMemberDetails(mail: string, name: string, lname: string) {\n    var member: UpdateOrganization = { \n      fname: name, \n      surname: lname, \n      email: mail\n    };\n\n    var data: POSTUpdateOrganization = { \n      orgName: this.authService.getCurrentSessionValue.user.organisation,\n      id: this.authService.getCurrentSessionValue.user.ID, \n      fields: member \n    };\n\n    const options = {\n      method: 'POST',\n      url: updateOrganizationMemberDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateOrganizationMemberDetailsURL, options).pipe(map((response : any) => {\n      if (response && (response.token && response.token != '' && response.code == 200)) {\n        this.authService.updateSessionVariables(response.data);\n      }\n      return response;\n    }));\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GET ORGANIZATION\n  /**\n   * Function that send a request to retrieve an Organisations' details using their ID\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getOrganizationDetails() {\n    let getOrganizationDetails = `${config.userManagementURL}/getOrgDetails`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getOrganizationDetails, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ORGANIZATION MEMBER\n  /**\n   * Function that send a request to retrieve an Organisations Member's details using their ID\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getOrganizationMemberDetails() {\n    let getOrganizationMemberDetails = `${config.userManagementURL}/getOrgMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getOrganizationMemberDetails, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL ORGANISATION MEMBERS\n  /**\n   * Method that sends a request to the API to get the details of all the organisations' members.\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllOrganizationMembers() {\n    let getAllOrganizationsMembersURL = `${config.userManagementURL}/getAllOrgMembers`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getAllOrganizationsMembersURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL ORGANISATIONS \n  /**\n   * Method that sends a request to the API to get the details of all the organisations.\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllOrganizations() {\n    const getAllOrganizationsURL = `${config.userManagementURL}/getAllOrganizations`;\n    const method = 'POST';\n    \n    const options = {\n      headers: new HttpHeaders({\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        // 'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      }),\n      json: true\n    };\n\n    return this.http.request(method, getAllOrganizationsURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL USER TYPES \n  /**\n   * Method that sends a request to the API to get the user types associated with a specific organisation.\n   * \n   * @param {string} orgName\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserTypes(orgName: string) {\n    const getUserTypesURL = '';\n    const method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', '***REMOVED***/getUserTypes', options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                   CREATE NEW ORGANISATION\n  /**\n   * Method that sends a request to the API to create a new Organisation \n   *\n   * @param {Interface.Organisation} orgInfo The new organization to create\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  createOrganization(orgInfo: Interface.Organisation) {\n    let createOrganizationURL = `${config.userManagementURL}/createOrganization`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, createOrganizationURL, options);\n  }\n\n\n  sendRequestToRegisterOrganization(orgInfo: Interface.Organisation) {\n    let requestToRegisterOrganizationURL = `${config.loginURL}/registerNewOrganization`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, requestToRegisterOrganizationURL, options);\n  }\n\n  getPendingOrganizations() {\n    let getPendingOrganizationURL = `${config.userManagementURL}/getAllPendingOrganizations`;\n    let method = 'POST';\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request(method, getPendingOrganizationURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     REMOVE AN ORGANISATION\n  /**\n   * Method that sends a request to the API to remove (deregister) an Organisation\n   *\n   * @param {Interface.Organisation} orgInfo The organization to be removed from the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeOrganization(orgInfo: Interface.Organisation) {\n    let removeOrganizationURL = `${config.userManagementURL}/removeOrg`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeOrganizationURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    ADD NEW FABI STAFF MEMBER\n  /**\n   * Method that sends a request to the API to add a new FABI Staff Member to the database\n   *\n   * @param {Interface.StaffInfo} staffInfo The new staff member to be added to FABI\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addStaffMember(staffInfo: Interface.StaffInfo, databasePrivileges: Interface.DatabasePrivilege[]) {\n    let staffDetails = {\"fname\": staffInfo.fname, \"surname\": staffInfo.surname, \"email\": staffInfo.email, \"phone\": staffInfo.phone};\n\n    let addStaffMemberURL = `${config.userManagementURL}/addStaff`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"staff\": staffDetails,\n      \"databases\": databasePrivileges,\n      \"userType\": staffInfo.position\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addStaffMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    REMOVE FABI STAFF MEMBER \n  /**\n   * Method that sends a request to the API to remove a FABI Staff Member\n   * \n   * @param {Interface.StaffInfo} staffInfo The staff member to be removed from the system\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeFABIStaffMember(staffInfo: Interface.StaffInfo) {\n    let removeStaffMemberURL = `${config.userManagementURL}/removeStaff`;\n    let method = 'POST';\n\n    const postData = staffInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeStaffMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET ALL FABI STAFF \n  /**\n   * Method that sends a request to the API to get all FABI Staff Members\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaffMembers() {\n    let getStaffMembersURL = `${config.userManagementURL}/getAllStaff`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getStaffMembersURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      ADD NEW FABI ADMIN\n  /**\n   * Method that send a request to the API to add a new FABI Admin to the database\n   *\n   * @param {Interface.StaffInfo} staffInfo The admin member to be added to the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addFABIAdmin(staffInfo: Interface.StaffInfo) {\n    let addFABIAdminURL = `${config.userManagementURL}/addFabiAdmin`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"admin\": staffInfo\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addFABIAdminURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  ADD A NEW ORGANISATION MEMBER\n  /**\n   * Method that sends a request to the API to add a new Member to a specific Organisation\n   *\n   * @param {Interface.Organisation} orgInfo The organization that the member needs to be added to\n   * @param {Interface.OrganisationMember} memberInfo The member to be added to the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addOrgMember(orgInfo: Interface.Organisation, memberInfo: Interface.OrganisationMember) {\n    let addMemberURL = `${config.userManagementURL}/addMemberToOrg`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": orgInfo.orgName,\n      \"member\": memberInfo,\n      \"userType\": \"Member\"\n    }\n    \n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    REMOVE ORGANIZATION MEMBER\n  /**\n   * Method that sends a request to the API to remove an Organizations Member\n   * \n   * @param {Interface.OrganisationMember} memberInfo The organization member to be removed from the system\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeOrganizationMember(memberInfo: Interface.OrganisationMember) {    \n    let removeMemberURL = `${config.userManagementURL}/removeMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation,\n      \"id\": memberInfo.id\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET FABI ADMIN TYPES\n  /**\n   * This method is used to get all FABI admin types\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getFABIAdminTypes() {\n    let getAdminTypesURL = `${config.userManagementURL}/getAdminTypes`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getAdminTypesURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET DATABASE NAMES\n  /**\n   * This method is used to get all the database names from the database\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getDatabaseNames() {\n    let getDBNamesURL = `${config.databaseManagementURL}/getDBNames`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getDBNamesURL, options);\n  }\n\n  \n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE STAFF PASSWORD\n  /**\n   * This function is used to update the password of a user\n   * \n   * @param {string} oldPassword The old password of the user\n   * @param {string} newPassword The new password for the user\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateStaffPassword(oldPassword: string, newPassword: string) {\n    let updateStaffPasswordURL = `${config.userManagementURL}/updateStaffPassword`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"oldPass\": oldPassword,\n      \"newPass\": newPassword\n    }\n    \n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateStaffPasswordURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE ORGANIZATION MEMBER PASSWORD\n  /**\n   * This function is used to update the password of an organization member\n   * \n   * @param {string} oldPassword The old password of the user\n   * @param {string} newPassword The new password for the user\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateOrganizationMemberPassword(oldPassword: string, newPassword: string) {\n    let updateOrganizationMemberPasswordURL = `${config.userManagementURL}/updateOrgMemberPassword`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"oldPass\": oldPassword,\n      \"newPass\": newPassword,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateOrganizationMemberPasswordURL, options);\n  }\n\n  getFABIAdmins() {\n    let getFABIAdminURL = `${config.userManagementURL}/getAllFabiMembers`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getFABIAdminURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/POSTUpdateOrganization.html":{"url":"interfaces/POSTUpdateOrganization.html","title":"interface - POSTUpdateOrganization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  POSTUpdateOrganization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/user-management-api.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        fields\n                                \n                                \n                                        id\n                                \n                                \n                                        orgName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fields\n                                    \n                                \n                                \n                                    \n                                        fields:         UpdateMember\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UpdateMember\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        orgName\n                                    \n                                \n                                \n                                    \n                                        orgName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as Interface from \"../_interfaces/interfaces\";\nimport { AuthenticationService } from \"./authentication.service\";\n\nimport { config } from \"../../environments/environment.prod\";\nimport { map } from 'rxjs/operators';\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllFABIStaffURL = `${config.userManagementURL}/getAllStaff`;\nconst getAllOrganizationMembers = `${config.userManagementURL}/getAllOrgMembers`;\nconst getUserDetailsURL = `${config.userManagementURL}/getUserDetails`;\nconst updateStaffMemberDetailsURL = `${config.userManagementURL}/updateStaffMember`;\nconst updateOrganizationMemberDetailsURL = `${config.userManagementURL}/updateOrgMember`;\n\n//Object for defining how a member of FABI is structured\nexport interface Member {\n  Email: string;          //This will contain the email retreived from the DB (is the unique identifier for the member) \n  Name: string;           //This will be the name of the member\n  Surname: string;        //This will be the surname of the member\n  ID: string;             //The id number of the member;\n}\n\n//Object for defining the JSON object to be sent when requesting the members of an organization\nexport interface POSTOrganization {\n  orgName: string;        //The name of the organization to be fetched\n}\n\n//Object for defining the JSON object to be sent when requesting the details of a member\nexport interface POSTMember {\n  orgName: string;        //The name of the organization to be fetched\n  id: string;             //THe ID of the user\n}\n\n//Object for defning the JSOn object to be sent when the details of a FABI member are updated\nexport interface UpdateMember {\n  fname: string;          //The name of the FABI member\n  surname: string;        //The surname of the FABI member\n  email: string;          //The email of the FABI member\n}\n\n//Object for defning the JSOn object to be sent when the details of a FABI member are updated\nexport interface POSTUpdateMember {\n  orgName: string,\n  id: string;                 //The ID number of the FABI member to be updated\n  fields: UpdateMember;       //The fields to the updated\n}\n\n//Object for defning the JSOn object to be sent when the details of an organization member are updated\nexport interface UpdateOrganization {\n  fname: string;          //The name of the organization member\n  surname: string;        //The surname of the organization member\n  email: string;          //The email of the organization member\n}\n\n//Object for defning the JSOn object to be sent when the details of an organization member are updated\nexport interface POSTUpdateOrganization {\n  orgName: string;            //The name of the organization\n  id: string;                 //The ID of the organization member to be updated\n  fields: UpdateMember;       //The fields to be updated\n}\n\n@core.Injectable({\n  providedIn: 'root'\n})\n\nexport class UserManagementAPIService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of UserManagementAPIService.\n  * \n  * @param {HttpClient} http For making calls to the API\n  * @param {AuthenticationService} authService for calling the *authentication* service\n  * \n  * @memberof UserManagementAPIService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     GET ALL FABI STAFF \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the FABI staff\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllFABIStaff() {\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      method: 'POST',\n      url: getAllFABIStaffURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', getAllFABIStaffURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            GET USER DETAILS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the Members of an Organization\n   *\n   * @param {string} organization Name of the organization that the user belongs to\n   * @param {string} idNo The id number of the user\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserDetails(organization: string, idNo: string) {    \n    var data: POSTMember = { orgName: organization, id: idNo };\n\n    const options = {\n      method: 'POST',\n      url: getUserDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getUserDetailsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         UPDATE FABI MEMBER DETAILS \n  /**\n   * This function is used to send updated FABI staff details to the database\n   *\n   * @param {string} mail Email of the staff member\n   * @param {string} name Name of the staff member\n   * @param {string} lname Surname of the staff member\n   * @param {string} idNo ID number of the staff member\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateFABIMemberDetails(mail: string, name: string, lname: string) {\n    var member: UpdateMember = { \n      fname: name, \n      surname: lname, \n      email: mail\n    };\n\n    var data: POSTUpdateMember = { \n      orgName: this.authService.getCurrentSessionValue.user.organisation,\n      id: this.authService.getCurrentSessionValue.user.ID, \n      fields: member \n    };\n\n    const options = {\n      method: 'POST',\n      url: updateStaffMemberDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateStaffMemberDetailsURL, options).pipe(map((response : any) => {\n      if (response && (response.token && response.token != '' && response.code == 200)) {\n        this.authService.updateSessionVariables(response.data);\n      }\n      return response;\n    }));\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      UPDATE ORGANIZATION MEMBER DETAILS \n  /**\n   * This function is used to send updated organization member details to the database\n   *\n   * @param {string} mail Email of the staff member\n   * @param {string} name Name of the staff member\n   * @param {string} lname Surname of the staff member\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateOrganizationMemberDetails(mail: string, name: string, lname: string) {\n    var member: UpdateOrganization = { \n      fname: name, \n      surname: lname, \n      email: mail\n    };\n\n    var data: POSTUpdateOrganization = { \n      orgName: this.authService.getCurrentSessionValue.user.organisation,\n      id: this.authService.getCurrentSessionValue.user.ID, \n      fields: member \n    };\n\n    const options = {\n      method: 'POST',\n      url: updateOrganizationMemberDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateOrganizationMemberDetailsURL, options).pipe(map((response : any) => {\n      if (response && (response.token && response.token != '' && response.code == 200)) {\n        this.authService.updateSessionVariables(response.data);\n      }\n      return response;\n    }));\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GET ORGANIZATION\n  /**\n   * Function that send a request to retrieve an Organisations' details using their ID\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getOrganizationDetails() {\n    let getOrganizationDetails = `${config.userManagementURL}/getOrgDetails`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getOrganizationDetails, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ORGANIZATION MEMBER\n  /**\n   * Function that send a request to retrieve an Organisations Member's details using their ID\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getOrganizationMemberDetails() {\n    let getOrganizationMemberDetails = `${config.userManagementURL}/getOrgMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getOrganizationMemberDetails, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL ORGANISATION MEMBERS\n  /**\n   * Method that sends a request to the API to get the details of all the organisations' members.\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllOrganizationMembers() {\n    let getAllOrganizationsMembersURL = `${config.userManagementURL}/getAllOrgMembers`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getAllOrganizationsMembersURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL ORGANISATIONS \n  /**\n   * Method that sends a request to the API to get the details of all the organisations.\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllOrganizations() {\n    const getAllOrganizationsURL = `${config.userManagementURL}/getAllOrganizations`;\n    const method = 'POST';\n    \n    const options = {\n      headers: new HttpHeaders({\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        // 'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      }),\n      json: true\n    };\n\n    return this.http.request(method, getAllOrganizationsURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL USER TYPES \n  /**\n   * Method that sends a request to the API to get the user types associated with a specific organisation.\n   * \n   * @param {string} orgName\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserTypes(orgName: string) {\n    const getUserTypesURL = '';\n    const method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', '***REMOVED***/getUserTypes', options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                   CREATE NEW ORGANISATION\n  /**\n   * Method that sends a request to the API to create a new Organisation \n   *\n   * @param {Interface.Organisation} orgInfo The new organization to create\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  createOrganization(orgInfo: Interface.Organisation) {\n    let createOrganizationURL = `${config.userManagementURL}/createOrganization`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, createOrganizationURL, options);\n  }\n\n\n  sendRequestToRegisterOrganization(orgInfo: Interface.Organisation) {\n    let requestToRegisterOrganizationURL = `${config.loginURL}/registerNewOrganization`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, requestToRegisterOrganizationURL, options);\n  }\n\n  getPendingOrganizations() {\n    let getPendingOrganizationURL = `${config.userManagementURL}/getAllPendingOrganizations`;\n    let method = 'POST';\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request(method, getPendingOrganizationURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     REMOVE AN ORGANISATION\n  /**\n   * Method that sends a request to the API to remove (deregister) an Organisation\n   *\n   * @param {Interface.Organisation} orgInfo The organization to be removed from the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeOrganization(orgInfo: Interface.Organisation) {\n    let removeOrganizationURL = `${config.userManagementURL}/removeOrg`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeOrganizationURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    ADD NEW FABI STAFF MEMBER\n  /**\n   * Method that sends a request to the API to add a new FABI Staff Member to the database\n   *\n   * @param {Interface.StaffInfo} staffInfo The new staff member to be added to FABI\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addStaffMember(staffInfo: Interface.StaffInfo, databasePrivileges: Interface.DatabasePrivilege[]) {\n    let staffDetails = {\"fname\": staffInfo.fname, \"surname\": staffInfo.surname, \"email\": staffInfo.email, \"phone\": staffInfo.phone};\n\n    let addStaffMemberURL = `${config.userManagementURL}/addStaff`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"staff\": staffDetails,\n      \"databases\": databasePrivileges,\n      \"userType\": staffInfo.position\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addStaffMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    REMOVE FABI STAFF MEMBER \n  /**\n   * Method that sends a request to the API to remove a FABI Staff Member\n   * \n   * @param {Interface.StaffInfo} staffInfo The staff member to be removed from the system\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeFABIStaffMember(staffInfo: Interface.StaffInfo) {\n    let removeStaffMemberURL = `${config.userManagementURL}/removeStaff`;\n    let method = 'POST';\n\n    const postData = staffInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeStaffMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET ALL FABI STAFF \n  /**\n   * Method that sends a request to the API to get all FABI Staff Members\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaffMembers() {\n    let getStaffMembersURL = `${config.userManagementURL}/getAllStaff`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getStaffMembersURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      ADD NEW FABI ADMIN\n  /**\n   * Method that send a request to the API to add a new FABI Admin to the database\n   *\n   * @param {Interface.StaffInfo} staffInfo The admin member to be added to the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addFABIAdmin(staffInfo: Interface.StaffInfo) {\n    let addFABIAdminURL = `${config.userManagementURL}/addFabiAdmin`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"admin\": staffInfo\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addFABIAdminURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  ADD A NEW ORGANISATION MEMBER\n  /**\n   * Method that sends a request to the API to add a new Member to a specific Organisation\n   *\n   * @param {Interface.Organisation} orgInfo The organization that the member needs to be added to\n   * @param {Interface.OrganisationMember} memberInfo The member to be added to the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addOrgMember(orgInfo: Interface.Organisation, memberInfo: Interface.OrganisationMember) {\n    let addMemberURL = `${config.userManagementURL}/addMemberToOrg`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": orgInfo.orgName,\n      \"member\": memberInfo,\n      \"userType\": \"Member\"\n    }\n    \n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    REMOVE ORGANIZATION MEMBER\n  /**\n   * Method that sends a request to the API to remove an Organizations Member\n   * \n   * @param {Interface.OrganisationMember} memberInfo The organization member to be removed from the system\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeOrganizationMember(memberInfo: Interface.OrganisationMember) {    \n    let removeMemberURL = `${config.userManagementURL}/removeMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation,\n      \"id\": memberInfo.id\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET FABI ADMIN TYPES\n  /**\n   * This method is used to get all FABI admin types\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getFABIAdminTypes() {\n    let getAdminTypesURL = `${config.userManagementURL}/getAdminTypes`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getAdminTypesURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET DATABASE NAMES\n  /**\n   * This method is used to get all the database names from the database\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getDatabaseNames() {\n    let getDBNamesURL = `${config.databaseManagementURL}/getDBNames`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getDBNamesURL, options);\n  }\n\n  \n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE STAFF PASSWORD\n  /**\n   * This function is used to update the password of a user\n   * \n   * @param {string} oldPassword The old password of the user\n   * @param {string} newPassword The new password for the user\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateStaffPassword(oldPassword: string, newPassword: string) {\n    let updateStaffPasswordURL = `${config.userManagementURL}/updateStaffPassword`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"oldPass\": oldPassword,\n      \"newPass\": newPassword\n    }\n    \n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateStaffPasswordURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE ORGANIZATION MEMBER PASSWORD\n  /**\n   * This function is used to update the password of an organization member\n   * \n   * @param {string} oldPassword The old password of the user\n   * @param {string} newPassword The new password for the user\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateOrganizationMemberPassword(oldPassword: string, newPassword: string) {\n    let updateOrganizationMemberPasswordURL = `${config.userManagementURL}/updateOrgMemberPassword`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"oldPass\": oldPassword,\n      \"newPass\": newPassword,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateOrganizationMemberPasswordURL, options);\n  }\n\n  getFABIAdmins() {\n    let getFABIAdminURL = `${config.userManagementURL}/getAllFabiMembers`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getFABIAdminURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/POSTUser.html":{"url":"interfaces/POSTUser.html","title":"interface - POSTUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  POSTUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/notification-logging.service.ts\n        \n\n            \n                Description\n            \n            \n                //Object for defining the JSON object to be sent when requesting \nthe logs belonging to a member\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        userID\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userID\n                                    \n                                \n                                \n                                    \n                                        userID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport { AuthenticationService } from './authentication.service';\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllLogsURL = `${config.logsURL}/getLogs`;\nconst getUserLogsURL = `${config.logsURL}/getUserLogs`;\nconst updateUserLogsURL = `${config.logsURL}/deleteUserLogs`;\n\n///////////////////////////////////////////////////////////////////////\n//                           USER LOGS\n/**\n *  //Object for defining the JSON object containing the user logs\n *\n * @export\n * @interface UserLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface UserLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: USER\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The user on which the action was performed (their ID)\n  User: string;           //The user who performed the action (their ID)\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DATABSE MANAGEMENT LOGS\n/**\n *  //Object for defining the JSON object containing the database \n *  management logs\n *\n * @export\n * @interface DatabaseManagementLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DatabaseManagementLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: DBML (Database Management Log)\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The name of the database that the action was performed on\n  User: string;           //The user who performed the action\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;            //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ACCESS LOGS\n/**\n *  //Object for defining the JSON object containing the access logs\n *\n * @export\n * @interface AccessLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface AccessLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ACCL\n  Action: string;         //The action performed: ACCESS\n  Date: string;           //The date that the action was performed\n  Details: string;        //Description of what was accessed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ERROR LOGS\n/**\n *  //Object for defining the JSON object containing the error logs\n *\n * @export\n * @interface ErrorLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface ErrorLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ERRL\n  Date: string;           //The date that the action was performed\n  StatusCode: string;     //The status code of the error that occured\n  Details: string;        //Description of the error\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DIAGNOSTIC CLINIC LOGS\n/**\n *  //Object for defining the JSON object containing the diagnostic \n *  clinic logs\n *\n * @export\n * @interface DiagnosticClinicLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DiagnosticClinicLogs {\n  Type: string;           //The type of the log: DGCL\n  Date: string;           //The date that the action was performed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                              POST LOG\n/**\n *  //Object for defining the JSON object for posting log requests\n *\n * @export\n * @interface POSTLog\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTLog {\n  Log: Logs;              //The array of logs to post to the API service\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               LOGS\n/**\n *  //Object for defining the JSON object for the logs\n *\n * @export\n * @interface Logs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface Logs {\n  type: string;           //The type of the log\n  before: string;         //The before date\n  after: string;          //The after date\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST USER\n/**\n *  //Object for defining the JSON object to be sent when requesting \n *  the logs belonging to a member\n *\n * @export\n * @interface POSTUser\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUser {\n  userID: string;         //The ID of the user\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST UPDATE\n/**\n *  //Object for defining the JSON object to be sent when updating \n *  to logs belonging to a user\n *\n * @export\n * @interface POSTUpdate\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUpdate {\n  userID: string;         //The ID of the user\n  logIDs: string[];       //The logs to be removed from the user's profile\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class NotificationLoggingService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of NotificationLoggingService.\n  * \n  * @param {HttpClient} http For making calls to the API\n  * \n  * @memberof NotificationLoggingService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       GET ALL USER LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'USER'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllUserLogs() {\n    var tempLog: Logs = { type: 'USER', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                 GET ALL DATABASE MANAGEMENT LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'DBML'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllDatabaseManagementLogs() {\n    var tempLog: Logs = { type: 'DBML', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL ACCESS LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ACCL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllAccessLogs() {\n    var tempLog: Logs = { type: 'ACCL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GET ALL ERROR LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ERRL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllErrorLogs() {\n    var tempLog: Logs = { type: 'ERRL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET USER LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs for a specific user.\n   *\n   * @param {string} userID The id number of the user whose logs need to be feteched for the notifications.\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserLogs(id: string) {\n    var data: POSTUser = { userID: id };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getUserLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE FABI MEMBER NOTIFICATIONS\n  /**\n   * Method that sends a request to the API to update the notifications associated with a specific user.\n   * \n   * @param {string} id The ID of the user whose notifications need to be updated\n   * @param {string[]} notifications The notifications to be removed from the user's profile\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateFABIMemberNotifications(id: string, notifications: string[]) {\n    var postData: POSTUpdate = { userID: id, logIDs: notifications };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', updateUserLogsURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PageNotFoundComponent.html":{"url":"components/PageNotFoundComponent.html","title":"component - PageNotFoundComponent","body":"\n                   \n\n\n\n\n\n  Components\n  PageNotFoundComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/page-not-found/page-not-found.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-page-not-found\n            \n\n            \n                styleUrls\n                ./page-not-found.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./page-not-found.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/page-not-found/page-not-found.component.ts:8\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/page-not-found/page-not-found.component.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-page-not-found',\n  templateUrl: './page-not-found.component.html',\n  styleUrls: ['./page-not-found.component.scss']\n})\nexport class PageNotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n\t\n\t\t.st0 {\n\t\t\tfill: #DEF1F5;\n\t\t}\n\n\t\t.st1 {\n\t\t\tfill: #D9DDD8;\n\t\t}\n\n\t\t.st2 {\n\t\t\tfill: none;\n\t\t}\n\n\t\t.st3 {\n\t\t\tfill: #7FAA51;\n\t\t}\n\n\t\t.st4 {\n\t\t\tfont-family: 'Montserrat-Regular';\n\t\t}\n\n\t\t.st5 {\n\t\t\tfont-size: 288.8463px;\n\t\t}\n\n\t\t.st6 {\n\t\t\tfill: #AEB0AD;\n\t\t}\n\n\t\t.st7 {\n\t\t\topacity: 0.5;\n\t\t\tfill: #61AD8F;\n\t\t}\n\n\t\t.st8 {\n\t\t\tfill: none;\n\t\t\tstroke: #2C4D40;\n\t\t\tstroke-miterlimit: 10;\n\t\t}\n\n\t\t.st9 {\n\t\t\tfill: #4A7261;\n\t\t}\n\n\t\t.st10 {\n\t\t\topacity: 0.6;\n\t\t\tfill: #4A7261;\n\t\t}\n\n\t\t.st11 {\n\t\t\topacity: 0.5;\n\t\t\tfill: #4A7261;\n\t\t}\n\n\t\t.st12 {\n\t\t\topacity: 0.7;\n\t\t\tfill: #4A7261;\n\t\t}\n\n\t\t.st13 {\n\t\t\topacity: 0.8;\n\t\t\tfill: #4A7261;\n\t\t}\n\n\t\t.st14 {\n\t\t\tfill: #E5F1D9;\n\t\t}\n\n\t\t.st15 {\n\t\t\topacity: 0.1;\n\t\t\tfill: none;\n\t\t\tstroke: #6A6D64;\n\t\t\tstroke-width: 28;\n\t\t\tstroke-miterlimit: 10;\n\t\t}\n\n\t\t.st16 {\n\t\t\tfont-size: 36px;\n\t\t}\n\n\t\t.st17 {\n\t\t\tfont-family: 'Roboto-Regular';\n\t\t}\n\n\t\t.st18 {\n\t\t\tfont-size: 14px;\n\t\t}\n\t\n\t\n\t\n\t\n\t404\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\tWoops, the page you’re \n\t\tlooking for isn’t here ... \n\t\n\tWe can’t find the page you want\n\n    \n\n    \n                \n                    ./page-not-found.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t\t\t.st0 {\t\t\tfill: #DEF1F5;\t\t}\t\t.st1 {\t\t\tfill: #D9DDD8;\t\t}\t\t.st2 {\t\t\tfill: none;\t\t}\t\t.st3 {\t\t\tfill: #7FAA51;\t\t}\t\t.st4 {\t\t\tfont-family: \\'Montserrat-Regular\\';\t\t}\t\t.st5 {\t\t\tfont-size: 288.8463px;\t\t}\t\t.st6 {\t\t\tfill: #AEB0AD;\t\t}\t\t.st7 {\t\t\topacity: 0.5;\t\t\tfill: #61AD8F;\t\t}\t\t.st8 {\t\t\tfill: none;\t\t\tstroke: #2C4D40;\t\t\tstroke-miterlimit: 10;\t\t}\t\t.st9 {\t\t\tfill: #4A7261;\t\t}\t\t.st10 {\t\t\topacity: 0.6;\t\t\tfill: #4A7261;\t\t}\t\t.st11 {\t\t\topacity: 0.5;\t\t\tfill: #4A7261;\t\t}\t\t.st12 {\t\t\topacity: 0.7;\t\t\tfill: #4A7261;\t\t}\t\t.st13 {\t\t\topacity: 0.8;\t\t\tfill: #4A7261;\t\t}\t\t.st14 {\t\t\tfill: #E5F1D9;\t\t}\t\t.st15 {\t\t\topacity: 0.1;\t\t\tfill: none;\t\t\tstroke: #6A6D64;\t\t\tstroke-width: 28;\t\t\tstroke-miterlimit: 10;\t\t}\t\t.st16 {\t\t\tfont-size: 36px;\t\t}\t\t.st17 {\t\t\tfont-family: \\'Roboto-Regular\\';\t\t}\t\t.st18 {\t\t\tfont-size: 14px;\t\t}\t\t\t\t\t404\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWoops, the page you’re \t\tlooking for isn’t here ... \t\tWe can’t find the page you want'\n    var COMPONENTS = [{'name': 'AdminDivComponent', 'selector': 'app-admin-div'},{'name': 'AdminHelpComponent', 'selector': 'app-admin-help'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DatabaseHandlerComponent', 'selector': 'app-database-handler'},{'name': 'ErrorComponent', 'selector': 'app-error'},{'name': 'MemberHelpComponent', 'selector': 'app-member-help'},{'name': 'MemberSubmitSampleComponent', 'selector': 'app-member-submit-sample'},{'name': 'NotificationDivComponent', 'selector': 'app-notification-div'},{'name': 'OrganizationHelpComponent', 'selector': 'app-organization-help'},{'name': 'OrganizationMenuComponent', 'selector': 'app-organization-menu'},{'name': 'OrganizationSubmitSampleComponent', 'selector': 'app-organization-submit-sample'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'SampleDivComponent', 'selector': 'app-sample-div'},{'name': 'SampleFormComponent', 'selector': 'app-sample-form'},{'name': 'StaffDivComponent', 'selector': 'app-staff-div'},{'name': 'StaffHelpComponent', 'selector': 'app-staff-help'},{'name': 'StaffMenuComponent', 'selector': 'app-staff-menu'},{'name': 'StaffSubmitSampleComponent', 'selector': 'app-staff-submit-sample'},{'name': 'StaffViewDatabasesComponent', 'selector': 'app-staff-view-databases'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PageNotFoundComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Porting.html":{"url":"injectables/Porting.html","title":"injectable - Porting","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  Porting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/porting.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                JSONfile\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                convertToJSON\n                            \n                            \n                                extractDatabase\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/_services/porting.service.ts:29\n                            \n                        \n\n                \n                    \n                            Creates an instance of Porting.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            convertToJSON\n                        \n                        \n                    \n                \n            \n            \n                \nconvertToJSON(text)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/porting.service.ts:52\n                \n            \n\n\n            \n                \n                    This function is used to convert the text sent from the file into JSON\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    text\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The file to be converted to a database and stored\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            extractDatabase\n                        \n                        \n                    \n                \n            \n            \n                \nextractDatabase(dbJSON, dbName: String)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_services/porting.service.ts:88\n                \n            \n\n\n            \n                \n                    This function is used to perform reverse porting\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dbJSON\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    dbName\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the database to be downloaded\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        API response \n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            JSONfile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/_services/porting.service.ts:29\n                            \n                        \n\n                \n                    \n                        Holds the CSV file as a JSONfile - @type {any} \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Component, Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class Porting{\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n   /** Holds the CSV file as a JSONfile - @type {any} */\n   JSONfile : any = null;   \n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of Porting.\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    constructor(){}    \n\n \n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            CONVERT TO JSON\n  /**\n   *  This function is used to convert the text sent from the file into JSON\n   * \n   *  @param {string} text The file to be converted to a database and stored\n   * \n   *  @returns API response @type any\n   * \n   *  @memberof Porting\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    convertToJSON(text){\n        if(text == \"\"){\n            return null;\n        }\n        var lines = text.split(\"\\n\");\n        var result = [];\n        var headers = lines[0].split(\";\");\n\n        for (var i = 1; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PreDiagnosisComponent.html":{"url":"classes/PreDiagnosisComponent.html","title":"class - PreDiagnosisComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PreDiagnosisComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/pre-diagnosis/pre-diagnosis.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                diagnosis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pre-diagnosis/pre-diagnosis.component.ts:30\n                            \n                        \n\n                \n                    \n                            Creates an instance of PreDiagnosisComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            diagnosis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pre-diagnosis/pre-diagnosis.component.ts:30\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pre-diagnosis/pre-diagnosis.component.ts:56\n                \n            \n\n\n            \n                \n                    This function is called when the page loads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\n\n@core.Component({\n  selector: 'app-pre-diagnosis',\n  templateUrl: './pre-diagnosis.component.html',\n  styleUrls: ['./pre-diagnosis.component.scss']\n})\nexport class PreDiagnosisComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  diagnosis: string;\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n   * Creates an instance of PreDiagnosisComponent.\n   * \n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * \n   * @memberof PreDiagnosisComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private authService: AuthenticationService,\n    // @Inject(MAT_DIALOG_DATA) public diagnosis: any\n  ) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @memberof PreDiagnosisComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    if (!localStorage.getItem('pre-diagnosis')) {\n      this.diagnosis = 'A pre-diagnosis could not be generated based on your sample form data.'\n    }\n    else {\n      this.diagnosis = localStorage.getItem('pre-diagnosis');\n      // localStorage.removeItem('pre-diagnosis');\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrivilegeTypes.html":{"url":"interfaces/PrivilegeTypes.html","title":"interface - PrivilegeTypes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PrivilegeTypes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_interfaces/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Defines a PrivilegeTypes object\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        create\n                                \n                                \n                                        delete\n                                \n                                \n                                        retrieve\n                                \n                                \n                                        update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                    \n                                \n                                \n                                    \n                                        create:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        delete:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        retrieve\n                                    \n                                \n                                \n                                    \n                                        retrieve:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                    \n                                \n                                \n                                    \n                                        update:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Organisation {\n  ID?: string;                                //The id of Organisation \n  orgName: string;                            //The name of Organisation\n  admin?: OrganisationAdmin;                  //The admin of Organisation\n}\n\n\n/////////////////////////////////////////////////////\n//              ORGANIZATION ADMIN\n/**\n * Defines an Admin of an Organisation\n *\n * @export\n * @interface OrganisationAdmin\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationAdmin {\n  fname: string;                              //The first name of Admin\n  surname: string;                            //The surname of Admin\n  email: string;                              //The email of Admin\n  phone?: number;                             //The phone number of Admin\n  password?: string;                          //The passsword of Admin\n}\n\n\n/////////////////////////////////////////////////////\n//            ORGANIZATION MEMBER\n/**\n * Defines a Organisation's Member object\n *\n * @export\n * @interface MemberInfo\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationMember {\n  id?: string,                                  //The id of the Member\n  fname: string,                                //The first name of Member\n  surname: string,                              //The surname of Member\n  email: string,                                //The email of Member\n  phone?: number;                               //The phone number of Member\n  password?: string                             //The password of Member\n}\n\n\n/////////////////////////////////////////////////////\n//                  USER TYPE\n/**\n * Defines a User Type object\n *\n * @export\n * @interface UserType\n */\n/////////////////////////////////////////////////////\nexport interface UserType {\n  ID: number;                                 //The id of the User Type\n  Name: string;                               //The name of the User Type\n}\n\n\n/////////////////////////////////////////////////////\n//                LOGIN INFO\n/**\n * Defines the User's Login Information\n *\n * @export\n * @interface LoginInfo\n */\n/////////////////////////////////////////////////////\nexport interface LoginInfo {\n  orgName: string;                            //The organization fo teh user currently logged in\n  email: string;                              //The email of the suer currently logged in\n  password: string;                           //The password of the user currently logged in\n}\n\n\n/////////////////////////////////////////////////////\n//                 STAFF INFO\n/**\n * Defines a FABI Staff Member object\n *\n * @export\n * @interface StaffInfo\n */\n/////////////////////////////////////////////////////\nexport interface StaffInfo {\n  ID?: number,                                  //The id number of the staff member\n  fname: string                                 //The first name of the staff member\n  surname: string,                              //The surname of the staff member\n  email: string,                                //The email address fo the staff member\n  phone?: number,                               //The phone number of the staff member\n  position?: string,                            //The positions of the staff member\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            DATABASE PRIVILEGE\n/**\n * Defines a DatabasePrivilege object\n *\n * @export\n * @interface DatabasePrivilege\n */\n/////////////////////////////////////////////////////\nexport interface DatabasePrivilege {\n  name: string,                                 //The database's name\n  privileges: string[]                          //The privileges for the database                          \n}\n\n\n/////////////////////////////////////////////////////\n//                PRIVILEGE TYPES\n/**\n * Defines a PrivilegeTypes object\n *\n * @export\n * @interface PrivilegeTypes\n */\n/////////////////////////////////////////////////////\nexport interface PrivilegeTypes {\n  create: boolean,                              //The create privilege\n  retrieve: boolean,                            //The retrieve privilege\n  update: boolean,                              //The update privilege\n  delete: boolean                               //The delete privilege\n}\n\n\n/////////////////////////////////////////////////////\n//              USER'S PRIVILEGES\n/**\n * Defines a UserPrivileges object\n *\n * @export\n * @interface UserPrivileges\n */\n/////////////////////////////////////////////////////\nexport interface UserPrivileges {\n  databases?: DatabasePrivilege[]               //The database privileges for a database\n}\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            CONFIRM (for confirm pop-up)\n/**\n * Defines a Confirm object\n *\n * @export\n * @interface Confirm\n */\n/////////////////////////////////////////////////////\nexport interface Confirm {\n  title: string,                                //The confirm title\n  message: string,                              //The confirm message\n  info: string,                                 //The confirm information\n  cancel: string,                               //If it has been canceled or not\n  confirm: string                               //If it has been confirmed or not\n}\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  SAMPLE FORM\n/**\n * Defines a SampleFormData object\n *\n * @export\n * @interface SampleFormData\n */\n/////////////////////////////////////////////////////\nexport interface SampleFormData {\n  // Sample Details\n  sample_details: {\n    plant_species: string,                 //The species of the sample\n    plant_genus: string                    //The genus of the sample\n    num_samples: number,                   //The number of samples\n    date_collected: Date,                  //The date that the sample was collected\n    date_sent: Date,                       //The date that the sample was sent\n  }\n\n  // Plantation Details\n  plantation_details: {\n    street: string,                        //The street name\n    area: string,                          //The area\n    city: string,                          //The city \n    farm: string,                          //The farm name\n    province: string,                      //The province\n    gps: string,                           //Sample GPS coordinates\n  }\n\n  // Type of Sample\n  types: string[],\n  // types: {\n  //   soil: boolean,                     //Soil sample type\n  //   stems: boolean,                    //Stems sample type\n  //   roots: boolean,                    //Roots sample type\n  //   twigs: boolean,                    //Twigs sample type\n  //   leaves: boolean,                   //Leaves sample type\n  //   seedlings: boolean,                //Seedlings sample type\n  //   media: boolean,                    //Media sample type\n  //   water: boolean,                    //Water sample type\n  //   insect: boolean,                   //Insect sample type\n  //   nuts: boolean,                     //Nuts sample type\n  //   other: boolean,                    //Other type of sample (if any)\n  // }\n\n  // Symptoms\n  symptoms: {\n    wilt: boolean,                         //Wilt symptom\n    stunting: boolean,                     //Stunting symptom\n    leafspot: boolean,                     //Leafspot symptom\n    rootrot: boolean,                      //Rootrot symptom\n    dieback: boolean,                      //Dieback symptom\n    cankers: boolean,                      //Cankers symptom \n    death: boolean,                        //Death symptom \n    wood: boolean,                         //Wood symptom\n    other: boolean,                        //Other symptoms (if any)\n  }\n\n  // Distribution of Symptoms\n  distribution: {\n    localized: boolean,               //The localized distribution\n    scattered: boolean,                //The scattered distribution\n    general: boolean,                  //The general distribution\n    clumps: boolean,                   //The clumps distribution\n    na: boolean,                       //The na distribution\n    other: boolean,                    //Other distributions (if any)\n    percentage_plants_affected: number,           //The percentage of plants affected\n  }\n\n  // Conditons\n  conditions: {\n    date_problem_noticed: Date,        //The date the problem was noticed\n    date_planted: Date,                //The date the plants were planted\n    weather_disturbances: string,      //The weather disturbances\n    weather_prior: string,             //The weather conditions prior\n    others: string,                    //Other weather conditions (if any)\n    additional?: string                 //Additional weather conditions (if any)\n  }\n\n  // Permissions\n  permissions: {\n    landowner_name: string,                       //The landowner's name\n    permission_granted: boolean                   //Whether or not the landowner has granted permission\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  LOCATION\n/**\n * Defines a Location object\n *\n * @export\n * @interface Location\n */\n/////////////////////////////////////////////////////\nexport interface Location {\n  latitude: number,                             //The latitude of the location\n  longitude: number                             //The longitude of the location\n}\n\n\n/////////////////////////////////////////////////////\n//                     ADDRESS\n/**\n * Defines a Address object\n *\n * @export\n * @interface Address\n */\n/////////////////////////////////////////////////////\nexport interface Address {\n  street_number?: number,                       //The street number of the address (if any)\n  street: string,                               //The street name of the address\n  estate?: string,                              //The estate of the address (if any)\n  area?: string,                                //The area of the address (if any)\n  city: string,                                 //The city of the address\n  province: string,                             //The province of the address\n  country: string,                              //The country of the address\n  postal_code?: string,                         //The postal code of the address (if any)\n  formatted_address: string                     //The formatted address\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProcessedForm.html":{"url":"interfaces/ProcessedForm.html","title":"interface - ProcessedForm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ProcessedForm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/culture-collection-api.service.ts\n        \n\n            \n                Description\n            \n            \n                Object for defining the processed deposit form values\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        agarSlants\n                                \n                                \n                                        c18\n                                \n                                \n                                        cultureCollectionNumber\n                                \n                                \n                                        dateOfCollectionValidation\n                                \n                                \n                                        dateSubmittedProcessedForm\n                                \n                                \n                                        freeze\n                                \n                                \n                                        freezeDried\n                                \n                                \n                                        microscopeSlides\n                                \n                                \n                                        oil\n                                \n                                \n                                        roomTemperature\n                                \n                                \n                                        statusOfCulture\n                                \n                                \n                                        userID\n                                \n                                \n                                        water\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        agarSlants\n                                    \n                                \n                                \n                                    \n                                        agarSlants:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        c18\n                                    \n                                \n                                \n                                    \n                                        c18:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cultureCollectionNumber\n                                    \n                                \n                                \n                                    \n                                        cultureCollectionNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateOfCollectionValidation\n                                    \n                                \n                                \n                                    \n                                        dateOfCollectionValidation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateSubmittedProcessedForm\n                                    \n                                \n                                \n                                    \n                                        dateSubmittedProcessedForm:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        freeze\n                                    \n                                \n                                \n                                    \n                                        freeze:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        freezeDried\n                                    \n                                \n                                \n                                    \n                                        freezeDried:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        microscopeSlides\n                                    \n                                \n                                \n                                    \n                                        microscopeSlides:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oil\n                                    \n                                \n                                \n                                    \n                                        oil:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roomTemperature\n                                    \n                                \n                                \n                                    \n                                        roomTemperature:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusOfCulture\n                                    \n                                \n                                \n                                    \n                                        statusOfCulture:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userID\n                                    \n                                \n                                \n                                    \n                                        userID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        water\n                                    \n                                \n                                \n                                    \n                                        water:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as http from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport { AuthenticationService } from './authentication.service';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getRequestLogsURL = `${config.cultureClinicURL}/getAllRequestForms`;\nconst getDepositLogsURL = `${config.cultureClinicURL}/getAllDepositForms`;\nconst getRevitalizationLogsURL = `${config.cultureClinicURL}/getAllRevitalizationForms`;\nconst getProcessedLogsURL = `${config.cultureClinicURL}/getAllProcessingForms`;\nconst submitCMWDepositFormURL = `${config.cultureClinicURL}/submitCMWDepositForm`;\nconst submitCMWRequestFormURL = `${config.cultureClinicURL}/submitCMWRequestForm`;\nconst submitCMWRevitalizationFormURL = `${config.cultureClinicURL}/submitCMWRevitalizationForm`;\nconst submitProcessedFormURL = `${config.cultureClinicURL}/submitCMWProcessingForm`;\nconst updateDepositFormStatusURL = `${config.cultureClinicURL}/updateDepositStatus`;\nconst deleteDepositFormURL = `${config.cultureClinicURL}/deleteCMWDepositForm`;\nconst deleteRequestFormURL = `${config.cultureClinicURL}/deleteCMWRequestForm`;\nconst deleteRevitalizationFormURL = `${config.cultureClinicURL}/deleteCMWRevitalizationForm`;\nconst deleteProcessedFormURL = `${config.cultureClinicURL}/deleteCMWProcessingForm`;\n\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW DEPOSIT\n/**\n *  Object for defining the CMW deposit form values\n *\n * @export\n * @interface CMWDeposit\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWDeposit {\n  userID: string;                         //The user id of the user submitting the form\n  cmwCultureNumber: string;               //The culture number\n  genus: string;                          //The genus of the culture\n  epitheton: string;                      //The epitheton of the culture\n  personalCollectionNumber: string;       //The personal collection number (if any)\n  internationalCollectionNumber: string;  //The international collection number (if any)\n  herbariumNumber: string;                //The herbarium number of the culture\n  otherFABICollections: string;           //Indicates if there are currently any other collections\n  name: string;                           //The name of the culture\n  typeStatus: string;                     //The type status of the culture\n  host: string;                           //The host of the culture\n  vector: string;                         //The vector of the culture\n  substrate: string;                      //The substrate of the culture\n  continent: string;                      //The continent where the culture originated from\n  country: string;                        //The country where the culture originated from\n  region: string;                         //The region where the culture originated from\n  locality: string;                       //The locality of the culture\n  gps: string;                            //The GPS coordinates of where the culture originated from\n  collectedBy: string;                    //The user who collected the culture\n  dateCollected: string;                  //The date that the culture was collected\n  isolatedBy: string;                     //The user who isolated the culture\n  identifiedBy: string;                   //The user who identified the culture\n  donatedBy: string;                      //The user who donated the culture (if any)\n  additionalNotes: string;                //Any additional notes (if any)\n  dateSubmitted: string;                  //The date that the form was submitted\n  formID: string;                         //The id number for the actual form\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW REQUEST\n/**\n *  Object for defining the CMW request form values\n *\n * @export\n * @interface CMWRequest\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWRequest {\n  userID: string;                         //The user id of the user submitting the form\n  requestor: string;                      //The user who is requesting the culture\n  taxonName: string;                      //The taxon name of the culture\n  cultureNumber: string;                  //The culture number\n  dateRequested: string;                  //The date that the culture is requested for\n  referenceNumber: string;                //The reference number\n  notes: string;                          //Any notes (if any)\n  dateSubmitted: string;                  //The date that the form was submitted\n}\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW REVILIZATION\n/**\n * Object for defining the CMW revitalization form values\n *\n * @export\n * @interface CMWRevitalization\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWRevitalization {\n  userID: string;                         //The user id of the user submitting the form\n  requestor: string;                      //The user who is requesting the culture\n  currentName: string;                    //The current name of the culture\n  nameBionumerics: string;                //The bionumeric name of the culture\n  cultureNumber: string;                  //The culture number\n  cultureCondition: string;               //The condition of the culture\n  sequenceDateSubmitted: string;          //The sequence date submitted (if any)\n  referenceNumber: string;                //The reference number\n  dateRequested: string;                  //The date that the culture is requested\n  dateReturned: string;                   //The date that the culture was returned\n  dateSubmitted: string;                  //The date that the form was submitted\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            PROCESSED FORM\n/**\n * Object for defining the processed deposit form values\n *\n * @export\n * @interface ProcessedForm\n */\n///////////////////////////////////////////////////////////////////////\nexport interface ProcessedForm {\n  userID: string;                         //The user id of the user submitting the form\n  statusOfCulture: string;               //The status of the culture for the processed form\n  agarSlants: string;                     //The agar slants for the processed form\n  water: string;                          //The water for the processed form\n  oil: string;                            //The oil for the processed form\n  roomTemperature: string;                //The room temperature for the processed form\n  c18: string;                            //The c18 for the processed form\n  freezeDried: string;                    //The freezed dried for the processed form\n  freeze: string;                         //The freeze for the processed form\n  dateOfCollectionValidation: string;     //The date of collection validation for the processed form\n  microscopeSlides: string;               //The microscope slides for the processed form\n  dateSubmittedProcessedForm: string;     //The date submitted for the processed form\n  cultureCollectionNumber: string;        //The culture collection number for the processed form\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                          UPDATED DEPOSIT FORM\n/**\n * Object for defining the object for updating the status of a deposit form\n *\n * @export\n * @interface UpdateDepositForm\n */\n///////////////////////////////////////////////////////////////////////\nexport interface UpdateDepositForm {\n  userID: string;                         //The user id off the user submitting the form\n  status: string;                         //The new status of the deposit form\n  formID: string;                         //The id of the form to be updated\n}\n\n\n/**\n * Used to handled all `culture collection` requests and functions\n *\n * @export\n * @class CultureCollectionAPIService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CultureCollectionAPIService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of CultureCollectionAPIService.\n  * \n  * @param {http.HttpClient} http for making http calls to the API\n  * @param {AuthenticationService} authService for calling the *authentication* service\n  * @memberof CultureCollectionAPIService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: http.HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL REQUEST LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'REQUEST'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllRequestLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getRequestLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL DEPOSIT LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'DEPOSIT'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllDepositLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getDepositLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL REVITALIZATION LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'REVITALIZATION'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllRevitalizationLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getRevitalizationLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL PROCESSED LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'PROCESSED'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllProcessedLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getProcessedLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      SUBMIT CMW DEPOSIT FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW deposit form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWDepositForm(data: CMWDeposit) {\n    const options = {\n      method: 'POST',\n      url: submitCMWDepositFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWDepositFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT CMW REQUEST FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW request form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWRequestForm(data: CMWRequest) {\n    const options = {\n      headers: new http.HttpHeaders({\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      }),\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWRequestFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT CMW REVITALIZATION FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW revitalization form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWRevitalizationForm(data: CMWRevitalization) {\n    const options = {\n      method: 'POST',\n      url: submitCMWRevitalizationFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWRevitalizationFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT PROCESSED FORM \n  /**\n   *    This function sends a POST request to the server to submit a process form for a deposit form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitProcessedForm(data: ProcessedForm) {\n    const options = {\n      method: 'POST',\n      url: submitProcessedFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitProcessedFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE DEPOSIT FORM STATUS \n  /**\n   *    This function is used to update the status of a deposit form to 'processed'.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateDepositFormStatus(data: UpdateDepositForm) {\n    const options = {\n      method: 'POST',\n      url: updateDepositFormStatusURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateDepositFormStatusURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE DEPOSIT FORM \n  /**\n   *    This function is used to delete a deposit form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteDepositForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteDepositFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteDepositFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE REQUEST FORM \n  /**\n   *    This function is used to delete a request form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteRequestForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteRequestFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteRequestFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE REVITALIZATION FORM \n  /**\n   *    This function is used to delete a revitalization form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteRevitalizationForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteRevitalizationFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteRevitalizationFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE PROCESSED FORM \n  /**\n   *    This function is used to delete a processed form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteProcessedForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteProcessedFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteProcessedFormURL, options);\n  }\n\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sample.html":{"url":"interfaces/Sample.html","title":"interface - Sample","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Sample\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/diagnostic-clinic-api.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        orgName\n                                \n                                \n                                        referenceNumber\n                                \n                                \n                                        status\n                                \n                                \n                                        userID\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         Species\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Species\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        orgName\n                                    \n                                \n                                \n                                    \n                                        orgName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        referenceNumber\n                                    \n                                \n                                \n                                    \n                                        referenceNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userID\n                                    \n                                \n                                \n                                    \n                                        userID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as http from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport * as Interface from \"../_interfaces/interfaces\";\nimport { AuthenticationService } from \"./authentication.service\";\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllSamplesForMemberURL = `${config.diagnosticClinicURL}/retrieveSamplesForMember`;\n\n//Object for defining the JSON object to be sent when requesting the samples of a specific member\nexport interface POSTMember{\n  userID: string;                         //The user id of the user to be submitted\n}\n\n//Object for defining the samples received from the API call\nexport interface Sample{\n  userID: string;                         //The id of the user who submitted the sample\n  orgName: string;                        //The organization that the user belongs to\n  status: string;                         //The status of the sample\n  referenceNumber: string;                //The reference number that was generated for the sample\n  data: Species;                          //The data within the sample which is the species\n}\n\nexport interface Species{\n  species: string;                        //The species of a sample\n}\n\n\n/**\n * Used for handling all `diagnostic clinic` requests and functions\n *\n * @export\n * @class DiagnosticClinicAPIService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DiagnosticClinicAPIService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of DiagnosticClinicAPIService.\n   * \n   * @param {http.HttpClient} http For making calls to the API\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: http.HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET ALL SAMPLES \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the samples that FABI is currently processing\n   *\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllSamples() {\n    const getAllSamplesURL = `${config.diagnosticClinicURL}/retrieveAllSamples`;\n    const method = \"POST\";\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request(method, getAllSamplesURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     GET SAMPLES FOR FABI STAFF \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the samples corresponding to a specific user.\n   *\n   * @param {string} id The id number of the user whose samples need to be fetched.\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getSamplesForFABIStaff(id: string) {\n    const data: POSTMember = { userID: id };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllSamplesForMemberURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    RETREIVE ALL SAMPLES\n  /**\n   * Method that sends a request to the API to retreive all Samples\n   *\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  retrieveAllOrganizationSamples() {\n    let retrieveAllOrgSamples = `${config.diagnosticClinicURL}/retrieveAllOrgSamples`;\n    let method = 'POST';\n\n    const postData = {\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, retrieveAllOrgSamples, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    RETREIVE ALL SAMPLES FOR MEMBER\n  /**\n   * Method that sends a request to the API to retreive all Samples for a member\n   *\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  retrieveMemberSamples() {\n    let retrieveAllMemberSamples = `${config.diagnosticClinicURL}/retrieveSamplesForMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"userID\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, retrieveAllMemberSamples, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        SUBMIT SAMPLE FORM\n  /**\n   * Method that send a request to the API to submit a specifc Sample Form\n   *\n   * @param {Interface.SampleFormData} formDetails The details of the sample to be submitted\n   * @returns API response @type any\n   * \n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitSampleForm(formDetails: Interface.SampleFormData) {\n\n    let tempDetails = {\n      \"Location\": \"harding\",\n      \"Province\": \"Gauteng\",\n      \"Genus\": \"eucalyptus\",\n      \"Species\": \"radiata\",\n      \"SampleType\": \"root\",\n      \"Asym_Dis\": \"D\",\n      \"NurseryField\": \"F\",\n      \"Roots\": \"dry\",\n      \"Root-Collar\": \"Wilted, abitDry\",\n      \"Stem\": \"Girdled\",\n      \"GrowthTip\": \"Swelling\",\n      \"Needles-Leaves\": \"healthy\"\n    }\n\n    let submitSampleURL = `${config.diagnosticClinicURL}/submitSample`;\n    let method = 'POST';\n\n    const postData = {\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation,\n      \"userID\": this.authService.getCurrentSessionValue.user.ID,\n      \"data\": tempDetails\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, submitSampleURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        RETRIEVE SAMPLE DETAILS\n  /**\n   * This function is used to fetch a specific sample form\n   *\n   * @param {string} sampleRefNum The reference number of the sample to be retrieved\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  retrieveSampleDetails(sampleRefNum: string) {\n    let retreiveSampleDetailsURL = `${config.diagnosticClinicURL}/retrieveSample`;\n    let method = 'POST';\n\n    const postData = {\n      \"refNum\": sampleRefNum\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, retreiveSampleDetailsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        UPDATE SAMPLE STATUS\n  /**\n   * Method used to update the status of the sample\n   *\n   * @param {*} sample\n   * @param {string} status\n   * @returns\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateSamplesStatus(sample: any, status: string) {\n\n    let updateSampleStatusURL = `${config.diagnosticClinicURL}/updateSampleStatus`;\n    let method = 'POST';\n\n    const postData = {\n      \"refNum\": sample.referenceNumber,\n      \"status\": status\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateSampleStatusURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SampleDivComponent.html":{"url":"components/SampleDivComponent.html","title":"component - SampleDivComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SampleDivComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/Dynamic-Components/sample-div/sample-div.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-sample-div\n            \n\n            \n                styleUrls\n                ./sample-div.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./sample-div.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                Details\n                            \n                            \n                                Number\n                            \n                            \n                                Status\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/Dynamic-Components/sample-div/sample-div.component.ts:12\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        Details\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/Dynamic-Components/sample-div/sample-div.component.ts:12\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Number\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/Dynamic-Components/sample-div/sample-div.component.ts:10\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/Dynamic-Components/sample-div/sample-div.component.ts:11\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Dynamic-Components/sample-div/sample-div.component.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-sample-div',\n  templateUrl: './sample-div.component.html',\n  styleUrls: ['./sample-div.component.scss']\n})\nexport class SampleDivComponent implements OnInit {\n\n  @Input() Number: string;          //The number of the sample\n  @Input() Status: string;          //Status of the sample\n  @Input() Details: string;         //Details of the sample\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n  {{Number}}\n  {{Status}}\n  {{Details}}\n\n    \n\n    \n                \n                    ./sample-div.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{Number}}  {{Status}}  {{Details}}'\n    var COMPONENTS = [{'name': 'AdminDivComponent', 'selector': 'app-admin-div'},{'name': 'AdminHelpComponent', 'selector': 'app-admin-help'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DatabaseHandlerComponent', 'selector': 'app-database-handler'},{'name': 'ErrorComponent', 'selector': 'app-error'},{'name': 'MemberHelpComponent', 'selector': 'app-member-help'},{'name': 'MemberSubmitSampleComponent', 'selector': 'app-member-submit-sample'},{'name': 'NotificationDivComponent', 'selector': 'app-notification-div'},{'name': 'OrganizationHelpComponent', 'selector': 'app-organization-help'},{'name': 'OrganizationMenuComponent', 'selector': 'app-organization-menu'},{'name': 'OrganizationSubmitSampleComponent', 'selector': 'app-organization-submit-sample'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'SampleDivComponent', 'selector': 'app-sample-div'},{'name': 'SampleFormComponent', 'selector': 'app-sample-form'},{'name': 'StaffDivComponent', 'selector': 'app-staff-div'},{'name': 'StaffHelpComponent', 'selector': 'app-staff-help'},{'name': 'StaffMenuComponent', 'selector': 'app-staff-menu'},{'name': 'StaffSubmitSampleComponent', 'selector': 'app-staff-submit-sample'},{'name': 'StaffViewDatabasesComponent', 'selector': 'app-staff-view-databases'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SampleDivComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SampleFormData.html":{"url":"interfaces/SampleFormData.html","title":"interface - SampleFormData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SampleFormData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_interfaces/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Defines a SampleFormData object\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        conditions\n                                \n                                \n                                        distribution\n                                \n                                \n                                        permissions\n                                \n                                \n                                        plantation_details\n                                \n                                \n                                        sample_details\n                                \n                                \n                                        symptoms\n                                \n                                \n                                        types\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        conditions\n                                    \n                                \n                                \n                                    \n                                        conditions:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        distribution\n                                    \n                                \n                                \n                                    \n                                        distribution:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        permissions\n                                    \n                                \n                                \n                                    \n                                        permissions:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        plantation_details\n                                    \n                                \n                                \n                                    \n                                        plantation_details:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sample_details\n                                    \n                                \n                                \n                                    \n                                        sample_details:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        symptoms\n                                    \n                                \n                                \n                                    \n                                        symptoms:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        types\n                                    \n                                \n                                \n                                    \n                                        types:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Organisation {\n  ID?: string;                                //The id of Organisation \n  orgName: string;                            //The name of Organisation\n  admin?: OrganisationAdmin;                  //The admin of Organisation\n}\n\n\n/////////////////////////////////////////////////////\n//              ORGANIZATION ADMIN\n/**\n * Defines an Admin of an Organisation\n *\n * @export\n * @interface OrganisationAdmin\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationAdmin {\n  fname: string;                              //The first name of Admin\n  surname: string;                            //The surname of Admin\n  email: string;                              //The email of Admin\n  phone?: number;                             //The phone number of Admin\n  password?: string;                          //The passsword of Admin\n}\n\n\n/////////////////////////////////////////////////////\n//            ORGANIZATION MEMBER\n/**\n * Defines a Organisation's Member object\n *\n * @export\n * @interface MemberInfo\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationMember {\n  id?: string,                                  //The id of the Member\n  fname: string,                                //The first name of Member\n  surname: string,                              //The surname of Member\n  email: string,                                //The email of Member\n  phone?: number;                               //The phone number of Member\n  password?: string                             //The password of Member\n}\n\n\n/////////////////////////////////////////////////////\n//                  USER TYPE\n/**\n * Defines a User Type object\n *\n * @export\n * @interface UserType\n */\n/////////////////////////////////////////////////////\nexport interface UserType {\n  ID: number;                                 //The id of the User Type\n  Name: string;                               //The name of the User Type\n}\n\n\n/////////////////////////////////////////////////////\n//                LOGIN INFO\n/**\n * Defines the User's Login Information\n *\n * @export\n * @interface LoginInfo\n */\n/////////////////////////////////////////////////////\nexport interface LoginInfo {\n  orgName: string;                            //The organization fo teh user currently logged in\n  email: string;                              //The email of the suer currently logged in\n  password: string;                           //The password of the user currently logged in\n}\n\n\n/////////////////////////////////////////////////////\n//                 STAFF INFO\n/**\n * Defines a FABI Staff Member object\n *\n * @export\n * @interface StaffInfo\n */\n/////////////////////////////////////////////////////\nexport interface StaffInfo {\n  ID?: number,                                  //The id number of the staff member\n  fname: string                                 //The first name of the staff member\n  surname: string,                              //The surname of the staff member\n  email: string,                                //The email address fo the staff member\n  phone?: number,                               //The phone number of the staff member\n  position?: string,                            //The positions of the staff member\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            DATABASE PRIVILEGE\n/**\n * Defines a DatabasePrivilege object\n *\n * @export\n * @interface DatabasePrivilege\n */\n/////////////////////////////////////////////////////\nexport interface DatabasePrivilege {\n  name: string,                                 //The database's name\n  privileges: string[]                          //The privileges for the database                          \n}\n\n\n/////////////////////////////////////////////////////\n//                PRIVILEGE TYPES\n/**\n * Defines a PrivilegeTypes object\n *\n * @export\n * @interface PrivilegeTypes\n */\n/////////////////////////////////////////////////////\nexport interface PrivilegeTypes {\n  create: boolean,                              //The create privilege\n  retrieve: boolean,                            //The retrieve privilege\n  update: boolean,                              //The update privilege\n  delete: boolean                               //The delete privilege\n}\n\n\n/////////////////////////////////////////////////////\n//              USER'S PRIVILEGES\n/**\n * Defines a UserPrivileges object\n *\n * @export\n * @interface UserPrivileges\n */\n/////////////////////////////////////////////////////\nexport interface UserPrivileges {\n  databases?: DatabasePrivilege[]               //The database privileges for a database\n}\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            CONFIRM (for confirm pop-up)\n/**\n * Defines a Confirm object\n *\n * @export\n * @interface Confirm\n */\n/////////////////////////////////////////////////////\nexport interface Confirm {\n  title: string,                                //The confirm title\n  message: string,                              //The confirm message\n  info: string,                                 //The confirm information\n  cancel: string,                               //If it has been canceled or not\n  confirm: string                               //If it has been confirmed or not\n}\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  SAMPLE FORM\n/**\n * Defines a SampleFormData object\n *\n * @export\n * @interface SampleFormData\n */\n/////////////////////////////////////////////////////\nexport interface SampleFormData {\n  // Sample Details\n  sample_details: {\n    plant_species: string,                 //The species of the sample\n    plant_genus: string                    //The genus of the sample\n    num_samples: number,                   //The number of samples\n    date_collected: Date,                  //The date that the sample was collected\n    date_sent: Date,                       //The date that the sample was sent\n  }\n\n  // Plantation Details\n  plantation_details: {\n    street: string,                        //The street name\n    area: string,                          //The area\n    city: string,                          //The city \n    farm: string,                          //The farm name\n    province: string,                      //The province\n    gps: string,                           //Sample GPS coordinates\n  }\n\n  // Type of Sample\n  types: string[],\n  // types: {\n  //   soil: boolean,                     //Soil sample type\n  //   stems: boolean,                    //Stems sample type\n  //   roots: boolean,                    //Roots sample type\n  //   twigs: boolean,                    //Twigs sample type\n  //   leaves: boolean,                   //Leaves sample type\n  //   seedlings: boolean,                //Seedlings sample type\n  //   media: boolean,                    //Media sample type\n  //   water: boolean,                    //Water sample type\n  //   insect: boolean,                   //Insect sample type\n  //   nuts: boolean,                     //Nuts sample type\n  //   other: boolean,                    //Other type of sample (if any)\n  // }\n\n  // Symptoms\n  symptoms: {\n    wilt: boolean,                         //Wilt symptom\n    stunting: boolean,                     //Stunting symptom\n    leafspot: boolean,                     //Leafspot symptom\n    rootrot: boolean,                      //Rootrot symptom\n    dieback: boolean,                      //Dieback symptom\n    cankers: boolean,                      //Cankers symptom \n    death: boolean,                        //Death symptom \n    wood: boolean,                         //Wood symptom\n    other: boolean,                        //Other symptoms (if any)\n  }\n\n  // Distribution of Symptoms\n  distribution: {\n    localized: boolean,               //The localized distribution\n    scattered: boolean,                //The scattered distribution\n    general: boolean,                  //The general distribution\n    clumps: boolean,                   //The clumps distribution\n    na: boolean,                       //The na distribution\n    other: boolean,                    //Other distributions (if any)\n    percentage_plants_affected: number,           //The percentage of plants affected\n  }\n\n  // Conditons\n  conditions: {\n    date_problem_noticed: Date,        //The date the problem was noticed\n    date_planted: Date,                //The date the plants were planted\n    weather_disturbances: string,      //The weather disturbances\n    weather_prior: string,             //The weather conditions prior\n    others: string,                    //Other weather conditions (if any)\n    additional?: string                 //Additional weather conditions (if any)\n  }\n\n  // Permissions\n  permissions: {\n    landowner_name: string,                       //The landowner's name\n    permission_granted: boolean                   //Whether or not the landowner has granted permission\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  LOCATION\n/**\n * Defines a Location object\n *\n * @export\n * @interface Location\n */\n/////////////////////////////////////////////////////\nexport interface Location {\n  latitude: number,                             //The latitude of the location\n  longitude: number                             //The longitude of the location\n}\n\n\n/////////////////////////////////////////////////////\n//                     ADDRESS\n/**\n * Defines a Address object\n *\n * @export\n * @interface Address\n */\n/////////////////////////////////////////////////////\nexport interface Address {\n  street_number?: number,                       //The street number of the address (if any)\n  street: string,                               //The street name of the address\n  estate?: string,                              //The estate of the address (if any)\n  area?: string,                                //The area of the address (if any)\n  city: string,                                 //The city of the address\n  province: string,                             //The province of the address\n  country: string,                              //The country of the address\n  postal_code?: string,                         //The postal code of the address (if any)\n  formatted_address: string                     //The formatted address\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServerErrorInterceptor.html":{"url":"classes/ServerErrorInterceptor.html","title":"class - ServerErrorInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServerErrorInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_errors/server-error-interceptor/server-error-interceptor.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                AUTH_HEADER\n                            \n                            \n                                    Private\n                                session\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addJWTToken\n                            \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService, router: Router, notificationServie: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/_errors/server-error-interceptor/server-error-interceptor.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notificationServie\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            AUTH_HEADER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"Authorization\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/_errors/server-error-interceptor/server-error-interceptor.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            session\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.authService.getCurrentSessionValue\n                        \n                    \n                        \n                            \n                                    Defined in src/app/_errors/server-error-interceptor/server-error-interceptor.ts:36\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addJWTToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addJWTToken(request: Http.HttpRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_errors/server-error-interceptor/server-error-interceptor.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Http.HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Http.HttpRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(request: Http.HttpRequest, next: Http.HttpHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/app/_errors/server-error-interceptor/server-error-interceptor.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Http.HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            Http.HttpHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from \"@angular/core\";\nimport * as Http from \"@angular/common/http\";\nimport { catchError, retry } from 'rxjs/operators';\nimport { throwError, Observable, BehaviorSubject, of, from } from \"rxjs\";\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { HttpRequest } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { NotificationService } from 'src/app/_services/notification.service';\n\n@core.Injectable()\nexport class ServerErrorInterceptor implements Http.HttpInterceptor {\n\n  constructor(\n    private authService: AuthenticationService, \n    private router: Router,\n    private notificationServie: NotificationService\n  ) { }\n\n  private AUTH_HEADER = \"Authorization\";\n  private session = this.authService.getCurrentSessionValue;\n  // private refreshTokenInProgress = false;\n  // private refreshTokenSubject: BehaviorSubject = new BehaviorSubject(null);\n\n  intercept(request: Http.HttpRequest, next: Http.HttpHandler): Observable> {\n\n    request = this.addJWTToken(request);\n\n    return next.handle(request).pipe(\n      // retry(1),\n      catchError((error: Http.HttpErrorResponse) => {\n\n        console.log(error);\n        if (error && error.status === 401) {\n          \n          if(this.authService.isLoggedIn == true) {\n            // refresh token\n            // Prefill User's Email in login form\n            this.authService.logoutUser();\n            this.router.navigate(['/login']);\n          } else {\n            this.notificationServie.showWarningNotification(\"Incorrect Login Details\", error.error.message);\n          }\n          return throwError(error);\n\n        } else if(error && error.status === 403) {\n          this.authService.logoutUser();\n          this.router.navigate(['/login']);\n          this.notificationServie.showErrorNotification(\"Unauthorized\", error.error.message);\n        } else if(error && error.status === 404) {\n          this.notificationServie.showErrorNotification(error.error.title, error.error.message);\n        } else {\n          return throwError(error);\n        }\n      })\n    );\n  }\n\n  private addJWTToken(request: Http.HttpRequest): Http.HttpRequest {  \n    if(this.session && this.session != null && this.session != '') {\n      let token = this.session.token;\n\n      if (token && token != null && token != '') {\n        return request.clone({\n          headers: request.headers.set(\n            this.AUTH_HEADER, `Bearer ${token}`\n          )\n        });\n      }\n    }else {\n      return request;\n    }  \n  }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Species.html":{"url":"interfaces/Species.html","title":"interface - Species","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Species\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/diagnostic-clinic-api.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        species\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        species\n                                    \n                                \n                                \n                                    \n                                        species:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as http from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport * as Interface from \"../_interfaces/interfaces\";\nimport { AuthenticationService } from \"./authentication.service\";\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllSamplesForMemberURL = `${config.diagnosticClinicURL}/retrieveSamplesForMember`;\n\n//Object for defining the JSON object to be sent when requesting the samples of a specific member\nexport interface POSTMember{\n  userID: string;                         //The user id of the user to be submitted\n}\n\n//Object for defining the samples received from the API call\nexport interface Sample{\n  userID: string;                         //The id of the user who submitted the sample\n  orgName: string;                        //The organization that the user belongs to\n  status: string;                         //The status of the sample\n  referenceNumber: string;                //The reference number that was generated for the sample\n  data: Species;                          //The data within the sample which is the species\n}\n\nexport interface Species{\n  species: string;                        //The species of a sample\n}\n\n\n/**\n * Used for handling all `diagnostic clinic` requests and functions\n *\n * @export\n * @class DiagnosticClinicAPIService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DiagnosticClinicAPIService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of DiagnosticClinicAPIService.\n   * \n   * @param {http.HttpClient} http For making calls to the API\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: http.HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET ALL SAMPLES \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the samples that FABI is currently processing\n   *\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllSamples() {\n    const getAllSamplesURL = `${config.diagnosticClinicURL}/retrieveAllSamples`;\n    const method = \"POST\";\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request(method, getAllSamplesURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     GET SAMPLES FOR FABI STAFF \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the samples corresponding to a specific user.\n   *\n   * @param {string} id The id number of the user whose samples need to be fetched.\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getSamplesForFABIStaff(id: string) {\n    const data: POSTMember = { userID: id };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllSamplesForMemberURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    RETREIVE ALL SAMPLES\n  /**\n   * Method that sends a request to the API to retreive all Samples\n   *\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  retrieveAllOrganizationSamples() {\n    let retrieveAllOrgSamples = `${config.diagnosticClinicURL}/retrieveAllOrgSamples`;\n    let method = 'POST';\n\n    const postData = {\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, retrieveAllOrgSamples, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    RETREIVE ALL SAMPLES FOR MEMBER\n  /**\n   * Method that sends a request to the API to retreive all Samples for a member\n   *\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  retrieveMemberSamples() {\n    let retrieveAllMemberSamples = `${config.diagnosticClinicURL}/retrieveSamplesForMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"userID\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, retrieveAllMemberSamples, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        SUBMIT SAMPLE FORM\n  /**\n   * Method that send a request to the API to submit a specifc Sample Form\n   *\n   * @param {Interface.SampleFormData} formDetails The details of the sample to be submitted\n   * @returns API response @type any\n   * \n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitSampleForm(formDetails: Interface.SampleFormData) {\n\n    let tempDetails = {\n      \"Location\": \"harding\",\n      \"Province\": \"Gauteng\",\n      \"Genus\": \"eucalyptus\",\n      \"Species\": \"radiata\",\n      \"SampleType\": \"root\",\n      \"Asym_Dis\": \"D\",\n      \"NurseryField\": \"F\",\n      \"Roots\": \"dry\",\n      \"Root-Collar\": \"Wilted, abitDry\",\n      \"Stem\": \"Girdled\",\n      \"GrowthTip\": \"Swelling\",\n      \"Needles-Leaves\": \"healthy\"\n    }\n\n    let submitSampleURL = `${config.diagnosticClinicURL}/submitSample`;\n    let method = 'POST';\n\n    const postData = {\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation,\n      \"userID\": this.authService.getCurrentSessionValue.user.ID,\n      \"data\": tempDetails\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, submitSampleURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        RETRIEVE SAMPLE DETAILS\n  /**\n   * This function is used to fetch a specific sample form\n   *\n   * @param {string} sampleRefNum The reference number of the sample to be retrieved\n   * @returns API response @type any\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  retrieveSampleDetails(sampleRefNum: string) {\n    let retreiveSampleDetailsURL = `${config.diagnosticClinicURL}/retrieveSample`;\n    let method = 'POST';\n\n    const postData = {\n      \"refNum\": sampleRefNum\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, retreiveSampleDetailsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        UPDATE SAMPLE STATUS\n  /**\n   * Method used to update the status of the sample\n   *\n   * @param {*} sample\n   * @param {string} status\n   * @returns\n   * @memberof DiagnosticClinicAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateSamplesStatus(sample: any, status: string) {\n\n    let updateSampleStatusURL = `${config.diagnosticClinicURL}/updateSampleStatus`;\n    let method = 'POST';\n\n    const postData = {\n      \"refNum\": sample.referenceNumber,\n      \"status\": status\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateSampleStatusURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StaffDashboardComponent.html":{"url":"classes/StaffDashboardComponent.html","title":"class - StaffDashboardComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StaffDashboardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Staff/staff-dashboard/staff-dashboard.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                confirmPasswordInput\n                            \n                            \n                                currentUser\n                            \n                            \n                                depositForms\n                            \n                            \n                                deposits\n                            \n                            \n                                helpTab\n                            \n                            \n                                notificationsTab\n                            \n                            \n                                profileTab\n                            \n                            \n                                requestForms\n                            \n                            \n                                requests\n                            \n                            \n                                samples\n                            \n                            \n                                sampleTableLoading\n                            \n                            \n                                saveBtn\n                            \n                            \n                                    Public\n                                searchDeposit\n                            \n                            \n                                    Public\n                                searchSample\n                            \n                            \n                                submittedSamples\n                            \n                            \n                                    Private\n                                toggle_status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                displayConfirmPasswordInput\n                            \n                            \n                                displayProfileSaveBtn\n                            \n                            \n                                loadDepositForms\n                            \n                            \n                                loadRequestForms\n                            \n                            \n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                toggleHelpTab\n                            \n                            \n                                toggleNotificaitonsTab\n                            \n                            \n                                toggleNotificationsTab\n                            \n                            \n                                toggleProfileTab\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService, router: Router, userManagementService: UserManagementAPIService, diagnosticClinicService: DiagnosticClinicAPIService, resolver: core.ComponentFactoryResolver, notificationLoggingService: NotificationLoggingService, cultureCollectionService: CultureCollectionAPIService)\n                    \n                \n                        \n                            \n                                Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:70\n                            \n                        \n\n                \n                    \n                            Creates an instance of StaffDashboardComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        userManagementService\n                                                  \n                                                        \n                                                                        UserManagementAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the User Management API service\n\n                                                        \n                                                \n                                                \n                                                        diagnosticClinicService\n                                                  \n                                                        \n                                                                        DiagnosticClinicAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Diagnostic Clinic API service\n\n                                                        \n                                                \n                                                \n                                                        resolver\n                                                  \n                                                        \n                                                                    core.ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For dynamically inserting elements into the HTML page\n\n                                                        \n                                                \n                                                \n                                                        notificationLoggingService\n                                                  \n                                                        \n                                                                        NotificationLoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Notification Logging API service\n\n                                                        \n                                                \n                                                \n                                                        cultureCollectionService\n                                                  \n                                                        \n                                                                        CultureCollectionAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Culture Collection API service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            admins\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Member[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:38\n                            \n                        \n\n                \n                    \n                        Object array for holding the administrators -  @type {Member[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            confirmPasswordInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:60\n                            \n                        \n\n                \n                    \n                        Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:64\n                            \n                        \n\n                \n                    \n                        The user that is currently logged in -  @type {any} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            depositForms\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:44\n                            \n                        \n\n                \n                    \n                        Indicates whether there are deposit forms to load or not - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deposits\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CMWDeposit[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:48\n                            \n                        \n\n                \n                    \n                        Object array for holding the deposits associated with the user -  @type {CMWDeposit[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            helpTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:62\n                            \n                        \n\n                \n                    \n                        Indicates if the help tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notificationsTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:54\n                            \n                        \n\n                \n                    \n                        Indicates if the notifications tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profileTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:56\n                            \n                        \n\n                \n                    \n                        Indicates if the profile tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            requestForms\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:46\n                            \n                        \n\n                \n                    \n                        Indicates whether there are request forms to load or not - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            requests\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CMWRequest[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:50\n                            \n                        \n\n                \n                    \n                        Object array for holding the requests associated with the user -  @type {CMWRequest[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            samples\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sample[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:52\n                            \n                        \n\n                \n                    \n                        Object array for holding the samples associated with the user -  @type {Sample[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sampleTableLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:66\n                            \n                        \n\n                \n                    \n                        Specifies if the list of samples have been retreived to disable the loading spinner - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saveBtn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:58\n                            \n                        \n\n                \n                    \n                        Indicates if the save button is hidden/shown on the profile tab- @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            searchDeposit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:70\n                            \n                        \n\n                \n                    \n                        The search item the user is looking for in the table -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            searchSample\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:68\n                            \n                        \n\n                \n                    \n                        The search item the user is looking for in the table -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submittedSamples\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:42\n                            \n                        \n\n                \n                    \n                        Indicates whether there are samples to load or not - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            toggle_status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:40\n                            \n                        \n\n                \n                    \n                        Indicates if the notifications tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            displayConfirmPasswordInput\n                        \n                        \n                    \n                \n            \n            \n                \ndisplayConfirmPasswordInput()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:261\n                \n            \n\n\n            \n                \n                    This function will display the confirm password input field in the user's password was altered\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            displayProfileSaveBtn\n                        \n                        \n                    \n                \n            \n            \n                \ndisplayProfileSaveBtn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:249\n                \n            \n\n\n            \n                \n                    This function will display the save button option if any details in the profile have been altered\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadDepositForms\n                        \n                        \n                    \n                \n            \n            \n                \nloadDepositForms()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:156\n                \n            \n\n\n            \n                \n                    This function will load all the deposit forms associated with the user into the HTML page.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadRequestForms\n                        \n                        \n                    \n                \n            \n            \n                \nloadRequestForms()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:192\n                \n            \n\n\n            \n                \n                    This function will load all the request forms associated with the user into the HTML page.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:127\n                \n            \n\n\n            \n                \n                    This function will log the user out of the web application and clear the authentication data stored in the local storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:109\n                \n            \n\n\n            \n                \n                    This function is called when the page loads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleHelpTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleHelpTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:273\n                \n            \n\n\n            \n                \n                    This function will toggle the display of the help side panel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleNotificaitonsTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleNotificaitonsTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:143\n                \n            \n\n\n            \n                \n                    This function is used to toggle the notifications tab.\nIf set to true, a class is added which ensures that the notifications tab is displayed. \nIf set to flase, a class is removed which hides the notifications tab.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleNotificationsTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleNotificationsTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:224\n                \n            \n\n\n            \n                \n                    This function will toggle the display of the notifications side panel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleProfileTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleProfileTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-dashboard/staff-dashboard.component.ts:236\n                \n            \n\n\n            \n                \n                    This function will toggle the display of the profile side panel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { CMWDeposit, CMWRequest, CultureCollectionAPIService } from '../../_services/culture-collection-api.service';\nimport { DiagnosticClinicAPIService, Sample } from '../../_services/diagnostic-clinic-api.service';\nimport { NotificationLoggingService } from '../../_services/notification-logging.service';\nimport { Member, UserManagementAPIService } from '../../_services/user-management-api.service';\n\n\n@core.Component({\n  selector: 'app-staff-dashboard',\n  templateUrl: './staff-dashboard.component.html',\n  styleUrls: ['./staff-dashboard.component.scss']\n})\n\nexport class StaffDashboardComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Object array for holding the administrators -  @type {Member[]} */\n  admins: Member[] = [];\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  private toggle_status: boolean = false;\n  /** Indicates whether there are samples to load or not - @type {boolean} */\n  submittedSamples: boolean = false;\n  /** Indicates whether there are deposit forms to load or not - @type {boolean} */\n  depositForms: boolean = false;\n  /** Indicates whether there are request forms to load or not - @type {boolean} */\n  requestForms: boolean = false;\n  /** Object array for holding the deposits associated with the user -  @type {CMWDeposit[]} */\n  deposits: CMWDeposit[] = [];\n  /** Object array for holding the requests associated with the user -  @type {CMWRequest[]} */\n  requests: CMWRequest[] = [];\n  /** Object array for holding the samples associated with the user -  @type {Sample[]} */\n  samples: Sample[] = [];\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  notificationsTab: boolean = false;\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n  /** Indicates if the save button is hidden/shown on the profile tab- @type {boolean} */\n  saveBtn: boolean = false;\n  /** Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} */\n  confirmPasswordInput: boolean = false;\n  /** Indicates if the help tab is hidden/shown - @type {boolean} */\n  helpTab: boolean = false;\n  /** The user that is currently logged in -  @type {any} */\n  currentUser: any;\n  /** Specifies if the list of samples have been retreived to disable the loading spinner - @type {boolean} */\n  sampleTableLoading: boolean = true;\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchSample: string = \"\";\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchDeposit: string = \"\";\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of StaffDashboardComponent.\n   * \n   * @param {UserManagementAPIService} userManagementService For calling the User Management API service\n   * @param {NotificationLoggingService} notificationLoggingService For calling the Notification Logging API service\n   * @param {DiagnosticClinicAPIService} diagnosticClinicService For calling the Diagnostic Clinic API service\n   * @param {CultureCollectionAPIService} cultureCollectionService For calling the Culture Collection API service\n   * @param {core.ComponentFactoryResolver} resolver For dynamically inserting elements into the HTML page\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {Router} router\n   * \n   * @memberof StaffDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private authService: AuthenticationService,\n    private router: Router,\n    private userManagementService: UserManagementAPIService,\n    private diagnosticClinicService: DiagnosticClinicAPIService,\n    private resolver: core.ComponentFactoryResolver,\n    private notificationLoggingService: NotificationLoggingService,\n    private cultureCollectionService: CultureCollectionAPIService\n  ) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      NG ON INIT()  \n  /**\n   * This function is called when the page loads\n   * \n   * @description 1. loadDepositForms() | 2. loadRequestForms()\n   * \n   * @memberof StaffDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    // Set current user logged in\n    this.currentUser = this.authService.getCurrentSessionValue.user;\n    //  Calling the neccessary functions as the page loads\n    this.loadDepositForms();\n    this.loadRequestForms();\n\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof StaffDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    TOGGLE NOTIFICATIONS TAB\n  /**\n   *  This function is used to toggle the notifications tab.\n   *  \n   *  If set to true, a class is added which ensures that the notifications tab is displayed. \n   *  If set to flase, a class is removed which hides the notifications tab.\n   * \n   * @memberof StaffDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificaitonsTab() {\n    this.toggle_status = !this.toggle_status;\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      LOAD DEPOSIT FORMS\n  /**\n   *  This function will load all the deposit forms associated with the user into the HTML page.\n   * \n   *  @memberof StaffDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  loadDepositForms() {\n    this.cultureCollectionService.getAllDepositLogs().subscribe((response: any) => {\n      if (response.success == true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      if (response.success == true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/StaffDivComponent.html":{"url":"components/StaffDivComponent.html","title":"component - StaffDivComponent","body":"\n                   \n\n\n\n\n\n  Components\n  StaffDivComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/Dynamic-Components/staff-div/staff-div.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-staff-div\n            \n\n            \n                styleUrls\n                ./staff-div.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./staff-div.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                Email\n                            \n                            \n                                Name\n                            \n                            \n                                Surname\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/Dynamic-Components/staff-div/staff-div.component.ts:17\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        Email\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/Dynamic-Components/staff-div/staff-div.component.ts:17\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Name\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/Dynamic-Components/staff-div/staff-div.component.ts:15\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Surname\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/Dynamic-Components/staff-div/staff-div.component.ts:16\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Dynamic-Components/staff-div/staff-div.component.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-staff-div',\n  templateUrl: './staff-div.component.html',\n  styleUrls: ['./staff-div.component.scss']\n})\n\n/*\n*   This class is called when dynamic elements pertaining information about FABI/Organisation staff\n*   members are created and dynmically inserted into the selected HTML page\n*/\nexport class StaffDivComponent implements OnInit {\n\n  @Input() Name: string;        //This variable is dynamically changed to the name of the staff member\n  @Input() Surname: string;     //This variable is dynamically changed to the surname of the staff member\n  @Input() Email: string;       //This variable is dynamically changed to the email of the staff member\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n  {{Name}} {{Surname}}\n  {{Email}}\n\n    \n\n    \n                \n                    ./staff-div.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{Name}} {{Surname}}  {{Email}}'\n    var COMPONENTS = [{'name': 'AdminDivComponent', 'selector': 'app-admin-div'},{'name': 'AdminHelpComponent', 'selector': 'app-admin-help'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DatabaseHandlerComponent', 'selector': 'app-database-handler'},{'name': 'ErrorComponent', 'selector': 'app-error'},{'name': 'MemberHelpComponent', 'selector': 'app-member-help'},{'name': 'MemberSubmitSampleComponent', 'selector': 'app-member-submit-sample'},{'name': 'NotificationDivComponent', 'selector': 'app-notification-div'},{'name': 'OrganizationHelpComponent', 'selector': 'app-organization-help'},{'name': 'OrganizationMenuComponent', 'selector': 'app-organization-menu'},{'name': 'OrganizationSubmitSampleComponent', 'selector': 'app-organization-submit-sample'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'SampleDivComponent', 'selector': 'app-sample-div'},{'name': 'SampleFormComponent', 'selector': 'app-sample-form'},{'name': 'StaffDivComponent', 'selector': 'app-staff-div'},{'name': 'StaffHelpComponent', 'selector': 'app-staff-help'},{'name': 'StaffMenuComponent', 'selector': 'app-staff-menu'},{'name': 'StaffSubmitSampleComponent', 'selector': 'app-staff-submit-sample'},{'name': 'StaffViewDatabasesComponent', 'selector': 'app-staff-view-databases'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'StaffDivComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/StaffHelpComponent.html":{"url":"components/StaffHelpComponent.html","title":"component - StaffHelpComponent","body":"\n                   \n\n\n\n\n\n  Components\n  StaffHelpComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/Staff/staff-help/staff-help.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-staff-help\n            \n\n            \n                styleUrls\n                ./staff-help.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./staff-help.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/Staff/staff-help/staff-help.component.ts:23\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-help/staff-help.component.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-staff-help',\n  templateUrl: './staff-help.component.html',\n  styleUrls: ['./staff-help.component.scss']\n})\nexport class StaffHelpComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        HELP\n\n\n\n\n  \n  \n    \n      \n    \n    \n      Samples\n    \n    \n      You can submit internal samples to the Diagnostic Clinic by navigating to the Submit Sample tab. All submitted\n        samples linked to your account can be viewed on your dashboard\n        \n        \n        Click here to learn more\n      \n    \n  \n  \n\n  \n  \n    \n      \n    \n    \n      CMW Culture Collection\n    \n    \n      You can submit request, deposit, and revitalization forms to the CMW Culture Collection by navigating to the\n        CMW Culture Collection tab\n        \n        \n        Click here to learn more\n      \n    \n  \n  \n\n\n\n    \n\n    \n                \n                    ./staff-help.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'HELP                            Samples              You can submit internal samples to the Diagnostic Clinic by navigating to the Submit Sample tab. All submitted        samples linked to your account can be viewed on your dashboard                        Click here to learn more                                          CMW Culture Collection              You can submit request, deposit, and revitalization forms to the CMW Culture Collection by navigating to the        CMW Culture Collection tab                        Click here to learn more              '\n    var COMPONENTS = [{'name': 'AdminDivComponent', 'selector': 'app-admin-div'},{'name': 'AdminHelpComponent', 'selector': 'app-admin-help'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DatabaseHandlerComponent', 'selector': 'app-database-handler'},{'name': 'ErrorComponent', 'selector': 'app-error'},{'name': 'MemberHelpComponent', 'selector': 'app-member-help'},{'name': 'MemberSubmitSampleComponent', 'selector': 'app-member-submit-sample'},{'name': 'NotificationDivComponent', 'selector': 'app-notification-div'},{'name': 'OrganizationHelpComponent', 'selector': 'app-organization-help'},{'name': 'OrganizationMenuComponent', 'selector': 'app-organization-menu'},{'name': 'OrganizationSubmitSampleComponent', 'selector': 'app-organization-submit-sample'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'SampleDivComponent', 'selector': 'app-sample-div'},{'name': 'SampleFormComponent', 'selector': 'app-sample-form'},{'name': 'StaffDivComponent', 'selector': 'app-staff-div'},{'name': 'StaffHelpComponent', 'selector': 'app-staff-help'},{'name': 'StaffMenuComponent', 'selector': 'app-staff-menu'},{'name': 'StaffSubmitSampleComponent', 'selector': 'app-staff-submit-sample'},{'name': 'StaffViewDatabasesComponent', 'selector': 'app-staff-view-databases'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'StaffHelpComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StaffInfo.html":{"url":"interfaces/StaffInfo.html","title":"interface - StaffInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  StaffInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_interfaces/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Defines a FABI Staff Member object\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        fname\n                                \n                                \n                                            Optional\n                                        ID\n                                \n                                \n                                            Optional\n                                        phone\n                                \n                                \n                                            Optional\n                                        position\n                                \n                                \n                                        surname\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fname\n                                    \n                                \n                                \n                                    \n                                        fname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ID\n                                    \n                                \n                                \n                                    \n                                        ID:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                    \n                                \n                                \n                                    \n                                        phone:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                    \n                                \n                                \n                                    \n                                        position:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surname\n                                    \n                                \n                                \n                                    \n                                        surname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Organisation {\n  ID?: string;                                //The id of Organisation \n  orgName: string;                            //The name of Organisation\n  admin?: OrganisationAdmin;                  //The admin of Organisation\n}\n\n\n/////////////////////////////////////////////////////\n//              ORGANIZATION ADMIN\n/**\n * Defines an Admin of an Organisation\n *\n * @export\n * @interface OrganisationAdmin\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationAdmin {\n  fname: string;                              //The first name of Admin\n  surname: string;                            //The surname of Admin\n  email: string;                              //The email of Admin\n  phone?: number;                             //The phone number of Admin\n  password?: string;                          //The passsword of Admin\n}\n\n\n/////////////////////////////////////////////////////\n//            ORGANIZATION MEMBER\n/**\n * Defines a Organisation's Member object\n *\n * @export\n * @interface MemberInfo\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationMember {\n  id?: string,                                  //The id of the Member\n  fname: string,                                //The first name of Member\n  surname: string,                              //The surname of Member\n  email: string,                                //The email of Member\n  phone?: number;                               //The phone number of Member\n  password?: string                             //The password of Member\n}\n\n\n/////////////////////////////////////////////////////\n//                  USER TYPE\n/**\n * Defines a User Type object\n *\n * @export\n * @interface UserType\n */\n/////////////////////////////////////////////////////\nexport interface UserType {\n  ID: number;                                 //The id of the User Type\n  Name: string;                               //The name of the User Type\n}\n\n\n/////////////////////////////////////////////////////\n//                LOGIN INFO\n/**\n * Defines the User's Login Information\n *\n * @export\n * @interface LoginInfo\n */\n/////////////////////////////////////////////////////\nexport interface LoginInfo {\n  orgName: string;                            //The organization fo teh user currently logged in\n  email: string;                              //The email of the suer currently logged in\n  password: string;                           //The password of the user currently logged in\n}\n\n\n/////////////////////////////////////////////////////\n//                 STAFF INFO\n/**\n * Defines a FABI Staff Member object\n *\n * @export\n * @interface StaffInfo\n */\n/////////////////////////////////////////////////////\nexport interface StaffInfo {\n  ID?: number,                                  //The id number of the staff member\n  fname: string                                 //The first name of the staff member\n  surname: string,                              //The surname of the staff member\n  email: string,                                //The email address fo the staff member\n  phone?: number,                               //The phone number of the staff member\n  position?: string,                            //The positions of the staff member\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            DATABASE PRIVILEGE\n/**\n * Defines a DatabasePrivilege object\n *\n * @export\n * @interface DatabasePrivilege\n */\n/////////////////////////////////////////////////////\nexport interface DatabasePrivilege {\n  name: string,                                 //The database's name\n  privileges: string[]                          //The privileges for the database                          \n}\n\n\n/////////////////////////////////////////////////////\n//                PRIVILEGE TYPES\n/**\n * Defines a PrivilegeTypes object\n *\n * @export\n * @interface PrivilegeTypes\n */\n/////////////////////////////////////////////////////\nexport interface PrivilegeTypes {\n  create: boolean,                              //The create privilege\n  retrieve: boolean,                            //The retrieve privilege\n  update: boolean,                              //The update privilege\n  delete: boolean                               //The delete privilege\n}\n\n\n/////////////////////////////////////////////////////\n//              USER'S PRIVILEGES\n/**\n * Defines a UserPrivileges object\n *\n * @export\n * @interface UserPrivileges\n */\n/////////////////////////////////////////////////////\nexport interface UserPrivileges {\n  databases?: DatabasePrivilege[]               //The database privileges for a database\n}\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            CONFIRM (for confirm pop-up)\n/**\n * Defines a Confirm object\n *\n * @export\n * @interface Confirm\n */\n/////////////////////////////////////////////////////\nexport interface Confirm {\n  title: string,                                //The confirm title\n  message: string,                              //The confirm message\n  info: string,                                 //The confirm information\n  cancel: string,                               //If it has been canceled or not\n  confirm: string                               //If it has been confirmed or not\n}\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  SAMPLE FORM\n/**\n * Defines a SampleFormData object\n *\n * @export\n * @interface SampleFormData\n */\n/////////////////////////////////////////////////////\nexport interface SampleFormData {\n  // Sample Details\n  sample_details: {\n    plant_species: string,                 //The species of the sample\n    plant_genus: string                    //The genus of the sample\n    num_samples: number,                   //The number of samples\n    date_collected: Date,                  //The date that the sample was collected\n    date_sent: Date,                       //The date that the sample was sent\n  }\n\n  // Plantation Details\n  plantation_details: {\n    street: string,                        //The street name\n    area: string,                          //The area\n    city: string,                          //The city \n    farm: string,                          //The farm name\n    province: string,                      //The province\n    gps: string,                           //Sample GPS coordinates\n  }\n\n  // Type of Sample\n  types: string[],\n  // types: {\n  //   soil: boolean,                     //Soil sample type\n  //   stems: boolean,                    //Stems sample type\n  //   roots: boolean,                    //Roots sample type\n  //   twigs: boolean,                    //Twigs sample type\n  //   leaves: boolean,                   //Leaves sample type\n  //   seedlings: boolean,                //Seedlings sample type\n  //   media: boolean,                    //Media sample type\n  //   water: boolean,                    //Water sample type\n  //   insect: boolean,                   //Insect sample type\n  //   nuts: boolean,                     //Nuts sample type\n  //   other: boolean,                    //Other type of sample (if any)\n  // }\n\n  // Symptoms\n  symptoms: {\n    wilt: boolean,                         //Wilt symptom\n    stunting: boolean,                     //Stunting symptom\n    leafspot: boolean,                     //Leafspot symptom\n    rootrot: boolean,                      //Rootrot symptom\n    dieback: boolean,                      //Dieback symptom\n    cankers: boolean,                      //Cankers symptom \n    death: boolean,                        //Death symptom \n    wood: boolean,                         //Wood symptom\n    other: boolean,                        //Other symptoms (if any)\n  }\n\n  // Distribution of Symptoms\n  distribution: {\n    localized: boolean,               //The localized distribution\n    scattered: boolean,                //The scattered distribution\n    general: boolean,                  //The general distribution\n    clumps: boolean,                   //The clumps distribution\n    na: boolean,                       //The na distribution\n    other: boolean,                    //Other distributions (if any)\n    percentage_plants_affected: number,           //The percentage of plants affected\n  }\n\n  // Conditons\n  conditions: {\n    date_problem_noticed: Date,        //The date the problem was noticed\n    date_planted: Date,                //The date the plants were planted\n    weather_disturbances: string,      //The weather disturbances\n    weather_prior: string,             //The weather conditions prior\n    others: string,                    //Other weather conditions (if any)\n    additional?: string                 //Additional weather conditions (if any)\n  }\n\n  // Permissions\n  permissions: {\n    landowner_name: string,                       //The landowner's name\n    permission_granted: boolean                   //Whether or not the landowner has granted permission\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  LOCATION\n/**\n * Defines a Location object\n *\n * @export\n * @interface Location\n */\n/////////////////////////////////////////////////////\nexport interface Location {\n  latitude: number,                             //The latitude of the location\n  longitude: number                             //The longitude of the location\n}\n\n\n/////////////////////////////////////////////////////\n//                     ADDRESS\n/**\n * Defines a Address object\n *\n * @export\n * @interface Address\n */\n/////////////////////////////////////////////////////\nexport interface Address {\n  street_number?: number,                       //The street number of the address (if any)\n  street: string,                               //The street name of the address\n  estate?: string,                              //The estate of the address (if any)\n  area?: string,                                //The area of the address (if any)\n  city: string,                                 //The city of the address\n  province: string,                             //The province of the address\n  country: string,                              //The country of the address\n  postal_code?: string,                         //The postal code of the address (if any)\n  formatted_address: string                     //The formatted address\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StaffMember.html":{"url":"interfaces/StaffMember.html","title":"interface - StaffMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  StaffMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Staff/staff-notification/staff-notification.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        fname\n                                \n                                \n                                        id\n                                \n                                \n                                        surname\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fname\n                                    \n                                \n                                \n                                    \n                                        fname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surname\n                                    \n                                \n                                \n                                    \n                                        surname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { CultureCollectionAPIService } from '../../_services/culture-collection-api.service';\nimport { DiagnosticClinicAPIService } from '../../_services/diagnostic-clinic-api.service';\nimport { NotificationLoggingService, UserLogs } from '../../_services/notification-logging.service';\nimport { UserManagementAPIService } from '../../_services/user-management-api.service';\n\n\nexport interface StaffMember {\n  fname: string;\n  surname: string;\n  email: string;\n  id: string;\n}\n\n@core.Component({\n  selector: 'app-staff-notification',\n  templateUrl: './staff-notification.component.html',\n  styleUrls: ['./staff-notification.component.scss']\n})\nexport class StaffNotificationComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Object array for holding all of the logs -  @type {any[]} */\n  allNotifications: any[] = [];\n  /** Object array for holding all of the logs that have not been read -  @type {any[]} */\n  newNotifications: any[] = [];\n  /** Indicates if there are notifications to load - @type {boolean} */\n  notifications: boolean = true;\n  /** The total number of User Logs - @type {number} */\n  numberOfUserLogs: number = 0;\n  /** The number of the notifications - @type {number} */\n  localNotificationNumber: number = 1;\n  /** Object array for holding all of the logs that have not been read -  @type {string[]} */\n  allLogs: string[] = [];\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  private toggle_status: boolean = false;\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  notificationsTab: boolean = false;\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n  /** Indicates if the save button is hidden/shown on the profile tab- @type {boolean} */\n  saveBtn: boolean = false;\n  /** Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} */\n  confirmPasswordInput: boolean = false;\n  /** Indicates if the help tab is hidden/shown - @type {boolean} */\n  helpTab: boolean = false;\n  /** The user that is currently logged in -  @type {any} */\n  currentUser: any;\n  /** Object array for holding the staff members -  @type {StaffMember[]} */\n  staff: StaffMember[] = [];\n  /** Specifies if the notifications have been retreived to disable the loading spinner - @type {boolean} */\n  notificationsLoading: boolean = true;\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       CONSTRUCTOR\n  /**\n   * Creates an instance of StaffNotificationComponent.\n   * \n   * @param {NotificationLoggingService} notificationLoggingService For calling the Notification Logging API service\n   * @param {CultureCollectionAPIService} cultureCollectionService For calling the Culture Collection API Service\n   * @param {UserManagementAPIService} userManagementService For calling the User Management API Service\n   * @param {DiagnosticClinicAPIService} diagnosticClinicService For calling the Diagnostic Clinic API Service\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {Router} router\n   * @param {Resolver} resolver\n   * \n   * @memberof StaffNotificationComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private authService: AuthenticationService,\n    private router: Router,\n    private userManagementService: UserManagementAPIService,\n    private diagnosticClinicService: DiagnosticClinicAPIService,\n    private resolver: core.ComponentFactoryResolver,\n    private notificationLoggingService: NotificationLoggingService,\n    private cultureCollectionService: CultureCollectionAPIService\n  ) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      NG ON INIT()  \n  /**\n   * This function is called when the page loads\n   *\n   * @memberof StaffNotificationComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    // Set current user logged in\n    this.currentUser = this.authService.getCurrentSessionValue.user;\n\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL STAFF\n  /**\n   *  This function will be used to get all the staff members of FABI and load them into an array\n   * \n   *  @memberof StaffNotificationComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaff() {\n    //Subscribing to the UserManagementAPIService to get a list containing all the FABI members\n    this.userManagementService.getAllFABIStaff().subscribe((response: any) => {\n      if (response.success == true) {\n        var data = response.data.qs.staff;\n\n        for (var i = 0; i  {\n      if (response.success == true) {\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        const data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success == true) {\n\n      }\n      else {\n        //Error handling\n      }\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    TOGGLE NOTIFICATIONS TAB\n  /**\n   *  This function is used to toggle the notifications tab.\n   *  \n   *  If set to true, a class is added which ensures that the notifications tab is displayed. \n   *  If set to flase, a class is removed which hides the notifications tab.\n   * \n   * @memberof StaffNotificationComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificaitonsTab() {\n    this.toggle_status = !this.toggle_status;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StaffMember-1.html":{"url":"interfaces/StaffMember-1.html","title":"interface - StaffMember-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  StaffMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Admin/admin-dashboard/admin-dashboard.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        fname\n                                \n                                \n                                        id\n                                \n                                \n                                        surname\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fname\n                                    \n                                \n                                \n                                    \n                                        fname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surname\n                                    \n                                \n                                \n                                    \n                                        surname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { MatDialog, MatSnackBar } from '@angular/material';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { DiagnosticClinicAPIService } from '../../_services/diagnostic-clinic-api.service';\nimport { NotificationLoggingService } from '../../_services/notification-logging.service';\nimport { UserManagementAPIService } from '../../_services/user-management-api.service';\n\n\nexport interface AdminMember {\n  fname: string;\n  surname: string;\n  email: string;\n  id: string;\n  type: string;\n}\n\nexport interface StaffMember {\n  fname: string;\n  surname: string;\n  email: string;\n  id: string;\n}\n\n@core.Component({\n  selector: 'app-admin-dashboard',\n  templateUrl: './admin-dashboard.component.html',\n  styleUrls: ['./admin-dashboard.component.scss']\n})\n\nexport class AdminDashboardComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  //Retriving an HTML element from the HTML page\n  @core.ViewChild('adminContainer', { read: core.ViewContainerRef }) adminContainer;\n  @core.ViewChild('staffContainer', { read: core.ViewContainerRef }) staffContainer;\n\n  /** Contains the user stats that will be dynamically loaded in the HTML page - @type {string} */\n  userStats: string;\n  /** Contains the sample stats that will be dynamically loaded in the HTML page - @type {string} */\n  sampleStats: string;\n\n  /** Object array for holding the administrators -  @type {AdminMember[]} */\n  admins: AdminMember[] = [];\n  /** Object array for holding the staff members -  @type {StaffMember\n   * []} */\n  staff: StaffMember[] = [];\n\n  /** Object array for holding all of FABI's samples -  @type {Object[]} */\n  samples: Object[] = [];\n  /** Object array for holding all of FABI's completed samples -  @type {Object[]} */\n  completedSamples: Object[] = [];\n\n  /** The total number of FABI staff members - @type {number} */\n  numberOfFABIMembers: number;\n  /** The total number of FABI samples - @type {number} */\n  numberOfSamples: number;\n\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  notificationsTab: boolean = false;\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n  /** Indicates if the save button is hidden/shown on the profile tab- @type {boolean} */\n  saveBtn: boolean = false;\n  /** Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} */\n  confirmPasswordInput: boolean = false;\n  /** Indicates if the help tab is hidden/shown - @type {boolean} */\n  helpTab: boolean = false;\n\n  /** The details of the user currently logged in -  @type {any} */\n  currentUser: any;\n\n  /** Specifies if the list of admins have been retreived to disable the loading spinner - @type {boolean} */\n  adminTableLoading: boolean = true;\n  /** Specifies if the list of staff have been retreived to disable the loading spinner - @type {boolean} */\n  staffTableLoading: boolean = true;\n\n  /** Holds the input element (passwordInput) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"passwordInput\") passwordInput: core.ElementRef;\n  /** Holds the input element (confirmInput) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"confirmInput\") confirmInput: core.ElementRef;\n\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchAdmins: string = \"\";\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchStaff: string = \"\";\n\n  currentUserPrivileges: any;\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of AdminDashboardComponent.\n   * \n   * @param {UserManagementAPIService} userManagementService For calling the User Management API service\n   * @param {DiagnosticClinicAPIService} diagnosticClinicService For calling the Diagnostic Clinic API service\n   * @param {NotificationLoggingService} notificationLoggingService For calling the Notification Logging API service\n   * @param {core.ComponentFactoryResolver} resolver For dynamically inserting elements into the HTML page\n   * @param {DomSanitizer} sanitizer\n   * @param {core.ComponentFactoryResolver} resolver Used to load dynamic elements in the HTML\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    public sanitizer: DomSanitizer,\n    private userManagementService: UserManagementAPIService,\n    private diagnosticClinicService: DiagnosticClinicAPIService,\n    private notificationLoggingService: NotificationLoggingService,\n    private resolver: core.ComponentFactoryResolver,\n    private authService: AuthenticationService,\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private snackBar: MatSnackBar,\n    private dialog: MatDialog\n  ) { }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n\n    window.addEventListener('scroll', this.scroll, true); //third parameter\n\n    // Set current user logged in\n    this.currentUser = this.authService.getCurrentSessionValue.user;\n    //Calling the neccessary functions as the page loads\n    this.getNumberOfFABIMembers();\n    this.getNumberOfFABISamples();\n    this.currentUserPrivileges = this.authService.getCurrentUserValue;\n  }\n\n  ngOnDestroy() {\n    window.removeEventListener('scroll', this.scroll, true);\n  }\n\n  scroll = (event: any): void => {\n\n    //Hide the notifications, profile, and help tabs if open\n    // this.notificationsTab = false;\n    // this.profileTab = false;\n    // this.helpTab = false;\n\n  };\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                              GET NUMBER OF FABI MEMBERS\n  /**\n   *  This function will use an API service to get all the members of FABI. These members will be read into the\n   *  'members' Object. The function does not receive any parameters but it will populate a 'heading' element on the\n   *  HTML page with the number of members belonging to FABI. This function will also use API calls to populate\n   *  the admins object.\n   * \n   *  This function will also dynamically create elements and load them with information about the adminstrators\n   *  and other FABI staff members. These dynamic elements will be loaded into the HTML page\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getNumberOfFABIMembers() {\n    //Subscribing to the UserManagementAPIService to get a list containing all the FABI members\n    this.userManagementService.getAllFABIStaff().subscribe((response: any) => {\n      if (response.success == true) {\n        var data = response.data.qs.staff;\n\n        for (var i = 0; i  {\n      if (response.success == true) {\n        //Populating the sample array with the returned data\n        this.samples = response.data.samples;\n\n        this.numberOfSamples = this.samples.length;\n        this.sampleStats = this.numberOfSamples.toString();\n      }\n      else {\n        //The FABI members could not be retrieved\n        this.sampleStats = '0';\n      }\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      TOGGLE NOTIFICATIONS \n  /**\n   * This function will toggle the display of the notifications side panel\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificationsTab() {\n    this.notificationsTab = !this.notificationsTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         TOGGLE PROFILE \n  /**\n   * This function will toggle the display of the profile side panel\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleProfileTab() {\n    this.profileTab = !this.profileTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      DISPLAY PROFILE SAVE BUTTON \n  /**\n   * This function will display the save button option if any details in the profile have been altered\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayProfileSaveBtn() {\n    this.saveBtn = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                   DISPLAY PASSWORD CONFIRM INPUT \n  /**\n   * This function will display the confirm password input field in the user's password was altered\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayConfirmPasswordInput() {\n    this.confirmPasswordInput = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE HELP \n  /**\n   * This function will toggle the display of the help side panel\n   * \n   * @memberof AdminDashboardComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleHelpTab() {\n    this.helpTab = !this.helpTab;\n  }\n\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StaffMember-2.html":{"url":"interfaces/StaffMember-2.html","title":"interface - StaffMember-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  StaffMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Admin/reporting/reporting.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        fname\n                                \n                                \n                                        id\n                                \n                                \n                                        surname\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fname\n                                    \n                                \n                                \n                                    \n                                        fname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surname\n                                    \n                                \n                                \n                                    \n                                        surname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\nimport { Router } from '@angular/router';\nimport html2canvas from 'html2canvas';\n//These imports are used to created a downloadable PDF of the reports\nimport * as jspdf from 'jspdf';\nimport 'jspdf-autotable';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { CultureCollectionAPIService } from '../../_services/culture-collection-api.service';\nimport { NotificationLoggingService } from '../../_services/notification-logging.service';\nimport { UserManagementAPIService } from '../../_services/user-management-api.service';\n\n\nexport interface userLogInterface {\n  action: string;\n  date: string;\n  user1: string;\n  user2: string;\n}\n\nexport interface databaseLogInterface {\n  action: string;\n  date: string;\n  user: string;\n  details: string;\n}\n\nexport interface accessLogInterface {\n  details: string;\n  date: string;\n  user: string;\n}\n\nexport interface errorLogInterface {\n  code: string;\n  date: string;\n  details: string;\n  user: string;\n}\n\nexport interface requestReportInterface {\n  user: string;\n  requestor: string;\n  cultureNumber: string;\n  taxonName: string;\n  referenceNumber: string;\n  dateRequested: string;\n  dateSubmitted: string;\n}\n\nexport interface depositReportInterface {\n  user: string;\n  cultureNumber: string;\n  name: string;\n  collectedBy: string;\n  dateCollected: string;\n  isolatedBy: string;\n  identifiedBy: string;\n  dateSubmitted: string;\n}\n\nexport interface revitalizationReportInterface {\n  user: string;\n  requestor: string;\n  cultureNumber: string;\n  cultureName: string;\n  referenceNumber: string;\n  dateRequested: string;\n  dateReturned: string;\n  dateSubmitted: string;\n}\n\nexport interface StaffMember {\n  fname: string;\n  surname: string;\n  email: string;\n  id: string;\n}\n\n@core.Component({\n  selector: 'app-reporting',\n  templateUrl: './reporting.component.html',\n  styleUrls: ['./reporting.component.scss']\n})\nexport class ReportingComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Indicates if there are logs of type USER - @type {boolean} */\n  userLogs: boolean = false;\n  /** Indicates if there are logs of type DBML - @type {boolean} */\n  databaseLogs: boolean = false;\n  /** Indicates if there are logs of type ACCL - @type {boolean} */\n  accessLogs: boolean = false;\n  /** Indicates if there are logs of type ERRL - @type {boolean} */\n  errorLogs: boolean = false;\n  /** Indicates if there are logs of type REQUEST - @type {boolean} */\n  requestLogs: boolean = false;\n  /** Indicates if there are logs of type DEPOSIT - @type {boolean} */\n  depositLogs: boolean = false;\n  /** Indicates if there are logs of type REVITALIZATION - @type {boolean} */\n  revitalizationLogs: boolean = false;\n  /** Indicates if the error report has been generated - @type {boolean} */\n  errorReport: boolean = false;\n  /** Indicates if the request report has been generated - @type {boolean} */\n  requestReport: boolean = false;\n  /** Indicates if the deposit report has been generated - @type {boolean} */\n  depositReport: boolean = false;\n  /** Indicates if the revitalization report has been generated - @type {boolean} */\n  revitalizationReport: boolean = false;\n  /** The current date in string format - @type {string} */\n  date: string;\n  /** Array holding the user logs - @type {userLogInterface} */\n  userLogsArray: userLogInterface[] = [];\n  /** Array holding the database logs - @type {databaseLogInterface} */\n  databaseLogsArray: databaseLogInterface[] = [];\n  /** Array holding the access logs - @type {accessLogInterface} */\n  accessLogsArray: accessLogInterface[] = [];\n  /** Array holding the error logs - @type {errorLogInterface} */\n  errorLogsArray: errorLogInterface[] = [];\n  /** Array holding the request logs - @type {requestReportInterface} */\n  requestLogsArray: requestReportInterface[] = [];\n  /** Array holding the deposit logs - @type {depositReportInterface} */\n  depositLogsArray: depositReportInterface[] = [];\n  /** Array holding the revitalization logs - @type {revitalizationReportInterface} */\n  revitalizationLogsArray: revitalizationReportInterface[] = [];\n\n  /** Holds the table element (errorReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"errorReportPDF\") errorReportPDF: core.ElementRef;\n  /** Holds the table element (requestReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"requestReportPDF\") requestReportPDF: core.ElementRef;\n  /** Holds the table element (depositReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"depositReportPDF\") depositReportPDF: core.ElementRef;\n  /** Holds the table element (revitalizationReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"revitalizationReportPDF\") revitalizationReportPDF: core.ElementRef;\n\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  notificationsTab: boolean = false;\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n  /** Indicates if the save button is hidden/shown on the profile tab- @type {boolean} */\n  saveBtn: boolean = false;\n  /** Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} */\n  confirmPasswordInput: boolean = false;\n  /** Indicates if the help tab is hidden/shown - @type {boolean} */\n  helpTab: boolean = false;\n  /** Indicates if the reporting tab is hidden/shown - @type {boolean} */\n  reportingTab: boolean = false;\n  /** Indicates if the log tab is hidden/shown - @type {boolean} */\n  logsTab: boolean = false;\n  /** The details of the user currently logged in -  @type {any} */\n  currentUser: any;\n  /** Object array for holding the staff members -  @type {StaffMember[]} */\n  staff: StaffMember[] = [];\n  /** Stores the data table -  @type {string} */\n  public tableWidget: any;\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchItem: string = \"\";\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchReports: string = \"\";\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       CONSTRUCTOR\n  /**\n   * Creates an instance of ReportingComponent.\n   * \n   * @param {NotificationLoggingService} notificationLoggingService For calling the Notification Logging API service\n   * @param {CultureCollectionAPIService} cultureCollectionService For calling the Culture Collection API Service\n   * @param {UserManagementAPIService} userManagementService For calling the User Management API Service\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {Router} router\n   * @param {core.Renderer2} renderer Used for creating the PDF documents to download\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private notificationLoggingService: NotificationLoggingService,\n    private userManagementService: UserManagementAPIService,\n    private renderer: core.Renderer2,\n    private authService: AuthenticationService,\n    private router: Router,\n    private cultureCollectionService: CultureCollectionAPIService,\n    private formBuilder: FormBuilder,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    this.currentUser = this.authService.getCurrentSessionValue.user;\n    this.getAllStaff();\n\n    //Calling the neccessary functions as the page loads\n    var currentDate = new Date();\n    this.date = ('0' + currentDate.getDate()).slice(-2) + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear();\n    this.loadAllLogs();\n\n    //Generate first displayed report so that it is ready to load\n    this.generateRequestReport();\n\n    //Generate first displayed log so that it is ready to load\n    this.setUserLogTable();\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL STAFF\n  /**\n   *  This function will be used to get all the staff members of FABI and load them into an array\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaff() {\n    //Subscribing to the UserManagementAPIService to get a list containing all the FABI members\n    this.userManagementService.getAllFABIStaff().subscribe((response: any) => {\n      if (response.success == true) {\n        var data = response.data.qs.staff;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Error_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE REQUEST REPORT\n  /**\n   *  This function will be used to generate the request report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateRequestReport() {\n    this.errorReport = false;\n    this.depositReport = false;\n    this.requestReport = true;\n    this.revitalizationReport = false;\n\n    //Loading the Request forms\n    this.cultureCollectionService.getAllRequestLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Request_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE DEPOSIT REPORT\n  /**\n   *  This function will be used to generate the deposit report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateDepositReport() {\n    this.errorReport = false;\n    this.depositReport = true;\n    this.requestReport = false;\n    this.revitalizationReport = false;\n\n    //Loading the Deposit forms\n    this.cultureCollectionService.getAllDepositLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Deposit_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE REVITALIZATION REPORT\n  /**\n   *  This function will be used to generate the revitalization report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateRevitalizationReport() {\n    this.requestReport = false;\n    this.depositReport = false;\n    this.errorReport = false;\n    this.revitalizationReport = true;\n\n    //Loading the Revitalization forms\n    this.cultureCollectionService.getAllRevitalizationLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 157;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Revitalization_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET DATE\n  /**\n   *  This function will put the string date provided into a more readable format for the notifications\n   * @param {string} date The date of the log\n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getDate(date: string) {\n    var tempDate = (date).split(' ');\n    var newDate = '';\n\n    newDate += tempDate[2];\n\n    if (tempDate[0] == 'Mon') {\n      newDate += ' Monday ';\n    }\n    else if (tempDate[0] == 'Tue' || tempDate[0] == 'Tu' || tempDate[0] == 'Tues') {\n      newDate += ' Tuesday ';\n    }\n    else if (tempDate[0] == 'Wed') {\n      newDate += ' Wednesday ';\n    }\n    else if (tempDate[0] == 'Thu' || tempDate[0] == 'Thur' || tempDate[0] == 'Thurs') {\n      newDate += ' Thursday ';\n    }\n    else if (tempDate[0] == 'Fri') {\n      newDate += ' Friday ';\n    }\n    else if (tempDate[0] == 'Sat') {\n      newDate += ' Saturday ';\n    }\n    else if (tempDate[0] == 'Sun') {\n      newDate += ' Sunday ';\n    }\n\n    if (tempDate[1] == 'Jan') {\n      newDate += 'January';\n    }\n    else if (tempDate[1] == 'Feb') {\n      newDate += 'February';\n    }\n    else if (tempDate[1] == 'Mar') {\n      newDate += 'March';\n    }\n    else if (tempDate[1] == 'Apr') {\n      newDate += 'April';\n    }\n    else if (tempDate[1] == 'Jun') {\n      newDate += 'June';\n    }\n    else if (tempDate[1] == 'Jul') {\n      newDate += 'July';\n    }\n    else if (tempDate[1] == 'Aug') {\n      newDate += 'August';\n    }\n    else if (tempDate[1] == 'Sep' || tempDate[1] == 'Sept') {\n      newDate += 'September';\n    }\n    else if (tempDate[1] == 'Oct') {\n      newDate += 'October';\n    }\n    else if (tempDate[1] == 'Nov') {\n      newDate += 'November';\n    }\n    else if (tempDate[1] == 'Dec') {\n      newDate += 'December';\n    }\n\n    newDate += ' ' + tempDate[3];\n\n    return newDate;\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       TOGGLE NOTIFICATIONS \n  /**\n   * This function will toggle the display of the notifications side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificationsTab() {\n    this.notificationsTab = !this.notificationsTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE PROFILE \n  /**\n   * This function will toggle the display of the profile side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleProfileTab() {\n    this.profileTab = !this.profileTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      DISPLAY PROFILE SAVE BUTTON \n  /**\n   * This function will display the save button option if any details in the profile have been altered\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayProfileSaveBtn() {\n    this.saveBtn = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DISPLAY PASSWORD CONFIRM INPUT \n  /**\n   * This function will display the confirm password input field in the user's password was altered\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayConfirmPasswordInput() {\n    this.confirmPasswordInput = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE HELP \n  /**\n   * This function will toggle the display of the help side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleHelpTab() {\n    this.helpTab = !this.helpTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE REPORTING \n  /**\n   * This function will toggle the display of the reporting tab section\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleReportSection() {\n    this.reportingTab = !this.reportingTab;\n    this.logsTab = false;\n\n    //Generate the Request report so that it is ready to be displayed when the report menu option is clicked\n    this.requestLogs = true;\n    this.userLogs = false;\n\n    //Display request report immediately since it is the first active tab\n    this.requestReport = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE LOG \n  /**\n   * This function will toggle the display of the logs tab section\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleLogSection() {\n    this.logsTab = !this.logsTab;\n    this.reportingTab = false;\n    this.requestLogs = false;\n    this.requestReport = false;\n\n    this.userLogs = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET USER LOGS TABLE \n  /**\n   * This function will display the user logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setUserLogTable() {\n    this.userLogs = true;\n    this.databaseLogs = false;\n    this.accessLogs = false;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      SET DATABASE LOGS TABLE \n  /**\n   * This function will display the database logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setDatabaseLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = true;\n    this.accessLogs = false;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET ACCESS LOGS TABLE \n  /**\n   * This function will display the access logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setAccessLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = false;\n    this.accessLogs = true;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET ERROR LOGS TABLE \n  /**\n   * This function will display the error logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setErrorLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = false;\n    this.accessLogs = false;\n    this.errorLogs = true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/StaffMenuComponent.html":{"url":"components/StaffMenuComponent.html","title":"component - StaffMenuComponent","body":"\n                   \n\n\n\n\n\n  Components\n  StaffMenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/Staff/staff-menu/staff-menu.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-staff-menu\n            \n\n            \n                styleUrls\n                ./staff-menu.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./staff-menu.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/Staff/staff-menu/staff-menu.component.ts:23\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-menu/staff-menu.component.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-staff-menu',\n  templateUrl: './staff-menu.component.html',\n  styleUrls: ['./staff-menu.component.scss']\n})\nexport class StaffMenuComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n\n\n  \n  \n    \n      \n    \n    \n      View Samples\n    \n  \n  \n\n  \n  \n    \n      \n    \n    \n      Submit Sample\n    \n  \n  \n\n\n\n\n\n\n\n  \n  \n    \n      \n    \n    \n      CMW Culture Collection\n    \n  \n  \n\n  \n  \n    \n      \n    \n    \n      Data Gatherer\n    \n  \n  \n\n\n\n    \n\n    \n                \n                    ./staff-menu.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                            View Samples                                    Submit Sample                                    CMW Culture Collection                                    Data Gatherer        '\n    var COMPONENTS = [{'name': 'AdminDivComponent', 'selector': 'app-admin-div'},{'name': 'AdminHelpComponent', 'selector': 'app-admin-help'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DatabaseHandlerComponent', 'selector': 'app-database-handler'},{'name': 'ErrorComponent', 'selector': 'app-error'},{'name': 'MemberHelpComponent', 'selector': 'app-member-help'},{'name': 'MemberSubmitSampleComponent', 'selector': 'app-member-submit-sample'},{'name': 'NotificationDivComponent', 'selector': 'app-notification-div'},{'name': 'OrganizationHelpComponent', 'selector': 'app-organization-help'},{'name': 'OrganizationMenuComponent', 'selector': 'app-organization-menu'},{'name': 'OrganizationSubmitSampleComponent', 'selector': 'app-organization-submit-sample'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'SampleDivComponent', 'selector': 'app-sample-div'},{'name': 'SampleFormComponent', 'selector': 'app-sample-form'},{'name': 'StaffDivComponent', 'selector': 'app-staff-div'},{'name': 'StaffHelpComponent', 'selector': 'app-staff-help'},{'name': 'StaffMenuComponent', 'selector': 'app-staff-menu'},{'name': 'StaffSubmitSampleComponent', 'selector': 'app-staff-submit-sample'},{'name': 'StaffViewDatabasesComponent', 'selector': 'app-staff-view-databases'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'StaffMenuComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StaffModule.html":{"url":"modules/StaffModule.html","title":"module - StaffModule","body":"\n                   \n\n\n\n\n    Modules\n    StaffModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/Staff/staff.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { StaffRoutingModule } from './staff-routing.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StaffRoutingModule\n  ]\n})\nexport class StaffModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StaffNotificationComponent.html":{"url":"classes/StaffNotificationComponent.html","title":"class - StaffNotificationComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StaffNotificationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Staff/staff-notification/staff-notification.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                allLogs\n                            \n                            \n                                allNotifications\n                            \n                            \n                                confirmPasswordInput\n                            \n                            \n                                currentUser\n                            \n                            \n                                helpTab\n                            \n                            \n                                localNotificationNumber\n                            \n                            \n                                newNotifications\n                            \n                            \n                                notifications\n                            \n                            \n                                notificationsLoading\n                            \n                            \n                                notificationsTab\n                            \n                            \n                                numberOfUserLogs\n                            \n                            \n                                profileTab\n                            \n                            \n                                saveBtn\n                            \n                            \n                                staff\n                            \n                            \n                                    Private\n                                toggle_status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllStaff\n                            \n                            \n                                getDate\n                            \n                            \n                                loadLogs\n                            \n                            \n                                loadNotifications\n                            \n                            \n                                loadUserDetails\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                removeNotification\n                            \n                            \n                                toggleNotificaitonsTab\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService, router: Router, userManagementService: UserManagementAPIService, diagnosticClinicService: DiagnosticClinicAPIService, resolver: core.ComponentFactoryResolver, notificationLoggingService: NotificationLoggingService, cultureCollectionService: CultureCollectionAPIService)\n                    \n                \n                        \n                            \n                                Defined in src/app/Staff/staff-notification/staff-notification.component.ts:73\n                            \n                        \n\n                \n                    \n                            Creates an instance of StaffNotificationComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        userManagementService\n                                                  \n                                                        \n                                                                        UserManagementAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the User Management API Service\n\n                                                        \n                                                \n                                                \n                                                        diagnosticClinicService\n                                                  \n                                                        \n                                                                        DiagnosticClinicAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Diagnostic Clinic API Service\n\n                                                        \n                                                \n                                                \n                                                        resolver\n                                                  \n                                                        \n                                                                    core.ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        notificationLoggingService\n                                                  \n                                                        \n                                                                        NotificationLoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Notification Logging API service\n\n                                                        \n                                                \n                                                \n                                                        cultureCollectionService\n                                                  \n                                                        \n                                                                        CultureCollectionAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Culture Collection API Service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            allLogs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:55\n                            \n                        \n\n                \n                    \n                        Object array for holding all of the logs that have not been read -  @type {string[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            allNotifications\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:45\n                            \n                        \n\n                \n                    \n                        Object array for holding all of the logs -  @type {any[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            confirmPasswordInput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:65\n                            \n                        \n\n                \n                    \n                        Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:69\n                            \n                        \n\n                \n                    \n                        The user that is currently logged in -  @type {any} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            helpTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:67\n                            \n                        \n\n                \n                    \n                        Indicates if the help tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            localNotificationNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:53\n                            \n                        \n\n                \n                    \n                        The number of the notifications - @type {number} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            newNotifications\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:47\n                            \n                        \n\n                \n                    \n                        Object array for holding all of the logs that have not been read -  @type {any[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notifications\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:49\n                            \n                        \n\n                \n                    \n                        Indicates if there are notifications to load - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notificationsLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:73\n                            \n                        \n\n                \n                    \n                        Specifies if the notifications have been retreived to disable the loading spinner - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notificationsTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:59\n                            \n                        \n\n                \n                    \n                        Indicates if the notifications tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numberOfUserLogs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:51\n                            \n                        \n\n                \n                    \n                        The total number of User Logs - @type {number} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profileTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:61\n                            \n                        \n\n                \n                    \n                        Indicates if the profile tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saveBtn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:63\n                            \n                        \n\n                \n                    \n                        Indicates if the save button is hidden/shown on the profile tab- @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            staff\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     StaffMember[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:71\n                            \n                        \n\n                \n                    \n                        Object array for holding the staff members -  @type {StaffMember[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            toggle_status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:57\n                            \n                        \n\n                \n                    \n                        Indicates if the notifications tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllStaff\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllStaff()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:126\n                \n            \n\n\n            \n                \n                    This function will be used to get all the staff members of FABI and load them into an array\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDate\n                        \n                        \n                    \n                \n            \n            \n                \ngetDate(date: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:153\n                \n            \n\n\n            \n                \n                    This function will put the string date provided into a more readable format for the notifications\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    date\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The date of the log\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadLogs\n                        \n                        \n                    \n                \n            \n            \n                \nloadLogs()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:229\n                \n            \n\n\n            \n                \n                    This function will load all of the user's logs into a string array.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadNotifications\n                        \n                        \n                    \n                \n            \n            \n                \nloadNotifications()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:254\n                \n            \n\n\n            \n                \n                    This function will load the staff member's notifications into the notification section on the HTML page\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadUserDetails\n                        \n                        \n                    \n                \n            \n            \n                \nloadUserDetails(userID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:330\n                \n            \n\n\n            \n                \n                    This function will be called so that the information of a specific user can be fetched\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user id of the user whose details need to be fetched\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:111\n                \n            \n\n\n            \n                \n                    This function is called when the page loads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeNotification\n                        \n                        \n                    \n                \n            \n            \n                \nremoveNotification(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:350\n                \n            \n\n\n            \n                \n                    This function will remove a notification from the notification section on the HTML page.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        //The id of the notification to be removed\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleNotificaitonsTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleNotificaitonsTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-notification/staff-notification.component.ts:374\n                \n            \n\n\n            \n                \n                    This function is used to toggle the notifications tab.\nIf set to true, a class is added which ensures that the notifications tab is displayed. \nIf set to flase, a class is removed which hides the notifications tab.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { CultureCollectionAPIService } from '../../_services/culture-collection-api.service';\nimport { DiagnosticClinicAPIService } from '../../_services/diagnostic-clinic-api.service';\nimport { NotificationLoggingService, UserLogs } from '../../_services/notification-logging.service';\nimport { UserManagementAPIService } from '../../_services/user-management-api.service';\n\n\nexport interface StaffMember {\n  fname: string;\n  surname: string;\n  email: string;\n  id: string;\n}\n\n@core.Component({\n  selector: 'app-staff-notification',\n  templateUrl: './staff-notification.component.html',\n  styleUrls: ['./staff-notification.component.scss']\n})\nexport class StaffNotificationComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Object array for holding all of the logs -  @type {any[]} */\n  allNotifications: any[] = [];\n  /** Object array for holding all of the logs that have not been read -  @type {any[]} */\n  newNotifications: any[] = [];\n  /** Indicates if there are notifications to load - @type {boolean} */\n  notifications: boolean = true;\n  /** The total number of User Logs - @type {number} */\n  numberOfUserLogs: number = 0;\n  /** The number of the notifications - @type {number} */\n  localNotificationNumber: number = 1;\n  /** Object array for holding all of the logs that have not been read -  @type {string[]} */\n  allLogs: string[] = [];\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  private toggle_status: boolean = false;\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  notificationsTab: boolean = false;\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n  /** Indicates if the save button is hidden/shown on the profile tab- @type {boolean} */\n  saveBtn: boolean = false;\n  /** Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} */\n  confirmPasswordInput: boolean = false;\n  /** Indicates if the help tab is hidden/shown - @type {boolean} */\n  helpTab: boolean = false;\n  /** The user that is currently logged in -  @type {any} */\n  currentUser: any;\n  /** Object array for holding the staff members -  @type {StaffMember[]} */\n  staff: StaffMember[] = [];\n  /** Specifies if the notifications have been retreived to disable the loading spinner - @type {boolean} */\n  notificationsLoading: boolean = true;\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       CONSTRUCTOR\n  /**\n   * Creates an instance of StaffNotificationComponent.\n   * \n   * @param {NotificationLoggingService} notificationLoggingService For calling the Notification Logging API service\n   * @param {CultureCollectionAPIService} cultureCollectionService For calling the Culture Collection API Service\n   * @param {UserManagementAPIService} userManagementService For calling the User Management API Service\n   * @param {DiagnosticClinicAPIService} diagnosticClinicService For calling the Diagnostic Clinic API Service\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {Router} router\n   * @param {Resolver} resolver\n   * \n   * @memberof StaffNotificationComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private authService: AuthenticationService,\n    private router: Router,\n    private userManagementService: UserManagementAPIService,\n    private diagnosticClinicService: DiagnosticClinicAPIService,\n    private resolver: core.ComponentFactoryResolver,\n    private notificationLoggingService: NotificationLoggingService,\n    private cultureCollectionService: CultureCollectionAPIService\n  ) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      NG ON INIT()  \n  /**\n   * This function is called when the page loads\n   *\n   * @memberof StaffNotificationComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    // Set current user logged in\n    this.currentUser = this.authService.getCurrentSessionValue.user;\n\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL STAFF\n  /**\n   *  This function will be used to get all the staff members of FABI and load them into an array\n   * \n   *  @memberof StaffNotificationComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaff() {\n    //Subscribing to the UserManagementAPIService to get a list containing all the FABI members\n    this.userManagementService.getAllFABIStaff().subscribe((response: any) => {\n      if (response.success == true) {\n        var data = response.data.qs.staff;\n\n        for (var i = 0; i  {\n      if (response.success == true) {\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        const data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success == true) {\n\n      }\n      else {\n        //Error handling\n      }\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    TOGGLE NOTIFICATIONS TAB\n  /**\n   *  This function is used to toggle the notifications tab.\n   *  \n   *  If set to true, a class is added which ensures that the notifications tab is displayed. \n   *  If set to flase, a class is removed which hides the notifications tab.\n   * \n   * @memberof StaffNotificationComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificaitonsTab() {\n    this.toggle_status = !this.toggle_status;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StaffRoutingModule.html":{"url":"classes/StaffRoutingModule.html","title":"class - StaffRoutingModule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StaffRoutingModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Staff/staff-routing.module.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from '../login/login.component';\nimport { PageNotFoundComponent } from '../page-not-found/page-not-found.component';\nimport { AuthenticationGuard } from '../_guards/authentication.guard';\nimport { Role } from '../_interfaces/role';\nimport { CmwMenuComponent } from './cmw-menu/cmw-menu.component';\nimport { StaffDashboardComponent } from './staff-dashboard/staff-dashboard.component';\nimport { StaffHelpComponent } from \"./staff-help/staff-help.component\";\nimport { StaffProfileComponent } from './staff-profile/staff-profile.component';\nimport { StaffSubmitSampleComponent } from './staff-submit-sample/staff-submit-sample.component';\nimport { StaffViewDatabasesComponent } from \"./staff-view-databases/staff-view-databases.component\";\nimport { StaffViewSamplesComponent } from \"./staff-view-samples/staff-view-samples.component\";\nimport { SubmitCmwDepositComponent } from './submit-cmw-deposit/submit-cmw-deposit.component';\nimport { SubmitCmwRequestComponent } from './submit-cmw-request/submit-cmw-request.component';\nimport { SubmitCmwRevitalizationComponent } from './submit-cmw-revitalization/submit-cmw-revitalization.component';\n\n\n\nconst routes: Routes = [\n  {\n    path: 'staff-dashboard',\n    component: StaffDashboardComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['Staff'] }\n  },\n  {\n    path: 'staff-profile',\n    component: StaffProfileComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['Staff'] }\n  },\n  {\n    path: 'staff-submit-sample',\n    component: StaffSubmitSampleComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['Staff'] }\n  },\n  {\n    path: 'cmw-menu',\n    component: CmwMenuComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['Staff'] }\n  },\n  {\n    path: 'submit-cmw-request',\n    component: SubmitCmwRequestComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['Staff'] }\n  },\n  {\n    path: 'submit-cmw-deposit',\n    component: SubmitCmwDepositComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['Staff'] }\n  },\n  {\n    path: 'submit-cmw-revitalization',\n    component: SubmitCmwRevitalizationComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['Staff'] }\n  },\n  {\n    path: 'staff-view-databases',\n    component: StaffViewDatabasesComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['Staff'] }\n  },\n  {\n    path: 'staff-view-samples',\n    component: StaffViewSamplesComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['Staff'] }\n  },\n  {\n    path: 'staff-help',\n    component: StaffHelpComponent,\n    canActivate: [AuthenticationGuard],\n    data: { roles: ['Staff'] }\n  },\n  {\n    path: 'login',\n    component: LoginComponent\n  },\n  {\n    path: \"**\",\n    component: PageNotFoundComponent\n  }\n];\n\n@core.NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class StaffRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/StaffSubmitSampleComponent.html":{"url":"components/StaffSubmitSampleComponent.html","title":"component - StaffSubmitSampleComponent","body":"\n                   \n\n\n\n\n\n  Components\n  StaffSubmitSampleComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/Staff/staff-submit-sample/staff-submit-sample.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-staff-submit-sample\n            \n\n            \n                styleUrls\n                ./staff-submit-sample.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./staff-submit-sample.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/Staff/staff-submit-sample/staff-submit-sample.component.ts:8\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-submit-sample/staff-submit-sample.component.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-staff-submit-sample',\n  templateUrl: './staff-submit-sample.component.html',\n  styleUrls: ['./staff-submit-sample.component.scss']\n})\nexport class StaffSubmitSampleComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n    \n\n    \n                \n                    ./staff-submit-sample.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AdminDivComponent', 'selector': 'app-admin-div'},{'name': 'AdminHelpComponent', 'selector': 'app-admin-help'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'DatabaseHandlerComponent', 'selector': 'app-database-handler'},{'name': 'ErrorComponent', 'selector': 'app-error'},{'name': 'MemberHelpComponent', 'selector': 'app-member-help'},{'name': 'MemberSubmitSampleComponent', 'selector': 'app-member-submit-sample'},{'name': 'NotificationDivComponent', 'selector': 'app-notification-div'},{'name': 'OrganizationHelpComponent', 'selector': 'app-organization-help'},{'name': 'OrganizationMenuComponent', 'selector': 'app-organization-menu'},{'name': 'OrganizationSubmitSampleComponent', 'selector': 'app-organization-submit-sample'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'SampleDivComponent', 'selector': 'app-sample-div'},{'name': 'SampleFormComponent', 'selector': 'app-sample-form'},{'name': 'StaffDivComponent', 'selector': 'app-staff-div'},{'name': 'StaffHelpComponent', 'selector': 'app-staff-help'},{'name': 'StaffMenuComponent', 'selector': 'app-staff-menu'},{'name': 'StaffSubmitSampleComponent', 'selector': 'app-staff-submit-sample'},{'name': 'StaffViewDatabasesComponent', 'selector': 'app-staff-view-databases'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'StaffSubmitSampleComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StaffViewSamplesComponent.html":{"url":"classes/StaffViewSamplesComponent.html","title":"class - StaffViewSamplesComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StaffViewSamplesComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Staff/staff-view-samples/staff-view-samples.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                sampleFields\n                            \n                            \n                                samples\n                            \n                            \n                                sampleTableLoading\n                            \n                            \n                                    Public\n                                searchSample\n                            \n                            \n                                selectedSampleData\n                            \n                            \n                                    Private\n                                toggle_status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                resetSampleFields\n                            \n                            \n                                selectSample\n                            \n                            \n                                toggleNotificaitonsTab\n                            \n                            \n                                viewSamples\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthenticationService, diagnosticClinicService: DiagnosticClinicAPIService, dialog: MatDialog, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/Staff/staff-view-samples/staff-view-samples.component.ts:43\n                            \n                        \n\n                \n                    \n                            Creates an instance of MemberViewSamplesComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service\n\n                                                        \n                                                \n                                                \n                                                        diagnosticClinicService\n                                                  \n                                                        \n                                                                        DiagnosticClinicAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Diagnostic Clinic API service\n\n                                                        \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sampleFields\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-view-samples/staff-view-samples.component.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            samples\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-view-samples/staff-view-samples.component.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sampleTableLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-view-samples/staff-view-samples.component.ts:43\n                            \n                        \n\n                \n                    \n                        Specifies if the list of samples have been retreived to disable the loading spinner - @type {boolean} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            searchSample\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-view-samples/staff-view-samples.component.ts:41\n                            \n                        \n\n                \n                    \n                        The search item the user is looking for in the table -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedSampleData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-view-samples/staff-view-samples.component.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            toggle_status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/staff-view-samples/staff-view-samples.component.ts:39\n                            \n                        \n\n                \n                    \n                        Indicates if the notifications tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-view-samples/staff-view-samples.component.ts:105\n                \n            \n\n\n            \n                \n                    This function will log the user out of the web application and clear the authentication data stored in the local storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-view-samples/staff-view-samples.component.ts:91\n                \n            \n\n\n            \n                \n                    This function is called when the page loads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resetSampleFields\n                        \n                        \n                    \n                \n            \n            \n                \nresetSampleFields()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-view-samples/staff-view-samples.component.ts:167\n                \n            \n\n\n            \n                \n                    This function will clear the modal contains the selected sample's details\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            selectSample\n                        \n                        \n                    \n                \n            \n            \n                \nselectSample(sample: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-view-samples/staff-view-samples.component.ts:145\n                \n            \n\n\n            \n                \n                    Called when a user selects a sample and sets the selected sample as well as it's data fields\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sample\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleNotificaitonsTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleNotificaitonsTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-view-samples/staff-view-samples.component.ts:76\n                \n            \n\n\n            \n                \n                    This function is used to toggle the notifications tab.\nIf set to true, a class is added which ensures that the notifications tab is displayed. \nIf set to flase, a class is removed which hides the notifications tab.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            viewSamples\n                        \n                        \n                    \n                \n            \n            \n                \nviewSamples()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/staff-view-samples/staff-view-samples.component.ts:119\n                \n            \n\n\n            \n                \n                    This function will be used to display all the samples associated with the user in the HTML page\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { DiagnosticClinicAPIService } from 'src/app/_services/diagnostic-clinic-api.service';\n\n\n@core.Component({\n  selector: 'app-staff-view-samples',\n  templateUrl: './staff-view-samples.component.html',\n  styleUrls: ['./staff-view-samples.component.scss']\n})\nexport class StaffViewSamplesComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  sampleFields: any[] = [];\n  samples: any[];\n  selectedSampleData: any\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  private toggle_status: boolean = false;\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchSample: string = \"\";\n  /** Specifies if the list of samples have been retreived to disable the loading spinner - @type {boolean} */\n  sampleTableLoading: boolean = true;\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of MemberViewSamplesComponent.\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {DiagnosticClinicAPIService} diagnosticClinicService For calling the Diagnostic Clinic API service\n   * @param {MatDialog} dialog\n   * @param {Router} router\n   * \n   * @memberof MemberViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private authService: AuthenticationService,\n    private diagnosticClinicService: DiagnosticClinicAPIService,\n    private dialog: MatDialog,\n    private router: Router\n  ) { }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  TOGGLE NOTIFICATIONS TAB\n  /**\n   *  This function is used to toggle the notifications tab.\n   *  \n   *  If set to true, a class is added which ensures that the notifications tab is displayed. \n   *  If set to flase, a class is removed which hides the notifications tab.\n   * \n   * @memberof StaffViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificaitonsTab() {\n    this.toggle_status = !this.toggle_status;\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @description 1. Call viewSamples()\n   * \n   * @memberof StaffViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    //Calling the neccessary functions as the page loads\n    this.viewSamples();\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof StaffViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            VIEW SAMPLES \n  /**\n   * This function will be used to display all the samples associated with the user in the HTML page\n   * \n   * @memberof StaffViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  viewSamples() {\n    this.diagnosticClinicService.retrieveMemberSamples().subscribe((response: any) => {\n\n      if (response.success == true && response.code == 200) {\n\n        this.samples = response.data.samples;\n\n        //Deactivate loading table spinners\n        this.sampleTableLoading = false;\n\n      } else if (response.success == false) {\n        //POPUP MESSAGE\n      }\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            SELECT SAMPLE \n  /**\n   * Called when a user selects a sample and sets the selected sample as well as it's data fields\n   *\n   * @param {*} sample\n   * @memberof StaffViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  selectSample(sample: any) {\n    this.selectedSampleData = sample.data;\n\n    Object.keys(this.selectedSampleData).forEach((column) => {\n\n      let obj = {\n        'name': column\n      }\n      this.sampleFields.push(obj);\n\n    });\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            RESET SAMPLE FIELDS \n  /**\n   * This function will clear the modal contains the selected sample's details\n   * \n   * @memberof StaffViewSamplesComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  resetSampleFields() {\n    this.sampleFields = [];\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SubmitCmwRequestComponent.html":{"url":"classes/SubmitCmwRequestComponent.html","title":"class - SubmitCmwRequestComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SubmitCmwRequestComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cmwRequestForm\n                            \n                            \n                                cultureNumber\n                            \n                            \n                                currentUser\n                            \n                            \n                                dateRequested\n                            \n                            \n                                notes\n                            \n                            \n                                referenceNumber\n                            \n                            \n                                requestor\n                            \n                            \n                                    Public\n                                searchItem\n                            \n                            \n                                staff\n                            \n                            \n                                taxonName\n                            \n                            \n                                    Private\n                                toggle_status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllStaff\n                            \n                            \n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                submitCMWRequestForm\n                            \n                            \n                                toggleNotificaitonsTab\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(formBuilder: FormBuilder, snackBar: MatSnackBar, userManagementService: UserManagementAPIService, cultureCollectionService: CultureCollectionAPIService, authService: AuthenticationService, router: Router, notificationLoggingService: NotificationLoggingService)\n                    \n                \n                        \n                            \n                                Defined in src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts:63\n                            \n                        \n\n                \n                    \n                            Creates an instance of SubmitCmwRequestComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Used to build the form from the HTML page\n\n                                                        \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For snack-bar pop-up messages\n\n                                                        \n                                                \n                                                \n                                                        userManagementService\n                                                  \n                                                        \n                                                                        UserManagementAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For making calls to the User Management API Service\n\n                                                        \n                                                \n                                                \n                                                        cultureCollectionService\n                                                  \n                                                        \n                                                                        CultureCollectionAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for making calls to the Culture Collection API Service\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        notificationLoggingService\n                                                  \n                                                        \n                                                                        NotificationLoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Notification Logging API service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cmwRequestForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts:38\n                            \n                        \n\n                \n                    \n                        The form to submit a CMW request form -  @type {FormGroup} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cultureNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts:48\n                            \n                        \n\n                \n                    \n                        The cultureNumber of the form -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts:60\n                            \n                        \n\n                \n                    \n                        The details of the user currently logged in -  @type {any} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateRequested\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts:50\n                            \n                        \n\n                \n                    \n                        The dateRequested of the form -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts:54\n                            \n                        \n\n                \n                    \n                        The notes of the form -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            referenceNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts:52\n                            \n                        \n\n                \n                    \n                        The reference number of the form -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            requestor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts:44\n                            \n                        \n\n                \n                    \n                        The requestor of the form -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            searchItem\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts:63\n                            \n                        \n\n                \n                    \n                        The search item the user is looking for in the form -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            staff\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts:41\n                            \n                        \n\n                \n                    \n                        Object array for holding the staff members -  @type {string[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            taxonName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts:46\n                            \n                        \n\n                \n                    \n                        The taxonName of the form -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            toggle_status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts:57\n                            \n                        \n\n                \n                    \n                        Indicates if the notifications tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllStaff\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllStaff()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts:203\n                \n            \n\n\n            \n                \n                    This function will load of the FABI staff members and administrators into an array so that they can be selected when filling out\nthe form to submit.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts:109\n                \n            \n\n\n            \n                \n                    \nThis function will log the user out of the web application and clear the authentication data stored in the local storage\n\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts:239\n                \n            \n\n\n            \n                \n                    This function is called when the page loads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            submitCMWRequestForm\n                        \n                        \n                    \n                \n            \n            \n                \nsubmitCMWRequestForm()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts:121\n                \n            \n\n\n            \n                \n                    This function will submit a CMW Request form based on the information provided in the form on the HTML page.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleNotificaitonsTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleNotificaitonsTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts:225\n                \n            \n\n\n            \n                \n                    This function is used to toggle the notifications tab.\nIf set to true, a class is added which ensures that the notifications tab is displayed. \nIf set to flase, a class is removed which hides the notifications tab.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { CMWRequest, CultureCollectionAPIService } from '../../_services/culture-collection-api.service';\nimport { NotificationLoggingService } from '../../_services/notification-logging.service';\nimport { UserManagementAPIService } from '../../_services/user-management-api.service';\n\n\n@core.Component({\n  selector: 'app-submit-cmw-request',\n  templateUrl: './submit-cmw-request.component.html',\n  styleUrls: ['./submit-cmw-request.component.scss']\n})\nexport class SubmitCmwRequestComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** The form to submit a CMW request form -  @type {FormGroup} */\n  cmwRequestForm: FormGroup;\n\n  /** Object array for holding the staff members -  @type {string[]} */\n  staff: string[] = [];\n\n  /** The requestor of the form -  @type {string} */\n  requestor: string;\n  /** The taxonName of the form -  @type {string} */\n  taxonName: string;\n  /** The cultureNumber of the form -  @type {string} */\n  cultureNumber: string;\n  /** The dateRequested of the form -  @type {string} */\n  dateRequested: string;\n  /** The reference number of the form -  @type {string} */\n  referenceNumber: string;\n  /** The notes of the form -  @type {string} */\n  notes: string;\n\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  private toggle_status: boolean = false;\n\n  /** The details of the user currently logged in -  @type {any} */\n  currentUser: any;\n\n  /** The search item the user is looking for in the form -  @type {string} */\n  public searchItem: string;\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of SubmitCmwRequestComponent.\n   * \n   * @param {UserManagementAPIService} userManagementService For making calls to the User Management API Service\n   * @param {CultureCollectionAPIService} cultureCollectionService for making calls to the Culture Collection API Service\n   * @param {NotificationLoggingAPIService} notificationLoggingService For calling the Notification Logging API service\n   * @param {MatSnackBar} snackBar For snack-bar pop-up messages\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {FormBuilder} formBuilder Used to build the form from the HTML page\n   * @param {Router} router\n   * \n   * @memberof SubmitCmwRequestComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private formBuilder: FormBuilder,\n    private snackBar: MatSnackBar,\n    private userManagementService: UserManagementAPIService,\n    private cultureCollectionService: CultureCollectionAPIService,\n    private authService: AuthenticationService,\n    private router: Router,\n    private notificationLoggingService: NotificationLoggingService\n  ) {\n    this.cmwRequestForm = this.formBuilder.group({\n      requestor: '',\n      taxon_name: '',\n      culture_number: '',\n      date_requested: null,\n      reference_number: '',\n      notes: '',\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /*** This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof SubmitCmwRequestComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  SUBMIT CMW REQUEST FORM\n  /**\n   * This function will submit a CMW Request form based on the information provided in the form on the HTML page.\n   * @memberof SubmitCmwRequestComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWRequestForm() {\n    if (this.cmwRequestForm.controls.requestor.value == null || this.cmwRequestForm.controls.requestor.value == \"\") {\n      this.requestor = \"N/A\";\n    }\n    else {\n      this.requestor = this.cmwRequestForm.controls.requestor.value;\n    }\n\n    if (this.cmwRequestForm.controls.taxon_name.value == null || this.cmwRequestForm.controls.taxon_name.value == \"\") {\n      this.taxonName = \"N/A\";\n    }\n    else {\n      this.taxonName = this.cmwRequestForm.controls.taxon_name.value;\n    }\n\n    if (this.cmwRequestForm.controls.culture_number.value == null || this.cmwRequestForm.controls.culture_number.value == \"\") {\n      this.cultureNumber = \"N/A\";\n    }\n    else {\n      this.cultureNumber = this.cmwRequestForm.controls.culture_number.value;\n    }\n\n    var temp = (this.cmwRequestForm.controls.date_requested.value).toString();\n    var year = temp[0] + temp[1] + temp[2] + temp[3];\n    var month = temp[5] + temp[6];\n    var day = temp[8] + temp[9];\n    this.dateRequested = day + '/' + month + '/' + year;\n\n    if (this.cmwRequestForm.controls.reference_number.value == null || this.cmwRequestForm.controls.reference_number.value == \"\") {\n      this.referenceNumber = \"N/A\";\n    }\n    else {\n      this.referenceNumber = this.cmwRequestForm.controls.reference_number.value;\n    }\n\n    if (this.cmwRequestForm.controls.notes.value == null || this.cmwRequestForm.controls.notes.value == \"\") {\n      this.notes = \"N/A\";\n    }\n    else {\n      this.notes = this.cmwRequestForm.controls.notes.value;\n    }\n\n    var date = new Date();\n    var currentDate = ('0' + date.getDate()).slice(-2) + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();\n\n    var request: CMWRequest = {\n      userID: this.currentUser.ID, requestor: this.requestor, taxonName: this.taxonName,\n      cultureNumber: this.cultureNumber, dateRequested: this.dateRequested, referenceNumber: this.referenceNumber,\n      notes: this.notes, dateSubmitted: currentDate\n    };\n\n    this.cultureCollectionService.submitCMWRequestForm(request).subscribe((response: any) => {\n      if (response.success == true) {\n        //Successfully submitted form\n\n        this.cmwRequestForm.reset();\n\n        //POPUP MESSAGE\n        let snackBarRef = this.snackBar.open(\"CMW Request form successfully submitted.\", \"Dismiss\", {\n          duration: 3000\n        });\n      }\n      else {\n        //Error handling\n\n        //POPUP MESSAGE\n        let snackBarRef = this.snackBar.open(\"Could not submit CMW Request form. Please try again.\", \"Dismiss\", {\n          duration: 3000\n        });\n      }\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      GET ALL STAFF\n  /**\n   *  This function will load of the FABI staff members and administrators into an array so that they can be selected when filling out\n   *  the form to submit.\n   * @memberof SubmitCmwRequestComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaff() {\n    //Subscribing to the UserManagementAPIService to get a list containing all the FABI members\n    this.userManagementService.getAllFABIStaff().subscribe((response: any) => {\n      if (response.success == true) {\n        for (var i = 0; i \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SubmitCmwRevitalizationComponent.html":{"url":"classes/SubmitCmwRevitalizationComponent.html","title":"class - SubmitCmwRevitalizationComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SubmitCmwRevitalizationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bionumericsName\n                            \n                            \n                                cmwRevitalizationForm\n                            \n                            \n                                cultureCondition\n                            \n                            \n                                cultureNumber\n                            \n                            \n                                currentName\n                            \n                            \n                                currentUser\n                            \n                            \n                                dateRequested\n                            \n                            \n                                dateReturned\n                            \n                            \n                                referenceNumber\n                            \n                            \n                                requestor\n                            \n                            \n                                    Public\n                                searchItem\n                            \n                            \n                                sequence\n                            \n                            \n                                staff\n                            \n                            \n                                    Private\n                                toggle_status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllStaff\n                            \n                            \n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                submitCMWRevitalizationForm\n                            \n                            \n                                toggleNotificaitonsTab\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(formBuilder: FormBuilder, snackBar: MatSnackBar, userManagementService: UserManagementAPIService, cultureCollectionService: CultureCollectionAPIService, authService: AuthenticationService, router: Router, notificationLoggingService: NotificationLoggingService)\n                    \n                \n                        \n                            \n                                Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:68\n                            \n                        \n\n                \n                    \n                            Creates an instance of SubmitCmwRevitalizationComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Used to build the form from the HTML page\n\n                                                        \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For snack-bar pop-up messages\n\n                                                        \n                                                \n                                                \n                                                        userManagementService\n                                                  \n                                                        \n                                                                        UserManagementAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For making calls to the User Management API Service\n\n                                                        \n                                                \n                                                \n                                                        cultureCollectionService\n                                                  \n                                                        \n                                                                        CultureCollectionAPIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for making calls to the Culture Collection API Service\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for calling the authentication service\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        notificationLoggingService\n                                                  \n                                                        \n                                                                        NotificationLoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For calling the Notification Logging API service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bionumericsName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:47\n                            \n                        \n\n                \n                    \n                        The bionumerics name of the form -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cmwRevitalizationForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:37\n                            \n                        \n\n                \n                    \n                        The form to submit a CMW revitalization form -  @type {FormGroup} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cultureCondition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:51\n                            \n                        \n\n                \n                    \n                        The culture condition of the form -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cultureNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:49\n                            \n                        \n\n                \n                    \n                        The culture number of the form -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:45\n                            \n                        \n\n                \n                    \n                        The current name of the form -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:65\n                            \n                        \n\n                \n                    \n                        The details of the user currently logged in -  @type {any} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateRequested\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:57\n                            \n                        \n\n                \n                    \n                        The date requested of the form -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateReturned\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:59\n                            \n                        \n\n                \n                    \n                        The date returned of the form -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            referenceNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:55\n                            \n                        \n\n                \n                    \n                        The reference number of the form -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            requestor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:43\n                            \n                        \n\n                \n                    \n                        The requestor of the form -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            searchItem\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:68\n                            \n                        \n\n                \n                    \n                        The search item the user is looking for in the form -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sequence\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:53\n                            \n                        \n\n                \n                    \n                        The sequence of the form -  @type {string} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            staff\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:40\n                            \n                        \n\n                \n                    \n                        Object array for holding the staff members -  @type {string[]} \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            toggle_status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:62\n                            \n                        \n\n                \n                    \n                        Indicates if the notifications tab is hidden/shown - @type {boolean} \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllStaff\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllStaff()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:231\n                \n            \n\n\n            \n                \n                    This function will load of the FABI staff members and administrators into an array so that they can be selected when filling out\nthe form to submit.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:117\n                \n            \n\n\n            \n                \n                    This function will log the user out of the web application and clear the authentication data stored in the local storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:267\n                \n            \n\n\n            \n                \n                    This function is called when the page loads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            submitCMWRevitalizationForm\n                        \n                        \n                    \n                \n            \n            \n                \nsubmitCMWRevitalizationForm()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:130\n                \n            \n\n\n            \n                \n                    This function will submit a CMW Revitalization form based on the information provided in the form on the HTML page.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleNotificaitonsTab\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleNotificaitonsTab()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts:253\n                \n            \n\n\n            \n                \n                    This function is used to toggle the notifications tab.\nIf set to true, a class is added which ensures that the notifications tab is displayed. \nIf set to flase, a class is removed which hides the notifications tab.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as core from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { CMWRevitalization, CultureCollectionAPIService } from '../../_services/culture-collection-api.service';\nimport { NotificationLoggingService } from '../../_services/notification-logging.service';\nimport { UserManagementAPIService } from '../../_services/user-management-api.service';\n\n@core.Component({\n  selector: 'app-submit-cmw-revitalization',\n  templateUrl: './submit-cmw-revitalization.component.html',\n  styleUrls: ['./submit-cmw-revitalization.component.scss']\n})\nexport class SubmitCmwRevitalizationComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** The form to submit a CMW revitalization form -  @type {FormGroup} */\n  cmwRevitalizationForm: FormGroup;\n\n  /** Object array for holding the staff members -  @type {string[]} */\n  staff: string[] = [];\n\n  /** The requestor of the form -  @type {string} */\n  requestor: string;\n  /** The current name of the form -  @type {string} */\n  currentName: string;\n  /** The bionumerics name of the form -  @type {string} */\n  bionumericsName: string;\n  /** The culture number of the form -  @type {string} */\n  cultureNumber: string;\n  /** The culture condition of the form -  @type {string} */\n  cultureCondition: string;\n  /** The sequence of the form -  @type {string} */\n  sequence: string;\n  /** The reference number of the form -  @type {string} */\n  referenceNumber: string;\n  /** The date requested of the form -  @type {string} */\n  dateRequested: string;\n  /** The date returned of the form -  @type {string} */\n  dateReturned: string;\n\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  private toggle_status: boolean = false;\n\n  /** The details of the user currently logged in -  @type {any} */\n  currentUser: any;\n\n  /** The search item the user is looking for in the form -  @type {string} */\n  public searchItem: string;\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                             CONSTRUCTOR\n  /**\n   * Creates an instance of SubmitCmwRevitalizationComponent.\n   * \n   * @param {UserManagementAPIService} userManagementService For making calls to the User Management API Service\n   * @param {CultureCollectionAPIService} cultureCollectionService for making calls to the Culture Collection API Service\n   * @param {notificationLoggingService} notificationLoggingService For calling the Notification Logging API service\n   * @param {MatSnackBar} snackBar For snack-bar pop-up messages\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {FormBuilder} formBuilder Used to build the form from the HTML page\n   * @param {Router} router\n   * \n   * @memberof SubmitCmwRevitalizationComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private formBuilder: FormBuilder,\n    private snackBar: MatSnackBar,\n    private userManagementService: UserManagementAPIService,\n    private cultureCollectionService: CultureCollectionAPIService,\n    private authService: AuthenticationService,\n    private router: Router,\n    private notificationLoggingService: NotificationLoggingService\n  ) {\n    this.cmwRevitalizationForm = this.formBuilder.group({\n      requestor: '',\n      current_name: '',\n      name_bionumerics: '',\n      culture_number: '',\n      culture_condition: '',\n      sequence_data_submitted: '',\n      reference_number: '',\n      date_requested: null,\n      date_returned: null\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof SubmitCmwRevitalizationComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  SUBMIT CMW REVITALIZATION FORM\n  /**\n   * This function will submit a CMW Revitalization form based on the information provided in the form on the HTML page.\n   * @memberof SubmitCmwRevitalizationComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWRevitalizationForm() {\n    if (this.cmwRevitalizationForm.controls.requestor.value == null || this.cmwRevitalizationForm.controls.requestor.value == \"\") {\n      this.requestor = \"N/A\";\n    }\n    else {\n      this.requestor = this.cmwRevitalizationForm.controls.requestor.value;\n    }\n\n    if (this.cmwRevitalizationForm.controls.current_name.value == null || this.cmwRevitalizationForm.controls.current_name.value == \"\") {\n      this.currentName = \"N/A\";\n    }\n    else {\n      this.currentName = this.cmwRevitalizationForm.controls.current_name.value;\n    }\n\n    if (this.cmwRevitalizationForm.controls.name_bionumerics.value == null || this.cmwRevitalizationForm.controls.name_bionumerics.value == \"\") {\n      this.bionumericsName = \"N/A\";\n    }\n    else {\n      this.bionumericsName = this.cmwRevitalizationForm.controls.name_bionumerics.value;\n    }\n\n    if (this.cmwRevitalizationForm.controls.culture_number.value == null || this.cmwRevitalizationForm.controls.culture_number.value == \"\") {\n      this.cultureNumber = \"N/A\";\n    }\n    else {\n      this.cultureNumber = this.cmwRevitalizationForm.controls.culture_number.value;\n    }\n\n    if (this.cmwRevitalizationForm.controls.culture_condition.value == null || this.cmwRevitalizationForm.controls.culture_condition.value == \"\") {\n      this.cultureCondition = \"N/A\";\n    }\n    else {\n      this.cultureCondition = this.cmwRevitalizationForm.controls.culture_condition.value;\n    }\n\n    if (this.cmwRevitalizationForm.controls.sequence.value == null || this.cmwRevitalizationForm.controls.sequence.value == \"\") {\n      this.sequence = \"N/A\";\n    }\n    else {\n      this.sequence = this.cmwRevitalizationForm.controls.sequence.value;\n    }\n\n    if (this.cmwRevitalizationForm.controls.reference_number.value == null || this.cmwRevitalizationForm.controls.reference_number.value == \"\") {\n      this.referenceNumber = \"N/A\";\n    }\n    else {\n      this.referenceNumber = this.cmwRevitalizationForm.controls.reference_number.value;\n    }\n\n    var temp = (this.cmwRevitalizationForm.controls.date_requested.value).toString();\n    var year = temp[0] + temp[1] + temp[2] + temp[3];\n    var month = temp[5] + temp[6];\n    var day = temp[8] + temp[9];\n    this.dateRequested = day + '/' + month + '/' + year;\n\n    var temp = (this.cmwRevitalizationForm.controls.date_requested.value).toString();\n    var year = temp[0] + temp[1] + temp[2] + temp[3];\n    var month = temp[5] + temp[6];\n    var day = temp[8] + temp[9];\n    this.dateReturned = day + '/' + month + '/' + year;\n\n    var date = new Date();\n    var currentDate = ('0' + date.getDate()).slice(-2) + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();\n\n    var revitalization: CMWRevitalization = {\n      userID: this.currentUser.ID, requestor: this.requestor, currentName: this.currentName, nameBionumerics: this.bionumericsName, cultureNumber: this.cultureNumber,\n      cultureCondition: this.cultureCondition, sequenceDateSubmitted: this.sequence, referenceNumber: this.referenceNumber, dateRequested: this.dateRequested,\n      dateReturned: this.dateReturned, dateSubmitted: currentDate\n    };\n\n    this.cultureCollectionService.submitCMWRevitalizationForm(revitalization).subscribe((response: any) => {\n      if (response.success == true) {\n        //Successfully submitted form\n        this.cmwRevitalizationForm.reset();\n\n        //POPUP MESSAGE\n        let snackBarRef = this.snackBar.open(\"CMW Revitalization form successfully submitted.\", \"Dismiss\", {\n          duration: 3000\n        });\n      }\n      else {\n        //Error handling\n\n        //POPUP MESSAGE\n        let snackBarRef = this.snackBar.open(\"Could not submit CMW Revitalization form. Please try again.\", \"Dismiss\", {\n          duration: 3000\n        });\n      }\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET ALL STAFF\n  /**\n   *  This function will load of the FABI staff members and administrators into an array so that they can be selected when filling out\n   *  the form to submit.\n   * @memberof SubmitCmwRevitalizationComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaff() {\n    //Subscribing to the UserManagementAPIService to get a list containing all the FABI members\n    this.userManagementService.getAllFABIStaff().subscribe((response: any) => {\n      if (response.success == true) {\n        for (var i = 0; i \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UpdateDepositForm.html":{"url":"interfaces/UpdateDepositForm.html","title":"interface - UpdateDepositForm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UpdateDepositForm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/culture-collection-api.service.ts\n        \n\n            \n                Description\n            \n            \n                Object for defining the object for updating the status of a deposit form\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        formID\n                                \n                                \n                                        status\n                                \n                                \n                                        userID\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        formID\n                                    \n                                \n                                \n                                    \n                                        formID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userID\n                                    \n                                \n                                \n                                    \n                                        userID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as http from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport { AuthenticationService } from './authentication.service';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getRequestLogsURL = `${config.cultureClinicURL}/getAllRequestForms`;\nconst getDepositLogsURL = `${config.cultureClinicURL}/getAllDepositForms`;\nconst getRevitalizationLogsURL = `${config.cultureClinicURL}/getAllRevitalizationForms`;\nconst getProcessedLogsURL = `${config.cultureClinicURL}/getAllProcessingForms`;\nconst submitCMWDepositFormURL = `${config.cultureClinicURL}/submitCMWDepositForm`;\nconst submitCMWRequestFormURL = `${config.cultureClinicURL}/submitCMWRequestForm`;\nconst submitCMWRevitalizationFormURL = `${config.cultureClinicURL}/submitCMWRevitalizationForm`;\nconst submitProcessedFormURL = `${config.cultureClinicURL}/submitCMWProcessingForm`;\nconst updateDepositFormStatusURL = `${config.cultureClinicURL}/updateDepositStatus`;\nconst deleteDepositFormURL = `${config.cultureClinicURL}/deleteCMWDepositForm`;\nconst deleteRequestFormURL = `${config.cultureClinicURL}/deleteCMWRequestForm`;\nconst deleteRevitalizationFormURL = `${config.cultureClinicURL}/deleteCMWRevitalizationForm`;\nconst deleteProcessedFormURL = `${config.cultureClinicURL}/deleteCMWProcessingForm`;\n\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW DEPOSIT\n/**\n *  Object for defining the CMW deposit form values\n *\n * @export\n * @interface CMWDeposit\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWDeposit {\n  userID: string;                         //The user id of the user submitting the form\n  cmwCultureNumber: string;               //The culture number\n  genus: string;                          //The genus of the culture\n  epitheton: string;                      //The epitheton of the culture\n  personalCollectionNumber: string;       //The personal collection number (if any)\n  internationalCollectionNumber: string;  //The international collection number (if any)\n  herbariumNumber: string;                //The herbarium number of the culture\n  otherFABICollections: string;           //Indicates if there are currently any other collections\n  name: string;                           //The name of the culture\n  typeStatus: string;                     //The type status of the culture\n  host: string;                           //The host of the culture\n  vector: string;                         //The vector of the culture\n  substrate: string;                      //The substrate of the culture\n  continent: string;                      //The continent where the culture originated from\n  country: string;                        //The country where the culture originated from\n  region: string;                         //The region where the culture originated from\n  locality: string;                       //The locality of the culture\n  gps: string;                            //The GPS coordinates of where the culture originated from\n  collectedBy: string;                    //The user who collected the culture\n  dateCollected: string;                  //The date that the culture was collected\n  isolatedBy: string;                     //The user who isolated the culture\n  identifiedBy: string;                   //The user who identified the culture\n  donatedBy: string;                      //The user who donated the culture (if any)\n  additionalNotes: string;                //Any additional notes (if any)\n  dateSubmitted: string;                  //The date that the form was submitted\n  formID: string;                         //The id number for the actual form\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW REQUEST\n/**\n *  Object for defining the CMW request form values\n *\n * @export\n * @interface CMWRequest\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWRequest {\n  userID: string;                         //The user id of the user submitting the form\n  requestor: string;                      //The user who is requesting the culture\n  taxonName: string;                      //The taxon name of the culture\n  cultureNumber: string;                  //The culture number\n  dateRequested: string;                  //The date that the culture is requested for\n  referenceNumber: string;                //The reference number\n  notes: string;                          //Any notes (if any)\n  dateSubmitted: string;                  //The date that the form was submitted\n}\n\n///////////////////////////////////////////////////////////////////////\n//                            CMW REVILIZATION\n/**\n * Object for defining the CMW revitalization form values\n *\n * @export\n * @interface CMWRevitalization\n */\n///////////////////////////////////////////////////////////////////////\nexport interface CMWRevitalization {\n  userID: string;                         //The user id of the user submitting the form\n  requestor: string;                      //The user who is requesting the culture\n  currentName: string;                    //The current name of the culture\n  nameBionumerics: string;                //The bionumeric name of the culture\n  cultureNumber: string;                  //The culture number\n  cultureCondition: string;               //The condition of the culture\n  sequenceDateSubmitted: string;          //The sequence date submitted (if any)\n  referenceNumber: string;                //The reference number\n  dateRequested: string;                  //The date that the culture is requested\n  dateReturned: string;                   //The date that the culture was returned\n  dateSubmitted: string;                  //The date that the form was submitted\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            PROCESSED FORM\n/**\n * Object for defining the processed deposit form values\n *\n * @export\n * @interface ProcessedForm\n */\n///////////////////////////////////////////////////////////////////////\nexport interface ProcessedForm {\n  userID: string;                         //The user id of the user submitting the form\n  statusOfCulture: string;               //The status of the culture for the processed form\n  agarSlants: string;                     //The agar slants for the processed form\n  water: string;                          //The water for the processed form\n  oil: string;                            //The oil for the processed form\n  roomTemperature: string;                //The room temperature for the processed form\n  c18: string;                            //The c18 for the processed form\n  freezeDried: string;                    //The freezed dried for the processed form\n  freeze: string;                         //The freeze for the processed form\n  dateOfCollectionValidation: string;     //The date of collection validation for the processed form\n  microscopeSlides: string;               //The microscope slides for the processed form\n  dateSubmittedProcessedForm: string;     //The date submitted for the processed form\n  cultureCollectionNumber: string;        //The culture collection number for the processed form\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                          UPDATED DEPOSIT FORM\n/**\n * Object for defining the object for updating the status of a deposit form\n *\n * @export\n * @interface UpdateDepositForm\n */\n///////////////////////////////////////////////////////////////////////\nexport interface UpdateDepositForm {\n  userID: string;                         //The user id off the user submitting the form\n  status: string;                         //The new status of the deposit form\n  formID: string;                         //The id of the form to be updated\n}\n\n\n/**\n * Used to handled all `culture collection` requests and functions\n *\n * @export\n * @class CultureCollectionAPIService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CultureCollectionAPIService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of CultureCollectionAPIService.\n  * \n  * @param {http.HttpClient} http for making http calls to the API\n  * @param {AuthenticationService} authService for calling the *authentication* service\n  * @memberof CultureCollectionAPIService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: http.HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL REQUEST LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'REQUEST'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllRequestLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getRequestLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL DEPOSIT LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'DEPOSIT'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllDepositLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getDepositLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL REVITALIZATION LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'REVITALIZATION'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllRevitalizationLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getRevitalizationLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL PROCESSED LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the logs with type 'PROCESSED'\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllProcessedLogs() {\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request('POST', getProcessedLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      SUBMIT CMW DEPOSIT FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW deposit form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWDepositForm(data: CMWDeposit) {\n    const options = {\n      method: 'POST',\n      url: submitCMWDepositFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWDepositFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT CMW REQUEST FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW request form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWRequestForm(data: CMWRequest) {\n    const options = {\n      headers: new http.HttpHeaders({\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      }),\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWRequestFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT CMW REVITALIZATION FORM \n  /**\n   *    This function sends a POST request to the server to submit a CMW revitalization form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitCMWRevitalizationForm(data: CMWRevitalization) {\n    const options = {\n      method: 'POST',\n      url: submitCMWRevitalizationFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitCMWRevitalizationFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    SUBMIT PROCESSED FORM \n  /**\n   *    This function sends a POST request to the server to submit a process form for a deposit form and save it to the\n   *    database.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  submitProcessedForm(data: ProcessedForm) {\n    const options = {\n      method: 'POST',\n      url: submitProcessedFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', submitProcessedFormURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE DEPOSIT FORM STATUS \n  /**\n   *    This function is used to update the status of a deposit form to 'processed'.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateDepositFormStatus(data: UpdateDepositForm) {\n    const options = {\n      method: 'POST',\n      url: updateDepositFormStatusURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateDepositFormStatusURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE DEPOSIT FORM \n  /**\n   *    This function is used to delete a deposit form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteDepositForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteDepositFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteDepositFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE REQUEST FORM \n  /**\n   *    This function is used to delete a request form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteRequestForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteRequestFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteRequestFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE REVITALIZATION FORM \n  /**\n   *    This function is used to delete a revitalization form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteRevitalizationForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteRevitalizationFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteRevitalizationFormURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DELETE PROCESSED FORM \n  /**\n   *    This function is used to delete a processed form on request.\n   *\n   * @returns API response @type any\n   * \n   * @memberof CultureCollectionAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  deleteProcessedForm(id: string, form: string) {\n    var data = { userID: id, formID: form };\n\n    const options = {\n      method: 'POST',\n      url: deleteProcessedFormURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', deleteProcessedFormURL, options);\n  }\n\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UpdateMember.html":{"url":"interfaces/UpdateMember.html","title":"interface - UpdateMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UpdateMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/user-management-api.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        fname\n                                \n                                \n                                        surname\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fname\n                                    \n                                \n                                \n                                    \n                                        fname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surname\n                                    \n                                \n                                \n                                    \n                                        surname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as Interface from \"../_interfaces/interfaces\";\nimport { AuthenticationService } from \"./authentication.service\";\n\nimport { config } from \"../../environments/environment.prod\";\nimport { map } from 'rxjs/operators';\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllFABIStaffURL = `${config.userManagementURL}/getAllStaff`;\nconst getAllOrganizationMembers = `${config.userManagementURL}/getAllOrgMembers`;\nconst getUserDetailsURL = `${config.userManagementURL}/getUserDetails`;\nconst updateStaffMemberDetailsURL = `${config.userManagementURL}/updateStaffMember`;\nconst updateOrganizationMemberDetailsURL = `${config.userManagementURL}/updateOrgMember`;\n\n//Object for defining how a member of FABI is structured\nexport interface Member {\n  Email: string;          //This will contain the email retreived from the DB (is the unique identifier for the member) \n  Name: string;           //This will be the name of the member\n  Surname: string;        //This will be the surname of the member\n  ID: string;             //The id number of the member;\n}\n\n//Object for defining the JSON object to be sent when requesting the members of an organization\nexport interface POSTOrganization {\n  orgName: string;        //The name of the organization to be fetched\n}\n\n//Object for defining the JSON object to be sent when requesting the details of a member\nexport interface POSTMember {\n  orgName: string;        //The name of the organization to be fetched\n  id: string;             //THe ID of the user\n}\n\n//Object for defning the JSOn object to be sent when the details of a FABI member are updated\nexport interface UpdateMember {\n  fname: string;          //The name of the FABI member\n  surname: string;        //The surname of the FABI member\n  email: string;          //The email of the FABI member\n}\n\n//Object for defning the JSOn object to be sent when the details of a FABI member are updated\nexport interface POSTUpdateMember {\n  orgName: string,\n  id: string;                 //The ID number of the FABI member to be updated\n  fields: UpdateMember;       //The fields to the updated\n}\n\n//Object for defning the JSOn object to be sent when the details of an organization member are updated\nexport interface UpdateOrganization {\n  fname: string;          //The name of the organization member\n  surname: string;        //The surname of the organization member\n  email: string;          //The email of the organization member\n}\n\n//Object for defning the JSOn object to be sent when the details of an organization member are updated\nexport interface POSTUpdateOrganization {\n  orgName: string;            //The name of the organization\n  id: string;                 //The ID of the organization member to be updated\n  fields: UpdateMember;       //The fields to be updated\n}\n\n@core.Injectable({\n  providedIn: 'root'\n})\n\nexport class UserManagementAPIService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of UserManagementAPIService.\n  * \n  * @param {HttpClient} http For making calls to the API\n  * @param {AuthenticationService} authService for calling the *authentication* service\n  * \n  * @memberof UserManagementAPIService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     GET ALL FABI STAFF \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the FABI staff\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllFABIStaff() {\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      method: 'POST',\n      url: getAllFABIStaffURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', getAllFABIStaffURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            GET USER DETAILS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the Members of an Organization\n   *\n   * @param {string} organization Name of the organization that the user belongs to\n   * @param {string} idNo The id number of the user\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserDetails(organization: string, idNo: string) {    \n    var data: POSTMember = { orgName: organization, id: idNo };\n\n    const options = {\n      method: 'POST',\n      url: getUserDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getUserDetailsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         UPDATE FABI MEMBER DETAILS \n  /**\n   * This function is used to send updated FABI staff details to the database\n   *\n   * @param {string} mail Email of the staff member\n   * @param {string} name Name of the staff member\n   * @param {string} lname Surname of the staff member\n   * @param {string} idNo ID number of the staff member\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateFABIMemberDetails(mail: string, name: string, lname: string) {\n    var member: UpdateMember = { \n      fname: name, \n      surname: lname, \n      email: mail\n    };\n\n    var data: POSTUpdateMember = { \n      orgName: this.authService.getCurrentSessionValue.user.organisation,\n      id: this.authService.getCurrentSessionValue.user.ID, \n      fields: member \n    };\n\n    const options = {\n      method: 'POST',\n      url: updateStaffMemberDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateStaffMemberDetailsURL, options).pipe(map((response : any) => {\n      if (response && (response.token && response.token != '' && response.code == 200)) {\n        this.authService.updateSessionVariables(response.data);\n      }\n      return response;\n    }));\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      UPDATE ORGANIZATION MEMBER DETAILS \n  /**\n   * This function is used to send updated organization member details to the database\n   *\n   * @param {string} mail Email of the staff member\n   * @param {string} name Name of the staff member\n   * @param {string} lname Surname of the staff member\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateOrganizationMemberDetails(mail: string, name: string, lname: string) {\n    var member: UpdateOrganization = { \n      fname: name, \n      surname: lname, \n      email: mail\n    };\n\n    var data: POSTUpdateOrganization = { \n      orgName: this.authService.getCurrentSessionValue.user.organisation,\n      id: this.authService.getCurrentSessionValue.user.ID, \n      fields: member \n    };\n\n    const options = {\n      method: 'POST',\n      url: updateOrganizationMemberDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateOrganizationMemberDetailsURL, options).pipe(map((response : any) => {\n      if (response && (response.token && response.token != '' && response.code == 200)) {\n        this.authService.updateSessionVariables(response.data);\n      }\n      return response;\n    }));\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GET ORGANIZATION\n  /**\n   * Function that send a request to retrieve an Organisations' details using their ID\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getOrganizationDetails() {\n    let getOrganizationDetails = `${config.userManagementURL}/getOrgDetails`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getOrganizationDetails, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ORGANIZATION MEMBER\n  /**\n   * Function that send a request to retrieve an Organisations Member's details using their ID\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getOrganizationMemberDetails() {\n    let getOrganizationMemberDetails = `${config.userManagementURL}/getOrgMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getOrganizationMemberDetails, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL ORGANISATION MEMBERS\n  /**\n   * Method that sends a request to the API to get the details of all the organisations' members.\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllOrganizationMembers() {\n    let getAllOrganizationsMembersURL = `${config.userManagementURL}/getAllOrgMembers`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getAllOrganizationsMembersURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL ORGANISATIONS \n  /**\n   * Method that sends a request to the API to get the details of all the organisations.\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllOrganizations() {\n    const getAllOrganizationsURL = `${config.userManagementURL}/getAllOrganizations`;\n    const method = 'POST';\n    \n    const options = {\n      headers: new HttpHeaders({\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        // 'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      }),\n      json: true\n    };\n\n    return this.http.request(method, getAllOrganizationsURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL USER TYPES \n  /**\n   * Method that sends a request to the API to get the user types associated with a specific organisation.\n   * \n   * @param {string} orgName\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserTypes(orgName: string) {\n    const getUserTypesURL = '';\n    const method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', '***REMOVED***/getUserTypes', options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                   CREATE NEW ORGANISATION\n  /**\n   * Method that sends a request to the API to create a new Organisation \n   *\n   * @param {Interface.Organisation} orgInfo The new organization to create\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  createOrganization(orgInfo: Interface.Organisation) {\n    let createOrganizationURL = `${config.userManagementURL}/createOrganization`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, createOrganizationURL, options);\n  }\n\n\n  sendRequestToRegisterOrganization(orgInfo: Interface.Organisation) {\n    let requestToRegisterOrganizationURL = `${config.loginURL}/registerNewOrganization`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, requestToRegisterOrganizationURL, options);\n  }\n\n  getPendingOrganizations() {\n    let getPendingOrganizationURL = `${config.userManagementURL}/getAllPendingOrganizations`;\n    let method = 'POST';\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request(method, getPendingOrganizationURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     REMOVE AN ORGANISATION\n  /**\n   * Method that sends a request to the API to remove (deregister) an Organisation\n   *\n   * @param {Interface.Organisation} orgInfo The organization to be removed from the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeOrganization(orgInfo: Interface.Organisation) {\n    let removeOrganizationURL = `${config.userManagementURL}/removeOrg`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeOrganizationURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    ADD NEW FABI STAFF MEMBER\n  /**\n   * Method that sends a request to the API to add a new FABI Staff Member to the database\n   *\n   * @param {Interface.StaffInfo} staffInfo The new staff member to be added to FABI\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addStaffMember(staffInfo: Interface.StaffInfo, databasePrivileges: Interface.DatabasePrivilege[]) {\n    let staffDetails = {\"fname\": staffInfo.fname, \"surname\": staffInfo.surname, \"email\": staffInfo.email, \"phone\": staffInfo.phone};\n\n    let addStaffMemberURL = `${config.userManagementURL}/addStaff`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"staff\": staffDetails,\n      \"databases\": databasePrivileges,\n      \"userType\": staffInfo.position\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addStaffMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    REMOVE FABI STAFF MEMBER \n  /**\n   * Method that sends a request to the API to remove a FABI Staff Member\n   * \n   * @param {Interface.StaffInfo} staffInfo The staff member to be removed from the system\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeFABIStaffMember(staffInfo: Interface.StaffInfo) {\n    let removeStaffMemberURL = `${config.userManagementURL}/removeStaff`;\n    let method = 'POST';\n\n    const postData = staffInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeStaffMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET ALL FABI STAFF \n  /**\n   * Method that sends a request to the API to get all FABI Staff Members\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaffMembers() {\n    let getStaffMembersURL = `${config.userManagementURL}/getAllStaff`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getStaffMembersURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      ADD NEW FABI ADMIN\n  /**\n   * Method that send a request to the API to add a new FABI Admin to the database\n   *\n   * @param {Interface.StaffInfo} staffInfo The admin member to be added to the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addFABIAdmin(staffInfo: Interface.StaffInfo) {\n    let addFABIAdminURL = `${config.userManagementURL}/addFabiAdmin`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"admin\": staffInfo\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addFABIAdminURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  ADD A NEW ORGANISATION MEMBER\n  /**\n   * Method that sends a request to the API to add a new Member to a specific Organisation\n   *\n   * @param {Interface.Organisation} orgInfo The organization that the member needs to be added to\n   * @param {Interface.OrganisationMember} memberInfo The member to be added to the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addOrgMember(orgInfo: Interface.Organisation, memberInfo: Interface.OrganisationMember) {\n    let addMemberURL = `${config.userManagementURL}/addMemberToOrg`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": orgInfo.orgName,\n      \"member\": memberInfo,\n      \"userType\": \"Member\"\n    }\n    \n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    REMOVE ORGANIZATION MEMBER\n  /**\n   * Method that sends a request to the API to remove an Organizations Member\n   * \n   * @param {Interface.OrganisationMember} memberInfo The organization member to be removed from the system\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeOrganizationMember(memberInfo: Interface.OrganisationMember) {    \n    let removeMemberURL = `${config.userManagementURL}/removeMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation,\n      \"id\": memberInfo.id\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET FABI ADMIN TYPES\n  /**\n   * This method is used to get all FABI admin types\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getFABIAdminTypes() {\n    let getAdminTypesURL = `${config.userManagementURL}/getAdminTypes`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getAdminTypesURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET DATABASE NAMES\n  /**\n   * This method is used to get all the database names from the database\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getDatabaseNames() {\n    let getDBNamesURL = `${config.databaseManagementURL}/getDBNames`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getDBNamesURL, options);\n  }\n\n  \n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE STAFF PASSWORD\n  /**\n   * This function is used to update the password of a user\n   * \n   * @param {string} oldPassword The old password of the user\n   * @param {string} newPassword The new password for the user\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateStaffPassword(oldPassword: string, newPassword: string) {\n    let updateStaffPasswordURL = `${config.userManagementURL}/updateStaffPassword`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"oldPass\": oldPassword,\n      \"newPass\": newPassword\n    }\n    \n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateStaffPasswordURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE ORGANIZATION MEMBER PASSWORD\n  /**\n   * This function is used to update the password of an organization member\n   * \n   * @param {string} oldPassword The old password of the user\n   * @param {string} newPassword The new password for the user\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateOrganizationMemberPassword(oldPassword: string, newPassword: string) {\n    let updateOrganizationMemberPasswordURL = `${config.userManagementURL}/updateOrgMemberPassword`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"oldPass\": oldPassword,\n      \"newPass\": newPassword,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateOrganizationMemberPasswordURL, options);\n  }\n\n  getFABIAdmins() {\n    let getFABIAdminURL = `${config.userManagementURL}/getAllFabiMembers`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getFABIAdminURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UpdateOrganization.html":{"url":"interfaces/UpdateOrganization.html","title":"interface - UpdateOrganization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UpdateOrganization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/user-management-api.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        fname\n                                \n                                \n                                        surname\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fname\n                                    \n                                \n                                \n                                    \n                                        fname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surname\n                                    \n                                \n                                \n                                    \n                                        surname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as Interface from \"../_interfaces/interfaces\";\nimport { AuthenticationService } from \"./authentication.service\";\n\nimport { config } from \"../../environments/environment.prod\";\nimport { map } from 'rxjs/operators';\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllFABIStaffURL = `${config.userManagementURL}/getAllStaff`;\nconst getAllOrganizationMembers = `${config.userManagementURL}/getAllOrgMembers`;\nconst getUserDetailsURL = `${config.userManagementURL}/getUserDetails`;\nconst updateStaffMemberDetailsURL = `${config.userManagementURL}/updateStaffMember`;\nconst updateOrganizationMemberDetailsURL = `${config.userManagementURL}/updateOrgMember`;\n\n//Object for defining how a member of FABI is structured\nexport interface Member {\n  Email: string;          //This will contain the email retreived from the DB (is the unique identifier for the member) \n  Name: string;           //This will be the name of the member\n  Surname: string;        //This will be the surname of the member\n  ID: string;             //The id number of the member;\n}\n\n//Object for defining the JSON object to be sent when requesting the members of an organization\nexport interface POSTOrganization {\n  orgName: string;        //The name of the organization to be fetched\n}\n\n//Object for defining the JSON object to be sent when requesting the details of a member\nexport interface POSTMember {\n  orgName: string;        //The name of the organization to be fetched\n  id: string;             //THe ID of the user\n}\n\n//Object for defning the JSOn object to be sent when the details of a FABI member are updated\nexport interface UpdateMember {\n  fname: string;          //The name of the FABI member\n  surname: string;        //The surname of the FABI member\n  email: string;          //The email of the FABI member\n}\n\n//Object for defning the JSOn object to be sent when the details of a FABI member are updated\nexport interface POSTUpdateMember {\n  orgName: string,\n  id: string;                 //The ID number of the FABI member to be updated\n  fields: UpdateMember;       //The fields to the updated\n}\n\n//Object for defning the JSOn object to be sent when the details of an organization member are updated\nexport interface UpdateOrganization {\n  fname: string;          //The name of the organization member\n  surname: string;        //The surname of the organization member\n  email: string;          //The email of the organization member\n}\n\n//Object for defning the JSOn object to be sent when the details of an organization member are updated\nexport interface POSTUpdateOrganization {\n  orgName: string;            //The name of the organization\n  id: string;                 //The ID of the organization member to be updated\n  fields: UpdateMember;       //The fields to be updated\n}\n\n@core.Injectable({\n  providedIn: 'root'\n})\n\nexport class UserManagementAPIService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of UserManagementAPIService.\n  * \n  * @param {HttpClient} http For making calls to the API\n  * @param {AuthenticationService} authService for calling the *authentication* service\n  * \n  * @memberof UserManagementAPIService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     GET ALL FABI STAFF \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the FABI staff\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllFABIStaff() {\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      method: 'POST',\n      url: getAllFABIStaffURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', getAllFABIStaffURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            GET USER DETAILS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing\n   *    all the Members of an Organization\n   *\n   * @param {string} organization Name of the organization that the user belongs to\n   * @param {string} idNo The id number of the user\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserDetails(organization: string, idNo: string) {    \n    var data: POSTMember = { orgName: organization, id: idNo };\n\n    const options = {\n      method: 'POST',\n      url: getUserDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getUserDetailsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         UPDATE FABI MEMBER DETAILS \n  /**\n   * This function is used to send updated FABI staff details to the database\n   *\n   * @param {string} mail Email of the staff member\n   * @param {string} name Name of the staff member\n   * @param {string} lname Surname of the staff member\n   * @param {string} idNo ID number of the staff member\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateFABIMemberDetails(mail: string, name: string, lname: string) {\n    var member: UpdateMember = { \n      fname: name, \n      surname: lname, \n      email: mail\n    };\n\n    var data: POSTUpdateMember = { \n      orgName: this.authService.getCurrentSessionValue.user.organisation,\n      id: this.authService.getCurrentSessionValue.user.ID, \n      fields: member \n    };\n\n    const options = {\n      method: 'POST',\n      url: updateStaffMemberDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateStaffMemberDetailsURL, options).pipe(map((response : any) => {\n      if (response && (response.token && response.token != '' && response.code == 200)) {\n        this.authService.updateSessionVariables(response.data);\n      }\n      return response;\n    }));\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      UPDATE ORGANIZATION MEMBER DETAILS \n  /**\n   * This function is used to send updated organization member details to the database\n   *\n   * @param {string} mail Email of the staff member\n   * @param {string} name Name of the staff member\n   * @param {string} lname Surname of the staff member\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateOrganizationMemberDetails(mail: string, name: string, lname: string) {\n    var member: UpdateOrganization = { \n      fname: name, \n      surname: lname, \n      email: mail\n    };\n\n    var data: POSTUpdateOrganization = { \n      orgName: this.authService.getCurrentSessionValue.user.organisation,\n      id: this.authService.getCurrentSessionValue.user.ID, \n      fields: member \n    };\n\n    const options = {\n      method: 'POST',\n      url: updateOrganizationMemberDetailsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', updateOrganizationMemberDetailsURL, options).pipe(map((response : any) => {\n      if (response && (response.token && response.token != '' && response.code == 200)) {\n        this.authService.updateSessionVariables(response.data);\n      }\n      return response;\n    }));\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GET ORGANIZATION\n  /**\n   * Function that send a request to retrieve an Organisations' details using their ID\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getOrganizationDetails() {\n    let getOrganizationDetails = `${config.userManagementURL}/getOrgDetails`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getOrganizationDetails, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ORGANIZATION MEMBER\n  /**\n   * Function that send a request to retrieve an Organisations Member's details using their ID\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getOrganizationMemberDetails() {\n    let getOrganizationMemberDetails = `${config.userManagementURL}/getOrgMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getOrganizationMemberDetails, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL ORGANISATION MEMBERS\n  /**\n   * Method that sends a request to the API to get the details of all the organisations' members.\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllOrganizationMembers() {\n    let getAllOrganizationsMembersURL = `${config.userManagementURL}/getAllOrgMembers`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getAllOrganizationsMembersURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL ORGANISATIONS \n  /**\n   * Method that sends a request to the API to get the details of all the organisations.\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllOrganizations() {\n    const getAllOrganizationsURL = `${config.userManagementURL}/getAllOrganizations`;\n    const method = 'POST';\n    \n    const options = {\n      headers: new HttpHeaders({\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        // 'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      }),\n      json: true\n    };\n\n    return this.http.request(method, getAllOrganizationsURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL USER TYPES \n  /**\n   * Method that sends a request to the API to get the user types associated with a specific organisation.\n   * \n   * @param {string} orgName\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserTypes(orgName: string) {\n    const getUserTypesURL = '';\n    const method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', '***REMOVED***/getUserTypes', options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                   CREATE NEW ORGANISATION\n  /**\n   * Method that sends a request to the API to create a new Organisation \n   *\n   * @param {Interface.Organisation} orgInfo The new organization to create\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  createOrganization(orgInfo: Interface.Organisation) {\n    let createOrganizationURL = `${config.userManagementURL}/createOrganization`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, createOrganizationURL, options);\n  }\n\n\n  sendRequestToRegisterOrganization(orgInfo: Interface.Organisation) {\n    let requestToRegisterOrganizationURL = `${config.loginURL}/registerNewOrganization`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, requestToRegisterOrganizationURL, options);\n  }\n\n  getPendingOrganizations() {\n    let getPendingOrganizationURL = `${config.userManagementURL}/getAllPendingOrganizations`;\n    let method = 'POST';\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      json: true\n    };\n\n    return this.http.request(method, getPendingOrganizationURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                     REMOVE AN ORGANISATION\n  /**\n   * Method that sends a request to the API to remove (deregister) an Organisation\n   *\n   * @param {Interface.Organisation} orgInfo The organization to be removed from the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeOrganization(orgInfo: Interface.Organisation) {\n    let removeOrganizationURL = `${config.userManagementURL}/removeOrg`;\n    let method = 'POST';\n\n    const postData = orgInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeOrganizationURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    ADD NEW FABI STAFF MEMBER\n  /**\n   * Method that sends a request to the API to add a new FABI Staff Member to the database\n   *\n   * @param {Interface.StaffInfo} staffInfo The new staff member to be added to FABI\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addStaffMember(staffInfo: Interface.StaffInfo, databasePrivileges: Interface.DatabasePrivilege[]) {\n    let staffDetails = {\"fname\": staffInfo.fname, \"surname\": staffInfo.surname, \"email\": staffInfo.email, \"phone\": staffInfo.phone};\n\n    let addStaffMemberURL = `${config.userManagementURL}/addStaff`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"staff\": staffDetails,\n      \"databases\": databasePrivileges,\n      \"userType\": staffInfo.position\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addStaffMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    REMOVE FABI STAFF MEMBER \n  /**\n   * Method that sends a request to the API to remove a FABI Staff Member\n   * \n   * @param {Interface.StaffInfo} staffInfo The staff member to be removed from the system\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeFABIStaffMember(staffInfo: Interface.StaffInfo) {\n    let removeStaffMemberURL = `${config.userManagementURL}/removeStaff`;\n    let method = 'POST';\n\n    const postData = staffInfo;\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeStaffMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET ALL FABI STAFF \n  /**\n   * Method that sends a request to the API to get all FABI Staff Members\n   *\n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaffMembers() {\n    let getStaffMembersURL = `${config.userManagementURL}/getAllStaff`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getStaffMembersURL, options);\n\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      ADD NEW FABI ADMIN\n  /**\n   * Method that send a request to the API to add a new FABI Admin to the database\n   *\n   * @param {Interface.StaffInfo} staffInfo The admin member to be added to the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addFABIAdmin(staffInfo: Interface.StaffInfo) {\n    let addFABIAdminURL = `${config.userManagementURL}/addFabiAdmin`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"admin\": staffInfo\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addFABIAdminURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  ADD A NEW ORGANISATION MEMBER\n  /**\n   * Method that sends a request to the API to add a new Member to a specific Organisation\n   *\n   * @param {Interface.Organisation} orgInfo The organization that the member needs to be added to\n   * @param {Interface.OrganisationMember} memberInfo The member to be added to the system\n   * \n   * @returns API response @type any\n   * \n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  addOrgMember(orgInfo: Interface.Organisation, memberInfo: Interface.OrganisationMember) {\n    let addMemberURL = `${config.userManagementURL}/addMemberToOrg`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"orgName\": orgInfo.orgName,\n      \"member\": memberInfo,\n      \"userType\": \"Member\"\n    }\n    \n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, addMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    REMOVE ORGANIZATION MEMBER\n  /**\n   * Method that sends a request to the API to remove an Organizations Member\n   * \n   * @param {Interface.OrganisationMember} memberInfo The organization member to be removed from the system\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  removeOrganizationMember(memberInfo: Interface.OrganisationMember) {    \n    let removeMemberURL = `${config.userManagementURL}/removeMember`;\n    let method = 'POST';\n\n    const postData = {\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation,\n      \"id\": memberInfo.id\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, removeMemberURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET FABI ADMIN TYPES\n  /**\n   * This method is used to get all FABI admin types\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getFABIAdminTypes() {\n    let getAdminTypesURL = `${config.userManagementURL}/getAdminTypes`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getAdminTypesURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET DATABASE NAMES\n  /**\n   * This method is used to get all the database names from the database\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getDatabaseNames() {\n    let getDBNamesURL = `${config.databaseManagementURL}/getDBNames`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getDBNamesURL, options);\n  }\n\n  \n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE STAFF PASSWORD\n  /**\n   * This function is used to update the password of a user\n   * \n   * @param {string} oldPassword The old password of the user\n   * @param {string} newPassword The new password for the user\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateStaffPassword(oldPassword: string, newPassword: string) {\n    let updateStaffPasswordURL = `${config.userManagementURL}/updateStaffPassword`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"oldPass\": oldPassword,\n      \"newPass\": newPassword\n    }\n    \n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateStaffPasswordURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE ORGANIZATION MEMBER PASSWORD\n  /**\n   * This function is used to update the password of an organization member\n   * \n   * @param {string} oldPassword The old password of the user\n   * @param {string} newPassword The new password for the user\n   * \n   * @returns API response @type any\n   *\n   * @memberof UserManagementAPIService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateOrganizationMemberPassword(oldPassword: string, newPassword: string) {\n    let updateOrganizationMemberPasswordURL = `${config.userManagementURL}/updateOrgMemberPassword`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID,\n      \"oldPass\": oldPassword,\n      \"newPass\": newPassword,\n      \"orgName\": this.authService.getCurrentSessionValue.user.organisation\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, updateOrganizationMemberPasswordURL, options);\n  }\n\n  getFABIAdmins() {\n    let getFABIAdminURL = `${config.userManagementURL}/getAllFabiMembers`;\n    let method = 'POST';\n\n    const postData = {\n      \"id\": this.authService.getCurrentSessionValue.user.ID\n    }\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request(method, getFABIAdminURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserLogs.html":{"url":"interfaces/UserLogs.html","title":"interface - UserLogs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserLogs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_services/notification-logging.service.ts\n        \n\n            \n                Description\n            \n            \n                //Object for defining the JSON object containing the user logs\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Action\n                                \n                                \n                                        Date\n                                \n                                \n                                        Details\n                                \n                                \n                                        ID\n                                \n                                \n                                        LogID\n                                \n                                \n                                        MoreInfo\n                                \n                                \n                                        Organization1\n                                \n                                \n                                        Organization2\n                                \n                                \n                                        Type\n                                \n                                \n                                        User\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Action\n                                    \n                                \n                                \n                                    \n                                        Action:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Date\n                                    \n                                \n                                \n                                    \n                                        Date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Details\n                                    \n                                \n                                \n                                    \n                                        Details:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ID\n                                    \n                                \n                                \n                                    \n                                        ID:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        LogID\n                                    \n                                \n                                \n                                    \n                                        LogID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        MoreInfo\n                                    \n                                \n                                \n                                    \n                                        MoreInfo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Organization1\n                                    \n                                \n                                \n                                    \n                                        Organization1:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Organization2\n                                    \n                                \n                                \n                                    \n                                        Organization2:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Type\n                                    \n                                \n                                \n                                    \n                                        Type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        User\n                                    \n                                \n                                \n                                    \n                                        User:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { config } from \"../../environments/environment.prod\";\nimport { AuthenticationService } from './authentication.service';\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                          GLOBAL VARIABLES\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////// URL'S FOR API //////////////////////////////////////////////////////////////// \nconst getAllLogsURL = `${config.logsURL}/getLogs`;\nconst getUserLogsURL = `${config.logsURL}/getUserLogs`;\nconst updateUserLogsURL = `${config.logsURL}/deleteUserLogs`;\n\n///////////////////////////////////////////////////////////////////////\n//                           USER LOGS\n/**\n *  //Object for defining the JSON object containing the user logs\n *\n * @export\n * @interface UserLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface UserLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: USER\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The user on which the action was performed (their ID)\n  User: string;           //The user who performed the action (their ID)\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DATABSE MANAGEMENT LOGS\n/**\n *  //Object for defining the JSON object containing the database \n *  management logs\n *\n * @export\n * @interface DatabaseManagementLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DatabaseManagementLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: DBML (Database Management Log)\n  Action: string;         //The action performed: CRUD\n  Date: string;           //The date that the action was performed\n  Details: string;        //The name of the database that the action was performed on\n  User: string;           //The user who performed the action\n  Organization1: string;  //The organization of the user performing the operation\n  Organization2: string;  //The organization of the user on which the action was performed\n  MoreInfo: string;       //More information (if any)\n  ID: number;            //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ACCESS LOGS\n/**\n *  //Object for defining the JSON object containing the access logs\n *\n * @export\n * @interface AccessLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface AccessLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ACCL\n  Action: string;         //The action performed: ACCESS\n  Date: string;           //The date that the action was performed\n  Details: string;        //Description of what was accessed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                            ERROR LOGS\n/**\n *  //Object for defining the JSON object containing the error logs\n *\n * @export\n * @interface ErrorLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface ErrorLogs {\n  LogID: string;          //The id number of the actucal log\n  Type: string;           //The type of the log: ERRL\n  Date: string;           //The date that the action was performed\n  StatusCode: string;     //The status code of the error that occured\n  Details: string;        //Description of the error\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                       DIAGNOSTIC CLINIC LOGS\n/**\n *  //Object for defining the JSON object containing the diagnostic \n *  clinic logs\n *\n * @export\n * @interface DiagnosticClinicLogs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface DiagnosticClinicLogs {\n  Type: string;           //The type of the log: DGCL\n  Date: string;           //The date that the action was performed\n  User: string;           //The user who performed the action (their ID)\n  ID: number;             //The id of the notification\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                              POST LOG\n/**\n *  //Object for defining the JSON object for posting log requests\n *\n * @export\n * @interface POSTLog\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTLog {\n  Log: Logs;              //The array of logs to post to the API service\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               LOGS\n/**\n *  //Object for defining the JSON object for the logs\n *\n * @export\n * @interface Logs\n */\n///////////////////////////////////////////////////////////////////////\nexport interface Logs {\n  type: string;           //The type of the log\n  before: string;         //The before date\n  after: string;          //The after date\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST USER\n/**\n *  //Object for defining the JSON object to be sent when requesting \n *  the logs belonging to a member\n *\n * @export\n * @interface POSTUser\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUser {\n  userID: string;         //The ID of the user\n}\n\n\n///////////////////////////////////////////////////////////////////////\n//                               POST UPDATE\n/**\n *  //Object for defining the JSON object to be sent when updating \n *  to logs belonging to a user\n *\n * @export\n * @interface POSTUpdate\n */\n///////////////////////////////////////////////////////////////////////\nexport interface POSTUpdate {\n  userID: string;         //The ID of the user\n  logIDs: string[];       //The logs to be removed from the user's profile\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class NotificationLoggingService {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          CONSTRUCTOR\n  /**\n  * Creates an instance of NotificationLoggingService.\n  * \n  * @param {HttpClient} http For making calls to the API\n  * \n  * @memberof NotificationLoggingService\n  */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(private http: HttpClient, private authService: AuthenticationService) { }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       GET ALL USER LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'USER'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllUserLogs() {\n    var tempLog: Logs = { type: 'USER', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                 GET ALL DATABASE MANAGEMENT LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'DBML'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllDatabaseManagementLogs() {\n    var tempLog: Logs = { type: 'DBML', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET ALL ACCESS LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ACCL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllAccessLogs() {\n    var tempLog: Logs = { type: 'ACCL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GET ALL ERROR LOGS\n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs with type 'ERRL'\n   *\n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllErrorLogs() {\n    var tempLog: Logs = { type: 'ERRL', before: '', after: '' };\n    var data: POSTLog = { Log: tempLog };\n\n    const options = {\n      method: 'POST',\n      url: getAllLogsURL,\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getAllLogsURL, options);\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         GET USER LOGS \n  /**\n   *    This function sends a POST request to the API to retrieve a list containing all the logs for a specific user.\n   *\n   * @param {string} userID The id number of the user whose logs need to be feteched for the notifications.\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getUserLogs(id: string) {\n    var data: POSTUser = { userID: id };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: data,\n      json: true\n    };\n\n    return this.http.request('POST', getUserLogsURL, options);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    UPDATE FABI MEMBER NOTIFICATIONS\n  /**\n   * Method that sends a request to the API to update the notifications associated with a specific user.\n   * \n   * @param {string} id The ID of the user whose notifications need to be updated\n   * @param {string[]} notifications The notifications to be removed from the user's profile\n   * \n   * @returns API response @type any\n   * \n   * @memberof NotificationLoggingService\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  updateFABIMemberNotifications(id: string, notifications: string[]) {\n    var postData: POSTUpdate = { userID: id, logIDs: notifications };\n\n    const options = {\n      headers: {\n        'cache-control': 'no-cache',\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${this.authService.getCurrentSessionValue.token}`\n      },\n      body: postData,\n      json: true\n    };\n\n    return this.http.request('POST', updateUserLogsURL, options);\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserPrivileges.html":{"url":"interfaces/UserPrivileges.html","title":"interface - UserPrivileges","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserPrivileges\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_interfaces/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Defines a UserPrivileges object\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        databases\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        databases\n                                    \n                                \n                                \n                                    \n                                        databases:         DatabasePrivilege[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DatabasePrivilege[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Organisation {\n  ID?: string;                                //The id of Organisation \n  orgName: string;                            //The name of Organisation\n  admin?: OrganisationAdmin;                  //The admin of Organisation\n}\n\n\n/////////////////////////////////////////////////////\n//              ORGANIZATION ADMIN\n/**\n * Defines an Admin of an Organisation\n *\n * @export\n * @interface OrganisationAdmin\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationAdmin {\n  fname: string;                              //The first name of Admin\n  surname: string;                            //The surname of Admin\n  email: string;                              //The email of Admin\n  phone?: number;                             //The phone number of Admin\n  password?: string;                          //The passsword of Admin\n}\n\n\n/////////////////////////////////////////////////////\n//            ORGANIZATION MEMBER\n/**\n * Defines a Organisation's Member object\n *\n * @export\n * @interface MemberInfo\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationMember {\n  id?: string,                                  //The id of the Member\n  fname: string,                                //The first name of Member\n  surname: string,                              //The surname of Member\n  email: string,                                //The email of Member\n  phone?: number;                               //The phone number of Member\n  password?: string                             //The password of Member\n}\n\n\n/////////////////////////////////////////////////////\n//                  USER TYPE\n/**\n * Defines a User Type object\n *\n * @export\n * @interface UserType\n */\n/////////////////////////////////////////////////////\nexport interface UserType {\n  ID: number;                                 //The id of the User Type\n  Name: string;                               //The name of the User Type\n}\n\n\n/////////////////////////////////////////////////////\n//                LOGIN INFO\n/**\n * Defines the User's Login Information\n *\n * @export\n * @interface LoginInfo\n */\n/////////////////////////////////////////////////////\nexport interface LoginInfo {\n  orgName: string;                            //The organization fo teh user currently logged in\n  email: string;                              //The email of the suer currently logged in\n  password: string;                           //The password of the user currently logged in\n}\n\n\n/////////////////////////////////////////////////////\n//                 STAFF INFO\n/**\n * Defines a FABI Staff Member object\n *\n * @export\n * @interface StaffInfo\n */\n/////////////////////////////////////////////////////\nexport interface StaffInfo {\n  ID?: number,                                  //The id number of the staff member\n  fname: string                                 //The first name of the staff member\n  surname: string,                              //The surname of the staff member\n  email: string,                                //The email address fo the staff member\n  phone?: number,                               //The phone number of the staff member\n  position?: string,                            //The positions of the staff member\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            DATABASE PRIVILEGE\n/**\n * Defines a DatabasePrivilege object\n *\n * @export\n * @interface DatabasePrivilege\n */\n/////////////////////////////////////////////////////\nexport interface DatabasePrivilege {\n  name: string,                                 //The database's name\n  privileges: string[]                          //The privileges for the database                          \n}\n\n\n/////////////////////////////////////////////////////\n//                PRIVILEGE TYPES\n/**\n * Defines a PrivilegeTypes object\n *\n * @export\n * @interface PrivilegeTypes\n */\n/////////////////////////////////////////////////////\nexport interface PrivilegeTypes {\n  create: boolean,                              //The create privilege\n  retrieve: boolean,                            //The retrieve privilege\n  update: boolean,                              //The update privilege\n  delete: boolean                               //The delete privilege\n}\n\n\n/////////////////////////////////////////////////////\n//              USER'S PRIVILEGES\n/**\n * Defines a UserPrivileges object\n *\n * @export\n * @interface UserPrivileges\n */\n/////////////////////////////////////////////////////\nexport interface UserPrivileges {\n  databases?: DatabasePrivilege[]               //The database privileges for a database\n}\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            CONFIRM (for confirm pop-up)\n/**\n * Defines a Confirm object\n *\n * @export\n * @interface Confirm\n */\n/////////////////////////////////////////////////////\nexport interface Confirm {\n  title: string,                                //The confirm title\n  message: string,                              //The confirm message\n  info: string,                                 //The confirm information\n  cancel: string,                               //If it has been canceled or not\n  confirm: string                               //If it has been confirmed or not\n}\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  SAMPLE FORM\n/**\n * Defines a SampleFormData object\n *\n * @export\n * @interface SampleFormData\n */\n/////////////////////////////////////////////////////\nexport interface SampleFormData {\n  // Sample Details\n  sample_details: {\n    plant_species: string,                 //The species of the sample\n    plant_genus: string                    //The genus of the sample\n    num_samples: number,                   //The number of samples\n    date_collected: Date,                  //The date that the sample was collected\n    date_sent: Date,                       //The date that the sample was sent\n  }\n\n  // Plantation Details\n  plantation_details: {\n    street: string,                        //The street name\n    area: string,                          //The area\n    city: string,                          //The city \n    farm: string,                          //The farm name\n    province: string,                      //The province\n    gps: string,                           //Sample GPS coordinates\n  }\n\n  // Type of Sample\n  types: string[],\n  // types: {\n  //   soil: boolean,                     //Soil sample type\n  //   stems: boolean,                    //Stems sample type\n  //   roots: boolean,                    //Roots sample type\n  //   twigs: boolean,                    //Twigs sample type\n  //   leaves: boolean,                   //Leaves sample type\n  //   seedlings: boolean,                //Seedlings sample type\n  //   media: boolean,                    //Media sample type\n  //   water: boolean,                    //Water sample type\n  //   insect: boolean,                   //Insect sample type\n  //   nuts: boolean,                     //Nuts sample type\n  //   other: boolean,                    //Other type of sample (if any)\n  // }\n\n  // Symptoms\n  symptoms: {\n    wilt: boolean,                         //Wilt symptom\n    stunting: boolean,                     //Stunting symptom\n    leafspot: boolean,                     //Leafspot symptom\n    rootrot: boolean,                      //Rootrot symptom\n    dieback: boolean,                      //Dieback symptom\n    cankers: boolean,                      //Cankers symptom \n    death: boolean,                        //Death symptom \n    wood: boolean,                         //Wood symptom\n    other: boolean,                        //Other symptoms (if any)\n  }\n\n  // Distribution of Symptoms\n  distribution: {\n    localized: boolean,               //The localized distribution\n    scattered: boolean,                //The scattered distribution\n    general: boolean,                  //The general distribution\n    clumps: boolean,                   //The clumps distribution\n    na: boolean,                       //The na distribution\n    other: boolean,                    //Other distributions (if any)\n    percentage_plants_affected: number,           //The percentage of plants affected\n  }\n\n  // Conditons\n  conditions: {\n    date_problem_noticed: Date,        //The date the problem was noticed\n    date_planted: Date,                //The date the plants were planted\n    weather_disturbances: string,      //The weather disturbances\n    weather_prior: string,             //The weather conditions prior\n    others: string,                    //Other weather conditions (if any)\n    additional?: string                 //Additional weather conditions (if any)\n  }\n\n  // Permissions\n  permissions: {\n    landowner_name: string,                       //The landowner's name\n    permission_granted: boolean                   //Whether or not the landowner has granted permission\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  LOCATION\n/**\n * Defines a Location object\n *\n * @export\n * @interface Location\n */\n/////////////////////////////////////////////////////\nexport interface Location {\n  latitude: number,                             //The latitude of the location\n  longitude: number                             //The longitude of the location\n}\n\n\n/////////////////////////////////////////////////////\n//                     ADDRESS\n/**\n * Defines a Address object\n *\n * @export\n * @interface Address\n */\n/////////////////////////////////////////////////////\nexport interface Address {\n  street_number?: number,                       //The street number of the address (if any)\n  street: string,                               //The street name of the address\n  estate?: string,                              //The estate of the address (if any)\n  area?: string,                                //The area of the address (if any)\n  city: string,                                 //The city of the address\n  province: string,                             //The province of the address\n  country: string,                              //The country of the address\n  postal_code?: string,                         //The postal code of the address (if any)\n  formatted_address: string                     //The formatted address\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserType.html":{"url":"interfaces/UserType.html","title":"interface - UserType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/_interfaces/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Defines a User Type object\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ID\n                                \n                                \n                                        Name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ID\n                                    \n                                \n                                \n                                    \n                                        ID:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Name\n                                    \n                                \n                                \n                                    \n                                        Name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Organisation {\n  ID?: string;                                //The id of Organisation \n  orgName: string;                            //The name of Organisation\n  admin?: OrganisationAdmin;                  //The admin of Organisation\n}\n\n\n/////////////////////////////////////////////////////\n//              ORGANIZATION ADMIN\n/**\n * Defines an Admin of an Organisation\n *\n * @export\n * @interface OrganisationAdmin\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationAdmin {\n  fname: string;                              //The first name of Admin\n  surname: string;                            //The surname of Admin\n  email: string;                              //The email of Admin\n  phone?: number;                             //The phone number of Admin\n  password?: string;                          //The passsword of Admin\n}\n\n\n/////////////////////////////////////////////////////\n//            ORGANIZATION MEMBER\n/**\n * Defines a Organisation's Member object\n *\n * @export\n * @interface MemberInfo\n */\n/////////////////////////////////////////////////////\nexport interface OrganisationMember {\n  id?: string,                                  //The id of the Member\n  fname: string,                                //The first name of Member\n  surname: string,                              //The surname of Member\n  email: string,                                //The email of Member\n  phone?: number;                               //The phone number of Member\n  password?: string                             //The password of Member\n}\n\n\n/////////////////////////////////////////////////////\n//                  USER TYPE\n/**\n * Defines a User Type object\n *\n * @export\n * @interface UserType\n */\n/////////////////////////////////////////////////////\nexport interface UserType {\n  ID: number;                                 //The id of the User Type\n  Name: string;                               //The name of the User Type\n}\n\n\n/////////////////////////////////////////////////////\n//                LOGIN INFO\n/**\n * Defines the User's Login Information\n *\n * @export\n * @interface LoginInfo\n */\n/////////////////////////////////////////////////////\nexport interface LoginInfo {\n  orgName: string;                            //The organization fo teh user currently logged in\n  email: string;                              //The email of the suer currently logged in\n  password: string;                           //The password of the user currently logged in\n}\n\n\n/////////////////////////////////////////////////////\n//                 STAFF INFO\n/**\n * Defines a FABI Staff Member object\n *\n * @export\n * @interface StaffInfo\n */\n/////////////////////////////////////////////////////\nexport interface StaffInfo {\n  ID?: number,                                  //The id number of the staff member\n  fname: string                                 //The first name of the staff member\n  surname: string,                              //The surname of the staff member\n  email: string,                                //The email address fo the staff member\n  phone?: number,                               //The phone number of the staff member\n  position?: string,                            //The positions of the staff member\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            DATABASE PRIVILEGE\n/**\n * Defines a DatabasePrivilege object\n *\n * @export\n * @interface DatabasePrivilege\n */\n/////////////////////////////////////////////////////\nexport interface DatabasePrivilege {\n  name: string,                                 //The database's name\n  privileges: string[]                          //The privileges for the database                          \n}\n\n\n/////////////////////////////////////////////////////\n//                PRIVILEGE TYPES\n/**\n * Defines a PrivilegeTypes object\n *\n * @export\n * @interface PrivilegeTypes\n */\n/////////////////////////////////////////////////////\nexport interface PrivilegeTypes {\n  create: boolean,                              //The create privilege\n  retrieve: boolean,                            //The retrieve privilege\n  update: boolean,                              //The update privilege\n  delete: boolean                               //The delete privilege\n}\n\n\n/////////////////////////////////////////////////////\n//              USER'S PRIVILEGES\n/**\n * Defines a UserPrivileges object\n *\n * @export\n * @interface UserPrivileges\n */\n/////////////////////////////////////////////////////\nexport interface UserPrivileges {\n  databases?: DatabasePrivilege[]               //The database privileges for a database\n}\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//            CONFIRM (for confirm pop-up)\n/**\n * Defines a Confirm object\n *\n * @export\n * @interface Confirm\n */\n/////////////////////////////////////////////////////\nexport interface Confirm {\n  title: string,                                //The confirm title\n  message: string,                              //The confirm message\n  info: string,                                 //The confirm information\n  cancel: string,                               //If it has been canceled or not\n  confirm: string                               //If it has been confirmed or not\n}\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  SAMPLE FORM\n/**\n * Defines a SampleFormData object\n *\n * @export\n * @interface SampleFormData\n */\n/////////////////////////////////////////////////////\nexport interface SampleFormData {\n  // Sample Details\n  sample_details: {\n    plant_species: string,                 //The species of the sample\n    plant_genus: string                    //The genus of the sample\n    num_samples: number,                   //The number of samples\n    date_collected: Date,                  //The date that the sample was collected\n    date_sent: Date,                       //The date that the sample was sent\n  }\n\n  // Plantation Details\n  plantation_details: {\n    street: string,                        //The street name\n    area: string,                          //The area\n    city: string,                          //The city \n    farm: string,                          //The farm name\n    province: string,                      //The province\n    gps: string,                           //Sample GPS coordinates\n  }\n\n  // Type of Sample\n  types: string[],\n  // types: {\n  //   soil: boolean,                     //Soil sample type\n  //   stems: boolean,                    //Stems sample type\n  //   roots: boolean,                    //Roots sample type\n  //   twigs: boolean,                    //Twigs sample type\n  //   leaves: boolean,                   //Leaves sample type\n  //   seedlings: boolean,                //Seedlings sample type\n  //   media: boolean,                    //Media sample type\n  //   water: boolean,                    //Water sample type\n  //   insect: boolean,                   //Insect sample type\n  //   nuts: boolean,                     //Nuts sample type\n  //   other: boolean,                    //Other type of sample (if any)\n  // }\n\n  // Symptoms\n  symptoms: {\n    wilt: boolean,                         //Wilt symptom\n    stunting: boolean,                     //Stunting symptom\n    leafspot: boolean,                     //Leafspot symptom\n    rootrot: boolean,                      //Rootrot symptom\n    dieback: boolean,                      //Dieback symptom\n    cankers: boolean,                      //Cankers symptom \n    death: boolean,                        //Death symptom \n    wood: boolean,                         //Wood symptom\n    other: boolean,                        //Other symptoms (if any)\n  }\n\n  // Distribution of Symptoms\n  distribution: {\n    localized: boolean,               //The localized distribution\n    scattered: boolean,                //The scattered distribution\n    general: boolean,                  //The general distribution\n    clumps: boolean,                   //The clumps distribution\n    na: boolean,                       //The na distribution\n    other: boolean,                    //Other distributions (if any)\n    percentage_plants_affected: number,           //The percentage of plants affected\n  }\n\n  // Conditons\n  conditions: {\n    date_problem_noticed: Date,        //The date the problem was noticed\n    date_planted: Date,                //The date the plants were planted\n    weather_disturbances: string,      //The weather disturbances\n    weather_prior: string,             //The weather conditions prior\n    others: string,                    //Other weather conditions (if any)\n    additional?: string                 //Additional weather conditions (if any)\n  }\n\n  // Permissions\n  permissions: {\n    landowner_name: string,                       //The landowner's name\n    permission_granted: boolean                   //Whether or not the landowner has granted permission\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////\n//                  LOCATION\n/**\n * Defines a Location object\n *\n * @export\n * @interface Location\n */\n/////////////////////////////////////////////////////\nexport interface Location {\n  latitude: number,                             //The latitude of the location\n  longitude: number                             //The longitude of the location\n}\n\n\n/////////////////////////////////////////////////////\n//                     ADDRESS\n/**\n * Defines a Address object\n *\n * @export\n * @interface Address\n */\n/////////////////////////////////////////////////////\nexport interface Address {\n  street_number?: number,                       //The street number of the address (if any)\n  street: string,                               //The street name of the address\n  estate?: string,                              //The estate of the address (if any)\n  area?: string,                                //The area of the address (if any)\n  city: string,                                 //The city of the address\n  province: string,                             //The province of the address\n  country: string,                              //The country of the address\n  postal_code?: string,                         //The postal code of the address (if any)\n  formatted_address: string                     //The formatted address\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/accessLogInterface.html":{"url":"interfaces/accessLogInterface.html","title":"interface - accessLogInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  accessLogInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Admin/reporting/reporting.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        date\n                                \n                                \n                                        details\n                                \n                                \n                                        user\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        details\n                                    \n                                \n                                \n                                    \n                                        details:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                    \n                                \n                                \n                                    \n                                        user:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\nimport { Router } from '@angular/router';\nimport html2canvas from 'html2canvas';\n//These imports are used to created a downloadable PDF of the reports\nimport * as jspdf from 'jspdf';\nimport 'jspdf-autotable';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { CultureCollectionAPIService } from '../../_services/culture-collection-api.service';\nimport { NotificationLoggingService } from '../../_services/notification-logging.service';\nimport { UserManagementAPIService } from '../../_services/user-management-api.service';\n\n\nexport interface userLogInterface {\n  action: string;\n  date: string;\n  user1: string;\n  user2: string;\n}\n\nexport interface databaseLogInterface {\n  action: string;\n  date: string;\n  user: string;\n  details: string;\n}\n\nexport interface accessLogInterface {\n  details: string;\n  date: string;\n  user: string;\n}\n\nexport interface errorLogInterface {\n  code: string;\n  date: string;\n  details: string;\n  user: string;\n}\n\nexport interface requestReportInterface {\n  user: string;\n  requestor: string;\n  cultureNumber: string;\n  taxonName: string;\n  referenceNumber: string;\n  dateRequested: string;\n  dateSubmitted: string;\n}\n\nexport interface depositReportInterface {\n  user: string;\n  cultureNumber: string;\n  name: string;\n  collectedBy: string;\n  dateCollected: string;\n  isolatedBy: string;\n  identifiedBy: string;\n  dateSubmitted: string;\n}\n\nexport interface revitalizationReportInterface {\n  user: string;\n  requestor: string;\n  cultureNumber: string;\n  cultureName: string;\n  referenceNumber: string;\n  dateRequested: string;\n  dateReturned: string;\n  dateSubmitted: string;\n}\n\nexport interface StaffMember {\n  fname: string;\n  surname: string;\n  email: string;\n  id: string;\n}\n\n@core.Component({\n  selector: 'app-reporting',\n  templateUrl: './reporting.component.html',\n  styleUrls: ['./reporting.component.scss']\n})\nexport class ReportingComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Indicates if there are logs of type USER - @type {boolean} */\n  userLogs: boolean = false;\n  /** Indicates if there are logs of type DBML - @type {boolean} */\n  databaseLogs: boolean = false;\n  /** Indicates if there are logs of type ACCL - @type {boolean} */\n  accessLogs: boolean = false;\n  /** Indicates if there are logs of type ERRL - @type {boolean} */\n  errorLogs: boolean = false;\n  /** Indicates if there are logs of type REQUEST - @type {boolean} */\n  requestLogs: boolean = false;\n  /** Indicates if there are logs of type DEPOSIT - @type {boolean} */\n  depositLogs: boolean = false;\n  /** Indicates if there are logs of type REVITALIZATION - @type {boolean} */\n  revitalizationLogs: boolean = false;\n  /** Indicates if the error report has been generated - @type {boolean} */\n  errorReport: boolean = false;\n  /** Indicates if the request report has been generated - @type {boolean} */\n  requestReport: boolean = false;\n  /** Indicates if the deposit report has been generated - @type {boolean} */\n  depositReport: boolean = false;\n  /** Indicates if the revitalization report has been generated - @type {boolean} */\n  revitalizationReport: boolean = false;\n  /** The current date in string format - @type {string} */\n  date: string;\n  /** Array holding the user logs - @type {userLogInterface} */\n  userLogsArray: userLogInterface[] = [];\n  /** Array holding the database logs - @type {databaseLogInterface} */\n  databaseLogsArray: databaseLogInterface[] = [];\n  /** Array holding the access logs - @type {accessLogInterface} */\n  accessLogsArray: accessLogInterface[] = [];\n  /** Array holding the error logs - @type {errorLogInterface} */\n  errorLogsArray: errorLogInterface[] = [];\n  /** Array holding the request logs - @type {requestReportInterface} */\n  requestLogsArray: requestReportInterface[] = [];\n  /** Array holding the deposit logs - @type {depositReportInterface} */\n  depositLogsArray: depositReportInterface[] = [];\n  /** Array holding the revitalization logs - @type {revitalizationReportInterface} */\n  revitalizationLogsArray: revitalizationReportInterface[] = [];\n\n  /** Holds the table element (errorReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"errorReportPDF\") errorReportPDF: core.ElementRef;\n  /** Holds the table element (requestReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"requestReportPDF\") requestReportPDF: core.ElementRef;\n  /** Holds the table element (depositReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"depositReportPDF\") depositReportPDF: core.ElementRef;\n  /** Holds the table element (revitalizationReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"revitalizationReportPDF\") revitalizationReportPDF: core.ElementRef;\n\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  notificationsTab: boolean = false;\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n  /** Indicates if the save button is hidden/shown on the profile tab- @type {boolean} */\n  saveBtn: boolean = false;\n  /** Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} */\n  confirmPasswordInput: boolean = false;\n  /** Indicates if the help tab is hidden/shown - @type {boolean} */\n  helpTab: boolean = false;\n  /** Indicates if the reporting tab is hidden/shown - @type {boolean} */\n  reportingTab: boolean = false;\n  /** Indicates if the log tab is hidden/shown - @type {boolean} */\n  logsTab: boolean = false;\n  /** The details of the user currently logged in -  @type {any} */\n  currentUser: any;\n  /** Object array for holding the staff members -  @type {StaffMember[]} */\n  staff: StaffMember[] = [];\n  /** Stores the data table -  @type {string} */\n  public tableWidget: any;\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchItem: string = \"\";\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchReports: string = \"\";\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       CONSTRUCTOR\n  /**\n   * Creates an instance of ReportingComponent.\n   * \n   * @param {NotificationLoggingService} notificationLoggingService For calling the Notification Logging API service\n   * @param {CultureCollectionAPIService} cultureCollectionService For calling the Culture Collection API Service\n   * @param {UserManagementAPIService} userManagementService For calling the User Management API Service\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {Router} router\n   * @param {core.Renderer2} renderer Used for creating the PDF documents to download\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private notificationLoggingService: NotificationLoggingService,\n    private userManagementService: UserManagementAPIService,\n    private renderer: core.Renderer2,\n    private authService: AuthenticationService,\n    private router: Router,\n    private cultureCollectionService: CultureCollectionAPIService,\n    private formBuilder: FormBuilder,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    this.currentUser = this.authService.getCurrentSessionValue.user;\n    this.getAllStaff();\n\n    //Calling the neccessary functions as the page loads\n    var currentDate = new Date();\n    this.date = ('0' + currentDate.getDate()).slice(-2) + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear();\n    this.loadAllLogs();\n\n    //Generate first displayed report so that it is ready to load\n    this.generateRequestReport();\n\n    //Generate first displayed log so that it is ready to load\n    this.setUserLogTable();\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL STAFF\n  /**\n   *  This function will be used to get all the staff members of FABI and load them into an array\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaff() {\n    //Subscribing to the UserManagementAPIService to get a list containing all the FABI members\n    this.userManagementService.getAllFABIStaff().subscribe((response: any) => {\n      if (response.success == true) {\n        var data = response.data.qs.staff;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Error_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE REQUEST REPORT\n  /**\n   *  This function will be used to generate the request report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateRequestReport() {\n    this.errorReport = false;\n    this.depositReport = false;\n    this.requestReport = true;\n    this.revitalizationReport = false;\n\n    //Loading the Request forms\n    this.cultureCollectionService.getAllRequestLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Request_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE DEPOSIT REPORT\n  /**\n   *  This function will be used to generate the deposit report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateDepositReport() {\n    this.errorReport = false;\n    this.depositReport = true;\n    this.requestReport = false;\n    this.revitalizationReport = false;\n\n    //Loading the Deposit forms\n    this.cultureCollectionService.getAllDepositLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Deposit_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE REVITALIZATION REPORT\n  /**\n   *  This function will be used to generate the revitalization report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateRevitalizationReport() {\n    this.requestReport = false;\n    this.depositReport = false;\n    this.errorReport = false;\n    this.revitalizationReport = true;\n\n    //Loading the Revitalization forms\n    this.cultureCollectionService.getAllRevitalizationLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 157;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Revitalization_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET DATE\n  /**\n   *  This function will put the string date provided into a more readable format for the notifications\n   * @param {string} date The date of the log\n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getDate(date: string) {\n    var tempDate = (date).split(' ');\n    var newDate = '';\n\n    newDate += tempDate[2];\n\n    if (tempDate[0] == 'Mon') {\n      newDate += ' Monday ';\n    }\n    else if (tempDate[0] == 'Tue' || tempDate[0] == 'Tu' || tempDate[0] == 'Tues') {\n      newDate += ' Tuesday ';\n    }\n    else if (tempDate[0] == 'Wed') {\n      newDate += ' Wednesday ';\n    }\n    else if (tempDate[0] == 'Thu' || tempDate[0] == 'Thur' || tempDate[0] == 'Thurs') {\n      newDate += ' Thursday ';\n    }\n    else if (tempDate[0] == 'Fri') {\n      newDate += ' Friday ';\n    }\n    else if (tempDate[0] == 'Sat') {\n      newDate += ' Saturday ';\n    }\n    else if (tempDate[0] == 'Sun') {\n      newDate += ' Sunday ';\n    }\n\n    if (tempDate[1] == 'Jan') {\n      newDate += 'January';\n    }\n    else if (tempDate[1] == 'Feb') {\n      newDate += 'February';\n    }\n    else if (tempDate[1] == 'Mar') {\n      newDate += 'March';\n    }\n    else if (tempDate[1] == 'Apr') {\n      newDate += 'April';\n    }\n    else if (tempDate[1] == 'Jun') {\n      newDate += 'June';\n    }\n    else if (tempDate[1] == 'Jul') {\n      newDate += 'July';\n    }\n    else if (tempDate[1] == 'Aug') {\n      newDate += 'August';\n    }\n    else if (tempDate[1] == 'Sep' || tempDate[1] == 'Sept') {\n      newDate += 'September';\n    }\n    else if (tempDate[1] == 'Oct') {\n      newDate += 'October';\n    }\n    else if (tempDate[1] == 'Nov') {\n      newDate += 'November';\n    }\n    else if (tempDate[1] == 'Dec') {\n      newDate += 'December';\n    }\n\n    newDate += ' ' + tempDate[3];\n\n    return newDate;\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       TOGGLE NOTIFICATIONS \n  /**\n   * This function will toggle the display of the notifications side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificationsTab() {\n    this.notificationsTab = !this.notificationsTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE PROFILE \n  /**\n   * This function will toggle the display of the profile side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleProfileTab() {\n    this.profileTab = !this.profileTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      DISPLAY PROFILE SAVE BUTTON \n  /**\n   * This function will display the save button option if any details in the profile have been altered\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayProfileSaveBtn() {\n    this.saveBtn = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DISPLAY PASSWORD CONFIRM INPUT \n  /**\n   * This function will display the confirm password input field in the user's password was altered\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayConfirmPasswordInput() {\n    this.confirmPasswordInput = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE HELP \n  /**\n   * This function will toggle the display of the help side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleHelpTab() {\n    this.helpTab = !this.helpTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE REPORTING \n  /**\n   * This function will toggle the display of the reporting tab section\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleReportSection() {\n    this.reportingTab = !this.reportingTab;\n    this.logsTab = false;\n\n    //Generate the Request report so that it is ready to be displayed when the report menu option is clicked\n    this.requestLogs = true;\n    this.userLogs = false;\n\n    //Display request report immediately since it is the first active tab\n    this.requestReport = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE LOG \n  /**\n   * This function will toggle the display of the logs tab section\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleLogSection() {\n    this.logsTab = !this.logsTab;\n    this.reportingTab = false;\n    this.requestLogs = false;\n    this.requestReport = false;\n\n    this.userLogs = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET USER LOGS TABLE \n  /**\n   * This function will display the user logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setUserLogTable() {\n    this.userLogs = true;\n    this.databaseLogs = false;\n    this.accessLogs = false;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      SET DATABASE LOGS TABLE \n  /**\n   * This function will display the database logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setDatabaseLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = true;\n    this.accessLogs = false;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET ACCESS LOGS TABLE \n  /**\n   * This function will display the access logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setAccessLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = false;\n    this.accessLogs = true;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET ERROR LOGS TABLE \n  /**\n   * This function will display the error logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setErrorLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = false;\n    this.accessLogs = false;\n    this.errorLogs = true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/Admin/admin-dashboard/admin-dashboard.component.ts\n            \n            class\n            AdminDashboardComponent\n            \n                81 %\n                (30/37)\n            \n        \n        \n            \n                \n                src/app/Admin/admin-dashboard/admin-dashboard.component.ts\n            \n            interface\n            AdminMember\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/Admin/admin-dashboard/admin-dashboard.component.ts\n            \n            interface\n            StaffMember\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/Admin/admin-help/admin-help.component.ts\n            \n            component\n            AdminHelpComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/Admin/admin-menu/admin-menu.component.ts\n            \n            class\n            AdminMenuComponent\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/Admin/admin-notification/admin-notification.component.ts\n            \n            class\n            AdminNotificationComponent\n            \n                91 %\n                (21/23)\n            \n        \n        \n            \n                \n                src/app/Admin/admin-profile/admin-profile.component.ts\n            \n            class\n            AdminProfileComponent\n            \n                86 %\n                (25/29)\n            \n        \n        \n            \n                \n                src/app/Admin/admin-routing.module.ts\n            \n            class\n            AdminRoutingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/Admin/clinic-admin-view-samples/clinic-admin-view-samples.component.ts\n            \n            class\n            ClinicAdminViewSamplesComponent\n            \n                60 %\n                (12/20)\n            \n        \n        \n            \n                \n                src/app/Admin/clinic-handler/clinic-handler.component.ts\n            \n            class\n            ClinicHandlerComponent\n            \n                72 %\n                (21/29)\n            \n        \n        \n            \n                \n                src/app/Admin/database-handler/database-handler.component.ts\n            \n            component\n            DatabaseHandlerComponent\n            \n                81 %\n                (40/49)\n            \n        \n        \n            \n                \n                src/app/Admin/organization-handler/organization-handler.component.ts\n            \n            class\n            OrganizationHandlerComponent\n            \n                82 %\n                (32/39)\n            \n        \n        \n            \n                \n                src/app/Admin/reporting/reporting.component.ts\n            \n            class\n            ReportingComponent\n            \n                98 %\n                (61/62)\n            \n        \n        \n            \n                \n                src/app/Admin/reporting/reporting.component.ts\n            \n            interface\n            accessLogInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/Admin/reporting/reporting.component.ts\n            \n            interface\n            databaseLogInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/Admin/reporting/reporting.component.ts\n            \n            interface\n            depositReportInterface\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/Admin/reporting/reporting.component.ts\n            \n            interface\n            errorLogInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/Admin/reporting/reporting.component.ts\n            \n            interface\n            requestReportInterface\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/Admin/reporting/reporting.component.ts\n            \n            interface\n            revitalizationReportInterface\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/Admin/reporting/reporting.component.ts\n            \n            interface\n            StaffMember\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/Admin/reporting/reporting.component.ts\n            \n            interface\n            userLogInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/Admin/staff-handler/staff-handler.component.ts\n            \n            class\n            StaffHandlerComponent\n            \n                85 %\n                (35/41)\n            \n        \n        \n            \n                \n                src/app/Admin/view-forms/view-forms.component.ts\n            \n            class\n            ViewFormsComponent\n            \n                99 %\n                (128/129)\n            \n        \n        \n            \n                \n                src/app/Dynamic-Components/admin-div/admin-div.component.ts\n            \n            component\n            AdminDivComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/Dynamic-Components/notification-div/notification-div.component.ts\n            \n            component\n            NotificationDivComponent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/Dynamic-Components/sample-div/sample-div.component.ts\n            \n            component\n            SampleDivComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/Dynamic-Components/staff-div/staff-div.component.ts\n            \n            component\n            StaffDivComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/Organization-Member/member-dashboard/member-dashboard.component.ts\n            \n            class\n            MemberDashboardComponent\n            \n                87 %\n                (21/24)\n            \n        \n        \n            \n                \n                src/app/Organization-Member/member-help/member-help.component.ts\n            \n            component\n            MemberHelpComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/Organization-Member/member-menu/member-menu.component.ts\n            \n            class\n            MemberMenuComponent\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/app/Organization-Member/member-notification/member-notification.component.ts\n            \n            class\n            MemberNotificationComponent\n            \n                90 %\n                (19/21)\n            \n        \n        \n            \n                \n                src/app/Organization-Member/member-profile/member-profile.component.ts\n            \n            class\n            MemberProfileComponent\n            \n                86 %\n                (26/30)\n            \n        \n        \n            \n                \n                src/app/Organization-Member/member-submit-sample/member-submit-sample.component.ts\n            \n            component\n            MemberSubmitSampleComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/Organization-Member/member-view-samples/member-view-samples.component.ts\n            \n            class\n            MemberViewSamplesComponent\n            \n                71 %\n                (10/14)\n            \n        \n        \n            \n                \n                src/app/Organization-Member/organization-member-routing.module.ts\n            \n            class\n            OrganizationMemberRoutingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/Organization/member-handler/member-handler.component.ts\n            \n            class\n            MemberHandlerComponent\n            \n                88 %\n                (45/51)\n            \n        \n        \n            \n                \n                src/app/Organization/organization-dashboard/organization-dashboard.component.ts\n            \n            class\n            OrganizationDashboardComponent\n            \n                91 %\n                (31/34)\n            \n        \n        \n            \n                \n                src/app/Organization/organization-help/organization-help.component.ts\n            \n            component\n            OrganizationHelpComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/Organization/organization-menu/organization-menu.component.ts\n            \n            component\n            OrganizationMenuComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/Organization/organization-notification/organization-notification.component.ts\n            \n            class\n            OrganizationNotificationComponent\n            \n                90 %\n                (30/33)\n            \n        \n        \n            \n                \n                src/app/Organization/organization-profile/organization-profile.component.ts\n            \n            class\n            OrganizationProfileComponent\n            \n                86 %\n                (26/30)\n            \n        \n        \n            \n                \n                src/app/Organization/organization-routing.module.ts\n            \n            class\n            OrganizationRoutingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/Organization/organization-submit-sample/organization-submit-sample.component.ts\n            \n            component\n            OrganizationSubmitSampleComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/Organization/organization-view-samples/organization-view-samples.component.ts\n            \n            class\n            OrganizationViewSamplesComponent\n            \n                66 %\n                (8/12)\n            \n        \n        \n            \n                \n                src/app/Staff/cmw-menu/cmw-menu.component.ts\n            \n            class\n            CmwMenuComponent\n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                src/app/Staff/staff-dashboard/staff-dashboard.component.ts\n            \n            class\n            StaffDashboardComponent\n            \n                96 %\n                (28/29)\n            \n        \n        \n            \n                \n                src/app/Staff/staff-help/staff-help.component.ts\n            \n            component\n            StaffHelpComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/Staff/staff-menu/staff-menu.component.ts\n            \n            component\n            StaffMenuComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/Staff/staff-notification/staff-notification.component.ts\n            \n            class\n            StaffNotificationComponent\n            \n                96 %\n                (24/25)\n            \n        \n        \n            \n                \n                src/app/Staff/staff-notification/staff-notification.component.ts\n            \n            interface\n            StaffMember\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/Staff/staff-profile/staff-profile.component.ts\n            \n            class\n            StaffProfileComponent\n            \n                86 %\n                (25/29)\n            \n        \n        \n            \n                \n                src/app/Staff/staff-routing.module.ts\n            \n            class\n            StaffRoutingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/Staff/staff-submit-sample/staff-submit-sample.component.ts\n            \n            component\n            StaffSubmitSampleComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/Staff/staff-view-databases/staff-view-databases.component.ts\n            \n            component\n            StaffViewDatabasesComponent\n            \n                77 %\n                (21/27)\n            \n        \n        \n            \n                \n                src/app/Staff/staff-view-samples/staff-view-samples.component.ts\n            \n            class\n            StaffViewSamplesComponent\n            \n                71 %\n                (10/14)\n            \n        \n        \n            \n                \n                src/app/Staff/submit-cmw-deposit/submit-cmw-deposit.component.ts\n            \n            class\n            SubmitCmwDepositComponent\n            \n                97 %\n                (37/38)\n            \n        \n        \n            \n                \n                src/app/Staff/submit-cmw-request/submit-cmw-request.component.ts\n            \n            class\n            SubmitCmwRequestComponent\n            \n                94 %\n                (17/18)\n            \n        \n        \n            \n                \n                src/app/Staff/submit-cmw-revitalization/submit-cmw-revitalization.component.ts\n            \n            class\n            SubmitCmwRevitalizationComponent\n            \n                95 %\n                (20/21)\n            \n        \n        \n            \n                \n                src/app/_errors/error-component/error.component.ts\n            \n            component\n            ErrorComponent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/_errors/error-handler/error-handler.ts\n            \n            class\n            ErrorsHandler\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/_errors/server-error-interceptor/server-error-interceptor.ts\n            \n            class\n            ServerErrorInterceptor\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/_guards/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/app/_interfaces/form-validators.ts\n            \n            variable\n            AdminForm\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_interfaces/form-validators.ts\n            \n            variable\n            ChangePasswordFormValidators\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_interfaces/interfaces.ts\n            \n            interface\n            Address\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/app/_interfaces/interfaces.ts\n            \n            interface\n            Confirm\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/_interfaces/interfaces.ts\n            \n            interface\n            DatabasePrivilege\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/_interfaces/interfaces.ts\n            \n            interface\n            Location\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/_interfaces/interfaces.ts\n            \n            interface\n            LoginInfo\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/_interfaces/interfaces.ts\n            \n            interface\n            Organisation\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/_interfaces/interfaces.ts\n            \n            interface\n            OrganisationAdmin\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/_interfaces/interfaces.ts\n            \n            interface\n            OrganisationMember\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/app/_interfaces/interfaces.ts\n            \n            interface\n            PrivilegeTypes\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/_interfaces/interfaces.ts\n            \n            interface\n            SampleFormData\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/app/_interfaces/interfaces.ts\n            \n            interface\n            StaffInfo\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/app/_interfaces/interfaces.ts\n            \n            interface\n            UserPrivileges\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/_interfaces/interfaces.ts\n            \n            interface\n            UserType\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/_loading/loading.component.ts\n            \n            class\n            LoadingComponent\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/_pipes/filter.pipe.ts\n            \n            injectable\n            FilterPipe\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/_pipes/filter.pipe.ts\n            \n            pipe\n            FilterPipe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            injectable\n            CultureCollectionAPIService\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            interface\n            CMWDeposit\n            \n                3 %\n                (1/27)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            interface\n            CMWRequest\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            interface\n            CMWRevitalization\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            interface\n            ProcessedForm\n            \n                7 %\n                (1/14)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            interface\n            UpdateDepositForm\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            variable\n            deleteDepositFormURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            variable\n            deleteProcessedFormURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            variable\n            deleteRequestFormURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            variable\n            deleteRevitalizationFormURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            variable\n            getDepositLogsURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            variable\n            getProcessedLogsURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            variable\n            getRequestLogsURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            variable\n            getRevitalizationLogsURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            variable\n            submitCMWDepositFormURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            variable\n            submitCMWRequestFormURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            variable\n            submitCMWRevitalizationFormURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            variable\n            submitProcessedFormURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/culture-collection-api.service.ts\n            \n            variable\n            updateDepositFormStatusURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/database-management.service.ts\n            \n            injectable\n            DatabaseManagementService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/_services/diagnostic-clinic-api.service.ts\n            \n            injectable\n            DiagnosticClinicAPIService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/_services/diagnostic-clinic-api.service.ts\n            \n            interface\n            POSTMember\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/_services/diagnostic-clinic-api.service.ts\n            \n            interface\n            Sample\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/_services/diagnostic-clinic-api.service.ts\n            \n            interface\n            Species\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/_services/diagnostic-clinic-api.service.ts\n            \n            variable\n            getAllSamplesForMemberURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/location.service.ts\n            \n            injectable\n            LocationService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/_services/notification-logging.service.ts\n            \n            injectable\n            NotificationLoggingService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/app/_services/notification-logging.service.ts\n            \n            interface\n            AccessLogs\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/app/_services/notification-logging.service.ts\n            \n            interface\n            DatabaseManagementLogs\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                src/app/_services/notification-logging.service.ts\n            \n            interface\n            DiagnosticClinicLogs\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/_services/notification-logging.service.ts\n            \n            interface\n            ErrorLogs\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/app/_services/notification-logging.service.ts\n            \n            interface\n            Logs\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/_services/notification-logging.service.ts\n            \n            interface\n            POSTLog\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/_services/notification-logging.service.ts\n            \n            interface\n            POSTUpdate\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/_services/notification-logging.service.ts\n            \n            interface\n            POSTUser\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/_services/notification-logging.service.ts\n            \n            interface\n            UserLogs\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                src/app/_services/notification-logging.service.ts\n            \n            variable\n            getAllLogsURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/notification-logging.service.ts\n            \n            variable\n            getUserLogsURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/notification-logging.service.ts\n            \n            variable\n            updateUserLogsURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/_services/porting.service.ts\n            \n            injectable\n            Porting\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/app/_services/user-management-api.service.ts\n            \n            class\n            UserManagementAPIService\n            \n                84 %\n                (22/26)\n            \n        \n        \n            \n                \n                src/app/_services/user-management-api.service.ts\n            \n            interface\n            Member\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/_services/user-management-api.service.ts\n            \n            interface\n            POSTMember\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/_services/user-management-api.service.ts\n            \n            interface\n            POSTOrganization\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/_services/user-management-api.service.ts\n            \n            interface\n            POSTUpdateMember\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/_services/user-management-api.service.ts\n            \n            interface\n            POSTUpdateOrganization\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/_services/user-management-api.service.ts\n            \n            interface\n            UpdateMember\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/_services/user-management-api.service.ts\n            \n            interface\n            UpdateOrganization\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/_services/user-management-api.service.ts\n            \n            variable\n            getAllFABIStaffURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/user-management-api.service.ts\n            \n            variable\n            getAllOrganizationMembers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/user-management-api.service.ts\n            \n            variable\n            getUserDetailsURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/user-management-api.service.ts\n            \n            variable\n            updateOrganizationMemberDetailsURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/_services/user-management-api.service.ts\n            \n            variable\n            updateStaffMemberDetailsURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/home/home.component.ts\n            \n            class\n            HomeComponent\n            \n                45 %\n                (5/11)\n            \n        \n        \n            \n                \n                src/app/login/login.component.ts\n            \n            class\n            LoginComponent\n            \n                85 %\n                (12/14)\n            \n        \n        \n            \n                \n                src/app/maps-window/maps-window.component.ts\n            \n            class\n            MapsWindowComponent\n            \n                76 %\n                (13/17)\n            \n        \n        \n            \n                \n                src/app/maps-window/maps-window.component.ts\n            \n            variable\n            google\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/page-not-found/page-not-found.component.ts\n            \n            component\n            PageNotFoundComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/pre-diagnosis/pre-diagnosis.component.ts\n            \n            class\n            PreDiagnosisComponent\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/app/sample-form/sample-form.component.ts\n            \n            component\n            SampleFormComponent\n            \n                28 %\n                (11/39)\n            \n        \n        \n            \n                \n                src/app/sample-form/sample-form.component.ts\n            \n            variable\n            google\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/databaseLogInterface.html":{"url":"interfaces/databaseLogInterface.html","title":"interface - databaseLogInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  databaseLogInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Admin/reporting/reporting.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        action\n                                \n                                \n                                        date\n                                \n                                \n                                        details\n                                \n                                \n                                        user\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        action\n                                    \n                                \n                                \n                                    \n                                        action:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        details\n                                    \n                                \n                                \n                                    \n                                        details:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                    \n                                \n                                \n                                    \n                                        user:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\nimport { Router } from '@angular/router';\nimport html2canvas from 'html2canvas';\n//These imports are used to created a downloadable PDF of the reports\nimport * as jspdf from 'jspdf';\nimport 'jspdf-autotable';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { CultureCollectionAPIService } from '../../_services/culture-collection-api.service';\nimport { NotificationLoggingService } from '../../_services/notification-logging.service';\nimport { UserManagementAPIService } from '../../_services/user-management-api.service';\n\n\nexport interface userLogInterface {\n  action: string;\n  date: string;\n  user1: string;\n  user2: string;\n}\n\nexport interface databaseLogInterface {\n  action: string;\n  date: string;\n  user: string;\n  details: string;\n}\n\nexport interface accessLogInterface {\n  details: string;\n  date: string;\n  user: string;\n}\n\nexport interface errorLogInterface {\n  code: string;\n  date: string;\n  details: string;\n  user: string;\n}\n\nexport interface requestReportInterface {\n  user: string;\n  requestor: string;\n  cultureNumber: string;\n  taxonName: string;\n  referenceNumber: string;\n  dateRequested: string;\n  dateSubmitted: string;\n}\n\nexport interface depositReportInterface {\n  user: string;\n  cultureNumber: string;\n  name: string;\n  collectedBy: string;\n  dateCollected: string;\n  isolatedBy: string;\n  identifiedBy: string;\n  dateSubmitted: string;\n}\n\nexport interface revitalizationReportInterface {\n  user: string;\n  requestor: string;\n  cultureNumber: string;\n  cultureName: string;\n  referenceNumber: string;\n  dateRequested: string;\n  dateReturned: string;\n  dateSubmitted: string;\n}\n\nexport interface StaffMember {\n  fname: string;\n  surname: string;\n  email: string;\n  id: string;\n}\n\n@core.Component({\n  selector: 'app-reporting',\n  templateUrl: './reporting.component.html',\n  styleUrls: ['./reporting.component.scss']\n})\nexport class ReportingComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Indicates if there are logs of type USER - @type {boolean} */\n  userLogs: boolean = false;\n  /** Indicates if there are logs of type DBML - @type {boolean} */\n  databaseLogs: boolean = false;\n  /** Indicates if there are logs of type ACCL - @type {boolean} */\n  accessLogs: boolean = false;\n  /** Indicates if there are logs of type ERRL - @type {boolean} */\n  errorLogs: boolean = false;\n  /** Indicates if there are logs of type REQUEST - @type {boolean} */\n  requestLogs: boolean = false;\n  /** Indicates if there are logs of type DEPOSIT - @type {boolean} */\n  depositLogs: boolean = false;\n  /** Indicates if there are logs of type REVITALIZATION - @type {boolean} */\n  revitalizationLogs: boolean = false;\n  /** Indicates if the error report has been generated - @type {boolean} */\n  errorReport: boolean = false;\n  /** Indicates if the request report has been generated - @type {boolean} */\n  requestReport: boolean = false;\n  /** Indicates if the deposit report has been generated - @type {boolean} */\n  depositReport: boolean = false;\n  /** Indicates if the revitalization report has been generated - @type {boolean} */\n  revitalizationReport: boolean = false;\n  /** The current date in string format - @type {string} */\n  date: string;\n  /** Array holding the user logs - @type {userLogInterface} */\n  userLogsArray: userLogInterface[] = [];\n  /** Array holding the database logs - @type {databaseLogInterface} */\n  databaseLogsArray: databaseLogInterface[] = [];\n  /** Array holding the access logs - @type {accessLogInterface} */\n  accessLogsArray: accessLogInterface[] = [];\n  /** Array holding the error logs - @type {errorLogInterface} */\n  errorLogsArray: errorLogInterface[] = [];\n  /** Array holding the request logs - @type {requestReportInterface} */\n  requestLogsArray: requestReportInterface[] = [];\n  /** Array holding the deposit logs - @type {depositReportInterface} */\n  depositLogsArray: depositReportInterface[] = [];\n  /** Array holding the revitalization logs - @type {revitalizationReportInterface} */\n  revitalizationLogsArray: revitalizationReportInterface[] = [];\n\n  /** Holds the table element (errorReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"errorReportPDF\") errorReportPDF: core.ElementRef;\n  /** Holds the table element (requestReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"requestReportPDF\") requestReportPDF: core.ElementRef;\n  /** Holds the table element (depositReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"depositReportPDF\") depositReportPDF: core.ElementRef;\n  /** Holds the table element (revitalizationReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"revitalizationReportPDF\") revitalizationReportPDF: core.ElementRef;\n\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  notificationsTab: boolean = false;\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n  /** Indicates if the save button is hidden/shown on the profile tab- @type {boolean} */\n  saveBtn: boolean = false;\n  /** Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} */\n  confirmPasswordInput: boolean = false;\n  /** Indicates if the help tab is hidden/shown - @type {boolean} */\n  helpTab: boolean = false;\n  /** Indicates if the reporting tab is hidden/shown - @type {boolean} */\n  reportingTab: boolean = false;\n  /** Indicates if the log tab is hidden/shown - @type {boolean} */\n  logsTab: boolean = false;\n  /** The details of the user currently logged in -  @type {any} */\n  currentUser: any;\n  /** Object array for holding the staff members -  @type {StaffMember[]} */\n  staff: StaffMember[] = [];\n  /** Stores the data table -  @type {string} */\n  public tableWidget: any;\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchItem: string = \"\";\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchReports: string = \"\";\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       CONSTRUCTOR\n  /**\n   * Creates an instance of ReportingComponent.\n   * \n   * @param {NotificationLoggingService} notificationLoggingService For calling the Notification Logging API service\n   * @param {CultureCollectionAPIService} cultureCollectionService For calling the Culture Collection API Service\n   * @param {UserManagementAPIService} userManagementService For calling the User Management API Service\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {Router} router\n   * @param {core.Renderer2} renderer Used for creating the PDF documents to download\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private notificationLoggingService: NotificationLoggingService,\n    private userManagementService: UserManagementAPIService,\n    private renderer: core.Renderer2,\n    private authService: AuthenticationService,\n    private router: Router,\n    private cultureCollectionService: CultureCollectionAPIService,\n    private formBuilder: FormBuilder,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    this.currentUser = this.authService.getCurrentSessionValue.user;\n    this.getAllStaff();\n\n    //Calling the neccessary functions as the page loads\n    var currentDate = new Date();\n    this.date = ('0' + currentDate.getDate()).slice(-2) + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear();\n    this.loadAllLogs();\n\n    //Generate first displayed report so that it is ready to load\n    this.generateRequestReport();\n\n    //Generate first displayed log so that it is ready to load\n    this.setUserLogTable();\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL STAFF\n  /**\n   *  This function will be used to get all the staff members of FABI and load them into an array\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaff() {\n    //Subscribing to the UserManagementAPIService to get a list containing all the FABI members\n    this.userManagementService.getAllFABIStaff().subscribe((response: any) => {\n      if (response.success == true) {\n        var data = response.data.qs.staff;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Error_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE REQUEST REPORT\n  /**\n   *  This function will be used to generate the request report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateRequestReport() {\n    this.errorReport = false;\n    this.depositReport = false;\n    this.requestReport = true;\n    this.revitalizationReport = false;\n\n    //Loading the Request forms\n    this.cultureCollectionService.getAllRequestLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Request_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE DEPOSIT REPORT\n  /**\n   *  This function will be used to generate the deposit report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateDepositReport() {\n    this.errorReport = false;\n    this.depositReport = true;\n    this.requestReport = false;\n    this.revitalizationReport = false;\n\n    //Loading the Deposit forms\n    this.cultureCollectionService.getAllDepositLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Deposit_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE REVITALIZATION REPORT\n  /**\n   *  This function will be used to generate the revitalization report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateRevitalizationReport() {\n    this.requestReport = false;\n    this.depositReport = false;\n    this.errorReport = false;\n    this.revitalizationReport = true;\n\n    //Loading the Revitalization forms\n    this.cultureCollectionService.getAllRevitalizationLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 157;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Revitalization_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET DATE\n  /**\n   *  This function will put the string date provided into a more readable format for the notifications\n   * @param {string} date The date of the log\n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getDate(date: string) {\n    var tempDate = (date).split(' ');\n    var newDate = '';\n\n    newDate += tempDate[2];\n\n    if (tempDate[0] == 'Mon') {\n      newDate += ' Monday ';\n    }\n    else if (tempDate[0] == 'Tue' || tempDate[0] == 'Tu' || tempDate[0] == 'Tues') {\n      newDate += ' Tuesday ';\n    }\n    else if (tempDate[0] == 'Wed') {\n      newDate += ' Wednesday ';\n    }\n    else if (tempDate[0] == 'Thu' || tempDate[0] == 'Thur' || tempDate[0] == 'Thurs') {\n      newDate += ' Thursday ';\n    }\n    else if (tempDate[0] == 'Fri') {\n      newDate += ' Friday ';\n    }\n    else if (tempDate[0] == 'Sat') {\n      newDate += ' Saturday ';\n    }\n    else if (tempDate[0] == 'Sun') {\n      newDate += ' Sunday ';\n    }\n\n    if (tempDate[1] == 'Jan') {\n      newDate += 'January';\n    }\n    else if (tempDate[1] == 'Feb') {\n      newDate += 'February';\n    }\n    else if (tempDate[1] == 'Mar') {\n      newDate += 'March';\n    }\n    else if (tempDate[1] == 'Apr') {\n      newDate += 'April';\n    }\n    else if (tempDate[1] == 'Jun') {\n      newDate += 'June';\n    }\n    else if (tempDate[1] == 'Jul') {\n      newDate += 'July';\n    }\n    else if (tempDate[1] == 'Aug') {\n      newDate += 'August';\n    }\n    else if (tempDate[1] == 'Sep' || tempDate[1] == 'Sept') {\n      newDate += 'September';\n    }\n    else if (tempDate[1] == 'Oct') {\n      newDate += 'October';\n    }\n    else if (tempDate[1] == 'Nov') {\n      newDate += 'November';\n    }\n    else if (tempDate[1] == 'Dec') {\n      newDate += 'December';\n    }\n\n    newDate += ' ' + tempDate[3];\n\n    return newDate;\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       TOGGLE NOTIFICATIONS \n  /**\n   * This function will toggle the display of the notifications side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificationsTab() {\n    this.notificationsTab = !this.notificationsTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE PROFILE \n  /**\n   * This function will toggle the display of the profile side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleProfileTab() {\n    this.profileTab = !this.profileTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      DISPLAY PROFILE SAVE BUTTON \n  /**\n   * This function will display the save button option if any details in the profile have been altered\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayProfileSaveBtn() {\n    this.saveBtn = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DISPLAY PASSWORD CONFIRM INPUT \n  /**\n   * This function will display the confirm password input field in the user's password was altered\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayConfirmPasswordInput() {\n    this.confirmPasswordInput = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE HELP \n  /**\n   * This function will toggle the display of the help side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleHelpTab() {\n    this.helpTab = !this.helpTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE REPORTING \n  /**\n   * This function will toggle the display of the reporting tab section\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleReportSection() {\n    this.reportingTab = !this.reportingTab;\n    this.logsTab = false;\n\n    //Generate the Request report so that it is ready to be displayed when the report menu option is clicked\n    this.requestLogs = true;\n    this.userLogs = false;\n\n    //Display request report immediately since it is the first active tab\n    this.requestReport = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE LOG \n  /**\n   * This function will toggle the display of the logs tab section\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleLogSection() {\n    this.logsTab = !this.logsTab;\n    this.reportingTab = false;\n    this.requestLogs = false;\n    this.requestReport = false;\n\n    this.userLogs = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET USER LOGS TABLE \n  /**\n   * This function will display the user logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setUserLogTable() {\n    this.userLogs = true;\n    this.databaseLogs = false;\n    this.accessLogs = false;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      SET DATABASE LOGS TABLE \n  /**\n   * This function will display the database logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setDatabaseLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = true;\n    this.accessLogs = false;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET ACCESS LOGS TABLE \n  /**\n   * This function will display the access logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setAccessLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = false;\n    this.accessLogs = true;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET ERROR LOGS TABLE \n  /**\n   * This function will display the error logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setErrorLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = false;\n    this.accessLogs = false;\n    this.errorLogs = true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @agm/core : ^1.0.0-beta.7\n        \n            @angular/animations : ^7.2.15\n        \n            @angular/cdk : ^7.3.7\n        \n            @angular/common : ~7.2.0\n        \n            @angular/compiler : ~7.2.0\n        \n            @angular/core : ~7.2.0\n        \n            @angular/forms : ~7.2.0\n        \n            @angular/material : ^7.3.7\n        \n            @angular/platform-browser : ~7.2.0\n        \n            @angular/platform-browser-dynamic : ~7.2.0\n        \n            @angular/router : ~7.2.0\n        \n            @google/maps : ^0.5.5\n        \n            @ng-bootstrap/ng-bootstrap : ^4.1.3\n        \n            @types/mocha : ^5.2.7\n        \n            agm-direction : ^0.7.8\n        \n            angular-datatables : ^8.0.0\n        \n            angular-font-awesome : ^3.1.2\n        \n            angular-scroll : ^1.0.2\n        \n            angular7-data-table : ^1.0.13\n        \n            bootstrap : ^4.3.1\n        \n            core-js : ^2.5.4\n        \n            datatables.net : ^1.10.19\n        \n            datatables.net-bs : ^1.10.19\n        \n            datatables.net-dt : ^1.10.19\n        \n            datatables.net-select : ^1.3.0\n        \n            datatables.net-select-bs : ^1.3.0\n        \n            font-awesome : ^4.7.0\n        \n            html2canvas : ^1.0.0-rc.3\n        \n            jasmine : ^3.4.0\n        \n            jquery : ^3.4.1\n        \n            jspdf : ^1.5.3\n        \n            jspdf-autotable : ^3.2.4\n        \n            ng-pipe-filter : ^1.0.4\n        \n            ngx-cookie-service : ^2.2.0\n        \n            ngx-toastr : ^10.0.4\n        \n            rxjs : ~6.3.3\n        \n            tar : ^4.4.8\n        \n            toastr : ^2.1.4\n        \n            tslib : ^1.9.0\n        \n            zone.js : ~0.8.26\n        \n            @angular-devkit/build-angular : ^0.13.9\n        \n            @angular/cli : ^7.3.9\n        \n            @angular/compiler-cli : ~7.2.0\n        \n            @angular/language-service : ~7.2.0\n        \n            @types/angular : ^1.6.55\n        \n            @types/datatables.net : ^1.10.17\n        \n            @types/googlemaps : ^3.37.0\n        \n            @types/jasmine : ^2.8.16\n        \n            @types/jasminewd2 : ~2.0.3\n        \n            @types/jquery : ^3.3.31\n        \n            @types/node : ^8.10.49\n        \n            codelyzer : ~4.5.0\n        \n            jasmine-core : ~2.99.1\n        \n            jasmine-spec-reporter : ~4.2.1\n        \n            karma : ~4.0.0\n        \n            karma-chrome-launcher : ^2.2.0\n        \n            karma-coverage-istanbul-reporter : ~2.0.1\n        \n            karma-jasmine : ~1.1.2\n        \n            karma-jasmine-html-reporter : ^0.2.2\n        \n            protractor : ~5.4.0\n        \n            ts-node : ~7.0.0\n        \n            tslint : ~5.11.0\n        \n            typescript : ~3.2.2\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/depositReportInterface.html":{"url":"interfaces/depositReportInterface.html","title":"interface - depositReportInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  depositReportInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Admin/reporting/reporting.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        collectedBy\n                                \n                                \n                                        cultureNumber\n                                \n                                \n                                        dateCollected\n                                \n                                \n                                        dateSubmitted\n                                \n                                \n                                        identifiedBy\n                                \n                                \n                                        isolatedBy\n                                \n                                \n                                        name\n                                \n                                \n                                        user\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        collectedBy\n                                    \n                                \n                                \n                                    \n                                        collectedBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cultureNumber\n                                    \n                                \n                                \n                                    \n                                        cultureNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateCollected\n                                    \n                                \n                                \n                                    \n                                        dateCollected:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateSubmitted\n                                    \n                                \n                                \n                                    \n                                        dateSubmitted:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        identifiedBy\n                                    \n                                \n                                \n                                    \n                                        identifiedBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isolatedBy\n                                    \n                                \n                                \n                                    \n                                        isolatedBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                    \n                                \n                                \n                                    \n                                        user:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\nimport { Router } from '@angular/router';\nimport html2canvas from 'html2canvas';\n//These imports are used to created a downloadable PDF of the reports\nimport * as jspdf from 'jspdf';\nimport 'jspdf-autotable';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { CultureCollectionAPIService } from '../../_services/culture-collection-api.service';\nimport { NotificationLoggingService } from '../../_services/notification-logging.service';\nimport { UserManagementAPIService } from '../../_services/user-management-api.service';\n\n\nexport interface userLogInterface {\n  action: string;\n  date: string;\n  user1: string;\n  user2: string;\n}\n\nexport interface databaseLogInterface {\n  action: string;\n  date: string;\n  user: string;\n  details: string;\n}\n\nexport interface accessLogInterface {\n  details: string;\n  date: string;\n  user: string;\n}\n\nexport interface errorLogInterface {\n  code: string;\n  date: string;\n  details: string;\n  user: string;\n}\n\nexport interface requestReportInterface {\n  user: string;\n  requestor: string;\n  cultureNumber: string;\n  taxonName: string;\n  referenceNumber: string;\n  dateRequested: string;\n  dateSubmitted: string;\n}\n\nexport interface depositReportInterface {\n  user: string;\n  cultureNumber: string;\n  name: string;\n  collectedBy: string;\n  dateCollected: string;\n  isolatedBy: string;\n  identifiedBy: string;\n  dateSubmitted: string;\n}\n\nexport interface revitalizationReportInterface {\n  user: string;\n  requestor: string;\n  cultureNumber: string;\n  cultureName: string;\n  referenceNumber: string;\n  dateRequested: string;\n  dateReturned: string;\n  dateSubmitted: string;\n}\n\nexport interface StaffMember {\n  fname: string;\n  surname: string;\n  email: string;\n  id: string;\n}\n\n@core.Component({\n  selector: 'app-reporting',\n  templateUrl: './reporting.component.html',\n  styleUrls: ['./reporting.component.scss']\n})\nexport class ReportingComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Indicates if there are logs of type USER - @type {boolean} */\n  userLogs: boolean = false;\n  /** Indicates if there are logs of type DBML - @type {boolean} */\n  databaseLogs: boolean = false;\n  /** Indicates if there are logs of type ACCL - @type {boolean} */\n  accessLogs: boolean = false;\n  /** Indicates if there are logs of type ERRL - @type {boolean} */\n  errorLogs: boolean = false;\n  /** Indicates if there are logs of type REQUEST - @type {boolean} */\n  requestLogs: boolean = false;\n  /** Indicates if there are logs of type DEPOSIT - @type {boolean} */\n  depositLogs: boolean = false;\n  /** Indicates if there are logs of type REVITALIZATION - @type {boolean} */\n  revitalizationLogs: boolean = false;\n  /** Indicates if the error report has been generated - @type {boolean} */\n  errorReport: boolean = false;\n  /** Indicates if the request report has been generated - @type {boolean} */\n  requestReport: boolean = false;\n  /** Indicates if the deposit report has been generated - @type {boolean} */\n  depositReport: boolean = false;\n  /** Indicates if the revitalization report has been generated - @type {boolean} */\n  revitalizationReport: boolean = false;\n  /** The current date in string format - @type {string} */\n  date: string;\n  /** Array holding the user logs - @type {userLogInterface} */\n  userLogsArray: userLogInterface[] = [];\n  /** Array holding the database logs - @type {databaseLogInterface} */\n  databaseLogsArray: databaseLogInterface[] = [];\n  /** Array holding the access logs - @type {accessLogInterface} */\n  accessLogsArray: accessLogInterface[] = [];\n  /** Array holding the error logs - @type {errorLogInterface} */\n  errorLogsArray: errorLogInterface[] = [];\n  /** Array holding the request logs - @type {requestReportInterface} */\n  requestLogsArray: requestReportInterface[] = [];\n  /** Array holding the deposit logs - @type {depositReportInterface} */\n  depositLogsArray: depositReportInterface[] = [];\n  /** Array holding the revitalization logs - @type {revitalizationReportInterface} */\n  revitalizationLogsArray: revitalizationReportInterface[] = [];\n\n  /** Holds the table element (errorReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"errorReportPDF\") errorReportPDF: core.ElementRef;\n  /** Holds the table element (requestReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"requestReportPDF\") requestReportPDF: core.ElementRef;\n  /** Holds the table element (depositReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"depositReportPDF\") depositReportPDF: core.ElementRef;\n  /** Holds the table element (revitalizationReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"revitalizationReportPDF\") revitalizationReportPDF: core.ElementRef;\n\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  notificationsTab: boolean = false;\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n  /** Indicates if the save button is hidden/shown on the profile tab- @type {boolean} */\n  saveBtn: boolean = false;\n  /** Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} */\n  confirmPasswordInput: boolean = false;\n  /** Indicates if the help tab is hidden/shown - @type {boolean} */\n  helpTab: boolean = false;\n  /** Indicates if the reporting tab is hidden/shown - @type {boolean} */\n  reportingTab: boolean = false;\n  /** Indicates if the log tab is hidden/shown - @type {boolean} */\n  logsTab: boolean = false;\n  /** The details of the user currently logged in -  @type {any} */\n  currentUser: any;\n  /** Object array for holding the staff members -  @type {StaffMember[]} */\n  staff: StaffMember[] = [];\n  /** Stores the data table -  @type {string} */\n  public tableWidget: any;\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchItem: string = \"\";\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchReports: string = \"\";\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       CONSTRUCTOR\n  /**\n   * Creates an instance of ReportingComponent.\n   * \n   * @param {NotificationLoggingService} notificationLoggingService For calling the Notification Logging API service\n   * @param {CultureCollectionAPIService} cultureCollectionService For calling the Culture Collection API Service\n   * @param {UserManagementAPIService} userManagementService For calling the User Management API Service\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {Router} router\n   * @param {core.Renderer2} renderer Used for creating the PDF documents to download\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private notificationLoggingService: NotificationLoggingService,\n    private userManagementService: UserManagementAPIService,\n    private renderer: core.Renderer2,\n    private authService: AuthenticationService,\n    private router: Router,\n    private cultureCollectionService: CultureCollectionAPIService,\n    private formBuilder: FormBuilder,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    this.currentUser = this.authService.getCurrentSessionValue.user;\n    this.getAllStaff();\n\n    //Calling the neccessary functions as the page loads\n    var currentDate = new Date();\n    this.date = ('0' + currentDate.getDate()).slice(-2) + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear();\n    this.loadAllLogs();\n\n    //Generate first displayed report so that it is ready to load\n    this.generateRequestReport();\n\n    //Generate first displayed log so that it is ready to load\n    this.setUserLogTable();\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL STAFF\n  /**\n   *  This function will be used to get all the staff members of FABI and load them into an array\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaff() {\n    //Subscribing to the UserManagementAPIService to get a list containing all the FABI members\n    this.userManagementService.getAllFABIStaff().subscribe((response: any) => {\n      if (response.success == true) {\n        var data = response.data.qs.staff;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Error_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE REQUEST REPORT\n  /**\n   *  This function will be used to generate the request report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateRequestReport() {\n    this.errorReport = false;\n    this.depositReport = false;\n    this.requestReport = true;\n    this.revitalizationReport = false;\n\n    //Loading the Request forms\n    this.cultureCollectionService.getAllRequestLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Request_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE DEPOSIT REPORT\n  /**\n   *  This function will be used to generate the deposit report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateDepositReport() {\n    this.errorReport = false;\n    this.depositReport = true;\n    this.requestReport = false;\n    this.revitalizationReport = false;\n\n    //Loading the Deposit forms\n    this.cultureCollectionService.getAllDepositLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Deposit_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE REVITALIZATION REPORT\n  /**\n   *  This function will be used to generate the revitalization report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateRevitalizationReport() {\n    this.requestReport = false;\n    this.depositReport = false;\n    this.errorReport = false;\n    this.revitalizationReport = true;\n\n    //Loading the Revitalization forms\n    this.cultureCollectionService.getAllRevitalizationLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 157;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Revitalization_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET DATE\n  /**\n   *  This function will put the string date provided into a more readable format for the notifications\n   * @param {string} date The date of the log\n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getDate(date: string) {\n    var tempDate = (date).split(' ');\n    var newDate = '';\n\n    newDate += tempDate[2];\n\n    if (tempDate[0] == 'Mon') {\n      newDate += ' Monday ';\n    }\n    else if (tempDate[0] == 'Tue' || tempDate[0] == 'Tu' || tempDate[0] == 'Tues') {\n      newDate += ' Tuesday ';\n    }\n    else if (tempDate[0] == 'Wed') {\n      newDate += ' Wednesday ';\n    }\n    else if (tempDate[0] == 'Thu' || tempDate[0] == 'Thur' || tempDate[0] == 'Thurs') {\n      newDate += ' Thursday ';\n    }\n    else if (tempDate[0] == 'Fri') {\n      newDate += ' Friday ';\n    }\n    else if (tempDate[0] == 'Sat') {\n      newDate += ' Saturday ';\n    }\n    else if (tempDate[0] == 'Sun') {\n      newDate += ' Sunday ';\n    }\n\n    if (tempDate[1] == 'Jan') {\n      newDate += 'January';\n    }\n    else if (tempDate[1] == 'Feb') {\n      newDate += 'February';\n    }\n    else if (tempDate[1] == 'Mar') {\n      newDate += 'March';\n    }\n    else if (tempDate[1] == 'Apr') {\n      newDate += 'April';\n    }\n    else if (tempDate[1] == 'Jun') {\n      newDate += 'June';\n    }\n    else if (tempDate[1] == 'Jul') {\n      newDate += 'July';\n    }\n    else if (tempDate[1] == 'Aug') {\n      newDate += 'August';\n    }\n    else if (tempDate[1] == 'Sep' || tempDate[1] == 'Sept') {\n      newDate += 'September';\n    }\n    else if (tempDate[1] == 'Oct') {\n      newDate += 'October';\n    }\n    else if (tempDate[1] == 'Nov') {\n      newDate += 'November';\n    }\n    else if (tempDate[1] == 'Dec') {\n      newDate += 'December';\n    }\n\n    newDate += ' ' + tempDate[3];\n\n    return newDate;\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       TOGGLE NOTIFICATIONS \n  /**\n   * This function will toggle the display of the notifications side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificationsTab() {\n    this.notificationsTab = !this.notificationsTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE PROFILE \n  /**\n   * This function will toggle the display of the profile side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleProfileTab() {\n    this.profileTab = !this.profileTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      DISPLAY PROFILE SAVE BUTTON \n  /**\n   * This function will display the save button option if any details in the profile have been altered\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayProfileSaveBtn() {\n    this.saveBtn = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DISPLAY PASSWORD CONFIRM INPUT \n  /**\n   * This function will display the confirm password input field in the user's password was altered\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayConfirmPasswordInput() {\n    this.confirmPasswordInput = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE HELP \n  /**\n   * This function will toggle the display of the help side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleHelpTab() {\n    this.helpTab = !this.helpTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE REPORTING \n  /**\n   * This function will toggle the display of the reporting tab section\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleReportSection() {\n    this.reportingTab = !this.reportingTab;\n    this.logsTab = false;\n\n    //Generate the Request report so that it is ready to be displayed when the report menu option is clicked\n    this.requestLogs = true;\n    this.userLogs = false;\n\n    //Display request report immediately since it is the first active tab\n    this.requestReport = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE LOG \n  /**\n   * This function will toggle the display of the logs tab section\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleLogSection() {\n    this.logsTab = !this.logsTab;\n    this.reportingTab = false;\n    this.requestLogs = false;\n    this.requestReport = false;\n\n    this.userLogs = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET USER LOGS TABLE \n  /**\n   * This function will display the user logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setUserLogTable() {\n    this.userLogs = true;\n    this.databaseLogs = false;\n    this.accessLogs = false;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      SET DATABASE LOGS TABLE \n  /**\n   * This function will display the database logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setDatabaseLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = true;\n    this.accessLogs = false;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET ACCESS LOGS TABLE \n  /**\n   * This function will display the access logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setAccessLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = false;\n    this.accessLogs = true;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET ERROR LOGS TABLE \n  /**\n   * This function will display the error logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setErrorLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = false;\n    this.accessLogs = false;\n    this.errorLogs = true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/_interfaces/role.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                    \n                        \n                            File Name: role.ts\nFile Path: c:\\Users\\Kendra\\Documents\\Varsity\\Third Year\\COS301\\CAPSTONE\\Git Repo\\FABI-Mobile\\FABI-Web\\src\\app_interfaces\\role.ts\nProject Name: fabi-web\nCreated Date: Monday, July 15th 2019\nAuthor: Team Nova - novacapstone@gmail.com\nLast Modified: Sunday, October 6th 2019\nModified By: Team Nova\nCopyright (c) 2019 University of Pretoria\n>\n\n                        \n                    \n                        \n                            \n                                 SuperUser\n                            \n                        \n                        \n                            \n                                Value : SuperUser\n                            \n                        \n                        \n                            \n                                 ClinicAdmin\n                            \n                        \n                        \n                            \n                                Value : ClinicAdmin\n                            \n                        \n                        \n                            \n                                 Staff\n                            \n                        \n                        \n                            \n                                Value : Staff\n                            \n                        \n                        \n                            \n                                 OrganizationAdmin\n                            \n                        \n                        \n                            \n                                Value : OrganizationAdmin\n                            \n                        \n                        \n                            \n                                 Member\n                            \n                        \n                        \n                            \n                                Value : Member\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/errorLogInterface.html":{"url":"interfaces/errorLogInterface.html","title":"interface - errorLogInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  errorLogInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Admin/reporting/reporting.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        code\n                                \n                                \n                                        date\n                                \n                                \n                                        details\n                                \n                                \n                                        user\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        details\n                                    \n                                \n                                \n                                    \n                                        details:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                    \n                                \n                                \n                                    \n                                        user:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\nimport { Router } from '@angular/router';\nimport html2canvas from 'html2canvas';\n//These imports are used to created a downloadable PDF of the reports\nimport * as jspdf from 'jspdf';\nimport 'jspdf-autotable';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { CultureCollectionAPIService } from '../../_services/culture-collection-api.service';\nimport { NotificationLoggingService } from '../../_services/notification-logging.service';\nimport { UserManagementAPIService } from '../../_services/user-management-api.service';\n\n\nexport interface userLogInterface {\n  action: string;\n  date: string;\n  user1: string;\n  user2: string;\n}\n\nexport interface databaseLogInterface {\n  action: string;\n  date: string;\n  user: string;\n  details: string;\n}\n\nexport interface accessLogInterface {\n  details: string;\n  date: string;\n  user: string;\n}\n\nexport interface errorLogInterface {\n  code: string;\n  date: string;\n  details: string;\n  user: string;\n}\n\nexport interface requestReportInterface {\n  user: string;\n  requestor: string;\n  cultureNumber: string;\n  taxonName: string;\n  referenceNumber: string;\n  dateRequested: string;\n  dateSubmitted: string;\n}\n\nexport interface depositReportInterface {\n  user: string;\n  cultureNumber: string;\n  name: string;\n  collectedBy: string;\n  dateCollected: string;\n  isolatedBy: string;\n  identifiedBy: string;\n  dateSubmitted: string;\n}\n\nexport interface revitalizationReportInterface {\n  user: string;\n  requestor: string;\n  cultureNumber: string;\n  cultureName: string;\n  referenceNumber: string;\n  dateRequested: string;\n  dateReturned: string;\n  dateSubmitted: string;\n}\n\nexport interface StaffMember {\n  fname: string;\n  surname: string;\n  email: string;\n  id: string;\n}\n\n@core.Component({\n  selector: 'app-reporting',\n  templateUrl: './reporting.component.html',\n  styleUrls: ['./reporting.component.scss']\n})\nexport class ReportingComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Indicates if there are logs of type USER - @type {boolean} */\n  userLogs: boolean = false;\n  /** Indicates if there are logs of type DBML - @type {boolean} */\n  databaseLogs: boolean = false;\n  /** Indicates if there are logs of type ACCL - @type {boolean} */\n  accessLogs: boolean = false;\n  /** Indicates if there are logs of type ERRL - @type {boolean} */\n  errorLogs: boolean = false;\n  /** Indicates if there are logs of type REQUEST - @type {boolean} */\n  requestLogs: boolean = false;\n  /** Indicates if there are logs of type DEPOSIT - @type {boolean} */\n  depositLogs: boolean = false;\n  /** Indicates if there are logs of type REVITALIZATION - @type {boolean} */\n  revitalizationLogs: boolean = false;\n  /** Indicates if the error report has been generated - @type {boolean} */\n  errorReport: boolean = false;\n  /** Indicates if the request report has been generated - @type {boolean} */\n  requestReport: boolean = false;\n  /** Indicates if the deposit report has been generated - @type {boolean} */\n  depositReport: boolean = false;\n  /** Indicates if the revitalization report has been generated - @type {boolean} */\n  revitalizationReport: boolean = false;\n  /** The current date in string format - @type {string} */\n  date: string;\n  /** Array holding the user logs - @type {userLogInterface} */\n  userLogsArray: userLogInterface[] = [];\n  /** Array holding the database logs - @type {databaseLogInterface} */\n  databaseLogsArray: databaseLogInterface[] = [];\n  /** Array holding the access logs - @type {accessLogInterface} */\n  accessLogsArray: accessLogInterface[] = [];\n  /** Array holding the error logs - @type {errorLogInterface} */\n  errorLogsArray: errorLogInterface[] = [];\n  /** Array holding the request logs - @type {requestReportInterface} */\n  requestLogsArray: requestReportInterface[] = [];\n  /** Array holding the deposit logs - @type {depositReportInterface} */\n  depositLogsArray: depositReportInterface[] = [];\n  /** Array holding the revitalization logs - @type {revitalizationReportInterface} */\n  revitalizationLogsArray: revitalizationReportInterface[] = [];\n\n  /** Holds the table element (errorReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"errorReportPDF\") errorReportPDF: core.ElementRef;\n  /** Holds the table element (requestReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"requestReportPDF\") requestReportPDF: core.ElementRef;\n  /** Holds the table element (depositReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"depositReportPDF\") depositReportPDF: core.ElementRef;\n  /** Holds the table element (revitalizationReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"revitalizationReportPDF\") revitalizationReportPDF: core.ElementRef;\n\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  notificationsTab: boolean = false;\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n  /** Indicates if the save button is hidden/shown on the profile tab- @type {boolean} */\n  saveBtn: boolean = false;\n  /** Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} */\n  confirmPasswordInput: boolean = false;\n  /** Indicates if the help tab is hidden/shown - @type {boolean} */\n  helpTab: boolean = false;\n  /** Indicates if the reporting tab is hidden/shown - @type {boolean} */\n  reportingTab: boolean = false;\n  /** Indicates if the log tab is hidden/shown - @type {boolean} */\n  logsTab: boolean = false;\n  /** The details of the user currently logged in -  @type {any} */\n  currentUser: any;\n  /** Object array for holding the staff members -  @type {StaffMember[]} */\n  staff: StaffMember[] = [];\n  /** Stores the data table -  @type {string} */\n  public tableWidget: any;\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchItem: string = \"\";\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchReports: string = \"\";\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       CONSTRUCTOR\n  /**\n   * Creates an instance of ReportingComponent.\n   * \n   * @param {NotificationLoggingService} notificationLoggingService For calling the Notification Logging API service\n   * @param {CultureCollectionAPIService} cultureCollectionService For calling the Culture Collection API Service\n   * @param {UserManagementAPIService} userManagementService For calling the User Management API Service\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {Router} router\n   * @param {core.Renderer2} renderer Used for creating the PDF documents to download\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private notificationLoggingService: NotificationLoggingService,\n    private userManagementService: UserManagementAPIService,\n    private renderer: core.Renderer2,\n    private authService: AuthenticationService,\n    private router: Router,\n    private cultureCollectionService: CultureCollectionAPIService,\n    private formBuilder: FormBuilder,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    this.currentUser = this.authService.getCurrentSessionValue.user;\n    this.getAllStaff();\n\n    //Calling the neccessary functions as the page loads\n    var currentDate = new Date();\n    this.date = ('0' + currentDate.getDate()).slice(-2) + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear();\n    this.loadAllLogs();\n\n    //Generate first displayed report so that it is ready to load\n    this.generateRequestReport();\n\n    //Generate first displayed log so that it is ready to load\n    this.setUserLogTable();\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL STAFF\n  /**\n   *  This function will be used to get all the staff members of FABI and load them into an array\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaff() {\n    //Subscribing to the UserManagementAPIService to get a list containing all the FABI members\n    this.userManagementService.getAllFABIStaff().subscribe((response: any) => {\n      if (response.success == true) {\n        var data = response.data.qs.staff;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Error_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE REQUEST REPORT\n  /**\n   *  This function will be used to generate the request report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateRequestReport() {\n    this.errorReport = false;\n    this.depositReport = false;\n    this.requestReport = true;\n    this.revitalizationReport = false;\n\n    //Loading the Request forms\n    this.cultureCollectionService.getAllRequestLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Request_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE DEPOSIT REPORT\n  /**\n   *  This function will be used to generate the deposit report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateDepositReport() {\n    this.errorReport = false;\n    this.depositReport = true;\n    this.requestReport = false;\n    this.revitalizationReport = false;\n\n    //Loading the Deposit forms\n    this.cultureCollectionService.getAllDepositLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Deposit_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE REVITALIZATION REPORT\n  /**\n   *  This function will be used to generate the revitalization report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateRevitalizationReport() {\n    this.requestReport = false;\n    this.depositReport = false;\n    this.errorReport = false;\n    this.revitalizationReport = true;\n\n    //Loading the Revitalization forms\n    this.cultureCollectionService.getAllRevitalizationLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 157;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Revitalization_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET DATE\n  /**\n   *  This function will put the string date provided into a more readable format for the notifications\n   * @param {string} date The date of the log\n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getDate(date: string) {\n    var tempDate = (date).split(' ');\n    var newDate = '';\n\n    newDate += tempDate[2];\n\n    if (tempDate[0] == 'Mon') {\n      newDate += ' Monday ';\n    }\n    else if (tempDate[0] == 'Tue' || tempDate[0] == 'Tu' || tempDate[0] == 'Tues') {\n      newDate += ' Tuesday ';\n    }\n    else if (tempDate[0] == 'Wed') {\n      newDate += ' Wednesday ';\n    }\n    else if (tempDate[0] == 'Thu' || tempDate[0] == 'Thur' || tempDate[0] == 'Thurs') {\n      newDate += ' Thursday ';\n    }\n    else if (tempDate[0] == 'Fri') {\n      newDate += ' Friday ';\n    }\n    else if (tempDate[0] == 'Sat') {\n      newDate += ' Saturday ';\n    }\n    else if (tempDate[0] == 'Sun') {\n      newDate += ' Sunday ';\n    }\n\n    if (tempDate[1] == 'Jan') {\n      newDate += 'January';\n    }\n    else if (tempDate[1] == 'Feb') {\n      newDate += 'February';\n    }\n    else if (tempDate[1] == 'Mar') {\n      newDate += 'March';\n    }\n    else if (tempDate[1] == 'Apr') {\n      newDate += 'April';\n    }\n    else if (tempDate[1] == 'Jun') {\n      newDate += 'June';\n    }\n    else if (tempDate[1] == 'Jul') {\n      newDate += 'July';\n    }\n    else if (tempDate[1] == 'Aug') {\n      newDate += 'August';\n    }\n    else if (tempDate[1] == 'Sep' || tempDate[1] == 'Sept') {\n      newDate += 'September';\n    }\n    else if (tempDate[1] == 'Oct') {\n      newDate += 'October';\n    }\n    else if (tempDate[1] == 'Nov') {\n      newDate += 'November';\n    }\n    else if (tempDate[1] == 'Dec') {\n      newDate += 'December';\n    }\n\n    newDate += ' ' + tempDate[3];\n\n    return newDate;\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       TOGGLE NOTIFICATIONS \n  /**\n   * This function will toggle the display of the notifications side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificationsTab() {\n    this.notificationsTab = !this.notificationsTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE PROFILE \n  /**\n   * This function will toggle the display of the profile side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleProfileTab() {\n    this.profileTab = !this.profileTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      DISPLAY PROFILE SAVE BUTTON \n  /**\n   * This function will display the save button option if any details in the profile have been altered\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayProfileSaveBtn() {\n    this.saveBtn = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DISPLAY PASSWORD CONFIRM INPUT \n  /**\n   * This function will display the confirm password input field in the user's password was altered\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayConfirmPasswordInput() {\n    this.confirmPasswordInput = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE HELP \n  /**\n   * This function will toggle the display of the help side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleHelpTab() {\n    this.helpTab = !this.helpTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE REPORTING \n  /**\n   * This function will toggle the display of the reporting tab section\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleReportSection() {\n    this.reportingTab = !this.reportingTab;\n    this.logsTab = false;\n\n    //Generate the Request report so that it is ready to be displayed when the report menu option is clicked\n    this.requestLogs = true;\n    this.userLogs = false;\n\n    //Display request report immediately since it is the first active tab\n    this.requestReport = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE LOG \n  /**\n   * This function will toggle the display of the logs tab section\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleLogSection() {\n    this.logsTab = !this.logsTab;\n    this.reportingTab = false;\n    this.requestLogs = false;\n    this.requestReport = false;\n\n    this.userLogs = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET USER LOGS TABLE \n  /**\n   * This function will display the user logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setUserLogTable() {\n    this.userLogs = true;\n    this.databaseLogs = false;\n    this.accessLogs = false;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      SET DATABASE LOGS TABLE \n  /**\n   * This function will display the database logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setDatabaseLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = true;\n    this.accessLogs = false;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET ACCESS LOGS TABLE \n  /**\n   * This function will display the access logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setAccessLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = false;\n    this.accessLogs = true;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET ERROR LOGS TABLE \n  /**\n   * This function will display the error logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setErrorLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = false;\n    this.accessLogs = false;\n    this.errorLogs = true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nFABIWeb\nThis project was generated with Angular CLI version 7.3.8.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ErrorsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ErrorsRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MaterialModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrganizationMemberModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrganizationModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StaffModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_ErrorsModule\n\n\n\ncluster_ErrorsModule_declarations\n\n\n\n\nAdminDivComponent\n\nAdminDivComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminDivComponent->AppModule\n\n\n\n\n\nAdminHelpComponent\n\nAdminHelpComponent\n\nAppModule -->\n\nAdminHelpComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nDatabaseHandlerComponent\n\nDatabaseHandlerComponent\n\nAppModule -->\n\nDatabaseHandlerComponent->AppModule\n\n\n\n\n\nFilterPipe\n\nFilterPipe\n\nAppModule -->\n\nFilterPipe->AppModule\n\n\n\nAppModule -->\n\nFilterPipe->AppModule\n\n\n\n\n\nMemberHelpComponent\n\nMemberHelpComponent\n\nAppModule -->\n\nMemberHelpComponent->AppModule\n\n\n\n\n\nMemberSubmitSampleComponent\n\nMemberSubmitSampleComponent\n\nAppModule -->\n\nMemberSubmitSampleComponent->AppModule\n\n\n\n\n\nNotificationDivComponent\n\nNotificationDivComponent\n\nAppModule -->\n\nNotificationDivComponent->AppModule\n\n\n\n\n\nOrganizationHelpComponent\n\nOrganizationHelpComponent\n\nAppModule -->\n\nOrganizationHelpComponent->AppModule\n\n\n\n\n\nOrganizationMenuComponent\n\nOrganizationMenuComponent\n\nAppModule -->\n\nOrganizationMenuComponent->AppModule\n\n\n\n\n\nOrganizationSubmitSampleComponent\n\nOrganizationSubmitSampleComponent\n\nAppModule -->\n\nOrganizationSubmitSampleComponent->AppModule\n\n\n\n\n\nPageNotFoundComponent\n\nPageNotFoundComponent\n\nAppModule -->\n\nPageNotFoundComponent->AppModule\n\n\n\n\n\nSampleDivComponent\n\nSampleDivComponent\n\nAppModule -->\n\nSampleDivComponent->AppModule\n\n\n\n\n\nSampleFormComponent\n\nSampleFormComponent\n\nAppModule -->\n\nSampleFormComponent->AppModule\n\n\n\n\n\nStaffDivComponent\n\nStaffDivComponent\n\nAppModule -->\n\nStaffDivComponent->AppModule\n\n\n\n\n\nStaffHelpComponent\n\nStaffHelpComponent\n\nAppModule -->\n\nStaffHelpComponent->AppModule\n\n\n\n\n\nStaffMenuComponent\n\nStaffMenuComponent\n\nAppModule -->\n\nStaffMenuComponent->AppModule\n\n\n\n\n\nStaffSubmitSampleComponent\n\nStaffSubmitSampleComponent\n\nAppModule -->\n\nStaffSubmitSampleComponent->AppModule\n\n\n\n\n\nStaffViewDatabasesComponent\n\nStaffViewDatabasesComponent\n\nAppModule -->\n\nStaffViewDatabasesComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAdminModule\n\nAdminModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nOrganizationMemberModule\n\nOrganizationMemberModule\n\nOrganizationMemberModule -->\n\nAppRoutingModule->OrganizationMemberModule\n\n\n\n\n\nErrorsModule\n\nErrorsModule\n\nAppModule -->\n\nErrorsModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\nErrorsModule -->\n\nMaterialModule->ErrorsModule\n\n\n\nOrganizationMemberModule -->\n\nMaterialModule->OrganizationMemberModule\n\n\n\nAppModule -->\n\nOrganizationMemberModule->AppModule\n\n\n\n\n\nOrganizationModule\n\nOrganizationModule\n\nAppModule -->\n\nOrganizationModule->AppModule\n\n\n\n\n\nStaffModule\n\nStaffModule\n\nAppModule -->\n\nStaffModule->AppModule\n\n\n\n\n\ncore\n\ncore\n\nAppModule -->\n\ncore->AppModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nAppModule -->\n\nNotificationService->AppModule\n\n\n\n\n\nErrorComponent\n\nErrorComponent\n\nErrorsModule -->\n\nErrorComponent->ErrorsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    19 Components\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n        \n            \n                \n                    \n                    40 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    48 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        30 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/requestReportInterface.html":{"url":"interfaces/requestReportInterface.html","title":"interface - requestReportInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  requestReportInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Admin/reporting/reporting.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cultureNumber\n                                \n                                \n                                        dateRequested\n                                \n                                \n                                        dateSubmitted\n                                \n                                \n                                        referenceNumber\n                                \n                                \n                                        requestor\n                                \n                                \n                                        taxonName\n                                \n                                \n                                        user\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cultureNumber\n                                    \n                                \n                                \n                                    \n                                        cultureNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateRequested\n                                    \n                                \n                                \n                                    \n                                        dateRequested:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateSubmitted\n                                    \n                                \n                                \n                                    \n                                        dateSubmitted:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        referenceNumber\n                                    \n                                \n                                \n                                    \n                                        referenceNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestor\n                                    \n                                \n                                \n                                    \n                                        requestor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        taxonName\n                                    \n                                \n                                \n                                    \n                                        taxonName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                    \n                                \n                                \n                                    \n                                        user:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\nimport { Router } from '@angular/router';\nimport html2canvas from 'html2canvas';\n//These imports are used to created a downloadable PDF of the reports\nimport * as jspdf from 'jspdf';\nimport 'jspdf-autotable';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { CultureCollectionAPIService } from '../../_services/culture-collection-api.service';\nimport { NotificationLoggingService } from '../../_services/notification-logging.service';\nimport { UserManagementAPIService } from '../../_services/user-management-api.service';\n\n\nexport interface userLogInterface {\n  action: string;\n  date: string;\n  user1: string;\n  user2: string;\n}\n\nexport interface databaseLogInterface {\n  action: string;\n  date: string;\n  user: string;\n  details: string;\n}\n\nexport interface accessLogInterface {\n  details: string;\n  date: string;\n  user: string;\n}\n\nexport interface errorLogInterface {\n  code: string;\n  date: string;\n  details: string;\n  user: string;\n}\n\nexport interface requestReportInterface {\n  user: string;\n  requestor: string;\n  cultureNumber: string;\n  taxonName: string;\n  referenceNumber: string;\n  dateRequested: string;\n  dateSubmitted: string;\n}\n\nexport interface depositReportInterface {\n  user: string;\n  cultureNumber: string;\n  name: string;\n  collectedBy: string;\n  dateCollected: string;\n  isolatedBy: string;\n  identifiedBy: string;\n  dateSubmitted: string;\n}\n\nexport interface revitalizationReportInterface {\n  user: string;\n  requestor: string;\n  cultureNumber: string;\n  cultureName: string;\n  referenceNumber: string;\n  dateRequested: string;\n  dateReturned: string;\n  dateSubmitted: string;\n}\n\nexport interface StaffMember {\n  fname: string;\n  surname: string;\n  email: string;\n  id: string;\n}\n\n@core.Component({\n  selector: 'app-reporting',\n  templateUrl: './reporting.component.html',\n  styleUrls: ['./reporting.component.scss']\n})\nexport class ReportingComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Indicates if there are logs of type USER - @type {boolean} */\n  userLogs: boolean = false;\n  /** Indicates if there are logs of type DBML - @type {boolean} */\n  databaseLogs: boolean = false;\n  /** Indicates if there are logs of type ACCL - @type {boolean} */\n  accessLogs: boolean = false;\n  /** Indicates if there are logs of type ERRL - @type {boolean} */\n  errorLogs: boolean = false;\n  /** Indicates if there are logs of type REQUEST - @type {boolean} */\n  requestLogs: boolean = false;\n  /** Indicates if there are logs of type DEPOSIT - @type {boolean} */\n  depositLogs: boolean = false;\n  /** Indicates if there are logs of type REVITALIZATION - @type {boolean} */\n  revitalizationLogs: boolean = false;\n  /** Indicates if the error report has been generated - @type {boolean} */\n  errorReport: boolean = false;\n  /** Indicates if the request report has been generated - @type {boolean} */\n  requestReport: boolean = false;\n  /** Indicates if the deposit report has been generated - @type {boolean} */\n  depositReport: boolean = false;\n  /** Indicates if the revitalization report has been generated - @type {boolean} */\n  revitalizationReport: boolean = false;\n  /** The current date in string format - @type {string} */\n  date: string;\n  /** Array holding the user logs - @type {userLogInterface} */\n  userLogsArray: userLogInterface[] = [];\n  /** Array holding the database logs - @type {databaseLogInterface} */\n  databaseLogsArray: databaseLogInterface[] = [];\n  /** Array holding the access logs - @type {accessLogInterface} */\n  accessLogsArray: accessLogInterface[] = [];\n  /** Array holding the error logs - @type {errorLogInterface} */\n  errorLogsArray: errorLogInterface[] = [];\n  /** Array holding the request logs - @type {requestReportInterface} */\n  requestLogsArray: requestReportInterface[] = [];\n  /** Array holding the deposit logs - @type {depositReportInterface} */\n  depositLogsArray: depositReportInterface[] = [];\n  /** Array holding the revitalization logs - @type {revitalizationReportInterface} */\n  revitalizationLogsArray: revitalizationReportInterface[] = [];\n\n  /** Holds the table element (errorReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"errorReportPDF\") errorReportPDF: core.ElementRef;\n  /** Holds the table element (requestReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"requestReportPDF\") requestReportPDF: core.ElementRef;\n  /** Holds the table element (depositReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"depositReportPDF\") depositReportPDF: core.ElementRef;\n  /** Holds the table element (revitalizationReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"revitalizationReportPDF\") revitalizationReportPDF: core.ElementRef;\n\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  notificationsTab: boolean = false;\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n  /** Indicates if the save button is hidden/shown on the profile tab- @type {boolean} */\n  saveBtn: boolean = false;\n  /** Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} */\n  confirmPasswordInput: boolean = false;\n  /** Indicates if the help tab is hidden/shown - @type {boolean} */\n  helpTab: boolean = false;\n  /** Indicates if the reporting tab is hidden/shown - @type {boolean} */\n  reportingTab: boolean = false;\n  /** Indicates if the log tab is hidden/shown - @type {boolean} */\n  logsTab: boolean = false;\n  /** The details of the user currently logged in -  @type {any} */\n  currentUser: any;\n  /** Object array for holding the staff members -  @type {StaffMember[]} */\n  staff: StaffMember[] = [];\n  /** Stores the data table -  @type {string} */\n  public tableWidget: any;\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchItem: string = \"\";\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchReports: string = \"\";\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       CONSTRUCTOR\n  /**\n   * Creates an instance of ReportingComponent.\n   * \n   * @param {NotificationLoggingService} notificationLoggingService For calling the Notification Logging API service\n   * @param {CultureCollectionAPIService} cultureCollectionService For calling the Culture Collection API Service\n   * @param {UserManagementAPIService} userManagementService For calling the User Management API Service\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {Router} router\n   * @param {core.Renderer2} renderer Used for creating the PDF documents to download\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private notificationLoggingService: NotificationLoggingService,\n    private userManagementService: UserManagementAPIService,\n    private renderer: core.Renderer2,\n    private authService: AuthenticationService,\n    private router: Router,\n    private cultureCollectionService: CultureCollectionAPIService,\n    private formBuilder: FormBuilder,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    this.currentUser = this.authService.getCurrentSessionValue.user;\n    this.getAllStaff();\n\n    //Calling the neccessary functions as the page loads\n    var currentDate = new Date();\n    this.date = ('0' + currentDate.getDate()).slice(-2) + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear();\n    this.loadAllLogs();\n\n    //Generate first displayed report so that it is ready to load\n    this.generateRequestReport();\n\n    //Generate first displayed log so that it is ready to load\n    this.setUserLogTable();\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL STAFF\n  /**\n   *  This function will be used to get all the staff members of FABI and load them into an array\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaff() {\n    //Subscribing to the UserManagementAPIService to get a list containing all the FABI members\n    this.userManagementService.getAllFABIStaff().subscribe((response: any) => {\n      if (response.success == true) {\n        var data = response.data.qs.staff;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Error_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE REQUEST REPORT\n  /**\n   *  This function will be used to generate the request report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateRequestReport() {\n    this.errorReport = false;\n    this.depositReport = false;\n    this.requestReport = true;\n    this.revitalizationReport = false;\n\n    //Loading the Request forms\n    this.cultureCollectionService.getAllRequestLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Request_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE DEPOSIT REPORT\n  /**\n   *  This function will be used to generate the deposit report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateDepositReport() {\n    this.errorReport = false;\n    this.depositReport = true;\n    this.requestReport = false;\n    this.revitalizationReport = false;\n\n    //Loading the Deposit forms\n    this.cultureCollectionService.getAllDepositLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Deposit_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE REVITALIZATION REPORT\n  /**\n   *  This function will be used to generate the revitalization report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateRevitalizationReport() {\n    this.requestReport = false;\n    this.depositReport = false;\n    this.errorReport = false;\n    this.revitalizationReport = true;\n\n    //Loading the Revitalization forms\n    this.cultureCollectionService.getAllRevitalizationLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 157;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Revitalization_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET DATE\n  /**\n   *  This function will put the string date provided into a more readable format for the notifications\n   * @param {string} date The date of the log\n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getDate(date: string) {\n    var tempDate = (date).split(' ');\n    var newDate = '';\n\n    newDate += tempDate[2];\n\n    if (tempDate[0] == 'Mon') {\n      newDate += ' Monday ';\n    }\n    else if (tempDate[0] == 'Tue' || tempDate[0] == 'Tu' || tempDate[0] == 'Tues') {\n      newDate += ' Tuesday ';\n    }\n    else if (tempDate[0] == 'Wed') {\n      newDate += ' Wednesday ';\n    }\n    else if (tempDate[0] == 'Thu' || tempDate[0] == 'Thur' || tempDate[0] == 'Thurs') {\n      newDate += ' Thursday ';\n    }\n    else if (tempDate[0] == 'Fri') {\n      newDate += ' Friday ';\n    }\n    else if (tempDate[0] == 'Sat') {\n      newDate += ' Saturday ';\n    }\n    else if (tempDate[0] == 'Sun') {\n      newDate += ' Sunday ';\n    }\n\n    if (tempDate[1] == 'Jan') {\n      newDate += 'January';\n    }\n    else if (tempDate[1] == 'Feb') {\n      newDate += 'February';\n    }\n    else if (tempDate[1] == 'Mar') {\n      newDate += 'March';\n    }\n    else if (tempDate[1] == 'Apr') {\n      newDate += 'April';\n    }\n    else if (tempDate[1] == 'Jun') {\n      newDate += 'June';\n    }\n    else if (tempDate[1] == 'Jul') {\n      newDate += 'July';\n    }\n    else if (tempDate[1] == 'Aug') {\n      newDate += 'August';\n    }\n    else if (tempDate[1] == 'Sep' || tempDate[1] == 'Sept') {\n      newDate += 'September';\n    }\n    else if (tempDate[1] == 'Oct') {\n      newDate += 'October';\n    }\n    else if (tempDate[1] == 'Nov') {\n      newDate += 'November';\n    }\n    else if (tempDate[1] == 'Dec') {\n      newDate += 'December';\n    }\n\n    newDate += ' ' + tempDate[3];\n\n    return newDate;\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       TOGGLE NOTIFICATIONS \n  /**\n   * This function will toggle the display of the notifications side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificationsTab() {\n    this.notificationsTab = !this.notificationsTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE PROFILE \n  /**\n   * This function will toggle the display of the profile side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleProfileTab() {\n    this.profileTab = !this.profileTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      DISPLAY PROFILE SAVE BUTTON \n  /**\n   * This function will display the save button option if any details in the profile have been altered\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayProfileSaveBtn() {\n    this.saveBtn = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DISPLAY PASSWORD CONFIRM INPUT \n  /**\n   * This function will display the confirm password input field in the user's password was altered\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayConfirmPasswordInput() {\n    this.confirmPasswordInput = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE HELP \n  /**\n   * This function will toggle the display of the help side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleHelpTab() {\n    this.helpTab = !this.helpTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE REPORTING \n  /**\n   * This function will toggle the display of the reporting tab section\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleReportSection() {\n    this.reportingTab = !this.reportingTab;\n    this.logsTab = false;\n\n    //Generate the Request report so that it is ready to be displayed when the report menu option is clicked\n    this.requestLogs = true;\n    this.userLogs = false;\n\n    //Display request report immediately since it is the first active tab\n    this.requestReport = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE LOG \n  /**\n   * This function will toggle the display of the logs tab section\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleLogSection() {\n    this.logsTab = !this.logsTab;\n    this.reportingTab = false;\n    this.requestLogs = false;\n    this.requestReport = false;\n\n    this.userLogs = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET USER LOGS TABLE \n  /**\n   * This function will display the user logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setUserLogTable() {\n    this.userLogs = true;\n    this.databaseLogs = false;\n    this.accessLogs = false;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      SET DATABASE LOGS TABLE \n  /**\n   * This function will display the database logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setDatabaseLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = true;\n    this.accessLogs = false;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET ACCESS LOGS TABLE \n  /**\n   * This function will display the access logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setAccessLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = false;\n    this.accessLogs = true;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET ERROR LOGS TABLE \n  /**\n   * This function will display the error logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setErrorLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = false;\n    this.accessLogs = false;\n    this.errorLogs = true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/revitalizationReportInterface.html":{"url":"interfaces/revitalizationReportInterface.html","title":"interface - revitalizationReportInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  revitalizationReportInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Admin/reporting/reporting.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cultureName\n                                \n                                \n                                        cultureNumber\n                                \n                                \n                                        dateRequested\n                                \n                                \n                                        dateReturned\n                                \n                                \n                                        dateSubmitted\n                                \n                                \n                                        referenceNumber\n                                \n                                \n                                        requestor\n                                \n                                \n                                        user\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cultureName\n                                    \n                                \n                                \n                                    \n                                        cultureName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cultureNumber\n                                    \n                                \n                                \n                                    \n                                        cultureNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateRequested\n                                    \n                                \n                                \n                                    \n                                        dateRequested:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateReturned\n                                    \n                                \n                                \n                                    \n                                        dateReturned:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateSubmitted\n                                    \n                                \n                                \n                                    \n                                        dateSubmitted:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        referenceNumber\n                                    \n                                \n                                \n                                    \n                                        referenceNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestor\n                                    \n                                \n                                \n                                    \n                                        requestor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                    \n                                \n                                \n                                    \n                                        user:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\nimport { Router } from '@angular/router';\nimport html2canvas from 'html2canvas';\n//These imports are used to created a downloadable PDF of the reports\nimport * as jspdf from 'jspdf';\nimport 'jspdf-autotable';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { CultureCollectionAPIService } from '../../_services/culture-collection-api.service';\nimport { NotificationLoggingService } from '../../_services/notification-logging.service';\nimport { UserManagementAPIService } from '../../_services/user-management-api.service';\n\n\nexport interface userLogInterface {\n  action: string;\n  date: string;\n  user1: string;\n  user2: string;\n}\n\nexport interface databaseLogInterface {\n  action: string;\n  date: string;\n  user: string;\n  details: string;\n}\n\nexport interface accessLogInterface {\n  details: string;\n  date: string;\n  user: string;\n}\n\nexport interface errorLogInterface {\n  code: string;\n  date: string;\n  details: string;\n  user: string;\n}\n\nexport interface requestReportInterface {\n  user: string;\n  requestor: string;\n  cultureNumber: string;\n  taxonName: string;\n  referenceNumber: string;\n  dateRequested: string;\n  dateSubmitted: string;\n}\n\nexport interface depositReportInterface {\n  user: string;\n  cultureNumber: string;\n  name: string;\n  collectedBy: string;\n  dateCollected: string;\n  isolatedBy: string;\n  identifiedBy: string;\n  dateSubmitted: string;\n}\n\nexport interface revitalizationReportInterface {\n  user: string;\n  requestor: string;\n  cultureNumber: string;\n  cultureName: string;\n  referenceNumber: string;\n  dateRequested: string;\n  dateReturned: string;\n  dateSubmitted: string;\n}\n\nexport interface StaffMember {\n  fname: string;\n  surname: string;\n  email: string;\n  id: string;\n}\n\n@core.Component({\n  selector: 'app-reporting',\n  templateUrl: './reporting.component.html',\n  styleUrls: ['./reporting.component.scss']\n})\nexport class ReportingComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Indicates if there are logs of type USER - @type {boolean} */\n  userLogs: boolean = false;\n  /** Indicates if there are logs of type DBML - @type {boolean} */\n  databaseLogs: boolean = false;\n  /** Indicates if there are logs of type ACCL - @type {boolean} */\n  accessLogs: boolean = false;\n  /** Indicates if there are logs of type ERRL - @type {boolean} */\n  errorLogs: boolean = false;\n  /** Indicates if there are logs of type REQUEST - @type {boolean} */\n  requestLogs: boolean = false;\n  /** Indicates if there are logs of type DEPOSIT - @type {boolean} */\n  depositLogs: boolean = false;\n  /** Indicates if there are logs of type REVITALIZATION - @type {boolean} */\n  revitalizationLogs: boolean = false;\n  /** Indicates if the error report has been generated - @type {boolean} */\n  errorReport: boolean = false;\n  /** Indicates if the request report has been generated - @type {boolean} */\n  requestReport: boolean = false;\n  /** Indicates if the deposit report has been generated - @type {boolean} */\n  depositReport: boolean = false;\n  /** Indicates if the revitalization report has been generated - @type {boolean} */\n  revitalizationReport: boolean = false;\n  /** The current date in string format - @type {string} */\n  date: string;\n  /** Array holding the user logs - @type {userLogInterface} */\n  userLogsArray: userLogInterface[] = [];\n  /** Array holding the database logs - @type {databaseLogInterface} */\n  databaseLogsArray: databaseLogInterface[] = [];\n  /** Array holding the access logs - @type {accessLogInterface} */\n  accessLogsArray: accessLogInterface[] = [];\n  /** Array holding the error logs - @type {errorLogInterface} */\n  errorLogsArray: errorLogInterface[] = [];\n  /** Array holding the request logs - @type {requestReportInterface} */\n  requestLogsArray: requestReportInterface[] = [];\n  /** Array holding the deposit logs - @type {depositReportInterface} */\n  depositLogsArray: depositReportInterface[] = [];\n  /** Array holding the revitalization logs - @type {revitalizationReportInterface} */\n  revitalizationLogsArray: revitalizationReportInterface[] = [];\n\n  /** Holds the table element (errorReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"errorReportPDF\") errorReportPDF: core.ElementRef;\n  /** Holds the table element (requestReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"requestReportPDF\") requestReportPDF: core.ElementRef;\n  /** Holds the table element (depositReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"depositReportPDF\") depositReportPDF: core.ElementRef;\n  /** Holds the table element (revitalizationReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"revitalizationReportPDF\") revitalizationReportPDF: core.ElementRef;\n\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  notificationsTab: boolean = false;\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n  /** Indicates if the save button is hidden/shown on the profile tab- @type {boolean} */\n  saveBtn: boolean = false;\n  /** Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} */\n  confirmPasswordInput: boolean = false;\n  /** Indicates if the help tab is hidden/shown - @type {boolean} */\n  helpTab: boolean = false;\n  /** Indicates if the reporting tab is hidden/shown - @type {boolean} */\n  reportingTab: boolean = false;\n  /** Indicates if the log tab is hidden/shown - @type {boolean} */\n  logsTab: boolean = false;\n  /** The details of the user currently logged in -  @type {any} */\n  currentUser: any;\n  /** Object array for holding the staff members -  @type {StaffMember[]} */\n  staff: StaffMember[] = [];\n  /** Stores the data table -  @type {string} */\n  public tableWidget: any;\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchItem: string = \"\";\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchReports: string = \"\";\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       CONSTRUCTOR\n  /**\n   * Creates an instance of ReportingComponent.\n   * \n   * @param {NotificationLoggingService} notificationLoggingService For calling the Notification Logging API service\n   * @param {CultureCollectionAPIService} cultureCollectionService For calling the Culture Collection API Service\n   * @param {UserManagementAPIService} userManagementService For calling the User Management API Service\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {Router} router\n   * @param {core.Renderer2} renderer Used for creating the PDF documents to download\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private notificationLoggingService: NotificationLoggingService,\n    private userManagementService: UserManagementAPIService,\n    private renderer: core.Renderer2,\n    private authService: AuthenticationService,\n    private router: Router,\n    private cultureCollectionService: CultureCollectionAPIService,\n    private formBuilder: FormBuilder,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    this.currentUser = this.authService.getCurrentSessionValue.user;\n    this.getAllStaff();\n\n    //Calling the neccessary functions as the page loads\n    var currentDate = new Date();\n    this.date = ('0' + currentDate.getDate()).slice(-2) + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear();\n    this.loadAllLogs();\n\n    //Generate first displayed report so that it is ready to load\n    this.generateRequestReport();\n\n    //Generate first displayed log so that it is ready to load\n    this.setUserLogTable();\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL STAFF\n  /**\n   *  This function will be used to get all the staff members of FABI and load them into an array\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaff() {\n    //Subscribing to the UserManagementAPIService to get a list containing all the FABI members\n    this.userManagementService.getAllFABIStaff().subscribe((response: any) => {\n      if (response.success == true) {\n        var data = response.data.qs.staff;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Error_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE REQUEST REPORT\n  /**\n   *  This function will be used to generate the request report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateRequestReport() {\n    this.errorReport = false;\n    this.depositReport = false;\n    this.requestReport = true;\n    this.revitalizationReport = false;\n\n    //Loading the Request forms\n    this.cultureCollectionService.getAllRequestLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Request_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE DEPOSIT REPORT\n  /**\n   *  This function will be used to generate the deposit report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateDepositReport() {\n    this.errorReport = false;\n    this.depositReport = true;\n    this.requestReport = false;\n    this.revitalizationReport = false;\n\n    //Loading the Deposit forms\n    this.cultureCollectionService.getAllDepositLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Deposit_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE REVITALIZATION REPORT\n  /**\n   *  This function will be used to generate the revitalization report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateRevitalizationReport() {\n    this.requestReport = false;\n    this.depositReport = false;\n    this.errorReport = false;\n    this.revitalizationReport = true;\n\n    //Loading the Revitalization forms\n    this.cultureCollectionService.getAllRevitalizationLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 157;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Revitalization_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET DATE\n  /**\n   *  This function will put the string date provided into a more readable format for the notifications\n   * @param {string} date The date of the log\n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getDate(date: string) {\n    var tempDate = (date).split(' ');\n    var newDate = '';\n\n    newDate += tempDate[2];\n\n    if (tempDate[0] == 'Mon') {\n      newDate += ' Monday ';\n    }\n    else if (tempDate[0] == 'Tue' || tempDate[0] == 'Tu' || tempDate[0] == 'Tues') {\n      newDate += ' Tuesday ';\n    }\n    else if (tempDate[0] == 'Wed') {\n      newDate += ' Wednesday ';\n    }\n    else if (tempDate[0] == 'Thu' || tempDate[0] == 'Thur' || tempDate[0] == 'Thurs') {\n      newDate += ' Thursday ';\n    }\n    else if (tempDate[0] == 'Fri') {\n      newDate += ' Friday ';\n    }\n    else if (tempDate[0] == 'Sat') {\n      newDate += ' Saturday ';\n    }\n    else if (tempDate[0] == 'Sun') {\n      newDate += ' Sunday ';\n    }\n\n    if (tempDate[1] == 'Jan') {\n      newDate += 'January';\n    }\n    else if (tempDate[1] == 'Feb') {\n      newDate += 'February';\n    }\n    else if (tempDate[1] == 'Mar') {\n      newDate += 'March';\n    }\n    else if (tempDate[1] == 'Apr') {\n      newDate += 'April';\n    }\n    else if (tempDate[1] == 'Jun') {\n      newDate += 'June';\n    }\n    else if (tempDate[1] == 'Jul') {\n      newDate += 'July';\n    }\n    else if (tempDate[1] == 'Aug') {\n      newDate += 'August';\n    }\n    else if (tempDate[1] == 'Sep' || tempDate[1] == 'Sept') {\n      newDate += 'September';\n    }\n    else if (tempDate[1] == 'Oct') {\n      newDate += 'October';\n    }\n    else if (tempDate[1] == 'Nov') {\n      newDate += 'November';\n    }\n    else if (tempDate[1] == 'Dec') {\n      newDate += 'December';\n    }\n\n    newDate += ' ' + tempDate[3];\n\n    return newDate;\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       TOGGLE NOTIFICATIONS \n  /**\n   * This function will toggle the display of the notifications side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificationsTab() {\n    this.notificationsTab = !this.notificationsTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE PROFILE \n  /**\n   * This function will toggle the display of the profile side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleProfileTab() {\n    this.profileTab = !this.profileTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      DISPLAY PROFILE SAVE BUTTON \n  /**\n   * This function will display the save button option if any details in the profile have been altered\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayProfileSaveBtn() {\n    this.saveBtn = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DISPLAY PASSWORD CONFIRM INPUT \n  /**\n   * This function will display the confirm password input field in the user's password was altered\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayConfirmPasswordInput() {\n    this.confirmPasswordInput = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE HELP \n  /**\n   * This function will toggle the display of the help side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleHelpTab() {\n    this.helpTab = !this.helpTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE REPORTING \n  /**\n   * This function will toggle the display of the reporting tab section\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleReportSection() {\n    this.reportingTab = !this.reportingTab;\n    this.logsTab = false;\n\n    //Generate the Request report so that it is ready to be displayed when the report menu option is clicked\n    this.requestLogs = true;\n    this.userLogs = false;\n\n    //Display request report immediately since it is the first active tab\n    this.requestReport = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE LOG \n  /**\n   * This function will toggle the display of the logs tab section\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleLogSection() {\n    this.logsTab = !this.logsTab;\n    this.reportingTab = false;\n    this.requestLogs = false;\n    this.requestReport = false;\n\n    this.userLogs = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET USER LOGS TABLE \n  /**\n   * This function will display the user logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setUserLogTable() {\n    this.userLogs = true;\n    this.databaseLogs = false;\n    this.accessLogs = false;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      SET DATABASE LOGS TABLE \n  /**\n   * This function will display the database logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setDatabaseLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = true;\n    this.accessLogs = false;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET ACCESS LOGS TABLE \n  /**\n   * This function will display the access logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setAccessLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = false;\n    this.accessLogs = true;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET ERROR LOGS TABLE \n  /**\n   * This function will display the error logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setErrorLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = false;\n    this.accessLogs = false;\n    this.errorLogs = true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/userLogInterface.html":{"url":"interfaces/userLogInterface.html","title":"interface - userLogInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  userLogInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Admin/reporting/reporting.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        action\n                                \n                                \n                                        date\n                                \n                                \n                                        user1\n                                \n                                \n                                        user2\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        action\n                                    \n                                \n                                \n                                    \n                                        action:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user1\n                                    \n                                \n                                \n                                    \n                                        user1:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user2\n                                    \n                                \n                                \n                                    \n                                        user2:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as core from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\nimport { Router } from '@angular/router';\nimport html2canvas from 'html2canvas';\n//These imports are used to created a downloadable PDF of the reports\nimport * as jspdf from 'jspdf';\nimport 'jspdf-autotable';\nimport { AuthenticationService } from 'src/app/_services/authentication.service';\nimport { CultureCollectionAPIService } from '../../_services/culture-collection-api.service';\nimport { NotificationLoggingService } from '../../_services/notification-logging.service';\nimport { UserManagementAPIService } from '../../_services/user-management-api.service';\n\n\nexport interface userLogInterface {\n  action: string;\n  date: string;\n  user1: string;\n  user2: string;\n}\n\nexport interface databaseLogInterface {\n  action: string;\n  date: string;\n  user: string;\n  details: string;\n}\n\nexport interface accessLogInterface {\n  details: string;\n  date: string;\n  user: string;\n}\n\nexport interface errorLogInterface {\n  code: string;\n  date: string;\n  details: string;\n  user: string;\n}\n\nexport interface requestReportInterface {\n  user: string;\n  requestor: string;\n  cultureNumber: string;\n  taxonName: string;\n  referenceNumber: string;\n  dateRequested: string;\n  dateSubmitted: string;\n}\n\nexport interface depositReportInterface {\n  user: string;\n  cultureNumber: string;\n  name: string;\n  collectedBy: string;\n  dateCollected: string;\n  isolatedBy: string;\n  identifiedBy: string;\n  dateSubmitted: string;\n}\n\nexport interface revitalizationReportInterface {\n  user: string;\n  requestor: string;\n  cultureNumber: string;\n  cultureName: string;\n  referenceNumber: string;\n  dateRequested: string;\n  dateReturned: string;\n  dateSubmitted: string;\n}\n\nexport interface StaffMember {\n  fname: string;\n  surname: string;\n  email: string;\n  id: string;\n}\n\n@core.Component({\n  selector: 'app-reporting',\n  templateUrl: './reporting.component.html',\n  styleUrls: ['./reporting.component.scss']\n})\nexport class ReportingComponent implements core.OnInit {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                          GLOBAL VARIABLES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Indicates if there are logs of type USER - @type {boolean} */\n  userLogs: boolean = false;\n  /** Indicates if there are logs of type DBML - @type {boolean} */\n  databaseLogs: boolean = false;\n  /** Indicates if there are logs of type ACCL - @type {boolean} */\n  accessLogs: boolean = false;\n  /** Indicates if there are logs of type ERRL - @type {boolean} */\n  errorLogs: boolean = false;\n  /** Indicates if there are logs of type REQUEST - @type {boolean} */\n  requestLogs: boolean = false;\n  /** Indicates if there are logs of type DEPOSIT - @type {boolean} */\n  depositLogs: boolean = false;\n  /** Indicates if there are logs of type REVITALIZATION - @type {boolean} */\n  revitalizationLogs: boolean = false;\n  /** Indicates if the error report has been generated - @type {boolean} */\n  errorReport: boolean = false;\n  /** Indicates if the request report has been generated - @type {boolean} */\n  requestReport: boolean = false;\n  /** Indicates if the deposit report has been generated - @type {boolean} */\n  depositReport: boolean = false;\n  /** Indicates if the revitalization report has been generated - @type {boolean} */\n  revitalizationReport: boolean = false;\n  /** The current date in string format - @type {string} */\n  date: string;\n  /** Array holding the user logs - @type {userLogInterface} */\n  userLogsArray: userLogInterface[] = [];\n  /** Array holding the database logs - @type {databaseLogInterface} */\n  databaseLogsArray: databaseLogInterface[] = [];\n  /** Array holding the access logs - @type {accessLogInterface} */\n  accessLogsArray: accessLogInterface[] = [];\n  /** Array holding the error logs - @type {errorLogInterface} */\n  errorLogsArray: errorLogInterface[] = [];\n  /** Array holding the request logs - @type {requestReportInterface} */\n  requestLogsArray: requestReportInterface[] = [];\n  /** Array holding the deposit logs - @type {depositReportInterface} */\n  depositLogsArray: depositReportInterface[] = [];\n  /** Array holding the revitalization logs - @type {revitalizationReportInterface} */\n  revitalizationLogsArray: revitalizationReportInterface[] = [];\n\n  /** Holds the table element (errorReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"errorReportPDF\") errorReportPDF: core.ElementRef;\n  /** Holds the table element (requestReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"requestReportPDF\") requestReportPDF: core.ElementRef;\n  /** Holds the table element (depositReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"depositReportPDF\") depositReportPDF: core.ElementRef;\n  /** Holds the table element (revitalizationReportPDF) from the HTML page - @type {ElementRef} */\n  @core.ViewChild(\"revitalizationReportPDF\") revitalizationReportPDF: core.ElementRef;\n\n  /** Indicates if the notifications tab is hidden/shown - @type {boolean} */\n  notificationsTab: boolean = false;\n  /** Indicates if the profile tab is hidden/shown - @type {boolean} */\n  profileTab: boolean = false;\n  /** Indicates if the save button is hidden/shown on the profile tab- @type {boolean} */\n  saveBtn: boolean = false;\n  /** Indicates if the confirm password tab is hidden/shown on the profile tab - @type {boolean} */\n  confirmPasswordInput: boolean = false;\n  /** Indicates if the help tab is hidden/shown - @type {boolean} */\n  helpTab: boolean = false;\n  /** Indicates if the reporting tab is hidden/shown - @type {boolean} */\n  reportingTab: boolean = false;\n  /** Indicates if the log tab is hidden/shown - @type {boolean} */\n  logsTab: boolean = false;\n  /** The details of the user currently logged in -  @type {any} */\n  currentUser: any;\n  /** Object array for holding the staff members -  @type {StaffMember[]} */\n  staff: StaffMember[] = [];\n  /** Stores the data table -  @type {string} */\n  public tableWidget: any;\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchItem: string = \"\";\n  /** The search item the user is looking for in the table -  @type {string} */\n  public searchReports: string = \"\";\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       CONSTRUCTOR\n  /**\n   * Creates an instance of ReportingComponent.\n   * \n   * @param {NotificationLoggingService} notificationLoggingService For calling the Notification Logging API service\n   * @param {CultureCollectionAPIService} cultureCollectionService For calling the Culture Collection API Service\n   * @param {UserManagementAPIService} userManagementService For calling the User Management API Service\n   * @param {AuthenticationService} authService for calling the *authentication* service\n   * @param {Router} router\n   * @param {core.Renderer2} renderer Used for creating the PDF documents to download\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  constructor(\n    private notificationLoggingService: NotificationLoggingService,\n    private userManagementService: UserManagementAPIService,\n    private renderer: core.Renderer2,\n    private authService: AuthenticationService,\n    private router: Router,\n    private cultureCollectionService: CultureCollectionAPIService,\n    private formBuilder: FormBuilder,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            NG ON INIT  \n  /**\n   * This function is called when the page loads\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  ngOnInit() {\n    this.currentUser = this.authService.getCurrentSessionValue.user;\n    this.getAllStaff();\n\n    //Calling the neccessary functions as the page loads\n    var currentDate = new Date();\n    this.date = ('0' + currentDate.getDate()).slice(-2) + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear();\n    this.loadAllLogs();\n\n    //Generate first displayed report so that it is ready to load\n    this.generateRequestReport();\n\n    //Generate first displayed log so that it is ready to load\n    this.setUserLogTable();\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    GET ALL STAFF\n  /**\n   *  This function will be used to get all the staff members of FABI and load them into an array\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getAllStaff() {\n    //Subscribing to the UserManagementAPIService to get a list containing all the FABI members\n    this.userManagementService.getAllFABIStaff().subscribe((response: any) => {\n      if (response.success == true) {\n        var data = response.data.qs.staff;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        //Temporarily holds the data returned from the API call\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      if (response.success = true) {\n        var data = response.data.content.data.Logs;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Error_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE REQUEST REPORT\n  /**\n   *  This function will be used to generate the request report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateRequestReport() {\n    this.errorReport = false;\n    this.depositReport = false;\n    this.requestReport = true;\n    this.revitalizationReport = false;\n\n    //Loading the Request forms\n    this.cultureCollectionService.getAllRequestLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Request_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE DEPOSIT REPORT\n  /**\n   *  This function will be used to generate the deposit report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateDepositReport() {\n    this.errorReport = false;\n    this.depositReport = true;\n    this.requestReport = false;\n    this.revitalizationReport = false;\n\n    //Loading the Deposit forms\n    this.cultureCollectionService.getAllDepositLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 180;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Deposit_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                  GENERATE REVITALIZATION REPORT\n  /**\n   *  This function will be used to generate the revitalization report and display it on screen\n   *  @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  generateRevitalizationReport() {\n    this.requestReport = false;\n    this.depositReport = false;\n    this.errorReport = false;\n    this.revitalizationReport = true;\n\n    //Loading the Revitalization forms\n    this.cultureCollectionService.getAllRevitalizationLogs().subscribe((response: any) => {\n      if (response.success = true) {\n        var data = response.data.qs.forms;\n\n        for (var i = 0; i  {\n      var imageWidth = 157;\n      var pageHeight = 295;\n      var imageHeight = canvas.height * imageWidth / canvas.width;\n      var heightLeft = imageHeight;\n\n      const contentDataURL = canvas.toDataURL('image/png');\n      let pdf = new jspdf('p', 'mm', 'a4');\n      var position = 0;\n      pdf.addImage(contentDataURL, 'PNG', 0, position, imageWidth, imageHeight);\n      pdf.save('Revitalization_Report.pdf');\n    });\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                        GET DATE\n  /**\n   *  This function will put the string date provided into a more readable format for the notifications\n   * @param {string} date The date of the log\n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  getDate(date: string) {\n    var tempDate = (date).split(' ');\n    var newDate = '';\n\n    newDate += tempDate[2];\n\n    if (tempDate[0] == 'Mon') {\n      newDate += ' Monday ';\n    }\n    else if (tempDate[0] == 'Tue' || tempDate[0] == 'Tu' || tempDate[0] == 'Tues') {\n      newDate += ' Tuesday ';\n    }\n    else if (tempDate[0] == 'Wed') {\n      newDate += ' Wednesday ';\n    }\n    else if (tempDate[0] == 'Thu' || tempDate[0] == 'Thur' || tempDate[0] == 'Thurs') {\n      newDate += ' Thursday ';\n    }\n    else if (tempDate[0] == 'Fri') {\n      newDate += ' Friday ';\n    }\n    else if (tempDate[0] == 'Sat') {\n      newDate += ' Saturday ';\n    }\n    else if (tempDate[0] == 'Sun') {\n      newDate += ' Sunday ';\n    }\n\n    if (tempDate[1] == 'Jan') {\n      newDate += 'January';\n    }\n    else if (tempDate[1] == 'Feb') {\n      newDate += 'February';\n    }\n    else if (tempDate[1] == 'Mar') {\n      newDate += 'March';\n    }\n    else if (tempDate[1] == 'Apr') {\n      newDate += 'April';\n    }\n    else if (tempDate[1] == 'Jun') {\n      newDate += 'June';\n    }\n    else if (tempDate[1] == 'Jul') {\n      newDate += 'July';\n    }\n    else if (tempDate[1] == 'Aug') {\n      newDate += 'August';\n    }\n    else if (tempDate[1] == 'Sep' || tempDate[1] == 'Sept') {\n      newDate += 'September';\n    }\n    else if (tempDate[1] == 'Oct') {\n      newDate += 'October';\n    }\n    else if (tempDate[1] == 'Nov') {\n      newDate += 'November';\n    }\n    else if (tempDate[1] == 'Dec') {\n      newDate += 'December';\n    }\n\n    newDate += ' ' + tempDate[3];\n\n    return newDate;\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            LOGOUT \n  /**\n   * This function will log the user out of the web application and clear the authentication data stored in the local storage\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  logout() {\n    this.authService.logoutUser();\n    this.router.navigate(['/login']);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                       TOGGLE NOTIFICATIONS \n  /**\n   * This function will toggle the display of the notifications side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleNotificationsTab() {\n    this.notificationsTab = !this.notificationsTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE PROFILE \n  /**\n   * This function will toggle the display of the profile side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleProfileTab() {\n    this.profileTab = !this.profileTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      DISPLAY PROFILE SAVE BUTTON \n  /**\n   * This function will display the save button option if any details in the profile have been altered\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayProfileSaveBtn() {\n    this.saveBtn = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                    DISPLAY PASSWORD CONFIRM INPUT \n  /**\n   * This function will display the confirm password input field in the user's password was altered\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  displayConfirmPasswordInput() {\n    this.confirmPasswordInput = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE HELP \n  /**\n   * This function will toggle the display of the help side panel\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleHelpTab() {\n    this.helpTab = !this.helpTab;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE REPORTING \n  /**\n   * This function will toggle the display of the reporting tab section\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleReportSection() {\n    this.reportingTab = !this.reportingTab;\n    this.logsTab = false;\n\n    //Generate the Request report so that it is ready to be displayed when the report menu option is clicked\n    this.requestLogs = true;\n    this.userLogs = false;\n\n    //Display request report immediately since it is the first active tab\n    this.requestReport = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                            TOGGLE LOG \n  /**\n   * This function will toggle the display of the logs tab section\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  toggleLogSection() {\n    this.logsTab = !this.logsTab;\n    this.reportingTab = false;\n    this.requestLogs = false;\n    this.requestReport = false;\n\n    this.userLogs = true;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET USER LOGS TABLE \n  /**\n   * This function will display the user logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setUserLogTable() {\n    this.userLogs = true;\n    this.databaseLogs = false;\n    this.accessLogs = false;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                      SET DATABASE LOGS TABLE \n  /**\n   * This function will display the database logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setDatabaseLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = true;\n    this.accessLogs = false;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET ACCESS LOGS TABLE \n  /**\n   * This function will display the access logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setAccessLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = false;\n    this.accessLogs = true;\n    this.errorLogs = false;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //                                                         SET ERROR LOGS TABLE \n  /**\n   * This function will display the error logs table\n   * \n   * @memberof ReportingComponent\n   */\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  setErrorLogTable() {\n    this.userLogs = false;\n    this.databaseLogs = false;\n    this.accessLogs = false;\n    this.errorLogs = true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AdminForm   (src/.../form-validators.ts)\n                        \n                        \n                            ChangePasswordFormValidators   (src/.../form-validators.ts)\n                        \n                        \n                            config   (src/.../environment.prod.ts)\n                        \n                        \n                            deleteDepositFormURL   (src/.../culture-collection-api.service.ts)\n                        \n                        \n                            deleteProcessedFormURL   (src/.../culture-collection-api.service.ts)\n                        \n                        \n                            deleteRequestFormURL   (src/.../culture-collection-api.service.ts)\n                        \n                        \n                            deleteRevitalizationFormURL   (src/.../culture-collection-api.service.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            getAllFABIStaffURL   (src/.../user-management-api.service.ts)\n                        \n                        \n                            getAllLogsURL   (src/.../notification-logging.service.ts)\n                        \n                        \n                            getAllOrganizationMembers   (src/.../user-management-api.service.ts)\n                        \n                        \n                            getAllSamplesForMemberURL   (src/.../diagnostic-clinic-api.service.ts)\n                        \n                        \n                            getDepositLogsURL   (src/.../culture-collection-api.service.ts)\n                        \n                        \n                            getProcessedLogsURL   (src/.../culture-collection-api.service.ts)\n                        \n                        \n                            getRequestLogsURL   (src/.../culture-collection-api.service.ts)\n                        \n                        \n                            getRevitalizationLogsURL   (src/.../culture-collection-api.service.ts)\n                        \n                        \n                            getUserDetailsURL   (src/.../user-management-api.service.ts)\n                        \n                        \n                            getUserLogsURL   (src/.../notification-logging.service.ts)\n                        \n                        \n                            google   (src/.../maps-window.component.ts)\n                        \n                        \n                            google   (src/.../sample-form.component.ts)\n                        \n                        \n                            submitCMWDepositFormURL   (src/.../culture-collection-api.service.ts)\n                        \n                        \n                            submitCMWRequestFormURL   (src/.../culture-collection-api.service.ts)\n                        \n                        \n                            submitCMWRevitalizationFormURL   (src/.../culture-collection-api.service.ts)\n                        \n                        \n                            submitProcessedFormURL   (src/.../culture-collection-api.service.ts)\n                        \n                        \n                            updateDepositFormStatusURL   (src/.../culture-collection-api.service.ts)\n                        \n                        \n                            updateOrganizationMemberDetailsURL   (src/.../user-management-api.service.ts)\n                        \n                        \n                            updateStaffMemberDetailsURL   (src/.../user-management-api.service.ts)\n                        \n                        \n                            updateUserLogsURL   (src/.../notification-logging.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/_interfaces/form-validators.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AdminForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    'admin_name': [\n      { type:  'required', message: 'Please enter admin name'}\n    ],\n    'admin_surname': [\n        { type:  'required', message: 'Please enter admin surname'}\n    ],\n    'surname_email': [\n        { type:  'required', message: 'Please enter admin email'},\n        { type: 'pattern', message: 'Please enter a valid email' }\n    ],\n }\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ChangePasswordFormValidators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  'current_password': [\n    { type: 'required', message: 'Current password required' },\n    // { type: 'minlength', message: 'Password must be at least 5 characters long' },\n    // { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number' }\n  ],\n  'new_password': [\n    { type: 'required', message: 'New password required' },\n    // { type: 'minlength', message: 'Password must be at least 5 characters long' },\n    // { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number' }\n  ],\n  'confirm_password': [\n    { type: 'required', message: 'Confirm assword required' },\n    { type: 'passwordMatch', message: 'Passwords must match' }\n    // { type: 'minlength', message: 'Password must be at least 5 characters long' },\n    // { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number' }\n  ],\n }\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    loginURL: \"https://login-dot-fabi-dev.appspot.com\",\n    databaseManagementURL: \"https://database-management-dot-fabi-dev.appspot.com\",\n    userManagementURL: \"https://user-management-dot-fabi-dev.appspot.com\",\n    cultureClinicURL: \"https://culture-collection-management-dot-fabi-dev.appspot.com\",\n    logsURL: \"https://logging-dot-fabi-dev.appspot.com\",\n    diagnosticClinicURL: \"https://diagnostic-clinic-dot-fabi-dev.appspot.com\",\n    \n    APIKEy: 'AIzaSyCO9bq9xt6Uuq5DwNipBRf0Hz8bx1OxD_M'\n  }\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    production: true,\n  }\n                        \n                    \n\n\n            \n        \n\n    src/app/_services/culture-collection-api.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            deleteDepositFormURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.cultureClinicURL}/deleteCMWDepositForm`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteProcessedFormURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.cultureClinicURL}/deleteCMWProcessingForm`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteRequestFormURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.cultureClinicURL}/deleteCMWRequestForm`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteRevitalizationFormURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.cultureClinicURL}/deleteCMWRevitalizationForm`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDepositLogsURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.cultureClinicURL}/getAllDepositForms`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getProcessedLogsURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.cultureClinicURL}/getAllProcessingForms`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getRequestLogsURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.cultureClinicURL}/getAllRequestForms`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getRevitalizationLogsURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.cultureClinicURL}/getAllRevitalizationForms`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitCMWDepositFormURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.cultureClinicURL}/submitCMWDepositForm`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitCMWRequestFormURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.cultureClinicURL}/submitCMWRequestForm`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitCMWRevitalizationFormURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.cultureClinicURL}/submitCMWRevitalizationForm`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitProcessedFormURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.cultureClinicURL}/submitCMWProcessingForm`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateDepositFormStatusURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.cultureClinicURL}/updateDepositStatus`\n                        \n                    \n\n\n            \n        \n\n    src/app/_services/user-management-api.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getAllFABIStaffURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.userManagementURL}/getAllStaff`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAllOrganizationMembers\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.userManagementURL}/getAllOrgMembers`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getUserDetailsURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.userManagementURL}/getUserDetails`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateOrganizationMemberDetailsURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.userManagementURL}/updateOrgMember`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateStaffMemberDetailsURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.userManagementURL}/updateStaffMember`\n                        \n                    \n\n\n            \n        \n\n    src/app/_services/notification-logging.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getAllLogsURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.logsURL}/getLogs`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getUserLogsURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.logsURL}/getUserLogs`\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateUserLogsURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.logsURL}/deleteUserLogs`\n                        \n                    \n\n\n            \n        \n\n    src/app/_services/diagnostic-clinic-api.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getAllSamplesForMemberURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `${config.diagnosticClinicURL}/retrieveSamplesForMember`\n                        \n                    \n\n\n            \n        \n\n    src/app/maps-window/maps-window.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            google\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n                \n                    \n                        Global declaration of 'google' so that it can be used throught this page - @type {any} \n\n                    \n                \n\n            \n        \n\n    src/app/sample-form/sample-form.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            google\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n                \n                    \n                        Global declaration of 'google' so that it can be used throught this page - @type {any} \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
